{
  "process_data": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=8)\nPASS: process_data_transformed(x=96)\nPASS: process_data_transformed(x=2)\nPASS: process_data_transformed(x=37)\nPASS: process_data_transformed(x=12)\nPASS: process_data_transformed(x=99)\nPASS: process_data_transformed(x=87)\nPASS: process_data_transformed(x=20)\nPASS: process_data_transformed(x=59)\nPASS: process_data_transformed(x=49)\nPASS: process_data_transformed(x=14)\nPASS: process_data_transformed(x=63)\nPASS: process_data_transformed(x=27)\nPASS: process_data_transformed(x=56)\nPASS: process_data_transformed(x=97)\nPASS: process_data_transformed(x=89)\nPASS: process_data_transformed(x=24)\nPASS: process_data_transformed(x=13)\nPASS: process_data_transformed(x=85)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=0.036697472813496126)\nPASS: convert_temperature_transformed(c=14.20078998197705)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=33.386287145783115)\nPASS: convert_temperature_transformed(c=25.22099346908016)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=5.061161970059304)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=0.4843672372282052)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.30675120373494164)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=135.0870886107119, discount_rate=0.11372589493637422)\nPASS: calculate_discount_transformed(price=0.11372589493637422, discount_rate=0.11372589493637422)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=1.401298464324817e-45)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=1.401298464324817e-45)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=0.9999999999999999, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=0.3333333333333333)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=1.5, imag=0.0)\nPASS: process_complex_number_transformed(real=1.5, imag=8.106328095633128)\nPASS: process_complex_number_transformed(real=19.999999999999996, imag=-2.225073858507e-311)\nPASS: process_complex_number_transformed(real=1.9, imag=-2.00001)\nPASS: process_complex_number_transformed(real=10.59485633887644, imag=-0.5)\nPASS: process_complex_number_transformed(real=1.1, imag=-19.999999999999996)\nPASS: process_complex_number_transformed(real=1.9, imag=-2.2250738585e-313)\nPASS: process_complex_number_transformed(real=-2.218271499049088, imag=-4.314742933528354)\nPASS: process_complex_number_transformed(real=2.225073858507e-311, imag=-2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-1.1, imag=1.1)\nPASS: process_complex_number_transformed(real=-1.1, imag=-1.1)\nPASS: process_complex_number_transformed(real=1.9, imag=0.5)\nPASS: process_complex_number_transformed(real=1.9, imag=1.9)\nPASS: process_complex_number_transformed(real=-5.960464477539063e-08, imag=-0.99999)\nPASS: process_complex_number_transformed(real=-5.960464477539063e-08, imag=-5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=-1e-05, imag=-15.226736562534374)\nPASS: process_complex_number_transformed(real=-15.226736562534374, imag=-15.226736562534374)\nPASS: process_complex_number_transformed(real=-1.401298464324817e-45, imag=19.999999999999996)\nPASS: process_complex_number_transformed(real=19.999999999999996, imag=19.999999999999996)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=4)\nPASS: transform_data_transformed(input_value=60)\nPASS: transform_data_transformed(input_value=14)\nPASS: transform_data_transformed(input_value=56)\nPASS: transform_data_transformed(input_value=82)\nPASS: transform_data_transformed(input_value=62)\nPASS: transform_data_transformed(input_value=5)\nPASS: transform_data_transformed(input_value=34)\nPASS: transform_data_transformed(input_value=74)\nPASS: transform_data_transformed(input_value=57)\nPASS: transform_data_transformed(input_value=27)\nPASS: transform_data_transformed(input_value=69)\nPASS: transform_data_transformed(input_value=86)\nPASS: transform_data_transformed(input_value=6)\nPASS: transform_data_transformed(input_value=36)\nPASS: transform_data_transformed(input_value=2)\nPASS: transform_data_transformed(input_value=10)\nPASS: transform_data_transformed(input_value=65)\nPASS: transform_data_transformed(input_value=46)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=17.969907845127338)\nPASS: circle_area_diff_transformed(r=4.050054257468717)\nPASS: circle_area_diff_transformed(r=11.389004479486305)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=1.192092896e-07)\nPASS: circle_area_diff_transformed(r=1.3481700586063374)\nPASS: circle_area_diff_transformed(r=6.088833201073563)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=5, b=1, c=1)\nPASS: triangle_checker_transformed(a=5, b=2, c=3)\nPASS: triangle_checker_transformed(a=7, b=9, c=19)\nPASS: triangle_checker_transformed(a=5, b=9, c=11)\nPASS: triangle_checker_transformed(a=1, b=2, c=15)\nPASS: triangle_checker_transformed(a=8, b=8, c=16)\nPASS: triangle_checker_transformed(a=12, b=13, c=15)\nPASS: triangle_checker_transformed(a=1, b=12, c=20)\nPASS: triangle_checker_transformed(a=3, b=3, c=1)\nPASS: triangle_checker_transformed(a=8, b=9, c=11)\nPASS: triangle_checker_transformed(a=8, b=8, c=11)\nPASS: triangle_checker_transformed(a=11, b=8, c=11)\nPASS: triangle_checker_transformed(a=8, b=8, c=8)\nPASS: triangle_checker_transformed(a=2, b=1, c=20)\nPASS: triangle_checker_transformed(a=2, b=2, c=20)\nPASS: triangle_checker_transformed(a=2, b=2, c=2)\nPASS: triangle_checker_transformed(a=7, b=12, c=1)\nPASS: triangle_checker_transformed(a=7, b=12, c=12)\nPASS: triangle_checker_transformed(a=7, b=7, c=12)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=29.148714357984968)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=59.89959267019381)\nPASS: temperature_offset_transformed(c=19.730949433510776)\nPASS: temperature_offset_transformed(c=62.89771904428937)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=1.6550896710247304e-277)\nPASS: temperature_offset_transformed(c=99.64846539400693)\nPASS: temperature_offset_transformed(c=83.44863392707884)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=84.40286880680733)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=6, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=6, b=-6, c=10)\nPASS: quadratic_discriminant_transformed(a=-10, b=-6, c=5)\nPASS: quadratic_discriminant_transformed(a=-8, b=3, c=6)\nPASS: quadratic_discriminant_transformed(a=2, b=2, c=-10)\nPASS: quadratic_discriminant_transformed(a=-2, b=-9, c=6)\nPASS: quadratic_discriminant_transformed(a=1, b=-9, c=-7)\nPASS: quadratic_discriminant_transformed(a=-6, b=7, c=-3)\nPASS: quadratic_discriminant_transformed(a=8, b=-6, c=6)\nPASS: quadratic_discriminant_transformed(a=-1, b=6, c=-10)\nPASS: quadratic_discriminant_transformed(a=-1, b=-10, c=-10)\nPASS: quadratic_discriminant_transformed(a=-1, b=-1, c=-10)\nPASS: quadratic_discriminant_transformed(a=-10, b=-10, c=-10)\nPASS: quadratic_discriminant_transformed(a=-4, b=8, c=5)\nPASS: quadratic_discriminant_transformed(a=-4, b=8, c=8)\nPASS: quadratic_discriminant_transformed(a=-4, b=8, c=-4)\nPASS: quadratic_discriminant_transformed(a=8, b=8, c=-4)\nPASS: quadratic_discriminant_transformed(a=8, b=-4, c=-4)\nPASS: quadratic_discriminant_transformed(a=8, b=8, c=8)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-2.307797652828631, y=0.0)\nPASS: vector_norm_transformed(x=-2.307797652828631, y=1.401298464324817e-45)\nPASS: vector_norm_transformed(x=-9.999999999999998, y=-0.0)\nPASS: vector_norm_transformed(x=-1.5, y=-1.9)\nPASS: vector_norm_transformed(x=-6.133661768627005, y=1.401298464324817e-45)\nPASS: vector_norm_transformed(x=-1.1, y=9.0)\nPASS: vector_norm_transformed(x=-2.00001, y=0.3333333333333333)\nPASS: vector_norm_transformed(x=-2.220446049250313e-16, y=1.192092896e-07)\nPASS: vector_norm_transformed(x=1.257951323538804e-147, y=-1.9033134803579892e-190)\nPASS: vector_norm_transformed(x=2.2250738585072014e-308, y=1.401298464324817e-45)\nPASS: vector_norm_transformed(x=2.2250738585072014e-308, y=2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=-2.00001, y=10.0)\nPASS: vector_norm_transformed(x=10.0, y=10.0)\nPASS: vector_norm_transformed(x=-0.99999, y=-5e-324)\nPASS: vector_norm_transformed(x=-0.99999, y=-0.99999)\nPASS: vector_norm_transformed(x=5.960464477539063e-08, y=1.1)\nPASS: vector_norm_transformed(x=5.960464477539063e-08, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-4.01036681144645, y=9.999999999999998)\nPASS: vector_norm_transformed(x=9.999999999999998, y=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=1.0)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=1.1)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=10.0)\nPASS: hypotenuse_diff_transformed(a=1.1, b=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=4.457294841576384)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=0.0)\nPASS: hypotenuse_diff_transformed(a=0.0, b=1.5)\nPASS: hypotenuse_diff_transformed(a=1.5, b=1.5)\nPASS: hypotenuse_diff_transformed(a=1.518086129034535, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=0.5, b=1.9)\nPASS: hypotenuse_diff_transformed(a=1.9, b=1.9)\nPASS: hypotenuse_diff_transformed(a=1.1, b=0.0)\nPASS: hypotenuse_diff_transformed(a=0.10706725158609488, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=2.2250738585e-313)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\udb96\udca1')\nPASS: ascii_average_transformed(s='\n')\nPASS: ascii_average_transformed(s='\u009bY\u0007\u000e\u00cf_*\u00cd\u00bb7')\nPASS: ascii_average_transformed(s='\u00fa/\u00d1\n\u00c5\u00b3\u001a\u00cb')\nPASS: ascii_average_transformed(s='\u00af\u008eq\u00d2')\nPASS: ascii_average_transformed(s='\u0088\u00c2\u00ee\u00c3q9\ud90a\udf36\n')\nPASS: ascii_average_transformed(s='\u00af\u0000')\nPASS: ascii_average_transformed(s='\u00d1\u009e\udbd3\udcc0>s\u00ac\u00cc\u000f\u00cf\u00cc')\nPASS: ascii_average_transformed(s='\\')\nPASS: ascii_average_transformed(s='\udb47\ude31')\nPASS: ascii_average_transformed(s='o\u00bf\u00ee5l\u0003')\nPASS: ascii_average_transformed(s='\u0086\u00f6\u00fbP\udb8b\ude4e\n-\uda82\udff3\ud91b\udd1c\u0005')\nPASS: ascii_average_transformed(s='\u00e9M')\nPASS: ascii_average_transformed(s='g\u00a3\ud8d3\udc19y\ud94f\ude3d\udbab\udd59\u00e1\u00b4\ud946\udf4b')\nPASS: ascii_average_transformed(s='\u000b')\nPASS: ascii_average_transformed(s='\udbaf\udc6c.\u00bb<\ud851\udc8dr\u00bf')\nPASS: ascii_average_transformed(s='\ud950\udd17\u00fe')\nPASS: ascii_average_transformed(s='\u0001\udaee\udfd8O7\u00ac\udb82\udd3botb\u00fc')\nPASS: ascii_average_transformed(s='\ud9d1\udcf8')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[3, 0])\nPASS: list_balance_transformed(nums=[6, 0])\nPASS: list_balance_transformed(nums=[6, 10, 3, 7, 3, 7, 9])\nPASS: list_balance_transformed(nums=[6, 0, 0, 9, 6, 7, 3, 8])\nPASS: list_balance_transformed(nums=[8, 1, 2, 7, 9, 2, 10, 7, 3, 9])\nPASS: list_balance_transformed(nums=[9, 7, 10, 3, 6, 3, 1, 0, 6, 0])\nPASS: list_balance_transformed(nums=[4, 2, 9, 8, 4, 0])\nPASS: list_balance_transformed(nums=[1, 9, 1, 3, 3, 4, 3, 6])\nPASS: list_balance_transformed(nums=[2, 4, 6])\nPASS: list_balance_transformed(nums=[6, 8])\nPASS: list_balance_transformed(nums=[6, 6])\nPASS: list_balance_transformed(nums=[7, 8, 7, 1, 3])\nPASS: list_balance_transformed(nums=[7, 8, 3, 1, 3])\nPASS: list_balance_transformed(nums=[7, 8, 3])\nPASS: list_balance_transformed(nums=[7, 3, 3])\nPASS: list_balance_transformed(nums=[7, 7, 3])\nPASS: list_balance_transformed(nums=[7, 0])\nPASS: list_balance_transformed(nums=[9, 5, 9, 10, 2, 7, 8, 3, 6, 2])\nPASS: list_balance_transformed(nums=[9, 5, 9, 10, 3, 7, 8, 3, 6, 2])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[7])\nPASS: odd_sum_validator_transformed(lst=[1, 2, 0, 10, 0, 5, 5])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[4])\nPASS: odd_sum_validator_transformed(lst=[6, 3, 0, 4, 8, 9, 7, 4])\nPASS: odd_sum_validator_transformed(lst=[9, 6, 5, 4, 5, 8])\nPASS: odd_sum_validator_transformed(lst=[5, 10, 9, 7, 2, 1])\nPASS: odd_sum_validator_transformed(lst=[6])\nPASS: odd_sum_validator_transformed(lst=[3, 3, 7, 3, 2, 6, 9, 10, 3, 9])\nPASS: odd_sum_validator_transformed(lst=[3, 3, 7, 3, 2, 9, 9, 10, 3, 9])\nPASS: odd_sum_validator_transformed(lst=[3, 3, 7, 3, 2, 9, 9, 2, 3, 9])\nPASS: odd_sum_validator_transformed(lst=[3, 3, 7, 3, 3, 9, 9, 2, 3, 9])\nPASS: odd_sum_validator_transformed(lst=[3, 3, 7, 3, 3, 9, 9, 2, 9, 9])\nPASS: odd_sum_validator_transformed(lst=[3, 3, 7, 3, 3, 9, 9, 3, 9, 9])\nPASS: odd_sum_validator_transformed(lst=[3, 3, 7, 3, 3])\nPASS: odd_sum_validator_transformed(lst=[7, 1, 6, 10, 1, 5])\nPASS: odd_sum_validator_transformed(lst=[7, 1, 7, 10, 1, 5])\nPASS: odd_sum_validator_transformed(lst=[7, 1, 5, 10, 1, 5])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='1/0')\nPASS: string_pattern_score_transformed(s='\no')\nPASS: string_pattern_score_transformed(s='\u00fbh\ud97c\udf787=')\nPASS: string_pattern_score_transformed(s='^\ud97d\udde3t\u00f0')\nPASS: string_pattern_score_transformed(s='\u0019\udaa3\udf8a\uda59\ude6e\"+\u0086\u00bb\u001c\u00fd\u00f5')\nPASS: string_pattern_score_transformed(s='1\u00d3H')\nPASS: string_pattern_score_transformed(s='z\u009f\u0096')\nPASS: string_pattern_score_transformed(s='V\ud94a\ude20\u009c\u00d8\u001d\u00cc\n\u00fa\uda00\udd50\udb39\udf27')\nPASS: string_pattern_score_transformed(s='\u00a01 \u00fb\u0099vr\u00c4\"\u000e')\nPASS: string_pattern_score_transformed(s='c\ud93c\ude25\u00cc\u008b\u00b1;\u00ccX')\nPASS: string_pattern_score_transformed(s='\u009d')\nPASS: string_pattern_score_transformed(s='.\u00e0\u009e\u00caO\u00b7\u00a5\u007f ')\nPASS: string_pattern_score_transformed(s='\u50d6\u00e7\udae4\udfcc\u0018\u00ad\u00d5')\nPASS: string_pattern_score_transformed(s='\udb5c\udccf\u001f\uda8c\udc88')\nPASS: string_pattern_score_transformed(s='\u00c8\u00f4\u008c\u00a3\u009c\ud809\udf3b{\u00bf4\u00dc')\nPASS: string_pattern_score_transformed(s='\u00a4\u0003\udb11\udc30{.V\udac7\udcd2\ud814\udd07\udb5c\udd04\u00ef')\nPASS: string_pattern_score_transformed(s='X')\nPASS: string_pattern_score_transformed(s='QJ\u0082')\nPASS: string_pattern_score_transformed(s='uJ9W')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[2])\nPASS: sum_until_limit_transformed(nums=[2, 14, 6])\nPASS: sum_until_limit_transformed(nums=[4])\nPASS: sum_until_limit_transformed(nums=[17, 4, 0, 10, 4, 13, 20])\nPASS: sum_until_limit_transformed(nums=[20, 2, 18, 15, 5, 8, 14, 8, 18])\nPASS: sum_until_limit_transformed(nums=[8, 12, 9, 7, 6, 18, 18, 11, 4, 2])\nPASS: sum_until_limit_transformed(nums=[13, 2, 19, 5])\nPASS: sum_until_limit_transformed(nums=[16])\nPASS: sum_until_limit_transformed(nums=[17])\nPASS: sum_until_limit_transformed(nums=[3])\nPASS: sum_until_limit_transformed(nums=[14, 11, 10, 7, 13, 15, 17])\nPASS: sum_until_limit_transformed(nums=[14, 13, 10, 7, 13, 15, 17])\nPASS: sum_until_limit_transformed(nums=[14, 13, 10, 7, 14, 15, 17])\nPASS: sum_until_limit_transformed(nums=[14, 13, 13, 7, 14, 15, 17])\nPASS: sum_until_limit_transformed(nums=[15, 13, 13, 7, 14, 15, 17])\nPASS: sum_until_limit_transformed(nums=[15, 13, 13, 7, 14, 15, 13])\nPASS: sum_until_limit_transformed(nums=[15, 13, 13, 7, 14, 15, 15])\nPASS: sum_until_limit_transformed(nums=[6, 8])\nPASS: sum_until_limit_transformed(nums=[6, 6])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[2])\nPASS: count_divisibles_transformed(nums=[7])\nPASS: count_divisibles_transformed(nums=[5, 19])\nPASS: count_divisibles_transformed(nums=[17, 9, 18])\nPASS: count_divisibles_transformed(nums=[14, 18, 0, 19, 4, 0, 5, 1, 19, 3])\nPASS: count_divisibles_transformed(nums=[0, 10, 19, 2, 17, 19, 16])\nPASS: count_divisibles_transformed(nums=[9, 13])\nPASS: count_divisibles_transformed(nums=[1, 11, 14, 8])\nPASS: count_divisibles_transformed(nums=[20, 9, 2, 18, 7, 14, 14, 4, 0, 10])\nPASS: count_divisibles_transformed(nums=[7, 13, 19, 4, 14, 13, 1, 15, 6, 11])\nPASS: count_divisibles_transformed(nums=[7, 13, 19, 4, 14, 13, 1, 15, 6, 6])\nPASS: count_divisibles_transformed(nums=[7, 13, 19, 4, 14, 19, 1, 15, 6, 6])\nPASS: count_divisibles_transformed(nums=[7, 13, 19, 4, 14, 4, 1, 15, 6, 6])\nPASS: count_divisibles_transformed(nums=[6, 13, 19, 4, 14, 4, 1, 15, 6, 6])\nPASS: count_divisibles_transformed(nums=[6, 13, 19, 4, 14, 4, 1, 15, 6, 4])\nPASS: count_divisibles_transformed(nums=[6, 13, 15, 4, 14, 4, 1, 15, 6, 4])\nPASS: count_divisibles_transformed(nums=[10, 8])\nPASS: count_divisibles_transformed(nums=[8, 8])\nPASS: count_divisibles_transformed(nums=[5])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[0, 0])\nPASS: index_weighted_sum_transformed(lst=[0, 2, 6, 10, 1])\nPASS: index_weighted_sum_transformed(lst=[7, 7, 1, 3, 4, 10, 8, 3, 2, 9])\nPASS: index_weighted_sum_transformed(lst=[10, 9, 5, 7, 10, 9, 2, 9, 0, 7])\nPASS: index_weighted_sum_transformed(lst=[2, 3])\nPASS: index_weighted_sum_transformed(lst=[0, 9, 6, 0, 0, 9, 0])\nPASS: index_weighted_sum_transformed(lst=[9, 0])\nPASS: index_weighted_sum_transformed(lst=[5, 10, 6, 3])\nPASS: index_weighted_sum_transformed(lst=[8, 1])\nPASS: index_weighted_sum_transformed(lst=[8, 8])\nPASS: index_weighted_sum_transformed(lst=[3, 9, 6, 7, 10])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[5])\nPASS: index_weighted_sum_transformed(lst=[8, 4, 1, 6])\nPASS: index_weighted_sum_transformed(lst=[8, 4, 6, 6])\nPASS: index_weighted_sum_transformed(lst=[8, 6, 6, 6])\nPASS: index_weighted_sum_transformed(lst=[6, 6, 6, 6])\nPASS: index_weighted_sum_transformed(lst=[6, 6, 6])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=7)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u0097\u00d8')\nPASS: character_counter_transformed(text='\u000b\u0004\u00fe\u0083~\u00cd')\nPASS: character_counter_transformed(text='\u0095\u0097\u009e*,;\u0006\u001b&\u00fb')\nPASS: character_counter_transformed(text=']\u008b\u0083')\nPASS: character_counter_transformed(text='\u00d20u}\u00dc\u00b29\u00b7*\u009c')\nPASS: character_counter_transformed(text='\u00b0\u00d9')\nPASS: character_counter_transformed(text='3')\nPASS: character_counter_transformed(text='\udb61\udfca\u00b4_o')\nPASS: character_counter_transformed(text='\u0001\u00ea\u00ae\u00c5\u001b\u00cd9')\nPASS: character_counter_transformed(text='\u0004\u001a\u00a0\ud9b3\ude46:\u00ef\u00b4k\u00b1W')\nPASS: character_counter_transformed(text='A&\udadf\ude74i\ud820\udd17W')\nPASS: character_counter_transformed(text='\u00bcW\u00ec\udbf6\udcc1\u00c8')\nPASS: character_counter_transformed(text='\u00ec\ud928\udc2d\ud9d2\udcbe\u00d5_')\nPASS: character_counter_transformed(text='\u00e9\u00f7\u00d1')\nPASS: character_counter_transformed(text='\u00aa\u001d\u00e1\ud8c7\udc2fl\u00d0\u0005\u000f^}')\nPASS: character_counter_transformed(text=')]Oj\u0013kT')\nPASS: character_counter_transformed(text='i')\nPASS: character_counter_transformed(text='\uda12\udd58V\u00be\u00ac\u009a2\u008e9')\nPASS: character_counter_transformed(text='\u00d8\udbc2\udfee')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[74])\nPASS: rolling_maximum_transformed(values=[2])\nPASS: rolling_maximum_transformed(values=[87, 20, 32, 24, 88, 0, 47, 92])\nPASS: rolling_maximum_transformed(values=[56, 39, 72, 64, 12, 48, 71])\nPASS: rolling_maximum_transformed(values=[13])\nPASS: rolling_maximum_transformed(values=[98, 72, 32, 2, 39, 74, 41, 62, 14, 69])\nPASS: rolling_maximum_transformed(values=[63, 0])\nPASS: rolling_maximum_transformed(values=[87])\nPASS: rolling_maximum_transformed(values=[33, 82, 23, 85])\nPASS: rolling_maximum_transformed(values=[20, 12, 88, 2, 4, 74, 59, 100, 76, 70])\nPASS: rolling_maximum_transformed(values=[20, 12, 88, 2, 4, 74, 59, 100, 76, 4])\nPASS: rolling_maximum_transformed(values=[76, 12, 88, 2, 4, 74, 59, 100, 76, 4])\nPASS: rolling_maximum_transformed(values=[76, 12, 88, 2, 4, 74, 59, 12, 76, 4])\nPASS: rolling_maximum_transformed(values=[76, 74, 88, 2, 4, 74, 59, 12, 76, 4])\nPASS: rolling_maximum_transformed(values=[76, 74, 88, 2, 4, 74, 59, 12, 74, 4])\nPASS: rolling_maximum_transformed(values=[76, 74, 88, 2, 4, 74, 59, 74, 74, 4])\nPASS: rolling_maximum_transformed(values=[85])\nPASS: rolling_maximum_transformed(values=[30, 18])\nPASS: rolling_maximum_transformed(values=[18, 18])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "convert_temperature": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=71)\nPASS: process_data_transformed(x=60)\nPASS: process_data_transformed(x=10)\nPASS: process_data_transformed(x=100)\nPASS: process_data_transformed(x=46)\nPASS: process_data_transformed(x=66)\nPASS: process_data_transformed(x=11)\nPASS: process_data_transformed(x=67)\nPASS: process_data_transformed(x=57)\nPASS: process_data_transformed(x=79)\nPASS: process_data_transformed(x=58)\nPASS: process_data_transformed(x=9)\nPASS: process_data_transformed(x=44)\nPASS: process_data_transformed(x=80)\nPASS: process_data_transformed(x=22)\nPASS: process_data_transformed(x=3)\nPASS: process_data_transformed(x=90)\nPASS: process_data_transformed(x=68)\nPASS: process_data_transformed(x=24)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=3.173167423351511e-37)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=52.96927057796502)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=10.899550434020803)\nPASS: convert_temperature_transformed(c=78.20425068554546)\nPASS: convert_temperature_transformed(c=86.28229352733901)\nPASS: convert_temperature_transformed(c=92.99911003446913)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=2.2250738585072014e-308)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=0.9402012962743298)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.3333333333333333)\nPASS: calculate_discount_transformed(price=6.103515625e-05, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=0.14409085572946004)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=0.7523199035606962)\nPASS: calculate_discount_transformed(price=0.7523199035606962, discount_rate=0.7523199035606962)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-1.5, imag=0.0)\nPASS: process_complex_number_transformed(real=-1.5, imag=1.1)\nPASS: process_complex_number_transformed(real=19.999999999999996, imag=-1e-05)\nPASS: process_complex_number_transformed(real=2.00001, imag=-2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=-11.85608837354457, imag=-4.315326531902443)\nPASS: process_complex_number_transformed(real=19.0, imag=1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=-19.0, imag=-14.010805813813406)\nPASS: process_complex_number_transformed(real=-1.1125369292536007e-308, imag=1.192092896e-07)\nPASS: process_complex_number_transformed(real=16.079485345258647, imag=-0.5)\nPASS: process_complex_number_transformed(real=-19.0, imag=-1e-05)\nPASS: process_complex_number_transformed(real=-19.0, imag=-19.0)\nPASS: process_complex_number_transformed(real=2.225073858507203e-309, imag=-1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=2.225073858507203e-309, imag=2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=5.960464477539063e-08, imag=-19.0)\nPASS: process_complex_number_transformed(real=-0.3333333333333333, imag=-2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-2.225073858507e-311, imag=-2.225073858507e-311)\nPASS: process_complex_number_transformed(real=5e-324, imag=-1.9)\nPASS: process_complex_number_transformed(real=-1.9, imag=-1.9)\nPASS: process_complex_number_transformed(real=-2.00001, imag=-20.0)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=24)\nPASS: transform_data_transformed(input_value=69)\nPASS: transform_data_transformed(input_value=86)\nPASS: transform_data_transformed(input_value=94)\nPASS: transform_data_transformed(input_value=63)\nPASS: transform_data_transformed(input_value=21)\nPASS: transform_data_transformed(input_value=64)\nPASS: transform_data_transformed(input_value=20)\nPASS: transform_data_transformed(input_value=16)\nPASS: transform_data_transformed(input_value=43)\nPASS: transform_data_transformed(input_value=47)\nPASS: transform_data_transformed(input_value=100)\nPASS: transform_data_transformed(input_value=41)\nPASS: transform_data_transformed(input_value=29)\nPASS: transform_data_transformed(input_value=67)\nPASS: transform_data_transformed(input_value=30)\nPASS: transform_data_transformed(input_value=53)\nPASS: transform_data_transformed(input_value=80)\nPASS: transform_data_transformed(input_value=65)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=4.9799050258274455)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=10.656401051055548)\nPASS: circle_area_diff_transformed(r=3.3295045622981544e-275)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=4.703277996627594)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=2.029078153500419)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=10.829431960567291)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=17, b=1, c=1)\nPASS: triangle_checker_transformed(a=17, b=17, c=1)\nPASS: triangle_checker_transformed(a=15, b=10, c=18)\nPASS: triangle_checker_transformed(a=4, b=18, c=16)\nPASS: triangle_checker_transformed(a=13, b=14, c=14)\nPASS: triangle_checker_transformed(a=5, b=8, c=5)\nPASS: triangle_checker_transformed(a=11, b=8, c=17)\nPASS: triangle_checker_transformed(a=9, b=12, c=20)\nPASS: triangle_checker_transformed(a=9, b=16, c=8)\nPASS: triangle_checker_transformed(a=16, b=18, c=3)\nPASS: triangle_checker_transformed(a=16, b=3, c=3)\nPASS: triangle_checker_transformed(a=3, b=3, c=3)\nPASS: triangle_checker_transformed(a=4, b=12, c=4)\nPASS: triangle_checker_transformed(a=4, b=4, c=4)\nPASS: triangle_checker_transformed(a=11, b=11, c=18)\nPASS: triangle_checker_transformed(a=11, b=11, c=11)\nPASS: triangle_checker_transformed(a=17, b=15, c=16)\nPASS: triangle_checker_transformed(a=15, b=15, c=16)\nPASS: triangle_checker_transformed(a=16, b=15, c=16)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=91.37375511907722)\nPASS: temperature_offset_transformed(c=54.889919408284726)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=88.0554473124253)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=1.192092896e-07)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=0.08539819358235337)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=37.285953058103125)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-10, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-10, b=0, c=1)\nPASS: quadratic_discriminant_transformed(a=-10, b=-6, c=-2)\nPASS: quadratic_discriminant_transformed(a=2, b=2, c=10)\nPASS: quadratic_discriminant_transformed(a=2, b=5, c=4)\nPASS: quadratic_discriminant_transformed(a=-2, b=5, c=-7)\nPASS: quadratic_discriminant_transformed(a=-6, b=-1, c=7)\nPASS: quadratic_discriminant_transformed(a=9, b=-2, c=4)\nPASS: quadratic_discriminant_transformed(a=7, b=3, c=5)\nPASS: quadratic_discriminant_transformed(a=9, b=-4, c=-5)\nPASS: quadratic_discriminant_transformed(a=-5, b=-4, c=-5)\nPASS: quadratic_discriminant_transformed(a=-4, b=-4, c=-5)\nPASS: quadratic_discriminant_transformed(a=-4, b=-4, c=-4)\nPASS: quadratic_discriminant_transformed(a=10, b=0, c=-2)\nPASS: quadratic_discriminant_transformed(a=10, b=0, c=10)\nPASS: quadratic_discriminant_transformed(a=10, b=10, c=10)\nPASS: quadratic_discriminant_transformed(a=-7, b=1, c=-9)\nPASS: quadratic_discriminant_transformed(a=-7, b=-9, c=-9)\nPASS: quadratic_discriminant_transformed(a=-9, b=-9, c=-9)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-1.9251063226388948e-175, y=0.0)\nPASS: vector_norm_transformed(x=-1.9251063226388948e-175, y=9.0)\nPASS: vector_norm_transformed(x=1.5, y=0.99999)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=-7.17786005230565)\nPASS: vector_norm_transformed(x=7.852094411221294e-128, y=-0.0)\nPASS: vector_norm_transformed(x=2.2250738585e-313, y=1.9)\nPASS: vector_norm_transformed(x=-1.1125369292536007e-308, y=-5.960464477539063e-08)\nPASS: vector_norm_transformed(x=1.9, y=2.0955329923316306)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=1.5211529960261032)\nPASS: vector_norm_transformed(x=0.0, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=2.00001, y=4.1576583786888356e-259)\nPASS: vector_norm_transformed(x=4.1576583786888356e-259, y=4.1576583786888356e-259)\nPASS: vector_norm_transformed(x=0.99999, y=9.0)\nPASS: vector_norm_transformed(x=9.0, y=9.0)\nPASS: vector_norm_transformed(x=-5e-324, y=2.225073858507e-311)\nPASS: vector_norm_transformed(x=2.225073858507e-311, y=2.225073858507e-311)\nPASS: vector_norm_transformed(x=-2.225073858507203e-309, y=-1.1)\nPASS: vector_norm_transformed(x=-2.225073858507203e-309, y=-2.225073858507203e-309)\nPASS: vector_norm_transformed(x=1.1754943508222875e-38, y=1e-05)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=1e-05)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=1.1)\nPASS: hypotenuse_diff_transformed(a=0.0, b=1.6356250636025573)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=1.0909902333777268)\nPASS: hypotenuse_diff_transformed(a=5.063925648144995, b=7.3004218922113875)\nPASS: hypotenuse_diff_transformed(a=8.198267190966678, b=1.192092896e-07)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=9.0)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=1.3645696287769573)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=1.4472685055668701e-30)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=10.0, b=9.98106259581956)\nPASS: hypotenuse_diff_transformed(a=9.98106259581956, b=9.98106259581956)\nPASS: hypotenuse_diff_transformed(a=1.9, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=1.9, b=1.9)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=5.506267547986715)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=1.192092896e-07)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u001c\u7c6c')\nPASS: ascii_average_transformed(s='\ud9bb\udef3')\nPASS: ascii_average_transformed(s='&\u00f8\u00ff')\nPASS: ascii_average_transformed(s='\u00be\u00fb\ud90c\udf1bA,\ud86b\ude01')\nPASS: ascii_average_transformed(s='\u0007\uda95\udfd2\u00aa\u00dd\u00d1\u00fc{F\u0017')\nPASS: ascii_average_transformed(s='\u0000\u0081e\udb84\udc49\ud889\udfee\u00fet\ud849\ude02\u00c7\n')\nPASS: ascii_average_transformed(s='\u009a\u00a4\u008f\u00bf\u00bb\u00f5\u00c3\u0099\ud9d3\udde1\udb8e\udd2b')\nPASS: ascii_average_transformed(s='X\u00c9D\u00a5')\nPASS: ascii_average_transformed(s='\u00ec+\u00f5\u00b9y\u00c9\u00f9\u2a4e \u0084')\nPASS: ascii_average_transformed(s='R+\u00b1\u00ef')\nPASS: ascii_average_transformed(s='\uda62\udf83')\nPASS: ascii_average_transformed(s='\u00c5\u00d4\u00d4')\nPASS: ascii_average_transformed(s='undefined')\nPASS: ascii_average_transformed(s='\uda20\udcfb*')\nPASS: ascii_average_transformed(s='\u00ec\u00f1\u00ab')\nPASS: ascii_average_transformed(s='\ud8bb\udf3f\u00d4\u6827\u00de1\u00bb\ud838\udef3\u0001\udb58\udcee\uda90\udfce')\nPASS: ascii_average_transformed(s='\ud8d6\ude06\u00fc!N')\nPASS: ascii_average_transformed(s='\u00cf\u00d1\udae6\udfa4\u00e7\u00f1')\nPASS: ascii_average_transformed(s='~')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[7, 0])\nPASS: list_balance_transformed(nums=[7, 9])\nPASS: list_balance_transformed(nums=[6, 1])\nPASS: list_balance_transformed(nums=[7, 2, 7, 0])\nPASS: list_balance_transformed(nums=[2, 5, 2, 5, 3, 5, 9, 10, 3, 7])\nPASS: list_balance_transformed(nums=[4, 2, 8, 4, 9, 2, 4])\nPASS: list_balance_transformed(nums=[2, 2, 1, 7])\nPASS: list_balance_transformed(nums=[4, 9, 4, 10, 6, 10, 3, 5, 2, 10])\nPASS: list_balance_transformed(nums=[2, 1, 9, 6, 1])\nPASS: list_balance_transformed(nums=[2, 1])\nPASS: list_balance_transformed(nums=[2, 2])\nPASS: list_balance_transformed(nums=[4, 2])\nPASS: list_balance_transformed(nums=[7, 8, 3, 0, 8, 2, 0, 1])\nPASS: list_balance_transformed(nums=[7, 8, 3, 0, 8, 2, 0, 3])\nPASS: list_balance_transformed(nums=[7, 8, 3, 0, 8])\nPASS: list_balance_transformed(nums=[7, 8, 3, 8, 8])\nPASS: list_balance_transformed(nums=[7, 3, 3, 8, 8])\nPASS: list_balance_transformed(nums=[7, 3, 3, 3, 8])\nPASS: list_balance_transformed(nums=[3, 3, 3, 3, 8])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[8, 9, 2])\nPASS: odd_sum_validator_transformed(lst=[8, 5, 7, 1, 10, 4, 0, 6, 6, 1])\nPASS: odd_sum_validator_transformed(lst=[2, 2, 7, 9, 2])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[7, 1, 7, 4, 10, 3, 9, 5, 6, 5])\nPASS: odd_sum_validator_transformed(lst=[10, 8, 9, 8, 5, 8, 5, 6, 9, 9])\nPASS: odd_sum_validator_transformed(lst=[9, 2, 4])\nPASS: odd_sum_validator_transformed(lst=[6, 1, 2, 1, 5, 0, 9, 5, 3, 4])\nPASS: odd_sum_validator_transformed(lst=[5, 7, 2, 10, 0, 9, 3, 0])\nPASS: odd_sum_validator_transformed(lst=[5, 7, 2, 10, 0, 9, 3, 5])\nPASS: odd_sum_validator_transformed(lst=[5, 7, 2, 10, 3, 9, 3, 5])\nPASS: odd_sum_validator_transformed(lst=[5, 7, 7, 10, 3, 9, 3, 5])\nPASS: odd_sum_validator_transformed(lst=[5, 7, 3, 10, 3, 9, 3, 5])\nPASS: odd_sum_validator_transformed(lst=[5, 7, 3, 10, 5, 9, 3, 5])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[8, 6, 2])\nPASS: odd_sum_validator_transformed(lst=[8, 2, 2])\nPASS: odd_sum_validator_transformed(lst=[8, 8, 2])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u0089R4\uda23\udfe3\u0017\u00f1\u0014\ud83e\udcea\ud836\udddc\u00cf')\nPASS: string_pattern_score_transformed(s='g \u008f')\nPASS: string_pattern_score_transformed(s='\u00ad\u00b6\u00cee$v\u0012\u0094}G')\nPASS: string_pattern_score_transformed(s='\"P\u00e8\ud816\udf3eK\u00c2\u00a7\u00c3A\u00a5')\nPASS: string_pattern_score_transformed(s='\udbd9\udf37A]\ud9fb\udc851\u00c4\u0089\u0012\u0094\u00e8')\nPASS: string_pattern_score_transformed(s='\u00b3\udb5b\ude03\u001c\u00e0U\u00b1\u0017\u00d49Z')\nPASS: string_pattern_score_transformed(s='\u008d3\u00bd')\nPASS: string_pattern_score_transformed(s='\u00a8\udbbd\udd1c')\nPASS: string_pattern_score_transformed(s='\u0085<\u00f4\u00d6\u00aa:\u0094V')\nPASS: string_pattern_score_transformed(s='\u00cc\udbc4\udf10\uda52\udd6af')\nPASS: string_pattern_score_transformed(s='8\u00b7l\ud86b\udeec\u00fd\ud833\ude80\u00c8\u0012S')\nPASS: string_pattern_score_transformed(s='R\ud990\udeaf\u00a6\u001f\ud830\udc55N\u00be\u000e+\udb77\udd1b')\nPASS: string_pattern_score_transformed(s='\u00a1\u000f\u00a73\fk\u0017[u')\nPASS: string_pattern_score_transformed(s='\u2a78\u00e5\ud822\udf64]X\udba3\udd64\u0086\u00ec\ud97d\ude77\udbb5\udd3c')\nPASS: string_pattern_score_transformed(s='\ud9e1\udc04\u00ad`\u00bd\u00d1\u0085nu')\nPASS: string_pattern_score_transformed(s='\u000e\u00ec!')\nPASS: string_pattern_score_transformed(s='\u001f\ud8d2\udcb1\u001f;[')\nPASS: string_pattern_score_transformed(s='\u0014v\u00b5I{\u00ad')\nPASS: string_pattern_score_transformed(s='\u00c7\u00f5')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[14])\nPASS: sum_until_limit_transformed(nums=[2])\nPASS: sum_until_limit_transformed(nums=[1, 17, 2, 16, 12, 15, 19, 19, 10, 0])\nPASS: sum_until_limit_transformed(nums=[19])\nPASS: sum_until_limit_transformed(nums=[18, 9, 17, 4, 9, 12, 11, 16, 13])\nPASS: sum_until_limit_transformed(nums=[13, 0, 8, 2, 11, 14, 0, 18, 11, 14])\nPASS: sum_until_limit_transformed(nums=[16])\nPASS: sum_until_limit_transformed(nums=[7, 20, 1, 3, 1, 16, 17, 11])\nPASS: sum_until_limit_transformed(nums=[19, 4, 2, 14, 0, 16, 0])\nPASS: sum_until_limit_transformed(nums=[6, 13, 20, 1, 7, 1, 20, 2, 15, 13])\nPASS: sum_until_limit_transformed(nums=[6, 13, 6, 1, 7, 1, 20, 2, 15, 13])\nPASS: sum_until_limit_transformed(nums=[6, 13, 6, 1, 7, 1, 20, 7, 15, 13])\nPASS: sum_until_limit_transformed(nums=[6, 13, 6, 15, 7, 1, 20, 7, 15, 13])\nPASS: sum_until_limit_transformed(nums=[6, 13, 7, 15, 7, 1, 20, 7, 15, 13])\nPASS: sum_until_limit_transformed(nums=[6, 13, 7, 15, 7, 1, 20, 7, 15, 1])\nPASS: sum_until_limit_transformed(nums=[6, 13, 13, 15, 7, 1, 20, 7, 15, 1])\nPASS: sum_until_limit_transformed(nums=[7])\nPASS: sum_until_limit_transformed(nums=[6])\nPASS: sum_until_limit_transformed(nums=[7, 15, 12, 16, 20])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[20])\nPASS: count_divisibles_transformed(nums=[5])\nPASS: count_divisibles_transformed(nums=[16, 7, 1, 20, 0, 5, 16])\nPASS: count_divisibles_transformed(nums=[0, 5, 5, 15, 18, 4])\nPASS: count_divisibles_transformed(nums=[14, 5, 9, 5, 18, 15, 11, 13, 9])\nPASS: count_divisibles_transformed(nums=[1, 19, 6, 0, 3, 4, 1, 7, 11, 17])\nPASS: count_divisibles_transformed(nums=[6])\nPASS: count_divisibles_transformed(nums=[4, 15, 8, 8, 14, 17, 1, 9, 2, 20])\nPASS: count_divisibles_transformed(nums=[4])\nPASS: count_divisibles_transformed(nums=[3, 13])\nPASS: count_divisibles_transformed(nums=[13, 13])\nPASS: count_divisibles_transformed(nums=[2, 9, 19, 15, 4, 14, 16, 6, 4, 1])\nPASS: count_divisibles_transformed(nums=[2, 15, 19, 15, 4, 14, 16, 6, 4, 1])\nPASS: count_divisibles_transformed(nums=[2, 15, 19, 15, 4, 15, 16, 6, 4, 1])\nPASS: count_divisibles_transformed(nums=[2, 15, 19, 15, 4, 15, 16, 6, 4, 16])\nPASS: count_divisibles_transformed(nums=[2, 4, 19, 15, 4, 15, 16, 6, 4, 16])\nPASS: count_divisibles_transformed(nums=[2, 4, 19, 4, 4, 15, 16, 6, 4, 16])\nPASS: count_divisibles_transformed(nums=[2, 4, 19, 4, 4, 15, 16, 16, 4, 16])\nPASS: count_divisibles_transformed(nums=[18, 19, 6, 4, 15, 16, 20])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[8, 3])\nPASS: index_weighted_sum_transformed(lst=[5, 8, 6, 2, 0, 1])\nPASS: index_weighted_sum_transformed(lst=[0, 5])\nPASS: index_weighted_sum_transformed(lst=[0, 1, 4, 5, 10, 10, 2, 6, 10, 8])\nPASS: index_weighted_sum_transformed(lst=[3, 0, 1, 7, 10])\nPASS: index_weighted_sum_transformed(lst=[4, 0, 8, 2, 0, 6, 4, 0, 3])\nPASS: index_weighted_sum_transformed(lst=[8, 2, 0, 10])\nPASS: index_weighted_sum_transformed(lst=[10, 5, 3])\nPASS: index_weighted_sum_transformed(lst=[3])\nPASS: index_weighted_sum_transformed(lst=[4])\nPASS: index_weighted_sum_transformed(lst=[0, 5, 8])\nPASS: index_weighted_sum_transformed(lst=[0, 0, 8])\nPASS: index_weighted_sum_transformed(lst=[8, 0, 8])\nPASS: index_weighted_sum_transformed(lst=[0, 3, 2, 8, 9, 1])\nPASS: index_weighted_sum_transformed(lst=[0, 9, 2, 8, 9, 1])\nPASS: index_weighted_sum_transformed(lst=[0, 9, 2])\nPASS: index_weighted_sum_transformed(lst=[0, 9, 0])\nPASS: index_weighted_sum_transformed(lst=[0, 9, 9])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=3)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00f6\u00c5\u0019\uda0a\udd31\u00b0\u00d0')\nPASS: character_counter_transformed(text='\n')\nPASS: character_counter_transformed(text='\u00aa\u00b2\u00f2\u009b\u0004\u00b2\u0011\udb7d\ude5a\u0002\u009f')\nPASS: character_counter_transformed(text='\u0003\u00f1\u00d5\u00aey\u0090\u00ed\u0091'\udb96\udc86')\nPASS: character_counter_transformed(text='6\ud8ad\ude71\u0086y\u00a4\u0089\u00cc')\nPASS: character_counter_transformed(text='\u00fa(\u00a0')\nPASS: character_counter_transformed(text='\\')\nPASS: character_counter_transformed(text='VBX\u9e9b\u00efi')\nPASS: character_counter_transformed(text='ZG\u00bf\ud873\udd65\udb8a\udf8d\u0004\u00b7\u00f3*\u001d')\nPASS: character_counter_transformed(text='t\udba2\udf33\u00cf\u001fC\u0549R\u009a\u00a0\u00f9')\nPASS: character_counter_transformed(text='\u023a')\nPASS: character_counter_transformed(text='b\u00da\u001c6\"\u00fc\udb69\udfc5')\nPASS: character_counter_transformed(text='\u0002')\nPASS: character_counter_transformed(text='\u00f8\u0097-')\nPASS: character_counter_transformed(text='!]\u009d\ud838\udf40\u00e17')\nPASS: character_counter_transformed(text='O\u00e1')\nPASS: character_counter_transformed(text='\u0001A\u00a0/m')\nPASS: character_counter_transformed(text='\u00df5\uda6e\udef0\u009d\u00c9;')\nPASS: character_counter_transformed(text='\u88fe\u008ao\u0002K\ud91c\udc71\u2557\ud9f6\udc88\u00fc\ud98d\udcf9')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[44])\nPASS: rolling_maximum_transformed(values=[44, 35])\nPASS: rolling_maximum_transformed(values=[58, 1])\nPASS: rolling_maximum_transformed(values=[28, 67, 76, 16, 59, 70])\nPASS: rolling_maximum_transformed(values=[60, 93, 27])\nPASS: rolling_maximum_transformed(values=[81])\nPASS: rolling_maximum_transformed(values=[59, 49, 33, 69, 2, 80, 49, 14, 75])\nPASS: rolling_maximum_transformed(values=[20, 16, 48, 31, 5, 18, 32, 98, 65, 88])\nPASS: rolling_maximum_transformed(values=[78, 43, 36, 37, 31, 58, 71, 69, 35, 79])\nPASS: rolling_maximum_transformed(values=[86, 11, 64, 4, 98, 58])\nPASS: rolling_maximum_transformed(values=[86, 11, 86, 4, 98, 58])\nPASS: rolling_maximum_transformed(values=[86, 11, 4, 4, 98, 58])\nPASS: rolling_maximum_transformed(values=[86, 11, 4, 4, 98, 86])\nPASS: rolling_maximum_transformed(values=[86, 11, 4, 98, 98, 86])\nPASS: rolling_maximum_transformed(values=[86, 11, 4, 86, 98, 86])\nPASS: rolling_maximum_transformed(values=[86, 11, 4, 86, 86, 86])\nPASS: rolling_maximum_transformed(values=[7, 50, 38, 75, 52])\nPASS: rolling_maximum_transformed(values=[75, 50, 38, 75, 52])\nPASS: rolling_maximum_transformed(values=[38, 50, 38, 75, 52])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "calculate_discount": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=16)\nPASS: process_data_transformed(x=41)\nPASS: process_data_transformed(x=61)\nPASS: process_data_transformed(x=18)\nPASS: process_data_transformed(x=3)\nPASS: process_data_transformed(x=22)\nPASS: process_data_transformed(x=37)\nPASS: process_data_transformed(x=44)\nPASS: process_data_transformed(x=7)\nPASS: process_data_transformed(x=68)\nPASS: process_data_transformed(x=50)\nPASS: process_data_transformed(x=87)\nPASS: process_data_transformed(x=72)\nPASS: process_data_transformed(x=69)\nPASS: process_data_transformed(x=1)\nPASS: process_data_transformed(x=4)\nPASS: process_data_transformed(x=96)\nPASS: process_data_transformed(x=34)\nPASS: process_data_transformed(x=73)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=79.7733566163378)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=2.8403977407997614)\nPASS: convert_temperature_transformed(c=66.75532147623979)\nPASS: convert_temperature_transformed(c=40.5023803764626)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=58.55410517533396)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=0.99999)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=113.42017473882325, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=200.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=1.5, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.7568518067668115)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=79.91047266019196, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=1.1278628917321646e-170)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=1.5, discount_rate=0.033980653959658554)\nPASS: calculate_discount_transformed(price=1.5, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=86.02698526915906, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.0)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-1.401298464324817e-45, imag=0.0)\nPASS: process_complex_number_transformed(real=-1.401298464324817e-45, imag=-5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=7.6089020411752345e-62, imag=-0.5468189063015352)\nPASS: process_complex_number_transformed(real=-1.1125369292536007e-308, imag=-0.0)\nPASS: process_complex_number_transformed(real=-2.220446049250313e-16, imag=6.103515625e-05)\nPASS: process_complex_number_transformed(real=2.00001, imag=6.103515625e-05)\nPASS: process_complex_number_transformed(real=-2.00001, imag=4.01631308338735e-162)\nPASS: process_complex_number_transformed(real=-9.968375012504882, imag=5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=1.1, imag=1.175494351e-38)\nPASS: process_complex_number_transformed(real=-1.401298464324817e-45, imag=6.211529075869976)\nPASS: process_complex_number_transformed(real=-1.401298464324817e-45, imag=-1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=20.0, imag=-2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-2.225073858507e-311, imag=-2.225073858507e-311)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=6.103515625e-05)\nPASS: process_complex_number_transformed(real=-1.401298464324817e-45, imag=-5e-324)\nPASS: process_complex_number_transformed(real=-5e-324, imag=-5e-324)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=-7.999034762484205e-147)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=2.2250738585e-313)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=64)\nPASS: transform_data_transformed(input_value=31)\nPASS: transform_data_transformed(input_value=62)\nPASS: transform_data_transformed(input_value=30)\nPASS: transform_data_transformed(input_value=2)\nPASS: transform_data_transformed(input_value=26)\nPASS: transform_data_transformed(input_value=37)\nPASS: transform_data_transformed(input_value=58)\nPASS: transform_data_transformed(input_value=40)\nPASS: transform_data_transformed(input_value=32)\nPASS: transform_data_transformed(input_value=20)\nPASS: transform_data_transformed(input_value=85)\nPASS: transform_data_transformed(input_value=49)\nPASS: transform_data_transformed(input_value=48)\nPASS: transform_data_transformed(input_value=17)\nPASS: transform_data_transformed(input_value=90)\nPASS: transform_data_transformed(input_value=92)\nPASS: transform_data_transformed(input_value=72)\nPASS: transform_data_transformed(input_value=10)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=13.861758026332492)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=7.970534699020028e-240)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=1.175494351e-38)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=1.192092896e-07)\nPASS: circle_area_diff_transformed(r=14.195358497721589)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=3, b=1, c=1)\nPASS: triangle_checker_transformed(a=3, b=4, c=5)\nPASS: triangle_checker_transformed(a=5, b=9, c=18)\nPASS: triangle_checker_transformed(a=15, b=5, c=20)\nPASS: triangle_checker_transformed(a=11, b=19, c=12)\nPASS: triangle_checker_transformed(a=10, b=15, c=14)\nPASS: triangle_checker_transformed(a=12, b=8, c=16)\nPASS: triangle_checker_transformed(a=7, b=13, c=3)\nPASS: triangle_checker_transformed(a=19, b=20, c=2)\nPASS: triangle_checker_transformed(a=19, b=19, c=5)\nPASS: triangle_checker_transformed(a=19, b=19, c=19)\nPASS: triangle_checker_transformed(a=16, b=1, c=13)\nPASS: triangle_checker_transformed(a=16, b=1, c=16)\nPASS: triangle_checker_transformed(a=16, b=16, c=16)\nPASS: triangle_checker_transformed(a=8, b=10, c=3)\nPASS: triangle_checker_transformed(a=8, b=10, c=10)\nPASS: triangle_checker_transformed(a=8, b=10, c=8)\nPASS: triangle_checker_transformed(a=10, b=10, c=8)\nPASS: triangle_checker_transformed(a=10, b=8, c=8)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=30.56329302008421)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=79.72121177282081)\nPASS: temperature_offset_transformed(c=76.17909715596065)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=47.18786299002053)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=90.36631925133518)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=70.14508224347603)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-4, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-4, b=2, c=2)\nPASS: quadratic_discriminant_transformed(a=-7, b=-10, c=-10)\nPASS: quadratic_discriminant_transformed(a=-10, b=9, c=-7)\nPASS: quadratic_discriminant_transformed(a=-7, b=1, c=3)\nPASS: quadratic_discriminant_transformed(a=9, b=-6, c=-6)\nPASS: quadratic_discriminant_transformed(a=10, b=8, c=-3)\nPASS: quadratic_discriminant_transformed(a=-6, b=-1, c=-7)\nPASS: quadratic_discriminant_transformed(a=8, b=-4, c=5)\nPASS: quadratic_discriminant_transformed(a=8, b=9, c=9)\nPASS: quadratic_discriminant_transformed(a=9, b=9, c=9)\nPASS: quadratic_discriminant_transformed(a=4, b=-2, c=-9)\nPASS: quadratic_discriminant_transformed(a=4, b=-2, c=4)\nPASS: quadratic_discriminant_transformed(a=4, b=4, c=4)\nPASS: quadratic_discriminant_transformed(a=-4, b=-3, c=9)\nPASS: quadratic_discriminant_transformed(a=9, b=-3, c=9)\nPASS: quadratic_discriminant_transformed(a=2, b=3, c=9)\nPASS: quadratic_discriminant_transformed(a=9, b=3, c=9)\nPASS: quadratic_discriminant_transformed(a=9, b=3, c=3)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=0.0)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=-6.103515625e-05)\nPASS: vector_norm_transformed(x=-5.5534902084086205e-65, y=2.220446049250313e-16)\nPASS: vector_norm_transformed(x=1e-05, y=-2.225073858507203e-309)\nPASS: vector_norm_transformed(x=1.9, y=-10.0)\nPASS: vector_norm_transformed(x=5e-324, y=10.0)\nPASS: vector_norm_transformed(x=1e-05, y=2.2250738585e-313)\nPASS: vector_norm_transformed(x=1.1, y=1.5)\nPASS: vector_norm_transformed(x=9.77611117744749, y=-1.9)\nPASS: vector_norm_transformed(x=0.5, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=0.5, y=0.5)\nPASS: vector_norm_transformed(x=10.0, y=1.1)\nPASS: vector_norm_transformed(x=10.0, y=10.0)\nPASS: vector_norm_transformed(x=-9.140854611435948, y=-9.529617531300736e-50)\nPASS: vector_norm_transformed(x=-9.140854611435948, y=-9.140854611435948)\nPASS: vector_norm_transformed(x=-2.00001, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-2.00001, y=-2.00001)\nPASS: vector_norm_transformed(x=-2.00001, y=-1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=-9.57058617030345, y=-0.0)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=0.0)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=8.52236950639117)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=7.464210172394248e-233)\nPASS: hypotenuse_diff_transformed(a=10.0, b=2.7478424793753313)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=9.0, b=1.1)\nPASS: hypotenuse_diff_transformed(a=8.633597351076961, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=0.03200370329065728)\nPASS: hypotenuse_diff_transformed(a=6.359527291604453, b=9.256791727043563)\nPASS: hypotenuse_diff_transformed(a=6.359527291604453, b=6.359527291604453)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=4.269492848864668)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=0.5, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=0.5, b=0.5)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=1.192092896e-07)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=1.192092896e-07)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='0..0')\nPASS: ascii_average_transformed(s='\ud8c2\udc80')\nPASS: ascii_average_transformed(s='\u00d6\u00e08')\nPASS: ascii_average_transformed(s='\ud83c\udffb\ud83d\udc4d\ud83c\udffb')\nPASS: ascii_average_transformed(s='j')\nPASS: ascii_average_transformed(s='\u00a6\u00dd\uda1d\ude63p3\u0004')\nPASS: ascii_average_transformed(s='\u00b4W>\udaa7\udc36')\nPASS: ascii_average_transformed(s='t\"\u0081\f\ud999\uded9\u0006\udbea\udc82\u00c5\u00e4\udaa1\udc97')\nPASS: ascii_average_transformed(s='\u00a1]\u00b4\u00e6')\nPASS: ascii_average_transformed(s='\u00c7\u0094}')\nPASS: ascii_average_transformed(s='B\u00cf')\nPASS: ascii_average_transformed(s='/z\u00ea\u00bb\u00f9[\uc1531Ad')\nPASS: ascii_average_transformed(s='7\u008e{]JQ>\ud9ab\udedeA\u0088')\nPASS: ascii_average_transformed(s='\uda20\udced\u0097m\u00c9U\udb65\udf9f\u0001\ud852\udc4a\u00b8\u000e')\nPASS: ascii_average_transformed(s='\u00d6\u009c')\nPASS: ascii_average_transformed(s='+0.0')\nPASS: ascii_average_transformed(s='\u00ee\u00d5\u00e2\u00dc7h\u001e+J\udb37\udfdf')\nPASS: ascii_average_transformed(s='\ud876\udc52d')\nPASS: ascii_average_transformed(s='\u0001')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[8, 0])\nPASS: list_balance_transformed(nums=[8, 8, 10, 7, 5, 2, 5, 3])\nPASS: list_balance_transformed(nums=[4, 4, 1])\nPASS: list_balance_transformed(nums=[7, 0, 8, 6, 3, 5, 6, 3, 10, 2])\nPASS: list_balance_transformed(nums=[6, 9, 3, 7, 6, 5, 9, 7, 8, 8])\nPASS: list_balance_transformed(nums=[7, 7])\nPASS: list_balance_transformed(nums=[7, 5, 5])\nPASS: list_balance_transformed(nums=[2, 8, 7, 9, 4, 1, 4, 4, 6, 4])\nPASS: list_balance_transformed(nums=[4, 8])\nPASS: list_balance_transformed(nums=[8, 8])\nPASS: list_balance_transformed(nums=[7, 3, 0, 3, 8, 0, 1, 0, 9, 8])\nPASS: list_balance_transformed(nums=[7, 3, 0, 3, 8, 0, 1, 0, 8, 8])\nPASS: list_balance_transformed(nums=[7, 3, 0, 3, 8, 0, 7, 0, 8, 8])\nPASS: list_balance_transformed(nums=[8, 3, 0, 3, 8, 0, 7, 0, 8, 8])\nPASS: list_balance_transformed(nums=[8, 8, 0, 3, 8, 0, 7, 0, 8, 8])\nPASS: list_balance_transformed(nums=[0, 8, 0, 3, 8, 0, 7, 0, 8, 8])\nPASS: list_balance_transformed(nums=[0, 8, 0, 3, 8, 3, 7, 0, 8, 8])\nPASS: list_balance_transformed(nums=[8, 2, 1])\nPASS: list_balance_transformed(nums=[2, 2, 1])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[4])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[2, 4])\nPASS: odd_sum_validator_transformed(lst=[1, 9, 4, 7, 2, 6])\nPASS: odd_sum_validator_transformed(lst=[2, 6, 7, 5, 3, 9, 10])\nPASS: odd_sum_validator_transformed(lst=[5, 6, 8])\nPASS: odd_sum_validator_transformed(lst=[4, 8, 9, 2, 3, 4, 5, 1])\nPASS: odd_sum_validator_transformed(lst=[3, 6, 1, 8, 7, 5, 7, 9, 6, 10])\nPASS: odd_sum_validator_transformed(lst=[2, 9, 7])\nPASS: odd_sum_validator_transformed(lst=[10, 2, 4, 8, 9, 10, 4])\nPASS: odd_sum_validator_transformed(lst=[9, 2, 4, 8, 9, 10, 4])\nPASS: odd_sum_validator_transformed(lst=[9, 2, 4, 8, 10, 10, 4])\nPASS: odd_sum_validator_transformed(lst=[9, 2, 4, 8, 10, 4, 4])\nPASS: odd_sum_validator_transformed(lst=[9, 2, 8, 8, 10, 4, 4])\nPASS: odd_sum_validator_transformed(lst=[9, 2, 8, 8, 10, 8, 4])\nPASS: odd_sum_validator_transformed(lst=[9, 2, 8, 8, 8, 8, 4])\nPASS: odd_sum_validator_transformed(lst=[6, 7])\nPASS: odd_sum_validator_transformed(lst=[6, 6])\nPASS: odd_sum_validator_transformed(lst=[6])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='%\"\udb43\ude71z\u001eo')\nPASS: string_pattern_score_transformed(s='%D\u00a6-\u00e2\u00bd')\nPASS: string_pattern_score_transformed(s='b\u00ee')\nPASS: string_pattern_score_transformed(s='\u00a9n')\nPASS: string_pattern_score_transformed(s='b\\\ud971\udcf6\u0093\u0098')\nPASS: string_pattern_score_transformed(s='\u001f<\u00c7\u00fd\udbd9\udde0')\nPASS: string_pattern_score_transformed(s='r\u000b?\udb7e\udc2aN\n\ud95c\udccc\u009b\u00d2\ud8ff\ude61')\nPASS: string_pattern_score_transformed(s='\ud983\udd35\u00e7t')\nPASS: string_pattern_score_transformed(s='\u00ea&\u00110hO')\nPASS: string_pattern_score_transformed(s='\u00d5R\u00e8+\u00e3)\u009aa\udbf3\uddf7\u00a6')\nPASS: string_pattern_score_transformed(s='\ud882\uddfa\u0010')\nPASS: string_pattern_score_transformed(s='p\u00e7\u00c9')\nPASS: string_pattern_score_transformed(s='\u00fb\u00e6')\nPASS: string_pattern_score_transformed(s='\u000f\u0000\uda4c\ude03-\udbb2\udc02\u0011')\nPASS: string_pattern_score_transformed(s='\u0014')\nPASS: string_pattern_score_transformed(s='l\udbb2\udd00T')\nPASS: string_pattern_score_transformed(s='&\u00ed')\nPASS: string_pattern_score_transformed(s='\u0000r')\nPASS: string_pattern_score_transformed(s='\u00fc\u0011+\u00be\udb45\udfd9\udaf6\ude73\u00d6<\ud920\udcbf')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[20])\nPASS: sum_until_limit_transformed(nums=[9])\nPASS: sum_until_limit_transformed(nums=[5, 11, 12, 20, 14, 1, 11, 19, 7, 3])\nPASS: sum_until_limit_transformed(nums=[16, 4, 13, 6, 2, 3])\nPASS: sum_until_limit_transformed(nums=[12, 9, 0, 20, 18, 12, 6, 11])\nPASS: sum_until_limit_transformed(nums=[11, 19, 6, 14])\nFAIL: sum_until_limit_transformed(nums=[19, 11, 4, 16, 1, 16, 3, 1, 2, 3])\nPASS: sum_until_limit_transformed(nums=[16])\nFAIL: sum_until_limit_transformed(nums=[9, 17, 5, 2, 17, 2, 20, 18, 18, 9])\nPASS: sum_until_limit_transformed(nums=[3, 14])\nPASS: sum_until_limit_transformed(nums=[3, 3])\nPASS: sum_until_limit_transformed(nums=[3])\nPASS: sum_until_limit_transformed(nums=[7, 14])\nPASS: sum_until_limit_transformed(nums=[14, 14])\nPASS: sum_until_limit_transformed(nums=[3, 8])\nPASS: sum_until_limit_transformed(nums=[7])\nPASS: sum_until_limit_transformed(nums=[3, 20, 12, 3, 16, 4, 13, 17, 17])\nFAIL: sum_until_limit_transformed(nums=[3, 20, 12, 16, 16, 4, 13, 17, 17])\nPASS: sum_until_limit_transformed(nums=[3, 20, 16, 16, 16, 4, 13, 17, 17])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[20])\nPASS: count_divisibles_transformed(nums=[20, 4])\nPASS: count_divisibles_transformed(nums=[15, 20, 9, 11, 20, 14, 6, 17, 7, 11])\nPASS: count_divisibles_transformed(nums=[2])\nPASS: count_divisibles_transformed(nums=[17])\nPASS: count_divisibles_transformed(nums=[0, 5, 1, 0, 18, 5, 5, 13, 11, 1])\nPASS: count_divisibles_transformed(nums=[7, 2, 12, 12, 7, 5, 5, 11, 3, 9])\nPASS: count_divisibles_transformed(nums=[5, 14, 4, 8, 13, 0, 13, 7, 4, 15])\nPASS: count_divisibles_transformed(nums=[3, 20])\nPASS: count_divisibles_transformed(nums=[0, 8, 13, 7, 13, 19, 1])\nPASS: count_divisibles_transformed(nums=[0, 8, 13, 0, 13, 19, 1])\nPASS: count_divisibles_transformed(nums=[0, 8, 13, 0, 13, 19, 19])\nPASS: count_divisibles_transformed(nums=[0, 8, 13, 0, 13, 8, 19])\nPASS: count_divisibles_transformed(nums=[13, 8, 13, 0, 13, 8, 19])\nPASS: count_divisibles_transformed(nums=[8, 8, 13, 0, 13, 8, 19])\nPASS: count_divisibles_transformed(nums=[8, 8, 13, 0, 13, 8, 8])\nPASS: count_divisibles_transformed(nums=[5])\nPASS: count_divisibles_transformed(nums=[12, 4, 13, 7, 16, 10, 13, 4, 11, 6])\nPASS: count_divisibles_transformed(nums=[12, 4, 13, 7, 16, 10, 13, 4, 16, 6])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[1])\nPASS: index_weighted_sum_transformed(lst=[5, 9, 9, 10, 5, 6, 10, 6, 3, 7])\nPASS: index_weighted_sum_transformed(lst=[6, 2, 1])\nPASS: index_weighted_sum_transformed(lst=[0, 5, 3, 3, 3, 8, 7])\nPASS: index_weighted_sum_transformed(lst=[8, 6, 5, 10, 9, 6, 1, 4, 4, 9])\nPASS: index_weighted_sum_transformed(lst=[3, 2, 4, 5, 9, 9, 1, 6, 9, 3])\nPASS: index_weighted_sum_transformed(lst=[0, 7, 0, 3, 7, 0, 7])\nPASS: index_weighted_sum_transformed(lst=[4, 3, 9, 1])\nPASS: index_weighted_sum_transformed(lst=[4])\nPASS: index_weighted_sum_transformed(lst=[3])\nPASS: index_weighted_sum_transformed(lst=[6])\nPASS: index_weighted_sum_transformed(lst=[5])\nPASS: index_weighted_sum_transformed(lst=[0, 8, 1, 4, 9, 6, 6, 8, 8, 1])\nPASS: index_weighted_sum_transformed(lst=[0, 8, 1, 4, 9, 6, 6, 8, 8, 8])\nPASS: index_weighted_sum_transformed(lst=[6, 8, 1, 4, 9, 6, 6, 8, 8, 8])\nPASS: index_weighted_sum_transformed(lst=[6, 8, 1, 4, 9, 6, 8, 8, 8, 8])\nPASS: index_weighted_sum_transformed(lst=[9, 10])\nPASS: index_weighted_sum_transformed(lst=[9])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=10)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00db\ud8f4\ude20\ud9cc\udcce\u001cj\u00f7\ud86f\udc7cG\u00c8\u00f9')\nPASS: character_counter_transformed(text='\udb5e\udf91\u0097\udab2\udd0d\udad3\udfca\udb99\udf43?s\u00c6k')\nPASS: character_counter_transformed(text='bG')\nPASS: character_counter_transformed(text='~')\nPASS: character_counter_transformed(text='\u00b2\u00f5\u0001\u00c3\udb4e\udf5a\udb39\udd11\u00d0\u00a1\u001d6')\nPASS: character_counter_transformed(text='9\ud963\ude24')\nPASS: character_counter_transformed(text='\u00c3;\u0084\uda74\udc3f\u0015\\\u00d4\u00b3')\nPASS: character_counter_transformed(text='\udb96\udd90\ud99c\udd0b\u34cd')\nPASS: character_counter_transformed(text='VS=R\u00d0:\u00d1')\nPASS: character_counter_transformed(text='\u0086')\nPASS: character_counter_transformed(text='\u0099\u0092 AE\udab4\udcec\u00d6')\nPASS: character_counter_transformed(text='[')\nPASS: character_counter_transformed(text='\udb48\uddb2\u0082\u00e5')\nPASS: character_counter_transformed(text='\u00ae\udafc\udf20\u0099\ud981\udd34')\nPASS: character_counter_transformed(text='\u00f6\u0080x\ud8f0\udcaahV\uda54\udeb8!\ud8d1\udc7f\u0010')\nPASS: character_counter_transformed(text='\u00e3\n\u00dc\u0016')\nPASS: character_counter_transformed(text='none')\nPASS: character_counter_transformed(text='2')\nPASS: character_counter_transformed(text='py\u00a6')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[76])\nPASS: rolling_maximum_transformed(values=[76, 84])\nPASS: rolling_maximum_transformed(values=[83, 38])\nPASS: rolling_maximum_transformed(values=[99, 59])\nPASS: rolling_maximum_transformed(values=[56])\nPASS: rolling_maximum_transformed(values=[4, 9, 31, 46, 93, 79, 76, 37, 40, 6])\nPASS: rolling_maximum_transformed(values=[98, 33])\nPASS: rolling_maximum_transformed(values=[68, 29, 16, 55, 91, 56, 98])\nPASS: rolling_maximum_transformed(values=[5, 61, 16, 35, 85, 0, 32, 38, 14, 77])\nPASS: rolling_maximum_transformed(values=[76, 47])\nPASS: rolling_maximum_transformed(values=[76, 76])\nPASS: rolling_maximum_transformed(values=[9, 68, 65, 8, 63, 74])\nPASS: rolling_maximum_transformed(values=[9, 68, 65, 74, 63, 74])\nPASS: rolling_maximum_transformed(values=[9, 68, 65, 74, 65, 74])\nPASS: rolling_maximum_transformed(values=[9, 68, 65, 74, 68, 74])\nPASS: rolling_maximum_transformed(values=[65, 68, 65, 74, 68, 74])\nPASS: rolling_maximum_transformed(values=[65, 68, 65, 74, 68, 65])\nPASS: rolling_maximum_transformed(values=[65, 68, 65, 65, 68, 65])\nPASS: rolling_maximum_transformed(values=[58, 39])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "process_complex_number": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=92)\nPASS: process_data_transformed(x=54)\nPASS: process_data_transformed(x=63)\nPASS: process_data_transformed(x=15)\nPASS: process_data_transformed(x=62)\nPASS: process_data_transformed(x=14)\nPASS: process_data_transformed(x=41)\nPASS: process_data_transformed(x=44)\nPASS: process_data_transformed(x=91)\nPASS: process_data_transformed(x=16)\nPASS: process_data_transformed(x=17)\nPASS: process_data_transformed(x=79)\nPASS: process_data_transformed(x=27)\nPASS: process_data_transformed(x=43)\nPASS: process_data_transformed(x=57)\nPASS: process_data_transformed(x=8)\nPASS: process_data_transformed(x=90)\nPASS: process_data_transformed(x=89)\nPASS: process_data_transformed(x=22)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=93.61131085747611)\nPASS: convert_temperature_transformed(c=0.7352123167104765)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=2.2250738585072014e-308)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=40.82536262473971)\nPASS: convert_temperature_transformed(c=51.62117300635235)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=63.95646008680692)\nPASS: convert_temperature_transformed(c=4.0336322813941256e-130)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=83.26556761036137)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=5.482696357888405e-08, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=5.482696357888405e-08, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=185.22130801362016, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=0.5003001402309374)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.589512965752719)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.8659168200336209)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=100.1282226497574, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=0.9627495767755598)\nPASS: calculate_discount_transformed(price=0.9627495767755598, discount_rate=0.9627495767755598)\nPASS: calculate_discount_transformed(price=32.28180692547396, discount_rate=1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-2.00001, imag=0.0)\nPASS: process_complex_number_transformed(real=-2.00001, imag=-1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=-1.1125369292536007e-308, imag=0.5)\nPASS: process_complex_number_transformed(real=-2.2250738585e-313, imag=-15.972361729514262)\nPASS: process_complex_number_transformed(real=2.00001, imag=-2.2250738585e-313)\nPASS: process_complex_number_transformed(real=0.5, imag=-1.175494351e-38)\nPASS: process_complex_number_transformed(real=-1.175494351e-38, imag=1.192092896e-07)\nPASS: process_complex_number_transformed(real=1.363709145779844e-51, imag=2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-2.2250738585072014e-308, imag=1.3191346631739764e-241)\nPASS: process_complex_number_transformed(real=20.0, imag=1.175494351e-38)\nPASS: process_complex_number_transformed(real=1.175494351e-38, imag=1.175494351e-38)\nPASS: process_complex_number_transformed(real=1.401298464324817e-45, imag=-5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=1.401298464324817e-45, imag=1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=2.2250738585072014e-308, imag=1.9)\nPASS: process_complex_number_transformed(real=1.9, imag=1.9)\nPASS: process_complex_number_transformed(real=2.00001, imag=2.225073858507e-311)\nPASS: process_complex_number_transformed(real=2.00001, imag=2.00001)\nPASS: process_complex_number_transformed(real=2.220446049250313e-16, imag=-19.0)\nPASS: process_complex_number_transformed(real=-19.0, imag=-19.0)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=89)\nPASS: transform_data_transformed(input_value=79)\nPASS: transform_data_transformed(input_value=84)\nPASS: transform_data_transformed(input_value=10)\nPASS: transform_data_transformed(input_value=58)\nPASS: transform_data_transformed(input_value=72)\nPASS: transform_data_transformed(input_value=3)\nPASS: transform_data_transformed(input_value=16)\nPASS: transform_data_transformed(input_value=18)\nPASS: transform_data_transformed(input_value=76)\nPASS: transform_data_transformed(input_value=7)\nPASS: transform_data_transformed(input_value=59)\nPASS: transform_data_transformed(input_value=26)\nPASS: transform_data_transformed(input_value=93)\nPASS: transform_data_transformed(input_value=36)\nPASS: transform_data_transformed(input_value=45)\nPASS: transform_data_transformed(input_value=23)\nPASS: transform_data_transformed(input_value=46)\nPASS: transform_data_transformed(input_value=20)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: circle_area_diff_transformed(r=1.192092896e-07)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=13.664304703526115)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=14.578336827238216)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=1.175494351e-38)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=14.803924510272529)\nPASS: circle_area_diff_transformed(r=4.1384129517328874e-207)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=15, b=1, c=1)\nPASS: triangle_checker_transformed(a=15, b=20, c=14)\nPASS: triangle_checker_transformed(a=18, b=8, c=20)\nPASS: triangle_checker_transformed(a=5, b=2, c=13)\nPASS: triangle_checker_transformed(a=20, b=20, c=10)\nPASS: triangle_checker_transformed(a=1, b=16, c=9)\nPASS: triangle_checker_transformed(a=1, b=16, c=18)\nPASS: triangle_checker_transformed(a=9, b=3, c=7)\nPASS: triangle_checker_transformed(a=2, b=17, c=4)\nPASS: triangle_checker_transformed(a=4, b=16, c=13)\nPASS: triangle_checker_transformed(a=13, b=16, c=13)\nPASS: triangle_checker_transformed(a=13, b=13, c=13)\nPASS: triangle_checker_transformed(a=6, b=1, c=14)\nPASS: triangle_checker_transformed(a=1, b=1, c=14)\nPASS: triangle_checker_transformed(a=1, b=14, c=14)\nPASS: triangle_checker_transformed(a=14, b=14, c=14)\nPASS: triangle_checker_transformed(a=11, b=12, c=2)\nPASS: triangle_checker_transformed(a=11, b=12, c=11)\nPASS: triangle_checker_transformed(a=11, b=11, c=11)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=4.721828729661234e-222)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=66.56480041015281)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=66.40323576230519)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=55.2437146034532)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=56.32030673340264)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=1.192092896e-07)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=8, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=8, b=1, c=-6)\nPASS: quadratic_discriminant_transformed(a=-6, b=9, c=8)\nPASS: quadratic_discriminant_transformed(a=-10, b=-9, c=-3)\nPASS: quadratic_discriminant_transformed(a=0, b=7, c=5)\nPASS: quadratic_discriminant_transformed(a=4, b=1, c=5)\nPASS: quadratic_discriminant_transformed(a=3, b=8, c=-5)\nPASS: quadratic_discriminant_transformed(a=7, b=0, c=6)\nPASS: quadratic_discriminant_transformed(a=8, b=-2, c=-5)\nPASS: quadratic_discriminant_transformed(a=9, b=5, c=7)\nPASS: quadratic_discriminant_transformed(a=9, b=7, c=7)\nPASS: quadratic_discriminant_transformed(a=7, b=7, c=7)\nPASS: quadratic_discriminant_transformed(a=4, b=-5, c=2)\nPASS: quadratic_discriminant_transformed(a=4, b=-5, c=-5)\nPASS: quadratic_discriminant_transformed(a=4, b=-5, c=4)\nPASS: quadratic_discriminant_transformed(a=4, b=4, c=4)\nPASS: quadratic_discriminant_transformed(a=8, b=-3, c=7)\nPASS: quadratic_discriminant_transformed(a=8, b=7, c=7)\nPASS: quadratic_discriminant_transformed(a=0, b=-9, c=10)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-1.5, y=0.0)\nPASS: vector_norm_transformed(x=-1.5, y=-6.103515625e-05)\nPASS: vector_norm_transformed(x=-1.6717965477289e-165, y=-10.0)\nPASS: vector_norm_transformed(x=3.52812362696816, y=1.175494351e-38)\nPASS: vector_norm_transformed(x=1.1754943508222875e-38, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-2.220446049250313e-16, y=6.103515625e-05)\nPASS: vector_norm_transformed(x=-1.5, y=2.2250738585e-313)\nPASS: vector_norm_transformed(x=-1.401298464324817e-45, y=1.192092896e-07)\nPASS: vector_norm_transformed(x=10.0, y=5.143749411798829)\nPASS: vector_norm_transformed(x=-1.9, y=-1e-05)\nPASS: vector_norm_transformed(x=-1.9, y=-1.9)\nPASS: vector_norm_transformed(x=6.103515625e-05, y=0.0)\nPASS: vector_norm_transformed(x=6.103515625e-05, y=6.103515625e-05)\nPASS: vector_norm_transformed(x=-5.960464477539063e-08, y=1.8153554813549117e-150)\nPASS: vector_norm_transformed(x=-5.960464477539063e-08, y=-5.960464477539063e-08)\nPASS: vector_norm_transformed(x=5e-324, y=-2.00001)\nPASS: vector_norm_transformed(x=5e-324, y=5e-324)\nPASS: vector_norm_transformed(x=-9.0, y=2.220446049250313e-16)\nPASS: vector_norm_transformed(x=2.220446049250313e-16, y=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=0.5)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=10.0)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=2.7476938281182055)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=0.0, b=9.183603725404826)\nPASS: hypotenuse_diff_transformed(a=10.0, b=9.0)\nPASS: hypotenuse_diff_transformed(a=6.3416936067015675, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=6.3416936067015675, b=6.3416936067015675)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=4.3065830025782645, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=4.3065830025782645, b=4.3065830025782645)\nPASS: hypotenuse_diff_transformed(a=1.0, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=1.0, b=1.0)\nPASS: hypotenuse_diff_transformed(a=0.5, b=0.3737204608882894)\nPASS: hypotenuse_diff_transformed(a=0.3737204608882894, b=0.3737204608882894)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='t\u00c9\udaa5\udc28')\nPASS: ascii_average_transformed(s='\u00ba\u00acT99')\nPASS: ascii_average_transformed(s='\ud90c\udfae\ud9fa\uddcf7x\u00eb\ud95b\uded34\udb91\udfb7\u0015\u00fe')\nPASS: ascii_average_transformed(s='INF')\nPASS: ascii_average_transformed(s='Z\u00d2\u00a4\uda21\uddbf\u0087ez\ud9e9\udf90')\nPASS: ascii_average_transformed(s='O')\nPASS: ascii_average_transformed(s='\udb69\ude53:\u00f9')\nPASS: ascii_average_transformed(s='\u0093\u0088\u00e5\u00a4LC\u00a5\u0010\u0013\u0004')\nPASS: ascii_average_transformed(s='x\ud878\udd52X\u00c9\u0089')\nPASS: ascii_average_transformed(s='\u00af\u00a3}y\u00c3')\nPASS: ascii_average_transformed(s='\u00eah')\nPASS: ascii_average_transformed(s='V\ud825\udfcc\u0094@\u0019\u009c\udb04\udde5\ud982\ude77\u00f1\u000b')\nPASS: ascii_average_transformed(s='e\nx\uda84\udf9ej')\nPASS: ascii_average_transformed(s='9P\u008e\u00e6\u00c2J')\nPASS: ascii_average_transformed(s='\ud83b\ude80\u00f4\u00f3')\nPASS: ascii_average_transformed(s='u\ud815\udc4e\u0099\u0013\u00fc')\nPASS: ascii_average_transformed(s='\uda96\udd0c')\nPASS: ascii_average_transformed(s='\u0010\u000b')\nPASS: ascii_average_transformed(s='T')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[4, 0])\nPASS: list_balance_transformed(nums=[1, 0])\nPASS: list_balance_transformed(nums=[1, 5, 1, 1, 5])\nPASS: list_balance_transformed(nums=[9, 0, 0, 7, 6, 10])\nPASS: list_balance_transformed(nums=[9, 8, 3])\nPASS: list_balance_transformed(nums=[2, 7, 6, 4, 7, 6, 8, 10, 9, 1])\nPASS: list_balance_transformed(nums=[2, 6, 3, 7, 3, 7, 1])\nPASS: list_balance_transformed(nums=[4, 10, 9, 6, 10])\nPASS: list_balance_transformed(nums=[7, 4, 7, 7])\nPASS: list_balance_transformed(nums=[3, 4, 1, 5, 10, 3, 10, 7, 7])\nPASS: list_balance_transformed(nums=[3, 4, 1, 4, 10, 3, 10, 7, 7])\nPASS: list_balance_transformed(nums=[3, 4, 1, 4, 3, 3, 10, 7, 7])\nPASS: list_balance_transformed(nums=[3, 4, 1, 4, 3, 3, 3, 7, 7])\nPASS: list_balance_transformed(nums=[3, 4, 1, 4, 7, 3, 3, 7, 7])\nPASS: list_balance_transformed(nums=[3, 4, 1, 4, 7, 3, 3, 4, 7])\nPASS: list_balance_transformed(nums=[1, 4, 1, 4, 7, 3, 3, 4, 7])\nPASS: list_balance_transformed(nums=[0, 4, 8, 0, 4, 0, 9, 2, 0, 5])\nPASS: list_balance_transformed(nums=[0, 4, 8, 0, 4, 0, 4, 2, 0, 5])\nPASS: list_balance_transformed(nums=[0, 4, 8, 8, 4, 0, 4, 2, 0, 5])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[7])\nPASS: odd_sum_validator_transformed(lst=[7, 4])\nPASS: odd_sum_validator_transformed(lst=[3, 2, 4])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[2, 7, 3, 0, 5, 6, 9, 7, 3, 4])\nPASS: odd_sum_validator_transformed(lst=[9, 9])\nPASS: odd_sum_validator_transformed(lst=[8, 8, 9, 8, 4, 5, 5])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[10, 10, 1])\nPASS: odd_sum_validator_transformed(lst=[5, 2, 7, 1, 6, 6, 0, 2, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[5, 2, 0, 1, 6, 6, 0, 2, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[5, 2, 0, 1, 6, 6, 0, 0, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[6, 2, 0, 1, 6, 6, 0, 0, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[6, 2, 0, 1, 6, 6, 0, 0, 0, 0])\nPASS: odd_sum_validator_transformed(lst=[6, 2, 0, 1, 6, 6, 2, 0, 0, 0])\nPASS: odd_sum_validator_transformed(lst=[6, 2, 0, 1, 6, 6, 0, 0, 6, 0])\nPASS: odd_sum_validator_transformed(lst=[5, 9, 5, 6, 5, 5, 3, 5, 4, 8])\nPASS: odd_sum_validator_transformed(lst=[5, 9, 5, 6, 5, 5, 5, 5, 4, 8])\nPASS: odd_sum_validator_transformed(lst=[5, 5, 5, 6, 5, 5, 5, 5, 4, 8])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='TRUE')\nPASS: string_pattern_score_transformed(s='6')\nPASS: string_pattern_score_transformed(s='\u008f\udbf0\udfddN')\nPASS: string_pattern_score_transformed(s='J\u00a4\u0095')\nPASS: string_pattern_score_transformed(s='\u00b2\ud9a6\ude12\ud8b6\udff0\u00bd\udaa2\udf92')\nPASS: string_pattern_score_transformed(s='\u00cc\u009eQ\u00b2>\u00a5\u00ca\u00ba')\nPASS: string_pattern_score_transformed(s='uh')\nPASS: string_pattern_score_transformed(s='<\u00b7\u00ef\u00f4#')\nPASS: string_pattern_score_transformed(s='T')\nPASS: string_pattern_score_transformed(s='~\u00e2\u00fa')\nPASS: string_pattern_score_transformed(s='\u00d7')\nPASS: string_pattern_score_transformed(s='\u007f\u00d9\u00c0YJ\u0002Q\ud961\udd4e\u00e4\u00af')\nPASS: string_pattern_score_transformed(s='\u00f0\u0006V')\nPASS: string_pattern_score_transformed(s='),C\u00de\u0081>')\nPASS: string_pattern_score_transformed(s='\ud8b0\ude7d')\nPASS: string_pattern_score_transformed(s='\ud873\udc45\udac3\ude6e\udb5d\ude66\u00c6\u0090')\nPASS: string_pattern_score_transformed(s='\u00a0\u00a8A\u00d7\udb83\uddc1\ud873\udf81\u00e9<\uff5b\u009b')\nPASS: string_pattern_score_transformed(s='\udb86\udf65\u0002')\nPASS: string_pattern_score_transformed(s='\u00f1')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[13])\nPASS: sum_until_limit_transformed(nums=[20])\nPASS: sum_until_limit_transformed(nums=[20, 13])\nPASS: sum_until_limit_transformed(nums=[10, 16, 5, 0, 12])\nPASS: sum_until_limit_transformed(nums=[5, 3, 10, 4, 7, 3, 20, 12, 5, 12])\nPASS: sum_until_limit_transformed(nums=[18, 13, 15, 19, 15, 15, 7, 11, 3, 20])\nFAIL: sum_until_limit_transformed(nums=[1, 19, 14, 17, 1, 14, 10, 8, 17, 1])\nPASS: sum_until_limit_transformed(nums=[9, 7, 10, 17])\nFAIL: sum_until_limit_transformed(nums=[7, 20, 13, 16])\nPASS: sum_until_limit_transformed(nums=[5])\nPASS: sum_until_limit_transformed(nums=[18])\nPASS: sum_until_limit_transformed(nums=[20, 10, 18, 13, 6, 10, 20])\nPASS: sum_until_limit_transformed(nums=[10, 10, 18, 13, 6, 10, 20])\nPASS: sum_until_limit_transformed(nums=[10, 18, 18, 13, 6, 10, 20])\nPASS: sum_until_limit_transformed(nums=[10, 18, 10, 13, 6, 10, 20])\nPASS: sum_until_limit_transformed(nums=[10, 18, 10, 13, 6, 10, 18])\nPASS: sum_until_limit_transformed(nums=[10, 6, 10, 13, 6, 10, 18])\nPASS: sum_until_limit_transformed(nums=[10, 6, 10, 13, 18, 10, 18])\nPASS: sum_until_limit_transformed(nums=[8, 7, 6, 2, 14, 18, 12])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[1])\nPASS: count_divisibles_transformed(nums=[8])\nPASS: count_divisibles_transformed(nums=[0, 5])\nPASS: count_divisibles_transformed(nums=[15, 2, 17, 16])\nPASS: count_divisibles_transformed(nums=[8, 12, 9, 14, 1, 3, 12])\nPASS: count_divisibles_transformed(nums=[15])\nPASS: count_divisibles_transformed(nums=[14, 7, 13, 9, 14, 4, 13, 5, 4])\nPASS: count_divisibles_transformed(nums=[7, 4, 4, 3, 17, 5, 3, 19, 8, 5])\nPASS: count_divisibles_transformed(nums=[10, 10])\nPASS: count_divisibles_transformed(nums=[2, 18, 14, 18, 20])\nPASS: count_divisibles_transformed(nums=[14, 18, 14, 18, 20])\nPASS: count_divisibles_transformed(nums=[14, 18, 18, 18, 20])\nPASS: count_divisibles_transformed(nums=[18, 18, 18, 18, 20])\nPASS: count_divisibles_transformed(nums=[18, 18, 18, 18, 18])\nPASS: count_divisibles_transformed(nums=[18, 18])\nPASS: count_divisibles_transformed(nums=[6, 10, 16])\nPASS: count_divisibles_transformed(nums=[10, 10, 16])\nPASS: count_divisibles_transformed(nums=[10, 10, 10])\nPASS: count_divisibles_transformed(nums=[8, 19, 11, 7, 0, 9, 6, 20, 1])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[9])\nPASS: index_weighted_sum_transformed(lst=[10, 7, 5, 5, 4, 5, 0, 5, 10, 9])\nPASS: index_weighted_sum_transformed(lst=[8, 9])\nPASS: index_weighted_sum_transformed(lst=[9, 9])\nPASS: index_weighted_sum_transformed(lst=[9, 4])\nPASS: index_weighted_sum_transformed(lst=[9, 1])\nPASS: index_weighted_sum_transformed(lst=[0, 3, 3, 1, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 1, 4, 0, 3])\nPASS: index_weighted_sum_transformed(lst=[3, 6, 2])\nPASS: index_weighted_sum_transformed(lst=[3, 6, 3])\nPASS: index_weighted_sum_transformed(lst=[3, 3, 3])\nPASS: index_weighted_sum_transformed(lst=[3, 3])\nPASS: index_weighted_sum_transformed(lst=[8, 3, 3])\nPASS: index_weighted_sum_transformed(lst=[7, 7])\nPASS: index_weighted_sum_transformed(lst=[3])\nPASS: index_weighted_sum_transformed(lst=[9, 1, 7, 10, 0, 6])\nPASS: index_weighted_sum_transformed(lst=[9, 1, 1, 10, 0, 6])\nPASS: index_weighted_sum_transformed(lst=[9, 1, 1, 10, 1, 6])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=1)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='.')\nPASS: character_counter_transformed(text='H')\nPASS: character_counter_transformed(text='\u00bc\u0092')\nPASS: character_counter_transformed(text='\u0013g\u0095v&\u001f\u009d\ud9c4\uddb7\u008f\u00d6')\nPASS: character_counter_transformed(text='y\u00e8\u00c3')\nPASS: character_counter_transformed(text='\u00cb')\nPASS: character_counter_transformed(text=' \udb79\ude79\u00d1')\nPASS: character_counter_transformed(text='P')\nPASS: character_counter_transformed(text='NIL')\nPASS: character_counter_transformed(text='Q\u0088\ud9b3\udf2b+\u00acIG5\u0082\u00bd')\nPASS: character_counter_transformed(text='\u00b6')\nPASS: character_counter_transformed(text='F\n\u009f')\nPASS: character_counter_transformed(text='\udb6e\udfc9\u008b:3\u0010\u0007\udb95\ude1f\u00eb&\u0087')\nPASS: character_counter_transformed(text='\u00c9')\nPASS: character_counter_transformed(text='\uda1a\ude4f\u00ef\u009ec-\u00daX\u00b4i\u00c6')\nPASS: character_counter_transformed(text='\u00ca\u00f4\ud86f\ude8d\uda55\udcf8J\u00e4\u009a\u00a7\ud851\uddc0\u008c')\nPASS: character_counter_transformed(text='\u0096\u00b8N')\nPASS: character_counter_transformed(text='\uda36\udeeb\uda66\udde5\u00d5`\u009b\u00c6\u00c7')\nPASS: character_counter_transformed(text='2\u00f9\u0007\u0003\u0084d\u008cS\u0087\u00ba')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[54])\nPASS: rolling_maximum_transformed(values=[54, 97])\nPASS: rolling_maximum_transformed(values=[74, 87, 56, 89])\nPASS: rolling_maximum_transformed(values=[90])\nPASS: rolling_maximum_transformed(values=[61, 38, 34])\nPASS: rolling_maximum_transformed(values=[36, 49, 89, 93, 73])\nPASS: rolling_maximum_transformed(values=[95, 83, 58])\nPASS: rolling_maximum_transformed(values=[19, 7, 10, 27, 36, 68, 24, 27, 1, 89])\nPASS: rolling_maximum_transformed(values=[37, 6, 38, 14, 46, 40, 6, 67, 43, 89])\nPASS: rolling_maximum_transformed(values=[99])\nPASS: rolling_maximum_transformed(values=[9, 92, 40, 51, 25, 47, 42, 16, 99, 21])\nPASS: rolling_maximum_transformed(values=[9, 92, 40, 51, 16, 47, 42, 16, 99, 21])\nPASS: rolling_maximum_transformed(values=[9, 92, 40, 51, 16, 47, 42, 16, 99, 92])\nPASS: rolling_maximum_transformed(values=[9, 9, 40, 51, 16, 47, 42, 16, 99, 92])\nPASS: rolling_maximum_transformed(values=[9, 9, 40, 51, 92, 47, 42, 16, 99, 92])\nPASS: rolling_maximum_transformed(values=[9, 9])\nPASS: rolling_maximum_transformed(values=[14, 77, 34, 54, 10, 55])\nPASS: rolling_maximum_transformed(values=[14, 77, 14, 54, 10, 55])\nPASS: rolling_maximum_transformed(values=[14, 77, 55, 54, 10, 55])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "transform_data": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=53)\nPASS: process_data_transformed(x=54)\nPASS: process_data_transformed(x=74)\nPASS: process_data_transformed(x=72)\nPASS: process_data_transformed(x=15)\nPASS: process_data_transformed(x=93)\nPASS: process_data_transformed(x=28)\nPASS: process_data_transformed(x=2)\nPASS: process_data_transformed(x=12)\nPASS: process_data_transformed(x=78)\nPASS: process_data_transformed(x=33)\nPASS: process_data_transformed(x=44)\nPASS: process_data_transformed(x=38)\nPASS: process_data_transformed(x=65)\nPASS: process_data_transformed(x=66)\nPASS: process_data_transformed(x=95)\nPASS: process_data_transformed(x=9)\nPASS: process_data_transformed(x=35)\nPASS: process_data_transformed(x=57)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=65.23085578356894)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=95.85742960481308)\nPASS: convert_temperature_transformed(c=59.276241005764355)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=0.99999)\nPASS: convert_temperature_transformed(c=6.876842672795228e-85)\nPASS: convert_temperature_transformed(c=2.2250738585072014e-308)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=25.384877019236292)\nPASS: convert_temperature_transformed(c=36.494672456581384)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=0.7122181563093161)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=4.6712874969953e-21)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=2.5006728086361906e-246, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=83.86266994006964, discount_rate=0.7084045516009932)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=123.4891815310019, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=199.99999999999997, discount_rate=0.15574491948198158)\nPASS: calculate_discount_transformed(price=0.15574491948198158, discount_rate=0.15574491948198158)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=0.3516278185930762)\nPASS: calculate_discount_transformed(price=0.3516278185930762, discount_rate=0.3516278185930762)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=0.9999999999999999, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=1.297217256909418e-80, imag=0.0)\nPASS: process_complex_number_transformed(real=1.297217256909418e-80, imag=-1.192092896e-07)\nPASS: process_complex_number_transformed(real=-20.0, imag=19.0)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=-1.5, imag=-2.2250738585e-313)\nPASS: process_complex_number_transformed(real=-1e-05, imag=1.192092896e-07)\nPASS: process_complex_number_transformed(real=0.6800387956871603, imag=5e-324)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=-13.167758761599622)\nPASS: process_complex_number_transformed(real=-6.103515625e-05, imag=-1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=-1.1754943508222875e-38, imag=2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=2.225073858507203e-309, imag=2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=0.0, imag=1.192092896e-07)\nPASS: process_complex_number_transformed(real=1.192092896e-07, imag=1.192092896e-07)\nPASS: process_complex_number_transformed(real=-0.99999, imag=-1.175494351e-38)\nPASS: process_complex_number_transformed(real=-1.175494351e-38, imag=-1.175494351e-38)\nPASS: process_complex_number_transformed(real=-17.548306519066372, imag=-19.624493056081434)\nPASS: process_complex_number_transformed(real=-19.624493056081434, imag=-19.624493056081434)\nPASS: process_complex_number_transformed(real=-5.960464477539063e-08, imag=2.2250738585e-313)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=2.2250738585e-313)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=35)\nPASS: transform_data_transformed(input_value=6)\nPASS: transform_data_transformed(input_value=26)\nPASS: transform_data_transformed(input_value=46)\nPASS: transform_data_transformed(input_value=71)\nPASS: transform_data_transformed(input_value=24)\nPASS: transform_data_transformed(input_value=56)\nPASS: transform_data_transformed(input_value=65)\nPASS: transform_data_transformed(input_value=70)\nPASS: transform_data_transformed(input_value=23)\nPASS: transform_data_transformed(input_value=4)\nPASS: transform_data_transformed(input_value=8)\nPASS: transform_data_transformed(input_value=15)\nPASS: transform_data_transformed(input_value=59)\nPASS: transform_data_transformed(input_value=16)\nPASS: transform_data_transformed(input_value=32)\nPASS: transform_data_transformed(input_value=68)\nPASS: transform_data_transformed(input_value=96)\nPASS: transform_data_transformed(input_value=55)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=15.68283187067796)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=2.971227254044378)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=1.192092896e-07)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=4.356443515223277)\nPASS: circle_area_diff_transformed(r=4.458608915673286)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=1.088758663374736e-141)\nPASS: circle_area_diff_transformed(r=19.124050071096264)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=11, b=1, c=1)\nPASS: triangle_checker_transformed(a=11, b=13, c=11)\nPASS: triangle_checker_transformed(a=13, b=13, c=2)\nPASS: triangle_checker_transformed(a=8, b=8, c=1)\nPASS: triangle_checker_transformed(a=18, b=9, c=4)\nPASS: triangle_checker_transformed(a=13, b=17, c=19)\nPASS: triangle_checker_transformed(a=19, b=19, c=17)\nPASS: triangle_checker_transformed(a=2, b=15, c=6)\nPASS: triangle_checker_transformed(a=2, b=3, c=17)\nPASS: triangle_checker_transformed(a=19, b=17, c=18)\nPASS: triangle_checker_transformed(a=18, b=17, c=18)\nPASS: triangle_checker_transformed(a=18, b=17, c=17)\nPASS: triangle_checker_transformed(a=17, b=17, c=17)\nPASS: triangle_checker_transformed(a=17, b=12, c=3)\nPASS: triangle_checker_transformed(a=17, b=12, c=12)\nPASS: triangle_checker_transformed(a=17, b=12, c=17)\nPASS: triangle_checker_transformed(a=12, b=12, c=17)\nPASS: triangle_checker_transformed(a=12, b=12, c=12)\nPASS: triangle_checker_transformed(a=19, b=4, c=20)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=1.192092896e-07)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=27.4595610845126)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=98.37996489187593)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=21.16854831202451)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=37.149329988303656)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=61.190074802763625)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=6, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=6, b=-1, c=-9)\nPASS: quadratic_discriminant_transformed(a=0, b=8, c=-1)\nPASS: quadratic_discriminant_transformed(a=0, b=3, c=7)\nPASS: quadratic_discriminant_transformed(a=9, b=4, c=4)\nPASS: quadratic_discriminant_transformed(a=-4, b=6, c=-6)\nPASS: quadratic_discriminant_transformed(a=-10, b=-7, c=3)\nPASS: quadratic_discriminant_transformed(a=4, b=9, c=9)\nPASS: quadratic_discriminant_transformed(a=6, b=-9, c=-4)\nPASS: quadratic_discriminant_transformed(a=-9, b=-1, c=4)\nPASS: quadratic_discriminant_transformed(a=4, b=-1, c=4)\nPASS: quadratic_discriminant_transformed(a=4, b=4, c=4)\nPASS: quadratic_discriminant_transformed(a=9, b=7, c=3)\nPASS: quadratic_discriminant_transformed(a=7, b=7, c=3)\nPASS: quadratic_discriminant_transformed(a=7, b=7, c=7)\nPASS: quadratic_discriminant_transformed(a=3, b=-9, c=2)\nPASS: quadratic_discriminant_transformed(a=3, b=-9, c=-9)\nPASS: quadratic_discriminant_transformed(a=3, b=3, c=-9)\nPASS: quadratic_discriminant_transformed(a=-9, b=3, c=-9)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-2.225073858507e-311, y=0.0)\nPASS: vector_norm_transformed(x=-2.225073858507e-311, y=-1e-05)\nPASS: vector_norm_transformed(x=2.2250738585072014e-308, y=1.192092896e-07)\nPASS: vector_norm_transformed(x=-6.292596891455412, y=4.86942884345696)\nPASS: vector_norm_transformed(x=5.960464477539063e-08, y=-5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-0.8180126739240006, y=-9.999999999999998)\nPASS: vector_norm_transformed(x=1.192092896e-07, y=2.00001)\nPASS: vector_norm_transformed(x=-1.1125369292536007e-308, y=9.0)\nPASS: vector_norm_transformed(x=1.5308107797631017e-254, y=-9.999999999999998)\nPASS: vector_norm_transformed(x=0.0, y=-2.00001)\nPASS: vector_norm_transformed(x=1.3349880713494226e-107, y=2.225073858507203e-309)\nPASS: vector_norm_transformed(x=1.3349880713494226e-107, y=1.3349880713494226e-107)\nPASS: vector_norm_transformed(x=0.5, y=-2.225073858507203e-309)\nPASS: vector_norm_transformed(x=0.5, y=0.5)\nPASS: vector_norm_transformed(x=-5e-324, y=-5.525738741284475)\nPASS: vector_norm_transformed(x=-5e-324, y=-5e-324)\nPASS: vector_norm_transformed(x=-0.99999, y=-0.3333333333333333)\nPASS: vector_norm_transformed(x=-0.99999, y=-0.99999)\nPASS: vector_norm_transformed(x=-2.00001, y=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=2.611356606951041)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=0.5)\nPASS: hypotenuse_diff_transformed(a=4.605748265389163, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=0.0, b=1.192092896e-07)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=7.721295636053589)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=0.3113845017005113, b=4.784971660256723e-169)\nPASS: hypotenuse_diff_transformed(a=0.3113845017005113, b=0.3113845017005113)\nPASS: hypotenuse_diff_transformed(a=0.5, b=1.192092896e-07)\nPASS: hypotenuse_diff_transformed(a=0.5, b=0.5)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=1.0)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=0.3792912260347148, b=0.5)\nPASS: hypotenuse_diff_transformed(a=0.3792912260347148, b=0.3792912260347148)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u00dbnV')\nPASS: ascii_average_transformed(s='\u00fcd\ud932\udef2\ud9e8\udcca\u00f2')\nPASS: ascii_average_transformed(s='\u0086l^wf4\udb7e\udde4\u0013\u008f\u00d0')\nPASS: ascii_average_transformed(s='\n_')\nPASS: ascii_average_transformed(s='&\u0017Z\u00965\u009d\uda83\udd8ca\u00c0\u00e5')\nPASS: ascii_average_transformed(s='\ud8e3\ude78')\nPASS: ascii_average_transformed(s='\u0018E\u00fb\u0003\udaa3\udfc3')\nPASS: ascii_average_transformed(s='n?\u00993>\u0004\u00eb\u009b')\nPASS: ascii_average_transformed(s='\u00d0\ud94b\udc13\u00c6\u00dc\u0093\u0011s\udaa7\ude84\ud921\udfcaE')\nPASS: ascii_average_transformed(s='4\u337e\u009e\ud996\udf3c\u00fe$\\\udbed\udcc6\u00bf\ud9e7\udc72')\nPASS: ascii_average_transformed(s='\u00ce\ud970\udf9a\udb6f\udf9f\u001e\u0000\u00bd\u00d1\u0094')\nPASS: ascii_average_transformed(s='\u00c5\udbe8\udfdb\u00ed,\u00e5\ud9c9\udc10')\nPASS: ascii_average_transformed(s='FI\u001c')\nPASS: ascii_average_transformed(s='\u00d6\ud9e6\udf9bV\u001d')\nPASS: ascii_average_transformed(s='\u001c')\nPASS: ascii_average_transformed(s='\u00b7^d6`\u00bd\u00a6\u00ae\u009d')\nPASS: ascii_average_transformed(s='S\u00f4')\nPASS: ascii_average_transformed(s='D\u001c)\u0007')\nPASS: ascii_average_transformed(s='\u00cd|V\u008e_%')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[3, 0])\nPASS: list_balance_transformed(nums=[3, 7])\nPASS: list_balance_transformed(nums=[3, 7, 10, 0])\nPASS: list_balance_transformed(nums=[10, 10, 0, 8, 1, 6, 1, 1, 5])\nPASS: list_balance_transformed(nums=[9, 9])\nPASS: list_balance_transformed(nums=[2, 4])\nPASS: list_balance_transformed(nums=[10, 1, 5, 1, 6])\nPASS: list_balance_transformed(nums=[0, 8, 6, 2, 5, 0, 9, 6, 2])\nPASS: list_balance_transformed(nums=[0, 2, 10, 2, 2])\nPASS: list_balance_transformed(nums=[5, 4, 0, 0, 4, 5, 8, 6, 7, 8])\nPASS: list_balance_transformed(nums=[5, 4, 0, 4, 4, 5, 8, 6, 7, 8])\nPASS: list_balance_transformed(nums=[5, 4, 0, 4, 4, 5, 8, 6, 7, 4])\nPASS: list_balance_transformed(nums=[5, 4, 0, 4, 4, 5, 8, 6, 0, 4])\nPASS: list_balance_transformed(nums=[5, 4, 0, 4, 0, 5, 8, 6, 0, 4])\nPASS: list_balance_transformed(nums=[5, 4, 0, 4, 4, 6, 8, 6, 0, 4])\nPASS: list_balance_transformed(nums=[5, 4, 6, 4, 4, 6, 8, 6, 0, 4])\nPASS: list_balance_transformed(nums=[9, 6, 2, 6, 3])\nPASS: list_balance_transformed(nums=[9, 6, 2, 3, 3])\nPASS: list_balance_transformed(nums=[9, 6, 2, 3])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[1])\nPASS: odd_sum_validator_transformed(lst=[1, 5])\nPASS: odd_sum_validator_transformed(lst=[9, 8, 5, 10, 1, 8, 9, 10, 4, 9])\nPASS: odd_sum_validator_transformed(lst=[10, 8, 6, 8])\nPASS: odd_sum_validator_transformed(lst=[1, 7, 9, 1, 6, 7, 1, 1, 0, 8])\nPASS: odd_sum_validator_transformed(lst=[2, 4, 3])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[5, 4, 7, 3, 10, 1, 1, 1, 10, 4])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[6, 7, 5, 4])\nPASS: odd_sum_validator_transformed(lst=[6, 5, 5, 4])\nPASS: odd_sum_validator_transformed(lst=[6, 5, 5, 5])\nPASS: odd_sum_validator_transformed(lst=[5, 5, 5, 5])\nPASS: odd_sum_validator_transformed(lst=[3, 8, 8, 2, 2])\nPASS: odd_sum_validator_transformed(lst=[3, 8, 8, 8, 2])\nPASS: odd_sum_validator_transformed(lst=[3, 8, 8, 8, 8])\nPASS: odd_sum_validator_transformed(lst=[3, 3, 8, 8, 8])\nPASS: odd_sum_validator_transformed(lst=[8, 3, 8, 8, 8])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='u')\nPASS: string_pattern_score_transformed(s='\u00b0\u008f\u00ed')\nPASS: string_pattern_score_transformed(s='#')\nPASS: string_pattern_score_transformed(s='\u0010q')\nPASS: string_pattern_score_transformed(s='\u0089s\u00ae\u00ab\udb2f\udf75\u0001\udad2\udf84\udb5c\udf32\u00d3\u00d0')\nPASS: string_pattern_score_transformed(s='w')\nPASS: string_pattern_score_transformed(s='\u00e1')\nPASS: string_pattern_score_transformed(s='fP\u335d')\nPASS: string_pattern_score_transformed(s='\u0094\u00d1t\u009cy\u00a0\ud8e5\ude08\u008ca')\nPASS: string_pattern_score_transformed(s='\u00b3')\nPASS: string_pattern_score_transformed(s='\u00ca\udacc\uddb0')\nPASS: string_pattern_score_transformed(s='\u00c0\udad6\uded8\ud904\uddbeO\u001f\uda52\udc43~')\nPASS: string_pattern_score_transformed(s='\u00c3\u0012nT')\nPASS: string_pattern_score_transformed(s='\u00d2\u00c0\u00dd\uda9f\udd2e\u00a0')\nPASS: string_pattern_score_transformed(s='{\u00d4')\nPASS: string_pattern_score_transformed(s='4\u0004\ud801\ude2ef')\nPASS: string_pattern_score_transformed(s='\ud95d\udc422\udb1f\udcbf\u00fb')\nPASS: string_pattern_score_transformed(s='W\u0001\u0080WK\u00b4\u008b\u00ffR\ud9dd\ude9c')\nPASS: string_pattern_score_transformed(s='sm\ud8ca\udfdc\u00a3\u009b\u00a2\u00a5\u000bB\u00c3')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[7])\nPASS: sum_until_limit_transformed(nums=[13])\nPASS: sum_until_limit_transformed(nums=[8, 11, 6, 0, 10, 16, 4, 16])\nPASS: sum_until_limit_transformed(nums=[18, 19, 18, 4, 12, 2, 9, 3, 1, 20])\nPASS: sum_until_limit_transformed(nums=[19])\nFAIL: sum_until_limit_transformed(nums=[17, 20, 13, 6, 0, 2, 10, 0, 11, 16])\nPASS: sum_until_limit_transformed(nums=[17])\nPASS: sum_until_limit_transformed(nums=[10, 17, 3, 0, 12, 17, 19])\nPASS: sum_until_limit_transformed(nums=[18])\nPASS: sum_until_limit_transformed(nums=[3, 2, 0])\nPASS: sum_until_limit_transformed(nums=[3])\nPASS: sum_until_limit_transformed(nums=[7, 2])\nPASS: sum_until_limit_transformed(nums=[2, 2])\nPASS: sum_until_limit_transformed(nums=[19, 13, 20, 13, 13, 16, 13, 3, 4])\nPASS: sum_until_limit_transformed(nums=[19, 13, 4, 13, 13, 16, 13, 3, 4])\nPASS: sum_until_limit_transformed(nums=[19, 13, 4, 13, 16, 16, 13, 3, 4])\nPASS: sum_until_limit_transformed(nums=[16, 13, 4, 13, 16, 16, 13, 3, 4])\nPASS: sum_until_limit_transformed(nums=[16, 13, 4, 13, 16, 16, 13, 16, 4])\nPASS: sum_until_limit_transformed(nums=[16])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[10])\nPASS: count_divisibles_transformed(nums=[10, 1])\nPASS: count_divisibles_transformed(nums=[10, 1, 13, 13])\nPASS: count_divisibles_transformed(nums=[20])\nPASS: count_divisibles_transformed(nums=[13, 7, 13, 9, 10, 16, 10, 12, 0])\nPASS: count_divisibles_transformed(nums=[19, 9, 7, 5, 4, 13, 0, 6, 4])\nPASS: count_divisibles_transformed(nums=[11])\nPASS: count_divisibles_transformed(nums=[18, 5, 16, 10, 8, 18, 7, 16, 19, 11])\nPASS: count_divisibles_transformed(nums=[20, 6, 10, 13, 4])\nPASS: count_divisibles_transformed(nums=[11, 18, 14, 16, 20, 10, 16])\nPASS: count_divisibles_transformed(nums=[11, 18, 14, 16, 20, 16, 16])\nPASS: count_divisibles_transformed(nums=[11, 18, 14, 16, 20, 14, 16])\nPASS: count_divisibles_transformed(nums=[16, 18, 14, 16, 20, 14, 16])\nPASS: count_divisibles_transformed(nums=[14, 18, 14, 16, 20, 14, 16])\nPASS: count_divisibles_transformed(nums=[14, 18, 14, 14, 20, 14, 16])\nPASS: count_divisibles_transformed(nums=[14, 20, 14, 14, 20, 14, 16])\nPASS: count_divisibles_transformed(nums=[1, 7, 13])\nPASS: count_divisibles_transformed(nums=[6, 13, 3, 16, 2, 10, 18, 7, 8, 4])\nPASS: count_divisibles_transformed(nums=[6, 13, 3, 16, 2, 10, 2, 7, 8, 4])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[10, 4])\nPASS: index_weighted_sum_transformed(lst=[7])\nPASS: index_weighted_sum_transformed(lst=[6, 7, 0])\nPASS: index_weighted_sum_transformed(lst=[7, 3, 10, 8, 4, 5, 6, 5, 7, 5])\nPASS: index_weighted_sum_transformed(lst=[2, 9, 5, 3, 1, 6, 6, 7, 5])\nPASS: index_weighted_sum_transformed(lst=[4, 3])\nPASS: index_weighted_sum_transformed(lst=[0, 4, 4, 8, 10, 6])\nPASS: index_weighted_sum_transformed(lst=[8, 10, 0, 0, 8, 6, 3, 1, 2, 0])\nPASS: index_weighted_sum_transformed(lst=[7, 8])\nPASS: index_weighted_sum_transformed(lst=[7, 7])\nPASS: index_weighted_sum_transformed(lst=[9, 10])\nPASS: index_weighted_sum_transformed(lst=[10, 10])\nPASS: index_weighted_sum_transformed(lst=[4])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[9])\nPASS: index_weighted_sum_transformed(lst=[5, 4, 2, 10])\nPASS: index_weighted_sum_transformed(lst=[4, 4, 2, 10])\nPASS: index_weighted_sum_transformed(lst=[10, 4, 2, 10])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=5)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00ed\u0000\u00a8<\ud9a1\ude91\u0002\u00ba')\nPASS: character_counter_transformed(text='\u00ea')\nPASS: character_counter_transformed(text='\u00bf\u00ce\u00bd\u00c4\u0080\ud940\udcbdi\ud810\udc00')\nPASS: character_counter_transformed(text='\u009d\ud84e\udd65\u0017\u000f')\nPASS: character_counter_transformed(text='5\u0083\udb04\udf4c')\nPASS: character_counter_transformed(text='Y}p\uda55\udd14F\u00a6\u0097\u00ef\u0082\u000e')\nPASS: character_counter_transformed(text='\u00b7\u00a2>')\nPASS: character_counter_transformed(text='\u001f\udbe5\udc50\udba9\udc8b\udbbd\udcd5\u009f')\nPASS: character_counter_transformed(text='\u00cc\udad3\ude28\u009cO')\nPASS: character_counter_transformed(text='\u001b\udaff\udfddy')\nPASS: character_counter_transformed(text='\udb3e\udeb3[\u00d0i\udadd\udcf5')\nPASS: character_counter_transformed(text='\u1c97\u0011')\nPASS: character_counter_transformed(text='\u00fb\ud9bd\udc03qYB\ud90c\udfce\u0082\u007f\u00c6\ud85b\udd6a')\nPASS: character_counter_transformed(text='.I6\ud97b\ude94\u00c7\u00a3')\nPASS: character_counter_transformed(text='\u00f1\u00e0;\u008b\udab2\udc20\u00d0c\u4f16')\nPASS: character_counter_transformed(text='\u0092')\nPASS: character_counter_transformed(text='<')\nPASS: character_counter_transformed(text='\ud8f6\udfe5$\udb8e\udff7\ua78b\u00f7\u00f0\u0094\t\u00ba\u008c')\nPASS: character_counter_transformed(text='\ud9f5\udc62')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[92])\nPASS: rolling_maximum_transformed(values=[36])\nPASS: rolling_maximum_transformed(values=[75, 47, 2, 48])\nPASS: rolling_maximum_transformed(values=[1, 67, 43, 95, 78, 66, 60, 77, 72, 98])\nPASS: rolling_maximum_transformed(values=[48, 11])\nPASS: rolling_maximum_transformed(values=[49, 94])\nPASS: rolling_maximum_transformed(values=[38, 38, 43, 16, 89, 13])\nPASS: rolling_maximum_transformed(values=[47, 94, 67, 49, 36, 39, 12, 71, 86, 53])\nPASS: rolling_maximum_transformed(values=[81, 18, 81, 65, 73, 89, 24, 15])\nPASS: rolling_maximum_transformed(values=[100, 89, 93, 36])\nPASS: rolling_maximum_transformed(values=[36, 89, 93, 36])\nPASS: rolling_maximum_transformed(values=[89, 89, 93, 36])\nPASS: rolling_maximum_transformed(values=[89, 89, 93, 89])\nPASS: rolling_maximum_transformed(values=[89, 93, 93, 89])\nPASS: rolling_maximum_transformed(values=[89, 93, 89, 89])\nPASS: rolling_maximum_transformed(values=[93, 93, 93, 89])\nPASS: rolling_maximum_transformed(values=[53, 11, 31, 94, 34, 98])\nPASS: rolling_maximum_transformed(values=[94, 11, 31, 94, 34, 98])\nPASS: rolling_maximum_transformed(values=[94, 11, 31, 11, 34, 98])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "circle_area_diff": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=73)\nPASS: process_data_transformed(x=4)\nPASS: process_data_transformed(x=13)\nPASS: process_data_transformed(x=91)\nPASS: process_data_transformed(x=15)\nPASS: process_data_transformed(x=51)\nPASS: process_data_transformed(x=26)\nPASS: process_data_transformed(x=28)\nPASS: process_data_transformed(x=39)\nPASS: process_data_transformed(x=34)\nPASS: process_data_transformed(x=46)\nPASS: process_data_transformed(x=79)\nPASS: process_data_transformed(x=43)\nPASS: process_data_transformed(x=93)\nPASS: process_data_transformed(x=74)\nPASS: process_data_transformed(x=62)\nPASS: process_data_transformed(x=7)\nPASS: process_data_transformed(x=31)\nPASS: process_data_transformed(x=76)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=57.61545990033509)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=40.21751805804675)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=0.99999)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=75.90695569996512)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=193.59533690619384, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=193.59533690619384, discount_rate=3.0236775048160433e-41)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=2.2891909455243806e-292)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=0.497515707663997)\nPASS: calculate_discount_transformed(price=144.65069541907963, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=199.99999999999997, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=199.99999999999997, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=0.9106830387934428)\nPASS: calculate_discount_transformed(price=0.9106830387934428, discount_rate=0.9106830387934428)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=0.0008267290561152498)\nPASS: calculate_discount_transformed(price=0.0008267290561152498, discount_rate=0.0008267290561152498)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=0.39997196515859657)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=1.192092896e-07, imag=0.0)\nPASS: process_complex_number_transformed(real=1.192092896e-07, imag=0.3333333333333333)\nPASS: process_complex_number_transformed(real=-1.175494351e-38, imag=-1.192092896e-07)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=9.09841166690089)\nPASS: process_complex_number_transformed(real=-18.127980562392246, imag=-2.00001)\nPASS: process_complex_number_transformed(real=2.220446049250313e-16, imag=-19.0)\nPASS: process_complex_number_transformed(real=-19.999999999999996, imag=-20.0)\nPASS: process_complex_number_transformed(real=1.9, imag=1.5)\nPASS: process_complex_number_transformed(real=-1.9, imag=9.42786367079821)\nPASS: process_complex_number_transformed(real=-2.225073858507e-311, imag=19.999999999999996)\nPASS: process_complex_number_transformed(real=-2.225073858507e-311, imag=-2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-1e-05, imag=-1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=-1e-05, imag=-1e-05)\nPASS: process_complex_number_transformed(real=3.6816942985286936, imag=1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=3.6816942985286936, imag=3.6816942985286936)\nPASS: process_complex_number_transformed(real=1.1754943508222875e-38, imag=19.999999999999996)\nPASS: process_complex_number_transformed(real=19.999999999999996, imag=19.999999999999996)\nPASS: process_complex_number_transformed(real=1.5, imag=-6.103515625e-05)\nPASS: process_complex_number_transformed(real=1.5, imag=1.5)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=36)\nPASS: transform_data_transformed(input_value=83)\nPASS: transform_data_transformed(input_value=47)\nPASS: transform_data_transformed(input_value=75)\nPASS: transform_data_transformed(input_value=24)\nPASS: transform_data_transformed(input_value=23)\nPASS: transform_data_transformed(input_value=3)\nPASS: transform_data_transformed(input_value=49)\nPASS: transform_data_transformed(input_value=88)\nPASS: transform_data_transformed(input_value=78)\nPASS: transform_data_transformed(input_value=12)\nPASS: transform_data_transformed(input_value=80)\nPASS: transform_data_transformed(input_value=34)\nPASS: transform_data_transformed(input_value=76)\nPASS: transform_data_transformed(input_value=71)\nPASS: transform_data_transformed(input_value=48)\nPASS: transform_data_transformed(input_value=90)\nPASS: transform_data_transformed(input_value=27)\nPASS: transform_data_transformed(input_value=35)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=1.9213613999027205e-23)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=13.94852474531522)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=11.13934261869492)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=18.916093746358627)\nPASS: circle_area_diff_transformed(r=4.081910820945041)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=1.192092896e-07)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: circle_area_diff_transformed(r=11.06622387073415)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=16, b=1, c=1)\nPASS: triangle_checker_transformed(a=16, b=12, c=12)\nPASS: triangle_checker_transformed(a=4, b=12, c=10)\nPASS: triangle_checker_transformed(a=17, b=20, c=4)\nPASS: triangle_checker_transformed(a=13, b=2, c=14)\nPASS: triangle_checker_transformed(a=16, b=4, c=17)\nPASS: triangle_checker_transformed(a=1, b=19, c=17)\nPASS: triangle_checker_transformed(a=11, b=17, c=6)\nPASS: triangle_checker_transformed(a=3, b=20, c=17)\nPASS: triangle_checker_transformed(a=20, b=18, c=14)\nPASS: triangle_checker_transformed(a=20, b=14, c=14)\nPASS: triangle_checker_transformed(a=14, b=14, c=14)\nPASS: triangle_checker_transformed(a=9, b=13, c=8)\nPASS: triangle_checker_transformed(a=9, b=9, c=8)\nPASS: triangle_checker_transformed(a=8, b=9, c=8)\nPASS: triangle_checker_transformed(a=8, b=8, c=8)\nPASS: triangle_checker_transformed(a=20, b=1, c=2)\nPASS: triangle_checker_transformed(a=20, b=1, c=1)\nPASS: triangle_checker_transformed(a=20, b=20, c=1)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=65.89673908715433)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=6.286917867242703e-46)\nPASS: temperature_offset_transformed(c=53.08153531367438)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=93.21087250474041)\nPASS: temperature_offset_transformed(c=39.18072690605786)\nPASS: temperature_offset_transformed(c=1.192092896e-07)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=5.876977125983053)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=2.203863055269633e-15)\nPASS: temperature_offset_transformed(c=3.659105907560779)\nPASS: temperature_offset_transformed(c=34.59543830897896)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-3, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-3, b=6, c=-3)\nPASS: quadratic_discriminant_transformed(a=-2, b=5, c=6)\nPASS: quadratic_discriminant_transformed(a=4, b=-4, c=-2)\nPASS: quadratic_discriminant_transformed(a=4, b=9, c=-6)\nPASS: quadratic_discriminant_transformed(a=0, b=8, c=-4)\nPASS: quadratic_discriminant_transformed(a=-3, b=-7, c=-2)\nPASS: quadratic_discriminant_transformed(a=-9, b=0, c=-1)\nPASS: quadratic_discriminant_transformed(a=-1, b=-4, c=6)\nPASS: quadratic_discriminant_transformed(a=-1, b=-1, c=-6)\nPASS: quadratic_discriminant_transformed(a=-1, b=-6, c=-6)\nPASS: quadratic_discriminant_transformed(a=-6, b=-6, c=-6)\nPASS: quadratic_discriminant_transformed(a=5, b=1, c=1)\nPASS: quadratic_discriminant_transformed(a=1, b=1, c=1)\nPASS: quadratic_discriminant_transformed(a=-7, b=-10, c=-4)\nPASS: quadratic_discriminant_transformed(a=-7, b=-4, c=-4)\nPASS: quadratic_discriminant_transformed(a=-7, b=-4, c=-7)\nPASS: quadratic_discriminant_transformed(a=-4, b=-4, c=-7)\nPASS: quadratic_discriminant_transformed(a=-4, b=-7, c=-7)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-9.999999999999998, y=0.0)\nPASS: vector_norm_transformed(x=-9.999999999999998, y=-2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=0.0, y=-1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=-7.530401949221561, y=1.175494351e-38)\nPASS: vector_norm_transformed(x=-0.813989501098014, y=-0.0)\nPASS: vector_norm_transformed(x=2.225073858507e-311, y=6.206562014099816)\nPASS: vector_norm_transformed(x=1.1754943508222875e-38, y=2.9889748931210786e-131)\nPASS: vector_norm_transformed(x=1.5, y=-2.225073858507e-311)\nPASS: vector_norm_transformed(x=-1.5, y=-2.220446049250313e-16)\nPASS: vector_norm_transformed(x=-1.1130733433634556e-231, y=-1.175494351e-38)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=-1.175494351e-38)\nPASS: vector_norm_transformed(x=-2.00001, y=1e-05)\nPASS: vector_norm_transformed(x=-2.00001, y=-2.00001)\nPASS: vector_norm_transformed(x=-2.2250738585072014e-308, y=-9.999999999999998)\nPASS: vector_norm_transformed(x=-2.2250738585072014e-308, y=-2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=0.5, y=-2.2250738585e-313)\nPASS: vector_norm_transformed(x=0.5, y=0.5)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=1.401298464324817e-45)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=-1.192092896e-07)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=1.9, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=9.0, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=5.548912694838081, b=1.0188447793030793e-115)\nPASS: hypotenuse_diff_transformed(a=1.9, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=1.5, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=7.515684067299076e-159, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=1.0, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=1.1)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=1.192092896e-07)\nPASS: hypotenuse_diff_transformed(a=4.2765007138457065, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=0.99999)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\udb98\ude74\u00ecf\u001d\u008b\u00d5\u0017')\nPASS: ascii_average_transformed(s='\u0099\u000fyV')\nPASS: ascii_average_transformed(s='\ud8a0\udc09')\nPASS: ascii_average_transformed(s='\u00d6.')\nPASS: ascii_average_transformed(s='\u00cf\u00b6\u00a8w\u00e2\u00e3/\u00b0'\u00bc')\nPASS: ascii_average_transformed(s='\u0017')\nPASS: ascii_average_transformed(s='\ud993\udc04\ud904\ude6d\u00cf\u00f5')\nPASS: ascii_average_transformed(s='\u00c3S')\nPASS: ascii_average_transformed(s='\u023e')\nPASS: ascii_average_transformed(s='True')\nPASS: ascii_average_transformed(s='\u00f6')\nPASS: ascii_average_transformed(s='#')\nPASS: ascii_average_transformed(s='\u0005\udb21\udf15\u00d8x\uda64\udc37\u00b6\u00aa1v\udbea\udee0')\nPASS: ascii_average_transformed(s='C\uda93\udc9c\u00c8\u009e\u0016W\u00a0Q\u00ca\u008f')\nPASS: ascii_average_transformed(s=':\udab3\udc22\u0090')\nPASS: ascii_average_transformed(s='v2\u00d4')\nPASS: ascii_average_transformed(s='\u001b\u00d8\u0001\ud944\udd24;.\u0093')\nPASS: ascii_average_transformed(s='\udb14\udebb\u00ee\ub21e{\ud964\udf6b')\nPASS: ascii_average_transformed(s='\u0010\u001b\u00b0\u009d]\u00da\ud817\udf14\u001d')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[9, 0])\nPASS: list_balance_transformed(nums=[9, 1])\nPASS: list_balance_transformed(nums=[5, 6, 2, 2, 6, 3, 6, 0, 6, 4])\nPASS: list_balance_transformed(nums=[2, 7, 3, 6, 3, 1, 7, 0, 7, 4])\nPASS: list_balance_transformed(nums=[9, 8, 2, 8, 7, 4, 8, 5, 5, 2])\nPASS: list_balance_transformed(nums=[1, 4, 4, 0, 10, 5, 0, 7, 10, 10])\nPASS: list_balance_transformed(nums=[1, 2, 8, 5, 10, 6, 0, 2])\nPASS: list_balance_transformed(nums=[5, 5, 10, 7, 4, 5])\nPASS: list_balance_transformed(nums=[1, 2])\nPASS: list_balance_transformed(nums=[0, 7, 1, 9])\nPASS: list_balance_transformed(nums=[1, 7, 1, 9])\nPASS: list_balance_transformed(nums=[7, 7, 1, 9])\nPASS: list_balance_transformed(nums=[7, 7, 1, 7])\nPASS: list_balance_transformed(nums=[7, 1, 1, 7])\nPASS: list_balance_transformed(nums=[7, 1, 7, 7])\nPASS: list_balance_transformed(nums=[7, 7, 7, 7])\nPASS: list_balance_transformed(nums=[4, 7, 2, 1, 9, 2, 0, 7])\nPASS: list_balance_transformed(nums=[4, 9, 2, 1, 9, 2, 0, 7])\nPASS: list_balance_transformed(nums=[4, 9, 2, 1, 9, 2, 0, 1])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[1])\nPASS: odd_sum_validator_transformed(lst=[9, 6, 8])\nPASS: odd_sum_validator_transformed(lst=[10, 1, 5, 1, 9, 9])\nPASS: odd_sum_validator_transformed(lst=[2, 9, 3, 6, 1, 9, 4, 5, 3, 6])\nPASS: odd_sum_validator_transformed(lst=[1, 0, 6, 10, 8, 4, 1, 9, 7, 5])\nPASS: odd_sum_validator_transformed(lst=[6, 4, 3, 9, 4, 10])\nPASS: odd_sum_validator_transformed(lst=[0, 10, 6, 0, 0, 1, 3, 1, 9, 2])\nPASS: odd_sum_validator_transformed(lst=[1, 10, 6, 10, 9, 0, 2, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[8, 7, 0, 5, 0, 8, 5, 5, 6])\nPASS: odd_sum_validator_transformed(lst=[8, 7, 0, 8, 0, 8, 5, 5, 6])\nPASS: odd_sum_validator_transformed(lst=[8, 7, 0, 8, 0, 8, 5, 7, 6])\nPASS: odd_sum_validator_transformed(lst=[8, 7, 0, 8, 0, 8, 5, 7, 7])\nPASS: odd_sum_validator_transformed(lst=[8, 5, 0, 8, 0, 8, 5, 7, 7])\nPASS: odd_sum_validator_transformed(lst=[8, 5, 7, 8, 0, 8, 5, 7, 7])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[0, 5, 9, 10, 1, 2, 0, 10, 1, 10])\nPASS: odd_sum_validator_transformed(lst=[5, 5, 9, 10, 1, 2, 0, 10, 1, 10])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='~\uaf31\u00d1\u00b5sD\u00b0\u00f0\u0091y')\nPASS: string_pattern_score_transformed(s='\u0095')\nPASS: string_pattern_score_transformed(s='7\u00b3\u00bb&\u00c9\udb6c\udd27\u00a3FD\u00a9')\nPASS: string_pattern_score_transformed(s='\u009c\u00a2Jg\udba1\udc9ePb\u0000')\nPASS: string_pattern_score_transformed(s='A\u00f7zq\u0006')\nPASS: string_pattern_score_transformed(s='\u00cb\ud8a9\udee4\u00fc')\nPASS: string_pattern_score_transformed(s='\u009a\ud87f\udc6f')\nPASS: string_pattern_score_transformed(s='\u00bc'')\nPASS: string_pattern_score_transformed(s='=c\ud89c\udf80\u00df\u00cd\u00be\u0093\u00a9\u00f3\udb76\udfc5')\nPASS: string_pattern_score_transformed(s='\u0018@\u0084A\u00c2\u00f9')\nPASS: string_pattern_score_transformed(s='u\u0000\u00ee\u0084\ud965\uddfb\u00c8\u008b\u0096\u001c\ud95d\udf27')\nPASS: string_pattern_score_transformed(s='\u00ee\ud9e0\udf8b\u0014')\nPASS: string_pattern_score_transformed(s='q\ud894\uded6')\nPASS: string_pattern_score_transformed(s='\u00b8\u001d\u00e3\u00bd\udbb6\udd5c\u00bd')\nPASS: string_pattern_score_transformed(s='0\u009a\u00b9\u00d1\u00fb8N5}')\nPASS: string_pattern_score_transformed(s='\u0089\uda68\ude7e')\nPASS: string_pattern_score_transformed(s='\u008d\ud9a5\udeeb\u00e3\u00ad\u00dc\u00c4:\u00b4\u0004\u00e1')\nPASS: string_pattern_score_transformed(s='\u00ea\ud8aa\udc0c')\nPASS: string_pattern_score_transformed(s='\u001f\u00b2M')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[6])\nPASS: sum_until_limit_transformed(nums=[16])\nPASS: sum_until_limit_transformed(nums=[9, 17, 17, 19, 5, 3])\nPASS: sum_until_limit_transformed(nums=[6, 3, 16, 14, 17, 7, 18, 5, 19, 8])\nFAIL: sum_until_limit_transformed(nums=[6, 13, 17, 14, 0, 7, 15, 16, 20, 15])\nFAIL: sum_until_limit_transformed(nums=[17, 19, 14, 13, 20, 11, 14, 12, 15, 2])\nPASS: sum_until_limit_transformed(nums=[2, 18, 0, 20, 0, 15, 17, 2, 12])\nPASS: sum_until_limit_transformed(nums=[15])\nPASS: sum_until_limit_transformed(nums=[16, 0, 18, 15])\nPASS: sum_until_limit_transformed(nums=[4, 3, 14, 1, 19, 16, 0, 10, 11, 13])\nPASS: sum_until_limit_transformed(nums=[4, 1, 14, 1, 19, 16, 0, 10, 11, 13])\nPASS: sum_until_limit_transformed(nums=[4, 1, 1, 1, 19, 16, 0, 10, 11, 13])\nPASS: sum_until_limit_transformed(nums=[4, 1, 1, 1, 19, 16, 0, 10, 1, 13])\nPASS: sum_until_limit_transformed(nums=[16, 1, 1, 1, 19, 16, 0, 10, 1, 13])\nPASS: sum_until_limit_transformed(nums=[16, 1, 1, 1, 19, 16, 0, 16, 1, 13])\nPASS: sum_until_limit_transformed(nums=[16, 1, 1, 1, 19, 16, 0, 13, 1, 13])\nPASS: sum_until_limit_transformed(nums=[8, 14, 0, 17, 20, 16, 4, 5, 16, 15])\nPASS: sum_until_limit_transformed(nums=[8, 14, 0, 17, 20, 16, 4, 15, 16, 15])\nPASS: sum_until_limit_transformed(nums=[17, 14, 0, 17, 20, 16, 4, 15, 16, 15])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[11])\nPASS: count_divisibles_transformed(nums=[0, 0])\nPASS: count_divisibles_transformed(nums=[0, 1, 6, 19, 8, 0])\nPASS: count_divisibles_transformed(nums=[5, 1, 15])\nPASS: count_divisibles_transformed(nums=[2, 0, 3, 8, 2, 19, 0, 4, 17, 12])\nPASS: count_divisibles_transformed(nums=[8, 2, 1, 15, 16, 16, 4, 17, 17])\nPASS: count_divisibles_transformed(nums=[13, 16, 6, 6, 18, 19, 5, 11, 7, 3])\nPASS: count_divisibles_transformed(nums=[6, 10, 6, 5, 17, 20, 20, 15, 10, 20])\nPASS: count_divisibles_transformed(nums=[8])\nPASS: count_divisibles_transformed(nums=[20, 14, 1, 2])\nPASS: count_divisibles_transformed(nums=[20, 14, 14, 2])\nPASS: count_divisibles_transformed(nums=[20, 14, 14, 20])\nPASS: count_divisibles_transformed(nums=[20, 14, 20, 20])\nPASS: count_divisibles_transformed(nums=[14, 14, 20, 20])\nPASS: count_divisibles_transformed(nums=[14, 14, 14, 20])\nPASS: count_divisibles_transformed(nums=[12, 0, 17, 13, 14, 4, 1, 2, 12, 4])\nPASS: count_divisibles_transformed(nums=[12, 0, 17, 4, 14, 4, 1, 2, 12, 4])\nPASS: count_divisibles_transformed(nums=[4, 0, 17, 4, 14, 4, 1, 2, 12, 4])\nPASS: count_divisibles_transformed(nums=[4, 0, 17, 4, 14, 4, 1, 0, 12, 4])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[5])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[4, 5, 10])\nPASS: index_weighted_sum_transformed(lst=[0, 9, 1, 4, 7, 6, 8, 3, 3, 4])\nPASS: index_weighted_sum_transformed(lst=[4])\nPASS: index_weighted_sum_transformed(lst=[3, 4])\nPASS: index_weighted_sum_transformed(lst=[8, 6, 0, 8, 2, 5, 7])\nPASS: index_weighted_sum_transformed(lst=[10, 6, 6, 8, 8, 4, 9])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[6])\nPASS: index_weighted_sum_transformed(lst=[4, 0])\nPASS: index_weighted_sum_transformed(lst=[4, 4])\nPASS: index_weighted_sum_transformed(lst=[2, 5, 8])\nPASS: index_weighted_sum_transformed(lst=[2, 5, 5])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[6, 5, 5, 10, 8, 8, 6, 3, 9])\nPASS: index_weighted_sum_transformed(lst=[6, 5, 5, 10, 8, 8, 6, 3, 3])\nPASS: index_weighted_sum_transformed(lst=[6, 5, 5, 10, 8, 8, 6, 3, 10])\nPASS: index_weighted_sum_transformed(lst=[4, 6, 9, 0, 8])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=9)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00bd')\nPASS: character_counter_transformed(text='#\ud806\ude3a\u0081')\nPASS: character_counter_transformed(text='C\udb4c\ude51\u0091b')\nPASS: character_counter_transformed(text='+0.0')\nPASS: character_counter_transformed(text='\u00df\ud8d9\udcecI*\udbeb\ude79')\nPASS: character_counter_transformed(text='\u00eb\u0089\u00cc\u0082\u0015\udb85\ude15\u00e2\ud8b3\udfce5X')\nPASS: character_counter_transformed(text='!')\nPASS: character_counter_transformed(text='\u0010`\u0093\u00f3')\nPASS: character_counter_transformed(text='\u008a\u0082\ud8ec\udf40')\nPASS: character_counter_transformed(text='\u001e\u00c3\u00adO\u00fc\u00ea\u00c0/\u009d\u00b1')\nPASS: character_counter_transformed(text='\u023e')\nPASS: character_counter_transformed(text=',')\nPASS: character_counter_transformed(text='\u00f5L')\nPASS: character_counter_transformed(text='\udb58\udd2b\ud97c\udd4b0\ud866\udf3cH-\u00ed')\nPASS: character_counter_transformed(text='None')\nPASS: character_counter_transformed(text='\uda7f\uded4,')\nPASS: character_counter_transformed(text='\u008d\u00de\u00fb=g\ud832\udcc7')\nPASS: character_counter_transformed(text='\u00ef')\nPASS: character_counter_transformed(text='\u00ba\u00d1\u0081\udbf5\udcaaQ')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[24])\nPASS: rolling_maximum_transformed(values=[58])\nPASS: rolling_maximum_transformed(values=[79, 48, 44])\nPASS: rolling_maximum_transformed(values=[41, 60, 24, 94, 83])\nPASS: rolling_maximum_transformed(values=[34, 95, 23, 66, 0, 67, 26, 33, 79, 78])\nPASS: rolling_maximum_transformed(values=[69, 32, 60, 40])\nPASS: rolling_maximum_transformed(values=[40, 23, 57])\nPASS: rolling_maximum_transformed(values=[79])\nPASS: rolling_maximum_transformed(values=[49, 44])\nPASS: rolling_maximum_transformed(values=[65, 60, 33, 97, 43, 25, 74, 8, 98, 9])\nPASS: rolling_maximum_transformed(values=[65, 60, 33, 97, 43, 60, 74, 8, 98, 9])\nPASS: rolling_maximum_transformed(values=[65, 60, 33, 97, 43, 60, 74])\nPASS: rolling_maximum_transformed(values=[65, 60, 33, 60, 43, 60, 74])\nPASS: rolling_maximum_transformed(values=[65, 33, 33, 60, 43, 60, 74])\nPASS: rolling_maximum_transformed(values=[74, 33, 33, 60, 43, 60, 74])\nPASS: rolling_maximum_transformed(values=[74, 74, 33, 60, 43, 60, 74])\nPASS: rolling_maximum_transformed(values=[79, 75, 73, 90, 56, 34, 43, 6, 38, 32])\nPASS: rolling_maximum_transformed(values=[79, 75, 73, 90, 75, 34, 43, 6, 38, 32])\nPASS: rolling_maximum_transformed(values=[79, 75, 73, 90, 75, 34, 38, 6, 38, 32])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "triangle_checker": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=6)\nPASS: process_data_transformed(x=14)\nPASS: process_data_transformed(x=87)\nPASS: process_data_transformed(x=48)\nPASS: process_data_transformed(x=92)\nPASS: process_data_transformed(x=83)\nPASS: process_data_transformed(x=37)\nPASS: process_data_transformed(x=76)\nPASS: process_data_transformed(x=33)\nPASS: process_data_transformed(x=36)\nPASS: process_data_transformed(x=15)\nPASS: process_data_transformed(x=43)\nPASS: process_data_transformed(x=53)\nPASS: process_data_transformed(x=22)\nPASS: process_data_transformed(x=40)\nPASS: process_data_transformed(x=57)\nPASS: process_data_transformed(x=97)\nPASS: process_data_transformed(x=27)\nPASS: process_data_transformed(x=64)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=0.4581184277516527)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=63.96126746714944)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=0.99999)\nPASS: convert_temperature_transformed(c=14.600927522860422)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=93.4556698329446)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=4.304017024861429)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=127.86575838126811, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=127.86575838126811, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=24.92550581604092, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=200.0, discount_rate=0.33378964506417713)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=185.159813816693, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=185.159813816693, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=167.0039405648519, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=167.0039405648519, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=0.9999999999999999, discount_rate=0.9999999999999999)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-1e-05, imag=0.0)\nPASS: process_complex_number_transformed(real=-1e-05, imag=-0.3333333333333333)\nPASS: process_complex_number_transformed(real=20.0, imag=0.0)\nPASS: process_complex_number_transformed(real=20.0, imag=1.9)\nPASS: process_complex_number_transformed(real=0.3333333333333333, imag=1.4584283968580988e-98)\nPASS: process_complex_number_transformed(real=-0.5, imag=-1.9)\nPASS: process_complex_number_transformed(real=1.6425380457824001e-49, imag=4.4360827118442477e-187)\nPASS: process_complex_number_transformed(real=-19.999999999999996, imag=-0.5)\nPASS: process_complex_number_transformed(real=-1.311945724747257e-229, imag=-16.767527781553007)\nPASS: process_complex_number_transformed(real=-0.0, imag=5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=-0.0, imag=-0.0)\nPASS: process_complex_number_transformed(real=5e-324, imag=2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=5e-324, imag=5e-324)\nPASS: process_complex_number_transformed(real=-0.3333333333333333, imag=-19.999999999999996)\nPASS: process_complex_number_transformed(real=-0.3333333333333333, imag=-0.3333333333333333)\nPASS: process_complex_number_transformed(real=-1.1, imag=-20.0)\nPASS: process_complex_number_transformed(real=-20.0, imag=-20.0)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=-1.175494351e-38)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=2.2250738585e-313)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=82)\nPASS: transform_data_transformed(input_value=7)\nPASS: transform_data_transformed(input_value=5)\nPASS: transform_data_transformed(input_value=21)\nPASS: transform_data_transformed(input_value=71)\nPASS: transform_data_transformed(input_value=11)\nPASS: transform_data_transformed(input_value=94)\nPASS: transform_data_transformed(input_value=13)\nPASS: transform_data_transformed(input_value=18)\nPASS: transform_data_transformed(input_value=78)\nPASS: transform_data_transformed(input_value=73)\nPASS: transform_data_transformed(input_value=77)\nPASS: transform_data_transformed(input_value=34)\nPASS: transform_data_transformed(input_value=6)\nPASS: transform_data_transformed(input_value=14)\nPASS: transform_data_transformed(input_value=29)\nPASS: transform_data_transformed(input_value=38)\nPASS: transform_data_transformed(input_value=100)\nPASS: transform_data_transformed(input_value=65)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=2.1775711891649956)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=6.0807710152990655)\nPASS: circle_area_diff_transformed(r=2.1939882805878645)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: circle_area_diff_transformed(r=9.981040292411636)\nPASS: circle_area_diff_transformed(r=1.192092896e-07)\nPASS: circle_area_diff_transformed(r=6.175520818394667)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=5.545043153944055)\nPASS: circle_area_diff_transformed(r=13.968156710198175)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=13, b=1, c=1)\nPASS: triangle_checker_transformed(a=13, b=2, c=15)\nPASS: triangle_checker_transformed(a=9, b=18, c=19)\nPASS: triangle_checker_transformed(a=2, b=20, c=7)\nPASS: triangle_checker_transformed(a=20, b=1, c=18)\nPASS: triangle_checker_transformed(a=3, b=9, c=11)\nPASS: triangle_checker_transformed(a=12, b=3, c=16)\nPASS: triangle_checker_transformed(a=1, b=10, c=17)\nPASS: triangle_checker_transformed(a=6, b=19, c=7)\nPASS: triangle_checker_transformed(a=14, b=2, c=3)\nPASS: triangle_checker_transformed(a=14, b=3, c=3)\nPASS: triangle_checker_transformed(a=14, b=14, c=3)\nPASS: triangle_checker_transformed(a=14, b=14, c=14)\nPASS: triangle_checker_transformed(a=14, b=4, c=18)\nPASS: triangle_checker_transformed(a=4, b=4, c=18)\nPASS: triangle_checker_transformed(a=4, b=4, c=4)\nPASS: triangle_checker_transformed(a=5, b=12, c=16)\nPASS: triangle_checker_transformed(a=5, b=12, c=5)\nPASS: triangle_checker_transformed(a=5, b=5, c=5)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=30.471942474973453)\nPASS: temperature_offset_transformed(c=59.61326531765728)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=91.82203196602165)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=68.46768690100046)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: temperature_offset_transformed(c=8.553202515817844e-154)\nPASS: temperature_offset_transformed(c=0.47158136299112485)\nPASS: temperature_offset_transformed(c=56.37301334714383)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=9, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=9, b=-2, c=3)\nPASS: quadratic_discriminant_transformed(a=1, b=-9, c=-6)\nPASS: quadratic_discriminant_transformed(a=-7, b=7, c=-2)\nPASS: quadratic_discriminant_transformed(a=10, b=9, c=8)\nPASS: quadratic_discriminant_transformed(a=6, b=-8, c=-4)\nPASS: quadratic_discriminant_transformed(a=2, b=10, c=-2)\nPASS: quadratic_discriminant_transformed(a=5, b=3, c=6)\nPASS: quadratic_discriminant_transformed(a=-6, b=-5, c=9)\nPASS: quadratic_discriminant_transformed(a=-1, b=-3, c=-2)\nPASS: quadratic_discriminant_transformed(a=-1, b=-3, c=-3)\nPASS: quadratic_discriminant_transformed(a=-1, b=-1, c=-3)\nPASS: quadratic_discriminant_transformed(a=-3, b=-1, c=-3)\nPASS: quadratic_discriminant_transformed(a=-1, b=-1, c=-1)\nPASS: quadratic_discriminant_transformed(a=10, b=-6, c=10)\nPASS: quadratic_discriminant_transformed(a=-6, b=-6, c=10)\nPASS: quadratic_discriminant_transformed(a=-6, b=-6, c=-6)\nPASS: quadratic_discriminant_transformed(a=-4, b=0, c=9)\nPASS: quadratic_discriminant_transformed(a=9, b=0, c=9)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=1e-05, y=0.0)\nPASS: vector_norm_transformed(x=1e-05, y=-0.5)\nPASS: vector_norm_transformed(x=0.5, y=2.00001)\nPASS: vector_norm_transformed(x=2.2250738585072014e-308, y=-5.960464477539063e-08)\nPASS: vector_norm_transformed(x=1.1754943508222875e-38, y=2.220446049250313e-16)\nPASS: vector_norm_transformed(x=6.103515625e-05, y=0.0)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=-4.7963819418172795)\nPASS: vector_norm_transformed(x=6.117721467136882, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-5.799306988814993, y=-3.866112113470649)\nPASS: vector_norm_transformed(x=-2.00001, y=10.0)\nPASS: vector_norm_transformed(x=10.0, y=10.0)\nPASS: vector_norm_transformed(x=9.999999999999998, y=-5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-5.960464477539063e-08, y=-5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-5.9717339498445146, y=-6.103515625e-05)\nPASS: vector_norm_transformed(x=-6.103515625e-05, y=-6.103515625e-05)\nPASS: vector_norm_transformed(x=2.2250738585072014e-308, y=-0.99999)\nPASS: vector_norm_transformed(x=-0.99999, y=-0.99999)\nPASS: vector_norm_transformed(x=-1.6832938315731288e-227, y=-1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=-1.1754943508222875e-38, y=-1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.0, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=8.76918204096999, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=1e-05)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=4.269923591694405e-158, b=1.9)\nPASS: hypotenuse_diff_transformed(a=0.7096149304112888, b=1e-05)\nPASS: hypotenuse_diff_transformed(a=6.8524714571198455, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=1.9, b=6.3786679104792485)\nPASS: hypotenuse_diff_transformed(a=0.0, b=8.073813556420209)\nPASS: hypotenuse_diff_transformed(a=8.073813556420209, b=8.073813556420209)\nPASS: hypotenuse_diff_transformed(a=7.393063868797319, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=7.393063868797319, b=7.393063868797319)\nPASS: hypotenuse_diff_transformed(a=1.5, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=1.5, b=1.5)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=10.0)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\udb78\ude2a{\udaf9\udff5\udade\udfcf\u00a2X\u0015\u00e3\u00ad\ud92f\ude98')\nPASS: ascii_average_transformed(s='o2\u00b7\u00cd')\nPASS: ascii_average_transformed(s='\\\u00f7zy')\nPASS: ascii_average_transformed(s='\uda21\udf22\u009b|')\nPASS: ascii_average_transformed(s='\u008c\ud848\udf09\ud9c1\udf80z\u0086\u00c4\n\u00c1\u0006\u00a9')\nPASS: ascii_average_transformed(s='l\u00de')\nPASS: ascii_average_transformed(s='\u00cf\u008c\u0007')\nPASS: ascii_average_transformed(s='\u00c0\u00a4=\u00b9\udbd7\uddd0m\u001b\u00de\u000b\u00fb')\nPASS: ascii_average_transformed(s='\u000f\u00e3\ud85b\ude6c\u00b2\ud809\udf58N\u00f6H\u00f9f')\nPASS: ascii_average_transformed(s='\u001b\ud949\uddc5\ud965\udf1e\u00bex')\nPASS: ascii_average_transformed(s='\u00c1')\nPASS: ascii_average_transformed(s='\u00b2,')\nPASS: ascii_average_transformed(s='\ud855\udc79\ud852\udf42\u0088U\u009a\udb45\udcef\udbc6\ude41\u00c7\udb5f\udf5fj')\nPASS: ascii_average_transformed(s='.\ud904\udc63')\nPASS: ascii_average_transformed(s='i\u00d5')\nPASS: ascii_average_transformed(s='^')\nPASS: ascii_average_transformed(s='X')\nPASS: ascii_average_transformed(s='<\u00b0')\nPASS: ascii_average_transformed(s='\u00d9\u00c6\u00a3\u00a5')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[5, 0])\nPASS: list_balance_transformed(nums=[10, 0])\nPASS: list_balance_transformed(nums=[10, 8, 5])\nPASS: list_balance_transformed(nums=[10, 6, 9, 10, 4, 10, 7])\nPASS: list_balance_transformed(nums=[4, 4, 0, 9, 7, 0, 0, 8, 6])\nPASS: list_balance_transformed(nums=[3, 2, 2, 0, 3, 3, 2, 9, 9, 1])\nPASS: list_balance_transformed(nums=[9, 2])\nPASS: list_balance_transformed(nums=[10, 5, 10, 7])\nPASS: list_balance_transformed(nums=[0, 10, 9, 3, 2, 0, 1, 6, 0])\nPASS: list_balance_transformed(nums=[6, 6, 9])\nPASS: list_balance_transformed(nums=[6, 6, 6])\nPASS: list_balance_transformed(nums=[7, 5, 5])\nPASS: list_balance_transformed(nums=[5, 5, 5])\nPASS: list_balance_transformed(nums=[3, 5, 10, 9, 8])\nPASS: list_balance_transformed(nums=[3, 5, 10, 9, 3])\nPASS: list_balance_transformed(nums=[3, 5, 3, 9, 3])\nPASS: list_balance_transformed(nums=[3, 5, 3, 3, 3])\nPASS: list_balance_transformed(nums=[0, 10])\nPASS: list_balance_transformed(nums=[10, 10])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[2, 0, 5, 9, 10, 4, 1, 8, 6, 0])\nPASS: odd_sum_validator_transformed(lst=[8, 9, 8, 0, 0, 0, 9, 7, 5, 3])\nPASS: odd_sum_validator_transformed(lst=[1, 5, 4, 2, 5, 3, 4, 6, 2, 9])\nPASS: odd_sum_validator_transformed(lst=[8, 2, 6, 3, 3])\nPASS: odd_sum_validator_transformed(lst=[8, 10, 2, 5, 2])\nPASS: odd_sum_validator_transformed(lst=[5, 10, 7, 10, 8, 9, 9, 2])\nPASS: odd_sum_validator_transformed(lst=[3, 9, 1, 0, 5, 9, 4, 6, 9, 4])\nPASS: odd_sum_validator_transformed(lst=[7])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[5, 7, 0])\nPASS: odd_sum_validator_transformed(lst=[7, 7, 0])\nPASS: odd_sum_validator_transformed(lst=[0, 7, 0])\nPASS: odd_sum_validator_transformed(lst=[0, 9, 10, 7, 1])\nPASS: odd_sum_validator_transformed(lst=[0, 9, 9, 7, 1])\nPASS: odd_sum_validator_transformed(lst=[0, 9, 9, 9, 1])\nPASS: odd_sum_validator_transformed(lst=[0, 9, 9, 9, 9])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u00d7\u001c')\nPASS: string_pattern_score_transformed(s='\ud822\udc75\ud85c\udd8dg\u00c7\u0093\u00d7\u00e9')\nPASS: string_pattern_score_transformed(s='J\uda8a\udd0d\ud88e\ude2c\u00bd')\nPASS: string_pattern_score_transformed(s='\uda55\udcd9')\nPASS: string_pattern_score_transformed(s='\u0095l\u00a0b\u0002\u00aa\u00bf\u00e4')\nPASS: string_pattern_score_transformed(s='zw\u007f')\nPASS: string_pattern_score_transformed(s='\udaaa\udf2c\ud938\ude50\u0007l')\nPASS: string_pattern_score_transformed(s='\ud82d\udceeF\u0017Yp\"d\u00a7')\nPASS: string_pattern_score_transformed(s='\u0088')\nPASS: string_pattern_score_transformed(s='\u00ac7')\nPASS: string_pattern_score_transformed(s='U\udb1f\udefe')\nPASS: string_pattern_score_transformed(s='\u00ee\u00e0')\nPASS: string_pattern_score_transformed(s='V\u00aa\ud9f3\udcb8\u00dcS')\nPASS: string_pattern_score_transformed(s='\ud97c\udee4\ud8e9\udcdb$')\nPASS: string_pattern_score_transformed(s='\u00f9')\nPASS: string_pattern_score_transformed(s='&\u000e\u00f3')\nPASS: string_pattern_score_transformed(s='\u000b\u00ac\u00ee\ud9e6\udfe1w\uda84\uddd0\u009b\u000b\u00b9s')\nPASS: string_pattern_score_transformed(s='K?\u00aea\u0092')\nPASS: string_pattern_score_transformed(s='D\uda76\udd4a\u00c3\u0016')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[19])\nPASS: sum_until_limit_transformed(nums=[19, 13, 15])\nPASS: sum_until_limit_transformed(nums=[12, 4, 15, 17, 16, 13, 18, 1, 11, 19])\nPASS: sum_until_limit_transformed(nums=[6, 7, 12])\nPASS: sum_until_limit_transformed(nums=[15, 8, 12, 12])\nPASS: sum_until_limit_transformed(nums=[19, 9, 1, 19, 15, 16, 20, 8])\nPASS: sum_until_limit_transformed(nums=[3, 20])\nFAIL: sum_until_limit_transformed(nums=[13, 4, 4, 14, 15, 12, 19, 16, 17, 10])\nPASS: sum_until_limit_transformed(nums=[15])\nPASS: sum_until_limit_transformed(nums=[0, 7, 15, 6, 12, 8, 3])\nPASS: sum_until_limit_transformed(nums=[0, 0, 15, 6, 12, 8, 3])\nPASS: sum_until_limit_transformed(nums=[0, 0, 15, 6, 0, 8, 3])\nPASS: sum_until_limit_transformed(nums=[0, 0, 15, 6, 0, 0, 3])\nPASS: sum_until_limit_transformed(nums=[0, 15, 15, 6, 0, 0, 3])\nPASS: sum_until_limit_transformed(nums=[0, 0, 15, 6, 0, 6, 3])\nPASS: sum_until_limit_transformed(nums=[11, 20, 6, 6])\nPASS: sum_until_limit_transformed(nums=[11, 20, 11, 6])\nPASS: sum_until_limit_transformed(nums=[11, 11, 11, 6])\nPASS: sum_until_limit_transformed(nums=[11, 11, 11, 11])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[10])\nPASS: count_divisibles_transformed(nums=[4])\nPASS: count_divisibles_transformed(nums=[18])\nPASS: count_divisibles_transformed(nums=[3, 14, 11, 15, 2, 11, 11, 2])\nPASS: count_divisibles_transformed(nums=[17, 14])\nPASS: count_divisibles_transformed(nums=[6, 2, 8, 1, 19, 14])\nPASS: count_divisibles_transformed(nums=[16, 16, 6, 8, 14, 7, 5, 11, 20, 17])\nPASS: count_divisibles_transformed(nums=[9, 12, 0, 3, 3, 10])\nPASS: count_divisibles_transformed(nums=[8, 16, 9, 7, 16, 4, 18])\nPASS: count_divisibles_transformed(nums=[13, 17, 0, 13, 11])\nPASS: count_divisibles_transformed(nums=[13, 17, 0, 13, 17])\nPASS: count_divisibles_transformed(nums=[17, 17, 0, 13, 17])\nPASS: count_divisibles_transformed(nums=[17, 17, 17, 13, 17])\nPASS: count_divisibles_transformed(nums=[17, 17, 17, 13, 13])\nPASS: count_divisibles_transformed(nums=[1, 4, 11, 17, 3])\nPASS: count_divisibles_transformed(nums=[17, 4, 11, 17, 3])\nPASS: count_divisibles_transformed(nums=[17, 4, 11, 17, 11])\nPASS: count_divisibles_transformed(nums=[17, 4, 17, 17, 11])\nPASS: count_divisibles_transformed(nums=[17, 17, 11, 17, 11])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[5])\nPASS: index_weighted_sum_transformed(lst=[9])\nPASS: index_weighted_sum_transformed(lst=[0, 7, 6])\nPASS: index_weighted_sum_transformed(lst=[0, 0, 4])\nPASS: index_weighted_sum_transformed(lst=[10, 9, 2, 9, 7])\nPASS: index_weighted_sum_transformed(lst=[9, 7])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[7])\nPASS: index_weighted_sum_transformed(lst=[10, 3])\nPASS: index_weighted_sum_transformed(lst=[9, 1, 4, 1, 7, 7, 7])\nPASS: index_weighted_sum_transformed(lst=[9, 1, 7, 1, 7, 7, 7])\nPASS: index_weighted_sum_transformed(lst=[9, 1, 7, 7, 7, 7, 7])\nPASS: index_weighted_sum_transformed(lst=[1, 1, 7, 7, 7, 7, 7])\nPASS: index_weighted_sum_transformed(lst=[7, 7, 4, 5, 4])\nPASS: index_weighted_sum_transformed(lst=[7, 4, 4, 5, 4])\nPASS: index_weighted_sum_transformed(lst=[7, 4, 4])\nPASS: index_weighted_sum_transformed(lst=[7, 4])\nPASS: index_weighted_sum_transformed(lst=[1])\nPASS: index_weighted_sum_transformed(lst=[3, 4, 5, 10, 0, 8, 3, 6])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=10)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\udbf4\udd28\ud89f\udc51E&\udad5\udd2d\u00f8\u00a2')\nPASS: character_counter_transformed(text='\u00cf\u0014\u009e\u00f4\udb81\udd01\udacd\udee1F\u00ee+\u009e')\nPASS: character_counter_transformed(text='R\udb9b\uddd7\u000b\u009b\u0003\u0019\u00f3\u000f\u0001')\nPASS: character_counter_transformed(text='\u0011\u009bb ')\nPASS: character_counter_transformed(text='\u00ed\ud8a5\ude74\ud9bf\ude28\u0098\u0000b\u000bj\u0002\ud938\udcf9')\nPASS: character_counter_transformed(text='?\u008c\u001d\f\u00d9\ud95f\udda7\u00b0\u00cf\u0091\u00c7')\nPASS: character_counter_transformed(text='\u00e5')\nPASS: character_counter_transformed(text='\u009aK2\u0099')\nPASS: character_counter_transformed(text='\ud9ec\udd4e')\nPASS: character_counter_transformed(text='\u0095')\nPASS: character_counter_transformed(text='KW\u00eb\u00a5 $\t\u00e8\uda7f\udd98')\nPASS: character_counter_transformed(text='\u0006p$\u00afw(\u00f2')\nPASS: character_counter_transformed(text='\u00f6\u0013\u00ddLm\udbfc\udeb8v\u0081\u009a')\nPASS: character_counter_transformed(text='\u0095\udb64\udd5d\udb78\udd7c\u00dfJ')\nPASS: character_counter_transformed(text='\u00d0\u009a\u009d\u0019\u0083')\nPASS: character_counter_transformed(text='x\ud911\udd10\u00c8')\nPASS: character_counter_transformed(text='\udb8c\udfc5\u00da\ud9b6\ude75\u00c0\u00d0\ud91e\udca1')\nPASS: character_counter_transformed(text='\u00b9j\u00d9\u00ec\u00bd\ud872\udd2e\"\u00f9\u00ba\u000b')\nPASS: character_counter_transformed(text='\uda18\udffd\u00c3')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[51])\nPASS: rolling_maximum_transformed(values=[40])\nPASS: rolling_maximum_transformed(values=[28, 68, 42, 88, 57])\nPASS: rolling_maximum_transformed(values=[49, 64, 86])\nPASS: rolling_maximum_transformed(values=[94, 84, 100, 81])\nPASS: rolling_maximum_transformed(values=[75, 0, 26, 52, 65, 24, 0, 75, 83, 89])\nPASS: rolling_maximum_transformed(values=[52])\nPASS: rolling_maximum_transformed(values=[17, 57, 14, 56, 68, 89, 38])\nPASS: rolling_maximum_transformed(values=[52, 96, 93, 74, 24, 48, 28, 2, 39, 84])\nPASS: rolling_maximum_transformed(values=[43])\nPASS: rolling_maximum_transformed(values=[22])\nPASS: rolling_maximum_transformed(values=[75])\nPASS: rolling_maximum_transformed(values=[18, 95, 79])\nPASS: rolling_maximum_transformed(values=[95, 95, 79])\nPASS: rolling_maximum_transformed(values=[95, 95])\nPASS: rolling_maximum_transformed(values=[95])\nPASS: rolling_maximum_transformed(values=[35, 90, 38, 18, 10, 31, 87])\nPASS: rolling_maximum_transformed(values=[35, 90, 38, 18, 10, 31, 31])\nPASS: rolling_maximum_transformed(values=[35, 90, 38, 18, 10, 31, 10])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "temperature_offset": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=34)\nPASS: process_data_transformed(x=94)\nPASS: process_data_transformed(x=76)\nPASS: process_data_transformed(x=3)\nPASS: process_data_transformed(x=81)\nPASS: process_data_transformed(x=21)\nPASS: process_data_transformed(x=67)\nPASS: process_data_transformed(x=60)\nPASS: process_data_transformed(x=47)\nPASS: process_data_transformed(x=78)\nPASS: process_data_transformed(x=84)\nPASS: process_data_transformed(x=16)\nPASS: process_data_transformed(x=23)\nPASS: process_data_transformed(x=56)\nPASS: process_data_transformed(x=33)\nPASS: process_data_transformed(x=61)\nPASS: process_data_transformed(x=65)\nPASS: process_data_transformed(x=51)\nPASS: process_data_transformed(x=79)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=43.752859234432314)\nPASS: convert_temperature_transformed(c=17.840803934543462)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=85.43178256287862)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=14.444243185083531)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=1.7697754277915533e-277)\nPASS: convert_temperature_transformed(c=88.01301934746616)\nPASS: convert_temperature_transformed(c=2.7633286545277037e-232)\nPASS: convert_temperature_transformed(c=19.60146899578022)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.5, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=0.4549252906394955)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=200.0, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=200.0, discount_rate=0.27956966317875326)\nPASS: calculate_discount_transformed(price=0.27956966317875326, discount_rate=0.27956966317875326)\nPASS: calculate_discount_transformed(price=77.24310461176664, discount_rate=2.9834862918121053e-123)\nPASS: calculate_discount_transformed(price=77.24310461176664, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=199.99999999999997, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.9752026474622117)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.5473121781437064)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=0.0)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-20.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-20.0, imag=0.5)\nPASS: process_complex_number_transformed(real=-2.0382642372143816e-260, imag=0.3333333333333333)\nPASS: process_complex_number_transformed(real=-6.103515625e-05, imag=2.00001)\nPASS: process_complex_number_transformed(real=-1.1754943508222875e-38, imag=2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-14.345461811723226, imag=-2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=1.175494351e-38, imag=1.5)\nPASS: process_complex_number_transformed(real=5.960464477539063e-08, imag=-0.3333333333333333)\nPASS: process_complex_number_transformed(real=-2.220446049250313e-16, imag=0.0)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=1.192092896e-07)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=2.2250738585e-313)\nPASS: process_complex_number_transformed(real=16.552741331089905, imag=2.225073858507e-311)\nPASS: process_complex_number_transformed(real=16.552741331089905, imag=16.552741331089905)\nPASS: process_complex_number_transformed(real=8.180011697098305, imag=19.999999999999996)\nPASS: process_complex_number_transformed(real=19.999999999999996, imag=19.999999999999996)\nPASS: process_complex_number_transformed(real=-3.466926148180601, imag=4.753119872057309e-56)\nPASS: process_complex_number_transformed(real=4.753119872057309e-56, imag=4.753119872057309e-56)\nPASS: process_complex_number_transformed(real=2.225073858507e-311, imag=1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=2.225073858507e-311, imag=2.225073858507e-311)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=88)\nPASS: transform_data_transformed(input_value=11)\nPASS: transform_data_transformed(input_value=6)\nPASS: transform_data_transformed(input_value=50)\nPASS: transform_data_transformed(input_value=70)\nPASS: transform_data_transformed(input_value=73)\nPASS: transform_data_transformed(input_value=42)\nPASS: transform_data_transformed(input_value=77)\nPASS: transform_data_transformed(input_value=28)\nPASS: transform_data_transformed(input_value=99)\nPASS: transform_data_transformed(input_value=72)\nPASS: transform_data_transformed(input_value=51)\nPASS: transform_data_transformed(input_value=96)\nPASS: transform_data_transformed(input_value=34)\nPASS: transform_data_transformed(input_value=2)\nPASS: transform_data_transformed(input_value=46)\nPASS: transform_data_transformed(input_value=25)\nPASS: transform_data_transformed(input_value=64)\nPASS: transform_data_transformed(input_value=53)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=1.814123684035929)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=5.343566171488022)\nPASS: circle_area_diff_transformed(r=5.786263000785224)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: circle_area_diff_transformed(r=1.192092896e-07)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=13.016625652651308)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=3.2607483485013444e-06)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=12, b=1, c=1)\nPASS: triangle_checker_transformed(a=12, b=17, c=4)\nPASS: triangle_checker_transformed(a=10, b=12, c=3)\nPASS: triangle_checker_transformed(a=15, b=11, c=18)\nPASS: triangle_checker_transformed(a=18, b=18, c=2)\nPASS: triangle_checker_transformed(a=9, b=6, c=8)\nPASS: triangle_checker_transformed(a=1, b=3, c=13)\nPASS: triangle_checker_transformed(a=2, b=6, c=20)\nPASS: triangle_checker_transformed(a=19, b=19, c=10)\nPASS: triangle_checker_transformed(a=20, b=11, c=18)\nPASS: triangle_checker_transformed(a=18, b=11, c=18)\nPASS: triangle_checker_transformed(a=11, b=11, c=18)\nPASS: triangle_checker_transformed(a=11, b=11, c=11)\nPASS: triangle_checker_transformed(a=16, b=9, c=2)\nPASS: triangle_checker_transformed(a=2, b=9, c=2)\nPASS: triangle_checker_transformed(a=2, b=9, c=9)\nPASS: triangle_checker_transformed(a=9, b=9, c=9)\nPASS: triangle_checker_transformed(a=8, b=6, c=6)\nPASS: triangle_checker_transformed(a=6, b=6, c=6)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=44.141257256840404)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=22.825181544418044)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=83.07196461050074)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=74.25447716348029)\nPASS: temperature_offset_transformed(c=0.8849933061866102)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-1, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-1, b=-3, c=-4)\nPASS: quadratic_discriminant_transformed(a=-4, b=4, c=-8)\nPASS: quadratic_discriminant_transformed(a=-2, b=2, c=-1)\nPASS: quadratic_discriminant_transformed(a=4, b=-9, c=-3)\nPASS: quadratic_discriminant_transformed(a=3, b=-1, c=6)\nPASS: quadratic_discriminant_transformed(a=-10, b=-2, c=-4)\nPASS: quadratic_discriminant_transformed(a=3, b=6, c=8)\nPASS: quadratic_discriminant_transformed(a=-1, b=1, c=6)\nPASS: quadratic_discriminant_transformed(a=-6, b=3, c=8)\nPASS: quadratic_discriminant_transformed(a=8, b=3, c=8)\nPASS: quadratic_discriminant_transformed(a=8, b=8, c=8)\nPASS: quadratic_discriminant_transformed(a=0, b=-6, c=6)\nPASS: quadratic_discriminant_transformed(a=-6, b=-6, c=6)\nPASS: quadratic_discriminant_transformed(a=-6, b=-6, c=-6)\nPASS: quadratic_discriminant_transformed(a=-3, b=-7, c=-8)\nPASS: quadratic_discriminant_transformed(a=-8, b=-7, c=-8)\nPASS: quadratic_discriminant_transformed(a=-8, b=-7, c=-7)\nPASS: quadratic_discriminant_transformed(a=-7, b=-7, c=-7)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=6.104444683450964, y=0.0)\nPASS: vector_norm_transformed(x=6.104444683450964, y=-0.45048675613129596)\nPASS: vector_norm_transformed(x=0.0, y=8.370363001198701)\nPASS: vector_norm_transformed(x=1.1, y=-2.225073858507203e-309)\nPASS: vector_norm_transformed(x=-2.2250738585e-313, y=2.2250738585e-313)\nPASS: vector_norm_transformed(x=-0.5, y=-3.7776426426444134)\nPASS: vector_norm_transformed(x=0.5, y=-3.8289139267119223)\nPASS: vector_norm_transformed(x=-2.00001, y=-6.396357202156491)\nPASS: vector_norm_transformed(x=2.00001, y=1.5)\nPASS: vector_norm_transformed(x=-2.2250738585e-313, y=-1.5)\nPASS: vector_norm_transformed(x=-2.2250738585e-313, y=-2.2250738585e-313)\nPASS: vector_norm_transformed(x=5.960464477539063e-08, y=6.103515625e-05)\nPASS: vector_norm_transformed(x=6.103515625e-05, y=6.103515625e-05)\nPASS: vector_norm_transformed(x=2.593225613691793e-285, y=9.877505178657525)\nPASS: vector_norm_transformed(x=9.877505178657525, y=9.877505178657525)\nPASS: vector_norm_transformed(x=1.192092896e-07, y=-1e-05)\nPASS: vector_norm_transformed(x=1.192092896e-07, y=1.192092896e-07)\nPASS: vector_norm_transformed(x=10.0, y=-5.814010609411703)\nPASS: vector_norm_transformed(x=-5.814010609411703, y=-5.814010609411703)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=0.0)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=3.233689089397141)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=1.9)\nPASS: hypotenuse_diff_transformed(a=1.5, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=1.1)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=2.32792560541135)\nPASS: hypotenuse_diff_transformed(a=9.21585048467673, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=9.0, b=5.868292266491598)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=5.187906019246356)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=2.5534088241471613e-261, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=2.5534088241471613e-261, b=2.5534088241471613e-261)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=1e-05)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=0.0)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u001b\u00a6\u00b37H\u0080')\nPASS: ascii_average_transformed(s='\uda37\udc23\u0093\u001d\u00a0\u0095[\u007f\u00d3\u00f7\u00e7')\nPASS: ascii_average_transformed(s='fY\n\u00dd\u00ff\u008f\u00d0\u0018')\nPASS: ascii_average_transformed(s='`W\udafb\ude26')\nPASS: ascii_average_transformed(s='I')\nPASS: ascii_average_transformed(s='\u00b4\u00fa\u0018(m\ud989\udd21fT\u00f5')\nPASS: ascii_average_transformed(s='\ud8e1\uddbe\ud9c8\ude5dj\u00a8\uda1a\udeba\\7\u00c7/\u0087')\nPASS: ascii_average_transformed(s='aD\u00805+\u00aa\ud8df\udd27\uda47\udd62')\nPASS: ascii_average_transformed(s='O\u00fb\u00bf')\nPASS: ascii_average_transformed(s='\u00d6\u00b5\u008a\u00eb#*\u00a3\udbd0\udeaa\udaca\udfd4n')\nPASS: ascii_average_transformed(s='\u00eb\u00b7\ud9a5\udf67')\nPASS: ascii_average_transformed(s='\udbdc\ude5d\udb19\udf217\uda71\udfb9e')\nPASS: ascii_average_transformed(s='\uda12\ude75')\nPASS: ascii_average_transformed(s='\u00f2')\nPASS: ascii_average_transformed(s='\u00a5\u008eb~\ud96b\udf8b\u00f9')\nPASS: ascii_average_transformed(s='\u009d')\nPASS: ascii_average_transformed(s='?\u0000\u00b6$\\Y\u00f5\u009d\t')\nPASS: ascii_average_transformed(s='\uda19\udef2\u00a7')\nPASS: ascii_average_transformed(s='QZ\u0092\udbac\udc31\u0002')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[4, 0])\nPASS: list_balance_transformed(nums=[4, 8])\nPASS: list_balance_transformed(nums=[0, 2, 4, 7, 3, 7, 3])\nPASS: list_balance_transformed(nums=[4, 5])\nPASS: list_balance_transformed(nums=[9, 9, 9, 0, 1])\nPASS: list_balance_transformed(nums=[10, 9, 3, 3, 6, 0, 6, 5, 10, 3])\nPASS: list_balance_transformed(nums=[10, 5, 6, 7, 3, 7, 0, 3, 2, 4])\nPASS: list_balance_transformed(nums=[9, 10, 7, 2, 1, 3])\nPASS: list_balance_transformed(nums=[6, 10, 6, 9, 1, 7, 7, 1, 5, 0])\nPASS: list_balance_transformed(nums=[3, 6, 6, 3])\nPASS: list_balance_transformed(nums=[3, 3, 6, 3])\nPASS: list_balance_transformed(nums=[3, 3, 3, 3])\nPASS: list_balance_transformed(nums=[3, 3, 3])\nPASS: list_balance_transformed(nums=[2, 10, 4, 2, 8, 0])\nPASS: list_balance_transformed(nums=[2, 4, 4, 2, 8, 0])\nPASS: list_balance_transformed(nums=[2, 0, 4, 2, 8, 0])\nPASS: list_balance_transformed(nums=[2, 0])\nPASS: list_balance_transformed(nums=[1, 6])\nPASS: list_balance_transformed(nums=[1, 1])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[7])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[9, 1])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[4, 4, 5, 2, 7, 9, 5, 2, 2, 0])\nPASS: odd_sum_validator_transformed(lst=[10, 6])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[2, 10, 6, 10, 8, 7, 9, 1, 5])\nPASS: odd_sum_validator_transformed(lst=[0, 6, 4, 4, 0, 9, 8, 8, 3, 10])\nPASS: odd_sum_validator_transformed(lst=[10, 10, 8])\nPASS: odd_sum_validator_transformed(lst=[10, 10, 10])\nPASS: odd_sum_validator_transformed(lst=[10, 10])\nPASS: odd_sum_validator_transformed(lst=[1, 9, 5, 0, 7, 2, 7, 5, 1, 8])\nPASS: odd_sum_validator_transformed(lst=[1, 9, 5, 0, 7, 2, 7, 5, 1, 1])\nPASS: odd_sum_validator_transformed(lst=[1, 9, 5, 0, 7, 2, 1, 5, 1, 1])\nPASS: odd_sum_validator_transformed(lst=[1, 7, 5, 0, 7, 2, 1, 5, 1, 1])\nPASS: odd_sum_validator_transformed(lst=[1, 7, 5, 0, 5, 2, 1, 5, 1, 1])\nPASS: odd_sum_validator_transformed(lst=[1, 7, 5, 0, 5, 7, 1, 5, 1, 1])\nPASS: odd_sum_validator_transformed(lst=[1, 7, 5, 0, 5, 7, 5, 5, 1, 1])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u0002=')\nPASS: string_pattern_score_transformed(s='\u00f7\u00fb\u009a\u00df\u001d\u0085\u0006R\u00af\u009d')\nPASS: string_pattern_score_transformed(s='undefined')\nPASS: string_pattern_score_transformed(s='\u00c0\u0099\u000f@\u00f3\u00b4\u00f6\u00ae\u0007\u0092')\nPASS: string_pattern_score_transformed(s='E$\ud826\udfb8qZ\udac5\udfde}(\u00b5\u00d8')\nPASS: string_pattern_score_transformed(s='\u00e6\uda4d\udf056\t')\nPASS: string_pattern_score_transformed(s='none')\nPASS: string_pattern_score_transformed(s='\ud923\udf73\udb64\udf9e\u00a37@N\u00a6\u00e6R7')\nPASS: string_pattern_score_transformed(s='F\udb20\udf2e\u00f53\\')\nPASS: string_pattern_score_transformed(s='u\u00cf\u008ea\u0011\u008b\u8303\u00da\udbdf\udc2a\u000b')\nPASS: string_pattern_score_transformed(s='\u00d7\u00b0\udbbc\ude55')\nPASS: string_pattern_score_transformed(s='\u00d9y=\u00a6^\u00fa\u001fQ\uda06\udfdf\ud9bc\udf55')\nPASS: string_pattern_score_transformed(s='F\ud9e4\udfb6\udb75\uddfb\udb64\udfbeR \ud8e8\udc1e\u00f2\"')\nPASS: string_pattern_score_transformed(s='\u00f4P\u00f4%\u0094\u00eb\u00c7')\nPASS: string_pattern_score_transformed(s='\u00ac,\u0094!\ud8a6\ude4c\u00e0\u008d`')\nPASS: string_pattern_score_transformed(s='n]\u0015\ud997\udd4e\u008f\ud9d5\udce5\u00a7$')\nPASS: string_pattern_score_transformed(s='\u0019\u00ec\u00911')\nPASS: string_pattern_score_transformed(s='\u00ba\u00a9?\u00af\ud8e9\udebd{\u00cfx\u009a\u00c4')\nPASS: string_pattern_score_transformed(s='\uda50\ude70\u00c4:c\u00f3\ud8b9\udca4')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[9])\nPASS: sum_until_limit_transformed(nums=[4])\nPASS: sum_until_limit_transformed(nums=[4, 1])\nPASS: sum_until_limit_transformed(nums=[13])\nPASS: sum_until_limit_transformed(nums=[20, 20, 5, 14, 3, 9, 0, 18, 4])\nPASS: sum_until_limit_transformed(nums=[4, 9, 7, 19, 4, 6, 9])\nPASS: sum_until_limit_transformed(nums=[14, 4, 4, 15, 15, 16, 20, 19, 15, 3])\nPASS: sum_until_limit_transformed(nums=[5])\nPASS: sum_until_limit_transformed(nums=[6, 15, 5])\nPASS: sum_until_limit_transformed(nums=[18, 17, 9])\nPASS: sum_until_limit_transformed(nums=[14])\nPASS: sum_until_limit_transformed(nums=[5, 7, 18, 17, 20, 3, 8, 0, 9, 11])\nPASS: sum_until_limit_transformed(nums=[5, 7, 18, 9, 20, 3, 8, 0, 9, 11])\nPASS: sum_until_limit_transformed(nums=[5, 7, 18, 9])\nPASS: sum_until_limit_transformed(nums=[5, 7, 5, 9])\nPASS: sum_until_limit_transformed(nums=[5, 7, 5, 5])\nPASS: sum_until_limit_transformed(nums=[3, 13, 3, 6])\nPASS: sum_until_limit_transformed(nums=[3, 13, 6, 6])\nPASS: sum_until_limit_transformed(nums=[6, 13, 3, 6])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[18])\nPASS: count_divisibles_transformed(nums=[18, 13, 3])\nPASS: count_divisibles_transformed(nums=[12, 16, 3, 8, 15, 2, 12, 8, 12, 1])\nPASS: count_divisibles_transformed(nums=[19, 12, 13, 15, 8, 7, 16, 20, 18, 13])\nPASS: count_divisibles_transformed(nums=[17, 11])\nPASS: count_divisibles_transformed(nums=[17])\nPASS: count_divisibles_transformed(nums=[18, 8, 19])\nPASS: count_divisibles_transformed(nums=[1, 18, 2, 8, 9, 11, 7, 16, 13, 13])\nPASS: count_divisibles_transformed(nums=[10, 19, 20])\nPASS: count_divisibles_transformed(nums=[9, 13, 8, 12, 13, 2, 2, 3])\nPASS: count_divisibles_transformed(nums=[9, 13, 8, 3, 13, 2, 2, 3])\nPASS: count_divisibles_transformed(nums=[9, 13, 8, 3, 13, 3, 2, 3])\nPASS: count_divisibles_transformed(nums=[3, 13, 8, 3, 13, 3, 2, 3])\nPASS: count_divisibles_transformed(nums=[3, 13, 8, 3, 8, 3, 2, 3])\nPASS: count_divisibles_transformed(nums=[3, 13, 8, 3, 8, 3, 3, 3])\nPASS: count_divisibles_transformed(nums=[3, 13, 8, 3, 8, 3, 3, 8])\nPASS: count_divisibles_transformed(nums=[17, 8])\nPASS: count_divisibles_transformed(nums=[8, 8])\nPASS: count_divisibles_transformed(nums=[18, 17, 5, 19, 5, 13, 15, 3, 12, 13])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[8, 6])\nPASS: index_weighted_sum_transformed(lst=[2, 1, 6, 2, 4, 10, 1, 3, 9, 10])\nPASS: index_weighted_sum_transformed(lst=[9, 5, 1, 5, 9, 0, 7, 9, 4, 5])\nPASS: index_weighted_sum_transformed(lst=[5])\nPASS: index_weighted_sum_transformed(lst=[8, 7, 7, 0])\nPASS: index_weighted_sum_transformed(lst=[4, 0, 9, 4, 10, 0, 0, 7, 2, 2])\nPASS: index_weighted_sum_transformed(lst=[8, 1, 9, 3, 6])\nPASS: index_weighted_sum_transformed(lst=[10, 3, 4])\nPASS: index_weighted_sum_transformed(lst=[4])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[10, 9])\nPASS: index_weighted_sum_transformed(lst=[9, 9])\nPASS: index_weighted_sum_transformed(lst=[1, 5])\nPASS: index_weighted_sum_transformed(lst=[1])\nPASS: index_weighted_sum_transformed(lst=[0, 3, 9, 0, 6])\nPASS: index_weighted_sum_transformed(lst=[3, 3, 9, 0, 6])\nPASS: index_weighted_sum_transformed(lst=[3, 3, 6, 0, 6])\nPASS: index_weighted_sum_transformed(lst=[3, 6, 6, 0, 6])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=8)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00b1\u00b1{')\nPASS: character_counter_transformed(text=']\u001a\u00bc9\udaf4\ude2a')\nPASS: character_counter_transformed(text='N\ud98d\udf31J\u0006\udb3c\udf2b \ud921\udebd\udb84\udd53\ud867\uddfb')\nPASS: character_counter_transformed(text='Z')\nPASS: character_counter_transformed(text='\u0080\u0081')\nPASS: character_counter_transformed(text='\ud93c\udc4f\ud858\udefc\udaaa\udd19\u1a3e{')\nPASS: character_counter_transformed(text='LPT1')\nPASS: character_counter_transformed(text='\ud988\udc86>\u00cb\u00d96\u00fa\ud8ee\udda3\u0089\u00b2\ud84a\ude44')\nPASS: character_counter_transformed(text='\ud986\ude71')\nPASS: character_counter_transformed(text='\t\u00fe\udadb\uddf9\u00a0\u00ad9\u001f\u00d6T\u00be')\nPASS: character_counter_transformed(text='\u00e4rs\uda87\udfb9\u009cE\u00e0p\u00daM')\nPASS: character_counter_transformed(text=';}\u0084\u00dd)0')\nPASS: character_counter_transformed(text='\u00e8\uda5e\udc9f\u0087xH')\nPASS: character_counter_transformed(text='g\u00d3l\u24760\u0017\uda6d\udee7\f\u00b2')\nPASS: character_counter_transformed(text='\ud900\ude83')\nPASS: character_counter_transformed(text='\udb89\udeab\u00e2\ub551;\uda48\udf57\u00e7\ud9da\udf46P\u0013+')\nPASS: character_counter_transformed(text='\u00d9w\ud94e\udf45\u001e')\nPASS: character_counter_transformed(text='\u00c3')\nPASS: character_counter_transformed(text='\u00df_')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[63])\nPASS: rolling_maximum_transformed(values=[9])\nPASS: rolling_maximum_transformed(values=[87, 89])\nPASS: rolling_maximum_transformed(values=[46, 19, 29, 51, 89, 54, 81])\nPASS: rolling_maximum_transformed(values=[35, 4])\nPASS: rolling_maximum_transformed(values=[35])\nPASS: rolling_maximum_transformed(values=[66, 34, 75, 52, 48, 13, 26, 78, 77, 56])\nPASS: rolling_maximum_transformed(values=[20, 65, 60, 66, 64, 81, 53, 3, 92, 91])\nPASS: rolling_maximum_transformed(values=[88])\nPASS: rolling_maximum_transformed(values=[87])\nPASS: rolling_maximum_transformed(values=[22])\nPASS: rolling_maximum_transformed(values=[96, 13, 76, 28, 18, 39, 9, 89, 90, 15])\nPASS: rolling_maximum_transformed(values=[96, 13, 76, 28, 18, 39, 9, 89, 90, 90])\nPASS: rolling_maximum_transformed(values=[96, 13, 76, 28, 18, 39, 9, 13, 90, 90])\nPASS: rolling_maximum_transformed(values=[96, 13, 76, 28, 76, 39, 9, 13, 90, 90])\nPASS: rolling_maximum_transformed(values=[28, 13, 76, 28, 76, 39, 9, 13, 90, 90])\nPASS: rolling_maximum_transformed(values=[28, 13, 76, 28, 76, 39, 28, 13, 90, 90])\nPASS: rolling_maximum_transformed(values=[28, 13, 76, 76, 76, 39, 28, 13, 90, 90])\nPASS: rolling_maximum_transformed(values=[23, 92, 55, 10, 80, 42, 71, 66, 0, 88])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "quadratic_discriminant": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=96)\nPASS: process_data_transformed(x=22)\nPASS: process_data_transformed(x=10)\nPASS: process_data_transformed(x=54)\nPASS: process_data_transformed(x=67)\nPASS: process_data_transformed(x=28)\nPASS: process_data_transformed(x=39)\nPASS: process_data_transformed(x=36)\nPASS: process_data_transformed(x=98)\nPASS: process_data_transformed(x=76)\nPASS: process_data_transformed(x=75)\nPASS: process_data_transformed(x=34)\nPASS: process_data_transformed(x=37)\nPASS: process_data_transformed(x=73)\nPASS: process_data_transformed(x=7)\nPASS: process_data_transformed(x=74)\nPASS: process_data_transformed(x=53)\nPASS: process_data_transformed(x=99)\nPASS: process_data_transformed(x=83)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=28.53214421028985)\nPASS: convert_temperature_transformed(c=77.42213109987641)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=2.2250738585072014e-308)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=9.493436665210132e-48)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=5e-324)\nFAIL: convert_temperature_transformed(c=37.79353957474029)\nPASS: convert_temperature_transformed(c=90.32962032710013)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=66.11754806009597)\nPASS: convert_temperature_transformed(c=82.83113290639075)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=0.27387664196165656)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=0.33708635983225804)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=25.236857112064122, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=126.45244264837754, discount_rate=0.6350672919252697)\nPASS: calculate_discount_transformed(price=0.6350672919252697, discount_rate=0.6350672919252697)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.9839995561915111)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=200.0, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=200.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.3333333333333333)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=0.99999)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=16.173237986647003, imag=0.0)\nPASS: process_complex_number_transformed(real=16.173237986647003, imag=-1.5)\nPASS: process_complex_number_transformed(real=-2.2364750792982804, imag=-2.263405810456623e-40)\nPASS: process_complex_number_transformed(real=1.175494351e-38, imag=7.807742855831453)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=16.98796819602706)\nPASS: process_complex_number_transformed(real=-2.225073858507e-311, imag=-1e-05)\nPASS: process_complex_number_transformed(real=-18.528581989429387, imag=-0.3333333333333333)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=-6.103515625e-05)\nPASS: process_complex_number_transformed(real=20.0, imag=2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-1.1, imag=1.192092896e-07)\nPASS: process_complex_number_transformed(real=1.192092896e-07, imag=1.192092896e-07)\nPASS: process_complex_number_transformed(real=-1e-05, imag=5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=5.960464477539063e-08, imag=5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=1e-05, imag=-0.99999)\nPASS: process_complex_number_transformed(real=1e-05, imag=1e-05)\nPASS: process_complex_number_transformed(real=-1.1125369292536007e-308, imag=1.5)\nPASS: process_complex_number_transformed(real=-1.1125369292536007e-308, imag=-1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=-19.0, imag=19.0)\nPASS: process_complex_number_transformed(real=-19.0, imag=-19.0)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=67)\nPASS: transform_data_transformed(input_value=58)\nPASS: transform_data_transformed(input_value=9)\nPASS: transform_data_transformed(input_value=69)\nPASS: transform_data_transformed(input_value=77)\nPASS: transform_data_transformed(input_value=56)\nPASS: transform_data_transformed(input_value=92)\nPASS: transform_data_transformed(input_value=93)\nPASS: transform_data_transformed(input_value=65)\nPASS: transform_data_transformed(input_value=13)\nPASS: transform_data_transformed(input_value=66)\nPASS: transform_data_transformed(input_value=50)\nPASS: transform_data_transformed(input_value=81)\nPASS: transform_data_transformed(input_value=90)\nPASS: transform_data_transformed(input_value=33)\nPASS: transform_data_transformed(input_value=24)\nPASS: transform_data_transformed(input_value=14)\nPASS: transform_data_transformed(input_value=86)\nPASS: transform_data_transformed(input_value=7)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=1.175494351e-38)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: circle_area_diff_transformed(r=12.277642687884793)\nPASS: circle_area_diff_transformed(r=3.5678965049725924)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=12.09411165228876)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=3.977265105958373)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=14.384475809878651)\nPASS: circle_area_diff_transformed(r=3.781296307012357)\nPASS: circle_area_diff_transformed(r=10.895672130053564)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=10, b=1, c=1)\nPASS: triangle_checker_transformed(a=10, b=16, c=10)\nPASS: triangle_checker_transformed(a=6, b=7, c=4)\nPASS: triangle_checker_transformed(a=2, b=10, c=9)\nPASS: triangle_checker_transformed(a=10, b=5, c=11)\nPASS: triangle_checker_transformed(a=15, b=4, c=8)\nPASS: triangle_checker_transformed(a=20, b=12, c=15)\nPASS: triangle_checker_transformed(a=4, b=1, c=9)\nPASS: triangle_checker_transformed(a=18, b=3, c=12)\nPASS: triangle_checker_transformed(a=12, b=4, c=14)\nPASS: triangle_checker_transformed(a=12, b=14, c=14)\nPASS: triangle_checker_transformed(a=12, b=12, c=14)\nPASS: triangle_checker_transformed(a=12, b=12, c=12)\nPASS: triangle_checker_transformed(a=4, b=12, c=15)\nPASS: triangle_checker_transformed(a=4, b=12, c=12)\nPASS: triangle_checker_transformed(a=17, b=4, c=6)\nPASS: triangle_checker_transformed(a=17, b=6, c=6)\nPASS: triangle_checker_transformed(a=17, b=17, c=6)\nPASS: triangle_checker_transformed(a=6, b=17, c=6)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=2.5033941884349266e-69)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=44.43817979495458)\nPASS: temperature_offset_transformed(c=90.48127791228913)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=10.009704624343167)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=83.3116409563803)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=54.9678065977253)\nPASS: temperature_offset_transformed(c=7.693549598721907)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=1, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=1, b=4, c=-5)\nPASS: quadratic_discriminant_transformed(a=-3, b=-5, c=10)\nPASS: quadratic_discriminant_transformed(a=6, b=-10, c=6)\nPASS: quadratic_discriminant_transformed(a=5, b=-7, c=10)\nPASS: quadratic_discriminant_transformed(a=-2, b=-5, c=-8)\nPASS: quadratic_discriminant_transformed(a=-2, b=-2, c=-2)\nPASS: quadratic_discriminant_transformed(a=4, b=-2, c=-4)\nPASS: quadratic_discriminant_transformed(a=8, b=3, c=-1)\nPASS: quadratic_discriminant_transformed(a=3, b=3, c=3)\nPASS: quadratic_discriminant_transformed(a=7, b=-1, c=-3)\nPASS: quadratic_discriminant_transformed(a=7, b=-3, c=-3)\nPASS: quadratic_discriminant_transformed(a=-3, b=-3, c=-3)\nPASS: quadratic_discriminant_transformed(a=-5, b=-5, c=5)\nPASS: quadratic_discriminant_transformed(a=-5, b=-5, c=-5)\nPASS: quadratic_discriminant_transformed(a=-6, b=4, c=-5)\nPASS: quadratic_discriminant_transformed(a=-6, b=-6, c=-5)\nPASS: quadratic_discriminant_transformed(a=-6, b=-6, c=-6)\nPASS: quadratic_discriminant_transformed(a=7, b=10, c=6)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=0.0)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=-0.3333333333333333)\nPASS: vector_norm_transformed(x=-8.316498130741428, y=1.1)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=9.0)\nPASS: vector_norm_transformed(x=-2.225073858507e-311, y=-2.225073858507e-311)\nPASS: vector_norm_transformed(x=9.0, y=4.280619167256418)\nPASS: vector_norm_transformed(x=-1.5, y=1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=-4.209392146453136, y=1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=-1.4392177846821923, y=2.220446049250313e-16)\nPASS: vector_norm_transformed(x=1.401298464324817e-45, y=-6.103515625e-05)\nPASS: vector_norm_transformed(x=1.401298464324817e-45, y=1.401298464324817e-45)\nPASS: vector_norm_transformed(x=0.5, y=-9.0)\nPASS: vector_norm_transformed(x=0.5, y=0.5)\nPASS: vector_norm_transformed(x=1.9, y=-0.5)\nPASS: vector_norm_transformed(x=-0.5, y=-0.5)\nPASS: vector_norm_transformed(x=1.401298464324817e-45, y=2.827867328484535)\nPASS: vector_norm_transformed(x=2.827867328484535, y=2.827867328484535)\nPASS: vector_norm_transformed(x=-0.99999, y=1e-05)\nPASS: vector_norm_transformed(x=-0.99999, y=-0.99999)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=1.0)\nPASS: hypotenuse_diff_transformed(a=1.9610476761129418, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=5.03846607504118, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=1.0)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=0.5, b=1.230790541965503e-168)\nPASS: hypotenuse_diff_transformed(a=1.0, b=3.624139856274136)\nPASS: hypotenuse_diff_transformed(a=5.7008259854275565, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=0.41517434820584015)\nPASS: hypotenuse_diff_transformed(a=0.41517434820584015, b=0.41517434820584015)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=1.786099318967367, b=1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=1.786099318967367, b=1.786099318967367)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=1e-05)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\udaaf\ude71\u00d9\ud9a1\udcda?{V0!\u00da')\nPASS: ascii_average_transformed(s='\ud8b9\uddd0\u0014')\nPASS: ascii_average_transformed(s='\u001b\u00e2\u000e<T\u00e3\u00ab9\u00e7\t')\nPASS: ascii_average_transformed(s='74\ud810\ude30\u0002\ud917\udf5b\u00a4fw\u0003=')\nPASS: ascii_average_transformed(s='q.\u00c4\u0088')\nPASS: ascii_average_transformed(s='X\udb02\udff8#\u009a')\nPASS: ascii_average_transformed(s='O\u00f8\u00acQF\u00ab\u008fP\u00ff\u0010')\nPASS: ascii_average_transformed(s='\uda1a\udfc0')\nPASS: ascii_average_transformed(s='undefined')\nPASS: ascii_average_transformed(s='\udb8a\udd70\u00efo')\nPASS: ascii_average_transformed(s='\u008a')\nPASS: ascii_average_transformed(s='\u0093')\nPASS: ascii_average_transformed(s='\u009c\u008e\u00a3\u0002\u008f\u0004T')\nPASS: ascii_average_transformed(s='v\u00f7\udbcf\udf31\u00e0[\udb78\udd55c\u001bh=')\nPASS: ascii_average_transformed(s='\"\udbb6\udfc9\udb04\ude36')\nPASS: ascii_average_transformed(s='\u0002\udb99\udc61\u00c6,\u001b\ud89c\udc46\u0000\u00ac\u00f3\u00db')\nPASS: ascii_average_transformed(s='7\u00d0\u0097|\u00ca\u00f9\u00f26\u0097\u00ec')\nPASS: ascii_average_transformed(s='null')\nPASS: ascii_average_transformed(s='+\u00d2\u00e44\u49d6\ud9bc\udf24q\u00ff\u00e9')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[1, 0])\nPASS: list_balance_transformed(nums=[7, 0])\nPASS: list_balance_transformed(nums=[7, 10])\nPASS: list_balance_transformed(nums=[9, 4])\nPASS: list_balance_transformed(nums=[0, 3, 4])\nPASS: list_balance_transformed(nums=[1, 8, 2, 8, 2, 10, 2, 1, 8, 1])\nPASS: list_balance_transformed(nums=[10, 3, 3, 7, 9, 7, 6, 6, 3])\nPASS: list_balance_transformed(nums=[6, 6, 4])\nPASS: list_balance_transformed(nums=[4, 9, 10, 2])\nPASS: list_balance_transformed(nums=[8, 3, 1, 6, 7])\nPASS: list_balance_transformed(nums=[8, 3, 1, 6, 6])\nPASS: list_balance_transformed(nums=[8, 3, 8, 6, 6])\nPASS: list_balance_transformed(nums=[8, 3, 8, 8, 6])\nPASS: list_balance_transformed(nums=[8, 3, 8, 8, 8])\nPASS: list_balance_transformed(nums=[8, 8, 8, 8, 8])\nPASS: list_balance_transformed(nums=[9, 7, 7, 0, 1, 0, 1, 5, 2, 3])\nPASS: list_balance_transformed(nums=[9, 7, 1, 0, 1, 0, 1, 5, 2, 3])\nPASS: list_balance_transformed(nums=[9, 7, 1, 0, 1, 0, 1, 1, 2, 3])\nPASS: list_balance_transformed(nums=[9, 7, 1, 0, 0, 0, 1, 1, 2, 3])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[7])\nPASS: odd_sum_validator_transformed(lst=[7, 1])\nPASS: odd_sum_validator_transformed(lst=[6, 7, 8, 6, 3, 1, 0, 1, 4, 3])\nPASS: odd_sum_validator_transformed(lst=[3, 10])\nPASS: odd_sum_validator_transformed(lst=[0, 6, 7, 1, 5])\nPASS: odd_sum_validator_transformed(lst=[5, 9])\nPASS: odd_sum_validator_transformed(lst=[0, 2, 10, 0, 5])\nPASS: odd_sum_validator_transformed(lst=[6])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[5, 0, 10, 3, 10, 2, 10, 3, 8, 7])\nPASS: odd_sum_validator_transformed(lst=[10, 0, 10, 3, 10, 2, 10, 3, 8, 7])\nPASS: odd_sum_validator_transformed(lst=[10, 10, 10, 3, 10, 2, 10, 3, 8, 7])\nPASS: odd_sum_validator_transformed(lst=[10, 10, 10, 3, 10, 2, 10, 3, 8, 10])\nPASS: odd_sum_validator_transformed(lst=[10, 10, 10, 3, 10, 2, 10, 10, 8, 10])\nPASS: odd_sum_validator_transformed(lst=[10, 10, 10, 3, 10, 10, 10, 3, 8, 10])\nPASS: odd_sum_validator_transformed(lst=[10, 10, 10, 10, 10, 10, 10, 3, 8, 10])\nPASS: odd_sum_validator_transformed(lst=[6, 9, 7, 1, 7, 7, 4, 2, 1, 8])\nPASS: odd_sum_validator_transformed(lst=[6, 9, 7, 1, 7, 7, 4, 7, 1, 8])\nPASS: odd_sum_validator_transformed(lst=[6, 9])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\ud83c\uddfa\ud83c\uddf8')\nPASS: string_pattern_score_transformed(s='j\ud9af\udcae\u00eb\u00d1=\u00a5i')\nPASS: string_pattern_score_transformed(s='\u0099To')\nPASS: string_pattern_score_transformed(s='\f\u0092\u00d9')\nPASS: string_pattern_score_transformed(s='*\u0017')\nPASS: string_pattern_score_transformed(s='\u00f1q\u008c\ud88e\udcc2\udbec\udf73?\u00ebR\u00fc')\nPASS: string_pattern_score_transformed(s='z\u0003\u00bc\u00ca\u009c\u0014'\u009e\ud807\udc0e\u00a1')\nPASS: string_pattern_score_transformed(s='NaN')\nPASS: string_pattern_score_transformed(s='\u1535\u00c5\u0099\u00a1\u00c4')\nPASS: string_pattern_score_transformed(s='\uda2c\udf8f\u0019\u00cb')\nPASS: string_pattern_score_transformed(s='\u00e0\u00b1\u00ab\u001d\ud8de\udd79\u00ecxR')\nPASS: string_pattern_score_transformed(s='\u00b8\u0003\udb33\udc69\u001e')\nPASS: string_pattern_score_transformed(s='\udb93\udcfa\u00c7')\nPASS: string_pattern_score_transformed(s='\u00c1\u647e\ud9b2\udfe5\u001c\u00dd5\u009a\u00958y')\nPASS: string_pattern_score_transformed(s='Lq')\nPASS: string_pattern_score_transformed(s='\uda89\ude18bP\u00c6\ud836\udee5')\nPASS: string_pattern_score_transformed(s='\u00a8\uda8e\udc3d\udaaf\udd5b')\nPASS: string_pattern_score_transformed(s='\u009c\u00e2{\u00c9')\nPASS: string_pattern_score_transformed(s='\u00a9\u00f3,')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[18])\nPASS: sum_until_limit_transformed(nums=[13])\nPASS: sum_until_limit_transformed(nums=[7, 6, 3, 1, 15, 17, 18, 6, 14, 12])\nPASS: sum_until_limit_transformed(nums=[2, 16, 13, 9])\nPASS: sum_until_limit_transformed(nums=[6, 10, 6, 18, 19, 1, 8, 14, 19, 15])\nPASS: sum_until_limit_transformed(nums=[7])\nPASS: sum_until_limit_transformed(nums=[3, 13, 5, 9, 19, 10, 12, 6, 0, 4])\nPASS: sum_until_limit_transformed(nums=[10, 3, 6, 12, 14, 20, 0])\nPASS: sum_until_limit_transformed(nums=[8, 3])\nPASS: sum_until_limit_transformed(nums=[11, 13, 10, 19, 11, 3, 8, 9, 5, 17])\nPASS: sum_until_limit_transformed(nums=[11, 13, 10, 19, 11, 3, 8, 9, 13, 17])\nFAIL: sum_until_limit_transformed(nums=[11, 10, 10, 19, 11, 3, 8, 9, 13, 17])\nPASS: sum_until_limit_transformed(nums=[3, 10, 10, 19, 11, 3, 8, 9, 13, 17])\nPASS: sum_until_limit_transformed(nums=[3, 10, 10, 19, 11, 3, 8, 9, 13, 9])\nPASS: sum_until_limit_transformed(nums=[3, 19, 10, 19, 11, 3, 8, 9, 13, 9])\nPASS: sum_until_limit_transformed(nums=[3, 19, 10, 19, 3, 3, 8, 9, 13, 9])\nPASS: sum_until_limit_transformed(nums=[16, 18, 3, 4, 3, 16, 3, 12, 14])\nPASS: sum_until_limit_transformed(nums=[16, 16, 3, 4, 3, 16, 3, 12, 14])\nPASS: sum_until_limit_transformed(nums=[16, 16, 16, 4, 3, 16, 3, 12, 14])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[20])\nPASS: count_divisibles_transformed(nums=[5])\nPASS: count_divisibles_transformed(nums=[16, 6, 0, 0, 6, 9])\nPASS: count_divisibles_transformed(nums=[19, 2, 12, 15])\nPASS: count_divisibles_transformed(nums=[8, 13, 2, 13, 11, 7])\nPASS: count_divisibles_transformed(nums=[7])\nPASS: count_divisibles_transformed(nums=[1, 7, 12, 14, 15, 13, 0, 6])\nPASS: count_divisibles_transformed(nums=[14, 16, 19])\nPASS: count_divisibles_transformed(nums=[12, 8])\nPASS: count_divisibles_transformed(nums=[20, 16, 14, 18, 6, 20, 8, 20, 18, 13])\nPASS: count_divisibles_transformed(nums=[20, 16, 14, 18, 6, 20, 13, 20, 18, 13])\nPASS: count_divisibles_transformed(nums=[20, 16, 14, 18, 6, 20, 13, 20, 18, 20])\nPASS: count_divisibles_transformed(nums=[20, 16, 20, 18, 6, 20, 13, 20, 18, 20])\nPASS: count_divisibles_transformed(nums=[20, 16, 20, 18, 20, 20, 13, 20, 18, 20])\nPASS: count_divisibles_transformed(nums=[20, 16, 20, 18, 20, 20, 13, 20, 20, 20])\nPASS: count_divisibles_transformed(nums=[20, 16, 20, 18, 20, 20, 20, 20, 20, 20])\nPASS: count_divisibles_transformed(nums=[14])\nPASS: count_divisibles_transformed(nums=[5, 12, 14])\nPASS: count_divisibles_transformed(nums=[12, 12, 14])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[3])\nPASS: index_weighted_sum_transformed(lst=[5])\nPASS: index_weighted_sum_transformed(lst=[9, 8, 7, 10, 0, 9, 6, 3, 4, 1])\nPASS: index_weighted_sum_transformed(lst=[9])\nPASS: index_weighted_sum_transformed(lst=[1, 0, 9, 5, 8, 4, 7, 3, 3])\nPASS: index_weighted_sum_transformed(lst=[9, 9, 9, 9, 2, 1])\nPASS: index_weighted_sum_transformed(lst=[7, 4, 10])\nPASS: index_weighted_sum_transformed(lst=[10, 5, 2, 7, 10, 8])\nPASS: index_weighted_sum_transformed(lst=[0, 10])\nPASS: index_weighted_sum_transformed(lst=[3, 2, 5, 3])\nPASS: index_weighted_sum_transformed(lst=[3, 3, 5, 3])\nPASS: index_weighted_sum_transformed(lst=[3, 3, 5, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 3, 5, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 8])\nPASS: index_weighted_sum_transformed(lst=[8, 8])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[1])\nPASS: index_weighted_sum_transformed(lst=[2, 1, 0, 8, 6, 6])\nPASS: index_weighted_sum_transformed(lst=[2, 1, 0, 8, 1, 6])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=1)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\ud8b2\udc30\u00df\u00e7\u00d6')\nPASS: character_counter_transformed(text='\u00f3\ud9a9\udeae\u0012\ud94d\udf45\fa3')\nPASS: character_counter_transformed(text='\ud9d8\udcf9#')\nPASS: character_counter_transformed(text='\uda9e\ude68\u0086*\ud8d7\ude79Y')\nPASS: character_counter_transformed(text='@$\ud926\udd28\u00cbV\u0015\u001e3;\udb8f\udc75')\nPASS: character_counter_transformed(text='\u00efl')\nPASS: character_counter_transformed(text='][\u00f3\udbbd\udd68L|\udb81\udd88U\u0014\ud9a9\udf1b')\nPASS: character_counter_transformed(text='\u00a5)o\udbd3\udd3b5')\nPASS: character_counter_transformed(text='\u00e2\udb87\udec4_\u00d7U\u00e1\u008b?\u00b7')\nPASS: character_counter_transformed(text='\u00d6@\u0084\u009b.%\u0005\u00b0\u00d8\u00e4')\nPASS: character_counter_transformed(text='a\ud847\udd7de\u00aa\u0014\u00ab\ud81a\udda7\ud8a7\udc68\u00d26')\nPASS: character_counter_transformed(text='\u0095\u0004\u0094\u00ba\u000e\u00fb\u009aE\u00b5')\nPASS: character_counter_transformed(text='\u008c\ud9d7\uddcc\u00d8\u000b\udad4\udd03\u00de\u00f2')\nPASS: character_counter_transformed(text='NaN')\nPASS: character_counter_transformed(text='\u001e')\nPASS: character_counter_transformed(text='(=')\nPASS: character_counter_transformed(text='\u00a8\u0006\u0001\t\ud9f8\udc2d\u00cd\udbd8\ude0a\u0000y\u00fd')\nPASS: character_counter_transformed(text='x\n\ud830\udd02\u00c5')\nPASS: character_counter_transformed(text='\u00e4\ud9ea\ude6aw\u0086\ud9ca\ude86\u008dc{1'')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[76])\nPASS: rolling_maximum_transformed(values=[20])\nPASS: rolling_maximum_transformed(values=[3, 25])\nPASS: rolling_maximum_transformed(values=[77, 11, 64, 100, 22, 67, 60, 82, 70, 12])\nPASS: rolling_maximum_transformed(values=[2, 32, 91])\nPASS: rolling_maximum_transformed(values=[68])\nPASS: rolling_maximum_transformed(values=[86, 80, 13, 31, 59, 68, 66, 25, 64])\nPASS: rolling_maximum_transformed(values=[85, 59, 19, 88, 1, 55, 57, 49, 59])\nPASS: rolling_maximum_transformed(values=[48, 12, 65, 20, 14])\nPASS: rolling_maximum_transformed(values=[99, 37, 82, 6, 59, 74, 50, 46, 10])\nPASS: rolling_maximum_transformed(values=[99, 10, 82, 6, 59, 74, 50, 46, 10])\nPASS: rolling_maximum_transformed(values=[99, 10, 82, 6, 74, 74, 50, 46, 10])\nPASS: rolling_maximum_transformed(values=[99, 10, 82, 6, 74, 74, 6, 46, 10])\nPASS: rolling_maximum_transformed(values=[99, 6, 82, 6, 74, 74, 6, 46, 10])\nPASS: rolling_maximum_transformed(values=[99, 6, 82, 82, 74, 74, 6, 46, 10])\nPASS: rolling_maximum_transformed(values=[99, 6, 82, 82, 74, 74, 6])\nPASS: rolling_maximum_transformed(values=[98, 61, 84, 72, 11])\nPASS: rolling_maximum_transformed(values=[98, 11, 84, 72, 11])\nPASS: rolling_maximum_transformed(values=[11, 11, 84, 72, 11])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "vector_norm": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=78)\nPASS: process_data_transformed(x=62)\nPASS: process_data_transformed(x=84)\nPASS: process_data_transformed(x=74)\nPASS: process_data_transformed(x=96)\nPASS: process_data_transformed(x=77)\nPASS: process_data_transformed(x=53)\nPASS: process_data_transformed(x=50)\nPASS: process_data_transformed(x=25)\nPASS: process_data_transformed(x=10)\nPASS: process_data_transformed(x=31)\nPASS: process_data_transformed(x=69)\nPASS: process_data_transformed(x=64)\nPASS: process_data_transformed(x=19)\nPASS: process_data_transformed(x=7)\nPASS: process_data_transformed(x=65)\nPASS: process_data_transformed(x=3)\nPASS: process_data_transformed(x=12)\nPASS: process_data_transformed(x=36)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=1.550748842570608e-107)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=31.2393793361147)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=2.2250738585072014e-308)\nPASS: convert_temperature_transformed(c=48.01648119938257)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=52.04328206202003)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=150.05302135843937, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=0.6477513180602174)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=1.401298464324817e-45)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=6.103515625e-05, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.7891964306023531)\nPASS: calculate_discount_transformed(price=0.7891964306023531, discount_rate=0.7891964306023531)\nPASS: calculate_discount_transformed(price=200.0, discount_rate=5e-324)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=5e-324, imag=0.0)\nPASS: process_complex_number_transformed(real=5e-324, imag=2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=0.99999, imag=0.3333333333333333)\nPASS: process_complex_number_transformed(real=-6.103515625e-05, imag=-2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=5.960464477539063e-08, imag=-11.871213677823212)\nPASS: process_complex_number_transformed(real=2.1004627516866528, imag=5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=14.39176000627107, imag=-6.103515625e-05)\nPASS: process_complex_number_transformed(real=0.3333333333333333, imag=-0.0)\nPASS: process_complex_number_transformed(real=-1.7875274582959335, imag=-4.750482966354067)\nPASS: process_complex_number_transformed(real=5.960464477539063e-08, imag=2.9452266276813737e-210)\nPASS: process_complex_number_transformed(real=5.960464477539063e-08, imag=5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=1.401298464324817e-45, imag=0.5)\nPASS: process_complex_number_transformed(real=0.5, imag=0.5)\nPASS: process_complex_number_transformed(real=20.0, imag=0.99999)\nPASS: process_complex_number_transformed(real=0.99999, imag=0.99999)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=19.999999999999996)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=2.2250738585e-313)\nPASS: process_complex_number_transformed(real=-2.8066817699444933, imag=-19.0)\nPASS: process_complex_number_transformed(real=-2.8066817699444933, imag=-2.8066817699444933)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=33)\nPASS: transform_data_transformed(input_value=87)\nPASS: transform_data_transformed(input_value=12)\nPASS: transform_data_transformed(input_value=75)\nPASS: transform_data_transformed(input_value=47)\nPASS: transform_data_transformed(input_value=37)\nPASS: transform_data_transformed(input_value=55)\nPASS: transform_data_transformed(input_value=78)\nPASS: transform_data_transformed(input_value=28)\nPASS: transform_data_transformed(input_value=93)\nPASS: transform_data_transformed(input_value=62)\nPASS: transform_data_transformed(input_value=71)\nPASS: transform_data_transformed(input_value=36)\nPASS: transform_data_transformed(input_value=86)\nPASS: transform_data_transformed(input_value=88)\nPASS: transform_data_transformed(input_value=3)\nPASS: transform_data_transformed(input_value=24)\nPASS: transform_data_transformed(input_value=56)\nPASS: transform_data_transformed(input_value=50)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=7.719088478242833)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=6.039240872251839e-295)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=5, b=1, c=1)\nPASS: triangle_checker_transformed(a=5, b=3, c=15)\nPASS: triangle_checker_transformed(a=17, b=2, c=13)\nPASS: triangle_checker_transformed(a=4, b=6, c=19)\nPASS: triangle_checker_transformed(a=4, b=12, c=13)\nPASS: triangle_checker_transformed(a=17, b=4, c=8)\nPASS: triangle_checker_transformed(a=17, b=5, c=2)\nPASS: triangle_checker_transformed(a=19, b=11, c=16)\nPASS: triangle_checker_transformed(a=16, b=9, c=14)\nPASS: triangle_checker_transformed(a=18, b=12, c=8)\nPASS: triangle_checker_transformed(a=8, b=12, c=8)\nPASS: triangle_checker_transformed(a=8, b=12, c=12)\nPASS: triangle_checker_transformed(a=12, b=12, c=8)\nPASS: triangle_checker_transformed(a=8, b=8, c=8)\nPASS: triangle_checker_transformed(a=17, b=17, c=20)\nPASS: triangle_checker_transformed(a=17, b=17, c=17)\nPASS: triangle_checker_transformed(a=1, b=9, c=3)\nPASS: triangle_checker_transformed(a=3, b=9, c=3)\nPASS: triangle_checker_transformed(a=3, b=3, c=3)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=67.7510852554034)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=2.6471949167004025)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=19.225889245042477)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=66.64846022942697)\nPASS: temperature_offset_transformed(c=1.192092896e-07)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=24.690956531082957)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: temperature_offset_transformed(c=4.113561997052907)\nPASS: temperature_offset_transformed(c=37.638513868940784)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-5, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-5, b=-4, c=10)\nPASS: quadratic_discriminant_transformed(a=6, b=-10, c=7)\nPASS: quadratic_discriminant_transformed(a=-7, b=-3, c=8)\nPASS: quadratic_discriminant_transformed(a=7, b=9, c=-5)\nPASS: quadratic_discriminant_transformed(a=-4, b=10, c=8)\nPASS: quadratic_discriminant_transformed(a=-8, b=-5, c=7)\nPASS: quadratic_discriminant_transformed(a=4, b=-1, c=-2)\nPASS: quadratic_discriminant_transformed(a=-8, b=2, c=10)\nPASS: quadratic_discriminant_transformed(a=7, b=1, c=-1)\nPASS: quadratic_discriminant_transformed(a=7, b=1, c=7)\nPASS: quadratic_discriminant_transformed(a=1, b=1, c=7)\nPASS: quadratic_discriminant_transformed(a=1, b=1, c=1)\nPASS: quadratic_discriminant_transformed(a=2, b=4, c=-5)\nPASS: quadratic_discriminant_transformed(a=2, b=-5, c=-5)\nPASS: quadratic_discriminant_transformed(a=2, b=-5, c=2)\nPASS: quadratic_discriminant_transformed(a=-5, b=-5, c=2)\nPASS: quadratic_discriminant_transformed(a=-5, b=2, c=2)\nPASS: quadratic_discriminant_transformed(a=-5, b=2, c=-5)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=9.290712896927609, y=0.0)\nPASS: vector_norm_transformed(x=-1e-05, y=0.0)\nPASS: vector_norm_transformed(x=-1e-05, y=-1.5)\nPASS: vector_norm_transformed(x=-8.832603797112503, y=-1.1)\nPASS: vector_norm_transformed(x=0.99999, y=-6.103515625e-05)\nPASS: vector_norm_transformed(x=1.1754943508222875e-38, y=2.225073858507e-311)\nPASS: vector_norm_transformed(x=-1.5, y=0.3333333333333333)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=-5e-324)\nPASS: vector_norm_transformed(x=3.5751389640923765, y=-10.0)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=5e-324)\nPASS: vector_norm_transformed(x=5e-324, y=5e-324)\nPASS: vector_norm_transformed(x=6.103515625e-05, y=-8.018116259984591)\nPASS: vector_norm_transformed(x=-8.018116259984591, y=-8.018116259984591)\nPASS: vector_norm_transformed(x=2.2250738585e-313, y=1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=1.1754943508222875e-38, y=1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=-8.41441809903876, y=8.314698804764262)\nPASS: vector_norm_transformed(x=-8.41441809903876, y=-8.41441809903876)\nPASS: vector_norm_transformed(x=-5e-324, y=2.225073858507203e-309)\nPASS: vector_norm_transformed(x=-5e-324, y=-5e-324)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=8.194327084111352, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=1.5)\nPASS: hypotenuse_diff_transformed(a=1.4814344483596356, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=1.0)\nPASS: hypotenuse_diff_transformed(a=0.0, b=4.587802713717361)\nPASS: hypotenuse_diff_transformed(a=1.1, b=4.362981194280934)\nPASS: hypotenuse_diff_transformed(a=9.816103730369576, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=3.862235126410164)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=9.491769506996091)\nPASS: hypotenuse_diff_transformed(a=9.491769506996091, b=9.491769506996091)\nPASS: hypotenuse_diff_transformed(a=0.9747058618015105, b=0.5)\nPASS: hypotenuse_diff_transformed(a=0.5, b=0.5)\nPASS: hypotenuse_diff_transformed(a=5.904344495117067, b=9.090309707742684)\nPASS: hypotenuse_diff_transformed(a=5.904344495117067, b=5.904344495117067)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=1.0)\nPASS: hypotenuse_diff_transformed(a=1.0, b=1.0)\nPASS: hypotenuse_diff_transformed(a=1.1, b=1.9)\nPASS: hypotenuse_diff_transformed(a=1.1, b=1.1)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\udb80\udfddWcV\u0005')\nPASS: ascii_average_transformed(s='L\u00f0\u00c0\ud9ed\udf61\udb51\udd4d\u00b0Su\u0007\udbb8\ude42')\nPASS: ascii_average_transformed(s='\u0000\ud836\udea0[Y\u001b\u00d1')\nPASS: ascii_average_transformed(s='\udb20\udc86X\ud98c\udd4d')\nPASS: ascii_average_transformed(s='\udbe5\udc50\u008d\ud815\udc7c\u008d.L\ud833\udd3f\u0019')\nPASS: ascii_average_transformed(s='\udb39\udc3d\u00ac')\nPASS: ascii_average_transformed(s='\u00c5E\u0086p\b\udbbf\udc16\udb3b\udfafj\u009c')\nPASS: ascii_average_transformed(s='\u009f\u000fj7\u00dcw\u00bf;b&')\nPASS: ascii_average_transformed(s='\u00e0\u000bv\ud9a1\udd59C\ud852\udc9d\u009c\u00f6\udbe9\ude37\u00a6')\nPASS: ascii_average_transformed(s='NIL')\nPASS: ascii_average_transformed(s='\u00a9KX\ud8b1\udd20\u0087')\nPASS: ascii_average_transformed(s='\u00e0\u00d1%\u00ad%\u00a8\u00932\u0003\u00f0')\nPASS: ascii_average_transformed(s='\u6703N\u00acT\ud8ee\udec5')\nPASS: ascii_average_transformed(s='\u0090\u0093\u00f7\u0003\u000e\u00a2r\u0095M')\nPASS: ascii_average_transformed(s='\u00bd[')\nPASS: ascii_average_transformed(s='\u00c3\u00ec\u00fc')\nPASS: ascii_average_transformed(s='\ud847\ude824;c\u0098\u000f>\udaaf\udfd7')\nPASS: ascii_average_transformed(s='\u008c\u008d\ud94e\udff8\u008d\ud882\udef0\u00aa\u00bb\f')\nPASS: ascii_average_transformed(s='\ud9b0\ude1d\u00d2_aR\u00b4\ud84f\udd53\u00a5\u00e7\u00a3')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[4, 0])\nPASS: list_balance_transformed(nums=[6, 0])\nPASS: list_balance_transformed(nums=[7, 4, 3, 5])\nPASS: list_balance_transformed(nums=[8, 3, 6, 0])\nPASS: list_balance_transformed(nums=[7, 10, 9, 3])\nPASS: list_balance_transformed(nums=[7, 10])\nPASS: list_balance_transformed(nums=[5, 6, 4, 10, 1, 9, 6, 8, 7, 3])\nPASS: list_balance_transformed(nums=[6, 2])\nPASS: list_balance_transformed(nums=[10, 8, 0])\nPASS: list_balance_transformed(nums=[9, 2, 5, 7, 8])\nPASS: list_balance_transformed(nums=[9, 2, 8, 7, 8])\nPASS: list_balance_transformed(nums=[9, 8, 8, 7, 8])\nPASS: list_balance_transformed(nums=[9, 8, 8, 7])\nPASS: list_balance_transformed(nums=[1, 6, 5, 1, 4, 6, 10, 6, 0, 6])\nPASS: list_balance_transformed(nums=[1, 6, 5, 6, 4, 6, 10, 6, 0, 6])\nPASS: list_balance_transformed(nums=[0, 6, 5, 6, 4, 6, 10, 6, 0, 6])\nPASS: list_balance_transformed(nums=[0, 6, 5, 6, 4, 6, 10, 6, 5, 6])\nPASS: list_balance_transformed(nums=[0, 6, 5, 6, 4, 6, 10, 6, 5, 5])\nPASS: list_balance_transformed(nums=[0, 6, 5, 6, 4, 6, 10, 6, 5, 0])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[3, 9, 4])\nPASS: odd_sum_validator_transformed(lst=[6, 6, 2, 0, 0, 3, 6, 2, 6, 9])\nPASS: odd_sum_validator_transformed(lst=[0, 1, 7, 5])\nPASS: odd_sum_validator_transformed(lst=[4])\nPASS: odd_sum_validator_transformed(lst=[6])\nPASS: odd_sum_validator_transformed(lst=[1, 9, 7])\nPASS: odd_sum_validator_transformed(lst=[4, 3, 3, 6])\nPASS: odd_sum_validator_transformed(lst=[5, 5, 7])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[9, 4, 5])\nPASS: odd_sum_validator_transformed(lst=[4, 4, 5])\nPASS: odd_sum_validator_transformed(lst=[4, 5, 5])\nPASS: odd_sum_validator_transformed(lst=[5, 5, 5])\nPASS: odd_sum_validator_transformed(lst=[0, 2, 3, 3, 0, 8])\nPASS: odd_sum_validator_transformed(lst=[8, 2, 3, 3, 0, 8])\nPASS: odd_sum_validator_transformed(lst=[3, 2, 3, 3, 0, 8])\nPASS: odd_sum_validator_transformed(lst=[3, 2, 3, 3, 8, 8])\nPASS: odd_sum_validator_transformed(lst=[3, 8, 3, 3, 8, 8])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='<\u00dd\u00ee')\nPASS: string_pattern_score_transformed(s='\ud99b\udc6f')\nPASS: string_pattern_score_transformed(s='\uda64\udd1ck\u00e6\u00b7m')\nPASS: string_pattern_score_transformed(s='pf-.')\nPASS: string_pattern_score_transformed(s='\u00b7\u00bb')\nPASS: string_pattern_score_transformed(s='\u00bd\u00a7\u008do\u00a5G\u0087>\ud9bd\udf1d')\nPASS: string_pattern_score_transformed(s='\udb24\udc82\u0011\u00f8\ud9a2\udea0:\u00e2\u0003')\nPASS: string_pattern_score_transformed(s='\u00c8\ud90f\ude5bQ\u00a1\u00ed\ud8ca\ude47\u00e1\u00f36\uda4a\ude1a')\nPASS: string_pattern_score_transformed(s='\ud915\uddf8\ud9cc\udfc3')\nPASS: string_pattern_score_transformed(s='\u00a7\u0087\u00cck`\u00d0\u00f7\u00a7~t')\nPASS: string_pattern_score_transformed(s='\u00ae')\nPASS: string_pattern_score_transformed(s='\uda25\udd4e\u0001\ud9db\udcdfP\u00fb\udb1f\udcdd\u00b2cM[')\nPASS: string_pattern_score_transformed(s='\u00c4')\nPASS: string_pattern_score_transformed(s=' \ud909\udc93')\nPASS: string_pattern_score_transformed(s='\u0014')\nPASS: string_pattern_score_transformed(s='\u00d2\u0096\u0092\u00fck')\nPASS: string_pattern_score_transformed(s='\u00fe\u0013\u00f2\u0006\u00b6Ze')\nPASS: string_pattern_score_transformed(s='\u023e')\nPASS: string_pattern_score_transformed(s='\ud887\udc76\u00a8\u0088\u00f6/\u007f\u0092')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[15])\nPASS: sum_until_limit_transformed(nums=[9])\nPASS: sum_until_limit_transformed(nums=[9, 2, 18])\nPASS: sum_until_limit_transformed(nums=[8, 2, 16])\nPASS: sum_until_limit_transformed(nums=[18, 14, 6, 12, 10])\nPASS: sum_until_limit_transformed(nums=[1, 17, 12, 10, 9, 7, 3, 20, 8, 4])\nPASS: sum_until_limit_transformed(nums=[19, 9, 7, 6, 10])\nPASS: sum_until_limit_transformed(nums=[8])\nPASS: sum_until_limit_transformed(nums=[2, 8, 4, 3, 16, 14, 7, 6, 2, 11])\nPASS: sum_until_limit_transformed(nums=[6, 0, 4])\nPASS: sum_until_limit_transformed(nums=[2])\nPASS: sum_until_limit_transformed(nums=[10, 14, 16])\nPASS: sum_until_limit_transformed(nums=[14, 14, 16])\nPASS: sum_until_limit_transformed(nums=[16, 14, 16])\nPASS: sum_until_limit_transformed(nums=[14, 16, 16])\nPASS: sum_until_limit_transformed(nums=[7, 3, 20, 13, 16, 4, 2, 9, 9, 15])\nFAIL: sum_until_limit_transformed(nums=[7, 3, 20, 13, 16, 4, 2, 9, 7, 15])\nPASS: sum_until_limit_transformed(nums=[7, 13, 20, 13, 16, 4, 2, 9, 7, 15])\nPASS: sum_until_limit_transformed(nums=[7, 2, 20, 13, 16, 4, 2, 9, 7, 15])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[2])\nPASS: count_divisibles_transformed(nums=[0, 0])\nPASS: count_divisibles_transformed(nums=[16, 11, 5, 14, 19])\nPASS: count_divisibles_transformed(nums=[8, 16, 0])\nPASS: count_divisibles_transformed(nums=[10, 19, 1, 16, 19, 20, 14, 6, 16, 7])\nPASS: count_divisibles_transformed(nums=[9, 16, 18, 11, 9, 17, 20, 6, 20, 7])\nPASS: count_divisibles_transformed(nums=[5, 18, 2, 14, 12, 16, 20, 1, 2, 5])\nPASS: count_divisibles_transformed(nums=[18, 1, 0, 5])\nPASS: count_divisibles_transformed(nums=[7, 13, 18])\nPASS: count_divisibles_transformed(nums=[6, 8, 16, 6, 6])\nPASS: count_divisibles_transformed(nums=[6, 8, 6, 6, 6])\nPASS: count_divisibles_transformed(nums=[6, 6, 6, 6, 6])\nPASS: count_divisibles_transformed(nums=[15, 20, 2, 0, 13, 9, 8, 3, 3])\nPASS: count_divisibles_transformed(nums=[15, 20, 2, 0, 13, 9, 8, 2, 3])\nPASS: count_divisibles_transformed(nums=[8, 20, 2, 0, 13, 9, 8, 2, 3])\nPASS: count_divisibles_transformed(nums=[13, 20, 2, 0, 13, 9, 8, 2, 3])\nPASS: count_divisibles_transformed(nums=[3, 20, 2, 0, 13, 9, 8, 2, 3])\nPASS: count_divisibles_transformed(nums=[13, 20, 2, 0, 13, 13, 8, 2, 3])\nPASS: count_divisibles_transformed(nums=[13, 20, 2, 0, 13, 13, 8, 2, 0])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[9])\nPASS: index_weighted_sum_transformed(lst=[7])\nPASS: index_weighted_sum_transformed(lst=[7, 0])\nPASS: index_weighted_sum_transformed(lst=[6, 3, 9, 4, 9, 3, 8])\nPASS: index_weighted_sum_transformed(lst=[2, 10, 8, 9, 5, 7, 6, 4])\nPASS: index_weighted_sum_transformed(lst=[3, 3, 10])\nPASS: index_weighted_sum_transformed(lst=[5, 10, 9, 6, 7, 9, 2, 9, 8, 10])\nPASS: index_weighted_sum_transformed(lst=[8, 9, 7, 3, 5])\nPASS: index_weighted_sum_transformed(lst=[9, 8, 6, 0])\nPASS: index_weighted_sum_transformed(lst=[1, 10])\nPASS: index_weighted_sum_transformed(lst=[10, 10])\nPASS: index_weighted_sum_transformed(lst=[1])\nPASS: index_weighted_sum_transformed(lst=[1, 7, 0, 9, 6, 10, 10, 9, 7, 4])\nPASS: index_weighted_sum_transformed(lst=[1, 7, 10, 9, 6, 10, 10, 9, 7, 4])\nPASS: index_weighted_sum_transformed(lst=[1, 7, 10, 9, 6, 10, 10, 9, 6, 4])\nPASS: index_weighted_sum_transformed(lst=[1, 10, 10, 9, 6, 10, 10, 9, 6, 4])\nPASS: index_weighted_sum_transformed(lst=[1, 10, 10, 9, 6, 10, 1, 9, 6, 4])\nPASS: index_weighted_sum_transformed(lst=[1, 10, 10, 9, 6, 10, 1, 9, 6, 9])\nPASS: index_weighted_sum_transformed(lst=[1, 10, 10, 1, 6, 10, 1, 9, 6, 9])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=10)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\udb34\udf51B\u00be\u0012R\u000f\udba2\udcac\ud9fe\udc08\u00fa\u00c1')\nPASS: character_counter_transformed(text='\u00b9\udabe\udeee\u00b8\u0019\u00d27\uda2a\udde8\u00d3\u00db')\nPASS: character_counter_transformed(text='\ud974\uddad\u00de')\nPASS: character_counter_transformed(text='x\u0084\ud92d\udfcf@')\nPASS: character_counter_transformed(text='\u00b4=\u0087\u00e8\u00ae\u00d9\uda3e\uddfc\u00c3\ud872\udd28')\nPASS: character_counter_transformed(text='h\u00ccd\udb1e\uddde\u00e2\u0086\u00e2\u00f17')\nPASS: character_counter_transformed(text='\u008c')\nPASS: character_counter_transformed(text='G3\udaf9\ude3c\u008e\u00c4\u0086\u0096\u007f\udaf0\udd1bW')\nPASS: character_counter_transformed(text='k\u0017')\nPASS: character_counter_transformed(text='G\udafe\udc0b')\nPASS: character_counter_transformed(text='\ud9c5\udd2fI')\nPASS: character_counter_transformed(text='\ud8a5\uddb1\u00a5 j\u008b\u0098\u0000\u00f4\udb4c\udd7b')\nPASS: character_counter_transformed(text='\u00b1(\u00a9\u00bf\u00b0\u001e\udb46\udf9f\u00df')\nPASS: character_counter_transformed(text='\ud824\uddbb\u000f\u0004\ud87b\udf48\u00a2u\u00c3\u00eb\u00e9\u00b0')\nPASS: character_counter_transformed(text='\u00d5\u001e\u00ec\u00dc1')\nPASS: character_counter_transformed(text='\udbe7\udf7d\uda52\udfee\u00f3e\u00af\u00ea')\nPASS: character_counter_transformed(text='R\u00d2\u00b2\u00aa\uda08\ude57\u00dc7D\udb17\udea98')\nPASS: character_counter_transformed(text='\u0086')\nPASS: character_counter_transformed(text='\u00cf')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[74])\nPASS: rolling_maximum_transformed(values=[7])\nPASS: rolling_maximum_transformed(values=[78, 65, 36, 93, 15, 16])\nPASS: rolling_maximum_transformed(values=[47, 59, 50, 81, 28])\nPASS: rolling_maximum_transformed(values=[49])\nPASS: rolling_maximum_transformed(values=[96, 82, 91, 71, 90, 5, 15, 9, 36, 41])\nPASS: rolling_maximum_transformed(values=[2])\nPASS: rolling_maximum_transformed(values=[62, 8])\nPASS: rolling_maximum_transformed(values=[100, 36, 24, 83, 36, 4, 45])\nPASS: rolling_maximum_transformed(values=[0, 47])\nPASS: rolling_maximum_transformed(values=[47, 47])\nPASS: rolling_maximum_transformed(values=[45, 37])\nPASS: rolling_maximum_transformed(values=[45, 45])\nPASS: rolling_maximum_transformed(values=[66, 10, 94, 98, 6, 18, 79, 77])\nPASS: rolling_maximum_transformed(values=[66, 10, 94, 79, 6, 18, 79, 77])\nPASS: rolling_maximum_transformed(values=[77, 10, 94, 79, 6, 18, 79, 77])\nPASS: rolling_maximum_transformed(values=[77, 10, 94, 79, 6, 18, 10, 77])\nPASS: rolling_maximum_transformed(values=[77, 10, 94, 77, 6, 18, 10, 77])\nPASS: rolling_maximum_transformed(values=[6, 10, 94, 77, 6, 18, 10, 77])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "hypotenuse_diff": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=18)\nPASS: process_data_transformed(x=95)\nPASS: process_data_transformed(x=74)\nPASS: process_data_transformed(x=85)\nPASS: process_data_transformed(x=41)\nPASS: process_data_transformed(x=62)\nPASS: process_data_transformed(x=66)\nPASS: process_data_transformed(x=20)\nPASS: process_data_transformed(x=6)\nPASS: process_data_transformed(x=52)\nPASS: process_data_transformed(x=48)\nPASS: process_data_transformed(x=56)\nPASS: process_data_transformed(x=70)\nPASS: process_data_transformed(x=31)\nPASS: process_data_transformed(x=14)\nPASS: process_data_transformed(x=94)\nPASS: process_data_transformed(x=51)\nPASS: process_data_transformed(x=86)\nPASS: process_data_transformed(x=65)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=98.55142381943789)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=91.69645335703247)\nPASS: convert_temperature_transformed(c=8.362086838429896)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=96.47852997459503)\nPASS: convert_temperature_transformed(c=68.60728431627287)\nPASS: convert_temperature_transformed(c=68.78978204392877)\nPASS: convert_temperature_transformed(c=6.187000483932705)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=89.95140412879006)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=127.9175310461133, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=127.9175310461133, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=96.45453591116213, discount_rate=0.2775832014644977)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=2.00001, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=177.62959015843927, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.16169066077369634)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.30693142579960836)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=169.73308510644182, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=133.86223942193593, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.5)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=2.00001, imag=0.0)\nPASS: process_complex_number_transformed(real=2.00001, imag=13.541196855330142)\nPASS: process_complex_number_transformed(real=1.1754943508222875e-38, imag=2.2250738585e-313)\nPASS: process_complex_number_transformed(real=2.220446049250313e-16, imag=-0.0)\nPASS: process_complex_number_transformed(real=-0.3333333333333333, imag=-3.7677051328361486)\nPASS: process_complex_number_transformed(real=-6.103515625e-05, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=-20.0, imag=-2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=-5.960464477539063e-08, imag=19.0)\nPASS: process_complex_number_transformed(real=-2.2250738585072014e-308, imag=1.192092896e-07)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=-2.2250738585e-313)\nPASS: process_complex_number_transformed(real=-2.2250738585e-313, imag=-2.2250738585e-313)\nPASS: process_complex_number_transformed(real=-8.220435353541571, imag=0.5)\nPASS: process_complex_number_transformed(real=0.5, imag=0.5)\nPASS: process_complex_number_transformed(real=-5.960464477539063e-08, imag=2.400569320870938e-186)\nPASS: process_complex_number_transformed(real=-5.960464477539063e-08, imag=-5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=-0.0)\nPASS: process_complex_number_transformed(real=-0.0, imag=-0.0)\nPASS: process_complex_number_transformed(real=1.401298464324817e-45, imag=1.192092896e-07)\nPASS: process_complex_number_transformed(real=1.192092896e-07, imag=1.192092896e-07)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=59)\nPASS: transform_data_transformed(input_value=96)\nPASS: transform_data_transformed(input_value=68)\nPASS: transform_data_transformed(input_value=48)\nPASS: transform_data_transformed(input_value=63)\nPASS: transform_data_transformed(input_value=14)\nPASS: transform_data_transformed(input_value=44)\nPASS: transform_data_transformed(input_value=56)\nPASS: transform_data_transformed(input_value=29)\nPASS: transform_data_transformed(input_value=61)\nPASS: transform_data_transformed(input_value=21)\nPASS: transform_data_transformed(input_value=58)\nPASS: transform_data_transformed(input_value=67)\nPASS: transform_data_transformed(input_value=78)\nPASS: transform_data_transformed(input_value=95)\nPASS: transform_data_transformed(input_value=70)\nPASS: transform_data_transformed(input_value=1)\nPASS: transform_data_transformed(input_value=87)\nPASS: transform_data_transformed(input_value=41)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=1.192092896e-07)\nPASS: circle_area_diff_transformed(r=2.6114816158043834)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=3.3720176400002893)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=3.514265837774096)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=8.975563438114225)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=16.939567637304634)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=10, b=1, c=1)\nPASS: triangle_checker_transformed(a=10, b=15, c=17)\nPASS: triangle_checker_transformed(a=8, b=13, c=12)\nPASS: triangle_checker_transformed(a=18, b=4, c=5)\nPASS: triangle_checker_transformed(a=4, b=19, c=9)\nPASS: triangle_checker_transformed(a=16, b=1, c=2)\nPASS: triangle_checker_transformed(a=1, b=2, c=20)\nPASS: triangle_checker_transformed(a=16, b=9, c=2)\nPASS: triangle_checker_transformed(a=6, b=11, c=17)\nPASS: triangle_checker_transformed(a=15, b=19, c=4)\nPASS: triangle_checker_transformed(a=15, b=19, c=19)\nPASS: triangle_checker_transformed(a=15, b=19, c=15)\nPASS: triangle_checker_transformed(a=19, b=19, c=19)\nPASS: triangle_checker_transformed(a=15, b=5, c=10)\nPASS: triangle_checker_transformed(a=15, b=5, c=5)\nPASS: triangle_checker_transformed(a=15, b=5, c=15)\nPASS: triangle_checker_transformed(a=5, b=5, c=5)\nPASS: triangle_checker_transformed(a=12, b=1, c=18)\nPASS: triangle_checker_transformed(a=18, b=1, c=18)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=6.982712991478342e-07)\nPASS: temperature_offset_transformed(c=64.9670045726813)\nPASS: temperature_offset_transformed(c=24.505300275704307)\nPASS: temperature_offset_transformed(c=1.192092896e-07)\nPASS: temperature_offset_transformed(c=38.14293027636463)\nPASS: temperature_offset_transformed(c=79.30001925531747)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=18.310959259649366)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=35.9145826234874)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=2, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=2, b=5, c=7)\nPASS: quadratic_discriminant_transformed(a=-9, b=10, c=5)\nPASS: quadratic_discriminant_transformed(a=7, b=1, c=2)\nPASS: quadratic_discriminant_transformed(a=4, b=-10, c=4)\nPASS: quadratic_discriminant_transformed(a=9, b=3, c=6)\nPASS: quadratic_discriminant_transformed(a=-10, b=-9, c=-4)\nPASS: quadratic_discriminant_transformed(a=4, b=3, c=-6)\nPASS: quadratic_discriminant_transformed(a=5, b=-5, c=-7)\nPASS: quadratic_discriminant_transformed(a=5, b=6, c=2)\nPASS: quadratic_discriminant_transformed(a=2, b=6, c=2)\nPASS: quadratic_discriminant_transformed(a=2, b=2, c=2)\nPASS: quadratic_discriminant_transformed(a=-3, b=3, c=-5)\nPASS: quadratic_discriminant_transformed(a=-5, b=3, c=-5)\nPASS: quadratic_discriminant_transformed(a=3, b=3, c=-5)\nPASS: quadratic_discriminant_transformed(a=3, b=3, c=3)\nPASS: quadratic_discriminant_transformed(a=9, b=7, c=5)\nPASS: quadratic_discriminant_transformed(a=9, b=9, c=5)\nPASS: quadratic_discriminant_transformed(a=5, b=9, c=5)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=0.0)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=-0.99999)\nPASS: vector_norm_transformed(x=0.99999, y=-0.5)\nPASS: vector_norm_transformed(x=1.5, y=-5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-1.401298464324817e-45, y=-2.225073858507e-311)\nPASS: vector_norm_transformed(x=9.999999999999998, y=-2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=-7.267330470197878, y=-2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=1.1125369292536007e-308, y=-10.0)\nPASS: vector_norm_transformed(x=-1e-05, y=-1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=1e-05, y=2.225073858507203e-309)\nPASS: vector_norm_transformed(x=1e-05, y=1e-05)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=0.3333333333333333)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=2.225073858507203e-309)\nPASS: vector_norm_transformed(x=-0.7567920541246504, y=-9.380542699996223)\nPASS: vector_norm_transformed(x=-0.7567920541246504, y=-0.7567920541246504)\nPASS: vector_norm_transformed(x=5.960464477539063e-08, y=-9.0)\nPASS: vector_norm_transformed(x=-9.0, y=-9.0)\nPASS: vector_norm_transformed(x=-1.1754943508222875e-38, y=0.99999)\nPASS: vector_norm_transformed(x=-1.1754943508222875e-38, y=-1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=0.0)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=9.197642279716936, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=1.0, b=5.232508441948233)\nPASS: hypotenuse_diff_transformed(a=6.403676274131206, b=4.605017483150967)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=1.5)\nPASS: hypotenuse_diff_transformed(a=3.158985365451671e-43, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=3.158985365451671e-43, b=3.158985365451671e-43)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=1.707124821575137)\nPASS: hypotenuse_diff_transformed(a=1.707124821575137, b=1.707124821575137)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=2.340089608359244)\nPASS: hypotenuse_diff_transformed(a=2.340089608359244, b=2.340089608359244)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=1.192092896e-07)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=0.0, b=9.0)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=1.9)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u00b0\u008fT9s\u0085N\u00b8')\nPASS: ascii_average_transformed(s='\u00ca')\nPASS: ascii_average_transformed(s='\u000f\u0019\u001f\u009a\u00a7\u00f8\u00a7~f\u00da')\nPASS: ascii_average_transformed(s='\u000e\u00bd;')\nPASS: ascii_average_transformed(s='BG\u00dc\u4a48G8\udb54\udf6b\u0085AM')\nPASS: ascii_average_transformed(s='\u0091\u008e\u00d6\u0004!\ud98a\udfc8x\u00f2')\nPASS: ascii_average_transformed(s='\u00f5\ud8a7\uddad\ud9a7\udfa4\u00f6\u00ce\u009dP\u00dd\udbcd\udca3\u0004')\nPASS: ascii_average_transformed(s='\u00d0z\u00f4\udb9d\udd5c\u0082')\nPASS: ascii_average_transformed(s='\ud896\ude51\u00f9V\u00b5L\u0088\u0019\u00bbA9')\nPASS: ascii_average_transformed(s='\u00f4\uda0b\udd37\u0017\u00d5\u0093\u0097')\nPASS: ascii_average_transformed(s='\ud85b\udedf\u00e2\u00ba'\u0007\u00a8\udb3d\ude52g')\nPASS: ascii_average_transformed(s='NUL')\nPASS: ascii_average_transformed(s='\u001b\u8df4\u00d6O\uda32\ude6f\u0012I_{\u0006')\nPASS: ascii_average_transformed(s='R\ua20d')\nPASS: ascii_average_transformed(s='\u008e')\nPASS: ascii_average_transformed(s='\u00fe\ud970\uddadc\u00a2\u0004\"\u00b8\u00e5\\')\nPASS: ascii_average_transformed(s='\u0083')\nPASS: ascii_average_transformed(s='b\u00f9\uda89\udcd4')\nPASS: ascii_average_transformed(s='\u00c9\ud801\udcd5\u008c')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[7, 0])\nPASS: list_balance_transformed(nums=[5, 0])\nPASS: list_balance_transformed(nums=[1, 5, 5])\nPASS: list_balance_transformed(nums=[9, 10, 4, 1])\nPASS: list_balance_transformed(nums=[2, 0, 3, 6, 4, 7, 5])\nPASS: list_balance_transformed(nums=[0, 9, 9, 5, 7])\nPASS: list_balance_transformed(nums=[5, 8, 7, 0, 2, 10, 0])\nPASS: list_balance_transformed(nums=[1, 7, 7, 6, 3, 10, 8, 3, 4, 8])\nPASS: list_balance_transformed(nums=[10, 0, 1, 9])\nPASS: list_balance_transformed(nums=[1, 9])\nPASS: list_balance_transformed(nums=[9, 9])\nPASS: list_balance_transformed(nums=[0, 3])\nPASS: list_balance_transformed(nums=[3, 3])\nPASS: list_balance_transformed(nums=[1, 10, 1])\nPASS: list_balance_transformed(nums=[10, 10, 1])\nPASS: list_balance_transformed(nums=[10, 1, 1])\nPASS: list_balance_transformed(nums=[10, 0])\nPASS: list_balance_transformed(nums=[7, 2, 7, 7, 2, 7, 5, 9, 4, 3])\nPASS: list_balance_transformed(nums=[3, 2, 7, 7, 2, 7, 5, 9, 4, 3])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[6])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[4])\nPASS: odd_sum_validator_transformed(lst=[9, 10, 3, 2, 8])\nPASS: odd_sum_validator_transformed(lst=[6, 7, 0, 5, 0])\nPASS: odd_sum_validator_transformed(lst=[2, 8, 3, 9, 6, 10, 5])\nPASS: odd_sum_validator_transformed(lst=[10, 8, 6, 3, 0, 7, 9, 9, 6, 6])\nPASS: odd_sum_validator_transformed(lst=[7, 9])\nPASS: odd_sum_validator_transformed(lst=[6, 5, 7, 10, 9, 7, 4])\nPASS: odd_sum_validator_transformed(lst=[5, 0])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[8, 0, 1, 9])\nPASS: odd_sum_validator_transformed(lst=[9, 0, 1, 9])\nPASS: odd_sum_validator_transformed(lst=[9, 0, 1, 1])\nPASS: odd_sum_validator_transformed(lst=[1, 0, 1, 1])\nPASS: odd_sum_validator_transformed(lst=[1, 0, 0, 1])\nPASS: odd_sum_validator_transformed(lst=[5, 8, 9, 5])\nPASS: odd_sum_validator_transformed(lst=[6, 1, 0, 1, 6, 0, 4, 8, 8, 3])\nPASS: odd_sum_validator_transformed(lst=[6, 1, 0, 1, 6, 6, 4, 8, 8, 3])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u0090')\nPASS: string_pattern_score_transformed(s='\u0013\u00b8:')\nPASS: string_pattern_score_transformed(s=':\u00ea\u00ca')\nPASS: string_pattern_score_transformed(s='}\u0003\u00d0\u001a\u00b1-H\udbcd\udd1d')\nPASS: string_pattern_score_transformed(s='\u0087\ud92b\udd68')\nPASS: string_pattern_score_transformed(s='\u0089\u00be;\u00cd\u009a\u00a4\u00f4\u001a\u00caD')\nPASS: string_pattern_score_transformed(s='\u00fb\u0016\udab9\udf57')\nPASS: string_pattern_score_transformed(s='\u00bd\u0097\u00ac\u00ca\ud8a5\udd3ap')\nPASS: string_pattern_score_transformed(s='\ud9ca\udd43x\u00c4\u00beU')\nPASS: string_pattern_score_transformed(s='\u00ea')\nPASS: string_pattern_score_transformed(s='\u00cdl')\nPASS: string_pattern_score_transformed(s='\ud810\uded9+\u00ed\udb0f\udcac\udba1\udff6\u00d6%\u00c7\ua771v')\nPASS: string_pattern_score_transformed(s='\u00a8Y\u00c6')\nPASS: string_pattern_score_transformed(s='\u00c5\uda08\udd01'\u00d2\n')\nPASS: string_pattern_score_transformed(s='Pj\u0014{\u009e\u00ea\u00c4|fp')\nPASS: string_pattern_score_transformed(s='\udbbc\udc75\u000b\u00ecx\n\u00cc\b\ud9e6\udd78)\u00be')\nPASS: string_pattern_score_transformed(s='\ud879\udfba')\nPASS: string_pattern_score_transformed(s='A')\nPASS: string_pattern_score_transformed(s='\uda01\udef0K\u000e\u00fa\u00b7\u0098\u00fb \u0091\u00b6')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[13])\nPASS: sum_until_limit_transformed(nums=[8])\nPASS: sum_until_limit_transformed(nums=[8, 5])\nPASS: sum_until_limit_transformed(nums=[9])\nPASS: sum_until_limit_transformed(nums=[13, 3, 16, 20])\nPASS: sum_until_limit_transformed(nums=[17, 6, 5, 7])\nPASS: sum_until_limit_transformed(nums=[15, 10])\nPASS: sum_until_limit_transformed(nums=[3, 19, 5, 20])\nPASS: sum_until_limit_transformed(nums=[12, 6, 1])\nPASS: sum_until_limit_transformed(nums=[10, 6, 7])\nPASS: sum_until_limit_transformed(nums=[7, 6, 7])\nPASS: sum_until_limit_transformed(nums=[7, 7, 7])\nPASS: sum_until_limit_transformed(nums=[19, 10, 13, 17, 13, 14])\nPASS: sum_until_limit_transformed(nums=[19, 10, 13, 17, 13, 13])\nPASS: sum_until_limit_transformed(nums=[19, 10, 13, 13, 13, 13])\nPASS: sum_until_limit_transformed(nums=[19, 10, 19, 13, 13, 13])\nPASS: sum_until_limit_transformed(nums=[19, 19, 19, 13, 13, 13])\nPASS: sum_until_limit_transformed(nums=[19, 19, 19, 13, 13, 19])\nPASS: sum_until_limit_transformed(nums=[13, 19, 19, 13, 13, 13])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[5])\nPASS: count_divisibles_transformed(nums=[19])\nPASS: count_divisibles_transformed(nums=[19, 13, 3])\nPASS: count_divisibles_transformed(nums=[20])\nPASS: count_divisibles_transformed(nums=[9, 20, 18])\nPASS: count_divisibles_transformed(nums=[6, 17, 10, 2, 18])\nPASS: count_divisibles_transformed(nums=[12, 12, 17, 13, 8, 10, 2, 9, 18, 14])\nPASS: count_divisibles_transformed(nums=[2, 19, 13])\nPASS: count_divisibles_transformed(nums=[6])\nPASS: count_divisibles_transformed(nums=[3, 2, 9])\nPASS: count_divisibles_transformed(nums=[2, 2, 9])\nPASS: count_divisibles_transformed(nums=[9, 2, 9])\nPASS: count_divisibles_transformed(nums=[9, 9, 9])\nPASS: count_divisibles_transformed(nums=[9])\nPASS: count_divisibles_transformed(nums=[15, 19, 12, 11, 4])\nPASS: count_divisibles_transformed(nums=[15, 19, 12, 11, 19])\nPASS: count_divisibles_transformed(nums=[15, 19, 12, 11, 12])\nPASS: count_divisibles_transformed(nums=[15, 19, 12, 15, 12])\nPASS: count_divisibles_transformed(nums=[15, 19, 15, 15, 12])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[9])\nPASS: index_weighted_sum_transformed(lst=[9, 4])\nPASS: index_weighted_sum_transformed(lst=[5, 5, 8])\nPASS: index_weighted_sum_transformed(lst=[8, 3, 3, 6, 0])\nPASS: index_weighted_sum_transformed(lst=[4, 2, 5, 10, 8, 4, 9, 4, 5, 3])\nPASS: index_weighted_sum_transformed(lst=[1, 4, 1, 7, 2, 7, 8, 6, 6])\nPASS: index_weighted_sum_transformed(lst=[4])\nPASS: index_weighted_sum_transformed(lst=[0, 4, 5, 2, 6, 6, 4, 6, 0, 3])\nPASS: index_weighted_sum_transformed(lst=[7, 5])\nPASS: index_weighted_sum_transformed(lst=[2, 8, 2, 6])\nPASS: index_weighted_sum_transformed(lst=[2, 6, 2, 6])\nPASS: index_weighted_sum_transformed(lst=[2, 6, 6, 6])\nPASS: index_weighted_sum_transformed(lst=[6, 6, 6, 6])\nPASS: index_weighted_sum_transformed(lst=[3])\nPASS: index_weighted_sum_transformed(lst=[10, 9, 4, 3, 9, 5, 1, 6, 3, 8])\nPASS: index_weighted_sum_transformed(lst=[10, 9, 4, 3, 9, 5, 1, 1, 3, 8])\nPASS: index_weighted_sum_transformed(lst=[10, 9, 4, 3, 9, 5, 10, 1, 3, 8])\nPASS: index_weighted_sum_transformed(lst=[4, 0, 0, 1, 8, 0, 3])\nPASS: index_weighted_sum_transformed(lst=[4, 1, 0, 1, 8, 0, 3])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=1)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u0002n\u00f2\ud866\udecb<\udb84\uddae\u7115C\u00fb3')\nPASS: character_counter_transformed(text='\udb14\udc34\uda83\udc3a(\ud96e\udcb4\ud806\udc6c\u00caj\u00b22\u009c')\nPASS: character_counter_transformed(text='P\u00eb')\nPASS: character_counter_transformed(text='\ud83c\udffb\ud83d\udc4d\ud83c\udffb')\nPASS: character_counter_transformed(text='\u0012Q\u00dc\u00e0\u00bc\u00f7\u00a5\ud896\udd68N\u00b1')\nPASS: character_counter_transformed(text='\u00c8\u0010\u001c\udb4e\udc83\ud849\uddbe\u00deo\u00ba@\u00b2')\nPASS: character_counter_transformed(text='R\u0081')\nPASS: character_counter_transformed(text='\ud82e\udc96\u000b')\nPASS: character_counter_transformed(text='\u00e7)\u00954')\nPASS: character_counter_transformed(text='\u00b6\u0094\u000f&\\BE\udbd1\udfff\u0005W')\nPASS: character_counter_transformed(text='\u0001\u00a9')\nPASS: character_counter_transformed(text='\u00ef\ud93e\udcb6\u8b70\u00dc')\nPASS: character_counter_transformed(text='Z\ud847\udd42F')\nPASS: character_counter_transformed(text='l\u00b0)\uff45u]_G\u00c3\u00d3')\nPASS: character_counter_transformed(text='\n')\nPASS: character_counter_transformed(text='\u00ab(\u0094\u00ca\u0080\u00f1\u00a0\udbb0\udf48H\ucba8')\nPASS: character_counter_transformed(text='O\udb4a\udc82e\ud91b\ude09{\u0006\u009f(')\nPASS: character_counter_transformed(text='a\uda6e\udea9\u000f')\nPASS: character_counter_transformed(text='\u00f9\ud89e\uded97y')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[60])\nPASS: rolling_maximum_transformed(values=[60, 84])\nPASS: rolling_maximum_transformed(values=[71, 1, 85, 87, 96, 80, 22, 95, 85, 55])\nPASS: rolling_maximum_transformed(values=[30])\nPASS: rolling_maximum_transformed(values=[46, 14, 71])\nPASS: rolling_maximum_transformed(values=[96, 95])\nPASS: rolling_maximum_transformed(values=[58])\nPASS: rolling_maximum_transformed(values=[98, 99])\nPASS: rolling_maximum_transformed(values=[73])\nPASS: rolling_maximum_transformed(values=[33, 41, 67, 14, 73])\nPASS: rolling_maximum_transformed(values=[33, 41, 73, 14, 73])\nPASS: rolling_maximum_transformed(values=[33, 41, 73, 14, 33])\nPASS: rolling_maximum_transformed(values=[33, 41, 73, 14, 14])\nPASS: rolling_maximum_transformed(values=[33, 73, 73, 14, 14])\nPASS: rolling_maximum_transformed(values=[14, 73, 73, 14, 14])\nPASS: rolling_maximum_transformed(values=[14, 73, 73, 14])\nPASS: rolling_maximum_transformed(values=[32, 19, 60, 17, 68, 58])\nPASS: rolling_maximum_transformed(values=[17, 19, 60, 17, 68, 58])\nPASS: rolling_maximum_transformed(values=[17, 19, 60, 68, 68, 58])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "ascii_average": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=33)\nPASS: process_data_transformed(x=99)\nPASS: process_data_transformed(x=42)\nPASS: process_data_transformed(x=60)\nPASS: process_data_transformed(x=26)\nPASS: process_data_transformed(x=24)\nPASS: process_data_transformed(x=81)\nPASS: process_data_transformed(x=71)\nPASS: process_data_transformed(x=12)\nPASS: process_data_transformed(x=35)\nPASS: process_data_transformed(x=23)\nPASS: process_data_transformed(x=17)\nPASS: process_data_transformed(x=31)\nPASS: process_data_transformed(x=28)\nPASS: process_data_transformed(x=30)\nPASS: process_data_transformed(x=44)\nPASS: process_data_transformed(x=90)\nPASS: process_data_transformed(x=2)\nPASS: process_data_transformed(x=37)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=52.70151401665751)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=86.35594681263812)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=44.47404460125804)\nPASS: convert_temperature_transformed(c=84.14348977733998)\nPASS: convert_temperature_transformed(c=31.375371870697084)\nPASS: convert_temperature_transformed(c=57.71178130592204)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=111.37791305955977, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=1.401298464324817e-45)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=1.5, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=174.39628379369424, discount_rate=0.6786001179928892)\nPASS: calculate_discount_transformed(price=0.6786001179928892, discount_rate=0.6786001179928892)\nPASS: calculate_discount_transformed(price=171.14828381772585, discount_rate=0.7926031881505062)\nPASS: calculate_discount_transformed(price=171.14828381772585, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=0.17164340929413838)\nPASS: calculate_discount_transformed(price=0.17164340929413838, discount_rate=0.17164340929413838)\nPASS: calculate_discount_transformed(price=107.23320526774123, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=2.225073858507e-311)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-17.41046801780527, imag=0.0)\nPASS: process_complex_number_transformed(real=-17.41046801780527, imag=3.345507975265413)\nPASS: process_complex_number_transformed(real=-2.225073858507e-311, imag=0.037683590494909595)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=-19.0)\nPASS: process_complex_number_transformed(real=-2.521039082109555e-271, imag=-1e-05)\nPASS: process_complex_number_transformed(real=-2.3813386148606277, imag=19.0)\nPASS: process_complex_number_transformed(real=-20.0, imag=-0.5)\nPASS: process_complex_number_transformed(real=1.1, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-1.9, imag=1.175494351e-38)\nPASS: process_complex_number_transformed(real=-19.0, imag=2.2250738585e-313)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=2.2250738585e-313)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=2.00001)\nPASS: process_complex_number_transformed(real=2.00001, imag=2.00001)\nPASS: process_complex_number_transformed(real=13.998834455364857, imag=5e-324)\nPASS: process_complex_number_transformed(real=5e-324, imag=5e-324)\nPASS: process_complex_number_transformed(real=12.275206288545405, imag=13.346402027910436)\nPASS: process_complex_number_transformed(real=12.275206288545405, imag=12.275206288545405)\nPASS: process_complex_number_transformed(real=-18.069674954889113, imag=6.732973439931556e-268)\nPASS: process_complex_number_transformed(real=-18.069674954889113, imag=-18.069674954889113)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=99)\nPASS: transform_data_transformed(input_value=35)\nPASS: transform_data_transformed(input_value=15)\nPASS: transform_data_transformed(input_value=29)\nPASS: transform_data_transformed(input_value=10)\nPASS: transform_data_transformed(input_value=57)\nPASS: transform_data_transformed(input_value=23)\nPASS: transform_data_transformed(input_value=40)\nPASS: transform_data_transformed(input_value=34)\nPASS: transform_data_transformed(input_value=54)\nPASS: transform_data_transformed(input_value=79)\nPASS: transform_data_transformed(input_value=82)\nPASS: transform_data_transformed(input_value=36)\nPASS: transform_data_transformed(input_value=55)\nPASS: transform_data_transformed(input_value=4)\nPASS: transform_data_transformed(input_value=33)\nPASS: transform_data_transformed(input_value=2)\nPASS: transform_data_transformed(input_value=26)\nPASS: transform_data_transformed(input_value=80)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=2.5577272627197817e-47)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=5.376066537082812)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=5.130399830173849e-136)\nPASS: circle_area_diff_transformed(r=8.101261649029558)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=15.821994184721797)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=4.427170341635947)\nPASS: circle_area_diff_transformed(r=7.529688687189113)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=14.54961627486253)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=5, b=1, c=1)\nPASS: triangle_checker_transformed(a=5, b=5, c=7)\nPASS: triangle_checker_transformed(a=17, b=1, c=2)\nPASS: triangle_checker_transformed(a=1, b=6, c=9)\nPASS: triangle_checker_transformed(a=20, b=2, c=8)\nPASS: triangle_checker_transformed(a=15, b=9, c=2)\nPASS: triangle_checker_transformed(a=13, b=18, c=5)\nPASS: triangle_checker_transformed(a=14, b=5, c=3)\nPASS: triangle_checker_transformed(a=18, b=13, c=14)\nPASS: triangle_checker_transformed(a=9, b=3, c=12)\nPASS: triangle_checker_transformed(a=9, b=3, c=9)\nPASS: triangle_checker_transformed(a=3, b=3, c=9)\nPASS: triangle_checker_transformed(a=9, b=9, c=9)\nPASS: triangle_checker_transformed(a=12, b=14, c=1)\nPASS: triangle_checker_transformed(a=12, b=14, c=12)\nPASS: triangle_checker_transformed(a=12, b=12, c=12)\nPASS: triangle_checker_transformed(a=14, b=6, c=15)\nPASS: triangle_checker_transformed(a=14, b=6, c=6)\nPASS: triangle_checker_transformed(a=6, b=6, c=6)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=36.76350405730547)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=76.5651027387144)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=4.738863841448284)\nPASS: temperature_offset_transformed(c=46.297577206384375)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=83.9127316970056)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-10, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-10, b=7, c=4)\nPASS: quadratic_discriminant_transformed(a=2, b=7, c=7)\nPASS: quadratic_discriminant_transformed(a=-2, b=-8, c=6)\nPASS: quadratic_discriminant_transformed(a=-9, b=7, c=1)\nPASS: quadratic_discriminant_transformed(a=-1, b=2, c=-10)\nPASS: quadratic_discriminant_transformed(a=6, b=7, c=9)\nPASS: quadratic_discriminant_transformed(a=-2, b=8, c=1)\nPASS: quadratic_discriminant_transformed(a=-5, b=0, c=-10)\nPASS: quadratic_discriminant_transformed(a=2, b=-2, c=1)\nPASS: quadratic_discriminant_transformed(a=-2, b=-2, c=1)\nPASS: quadratic_discriminant_transformed(a=-2, b=-2, c=-2)\nPASS: quadratic_discriminant_transformed(a=8, b=0, c=-10)\nPASS: quadratic_discriminant_transformed(a=8, b=0, c=8)\nPASS: quadratic_discriminant_transformed(a=8, b=8, c=8)\nPASS: quadratic_discriminant_transformed(a=-10, b=6, c=-4)\nPASS: quadratic_discriminant_transformed(a=-4, b=6, c=-4)\nPASS: quadratic_discriminant_transformed(a=6, b=6, c=-4)\nPASS: quadratic_discriminant_transformed(a=6, b=-4, c=-4)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=1.1, y=0.0)\nPASS: vector_norm_transformed(x=1.1, y=2.225073858507203e-309)\nPASS: vector_norm_transformed(x=-1.1754943508222875e-38, y=-0.5)\nPASS: vector_norm_transformed(x=-5e-324, y=1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=1.175494351e-38, y=-1.8455517704660083e-10)\nPASS: vector_norm_transformed(x=-1e-05, y=-10.0)\nPASS: vector_norm_transformed(x=0.46996783929742314, y=-1.9)\nPASS: vector_norm_transformed(x=-9.999999999999998, y=1.401298464324817e-45)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=1.5)\nPASS: vector_norm_transformed(x=-1.0425770259059042e-157, y=-0.5)\nPASS: vector_norm_transformed(x=-0.5, y=-0.5)\nPASS: vector_norm_transformed(x=-10.0, y=-9.999999999999998)\nPASS: vector_norm_transformed(x=-9.999999999999998, y=-9.999999999999998)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=9.545442234191913)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=-1.175494351e-38)\nPASS: vector_norm_transformed(x=-5.960464477539063e-08, y=-9.999999999999998)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=1.175494351e-38)\nPASS: vector_norm_transformed(x=1.175494351e-38, y=1.175494351e-38)\nPASS: vector_norm_transformed(x=1.175494351e-38, y=-0.5)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=0.0)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=8.381040324897203)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=1.5, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=9.212415894979353)\nPASS: hypotenuse_diff_transformed(a=8.635779801897803, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=1.1, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=1.1, b=1.1)\nPASS: hypotenuse_diff_transformed(a=0.5, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=0.5, b=0.5)\nPASS: hypotenuse_diff_transformed(a=7.771037488542516, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=1.0, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=1.0, b=1.0)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=4.772497829172676)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u00cd\u00d9\udaa4\udcfd\u00981\u00a7\u00dc\u00f6\u001f\udb1b\ude24')\nPASS: ascii_average_transformed(s='G|\u00ba\uda81\udefe\b\u00f4\u00e4\ud9a5\uddaa\udb7d\udf61\udb7f\ude2b')\nPASS: ascii_average_transformed(s='y')\nPASS: ascii_average_transformed(s='V\u00a9\u000f\ud998\udd2a;\ud9da\udc50\u0014\udb60\udc34\u0094T')\nPASS: ascii_average_transformed(s='\ud975\udc90\u0098\u00b0\u00ec\u0011i')\nPASS: ascii_average_transformed(s='7+j')\nPASS: ascii_average_transformed(s='\ud87d\udcd0\u00df\u00bb\ua550')\nPASS: ascii_average_transformed(s='\u00f4\u0093\udb7c\udf61I\u0015\ud87d\udfeb\u008aF}\udb46\udf17')\nPASS: ascii_average_transformed(s='\u00eb\u00b2F\u00df\u0015\ud885\udf9b\u00f6')\nPASS: ascii_average_transformed(s='-\u00b3')\nPASS: ascii_average_transformed(s='9')\nPASS: ascii_average_transformed(s='E\u00df0\u00f4\ud9cb\udffc\u00b7\udad6\udd69\ud9dc\uddeb')\nPASS: ascii_average_transformed(s='\ud88e\udf27\u0001\u00b9')\nPASS: ascii_average_transformed(s='o')\nPASS: ascii_average_transformed(s='\n\u00e9y1\uda35\udd48\u00af')\nPASS: ascii_average_transformed(s='\u00ce\u00fa\udaa1\udc1d\u00b1')\nPASS: ascii_average_transformed(s='\ud891\udda7\udb9f\udefa\ud9ab\ude2f')\nPASS: ascii_average_transformed(s='\u0081\u00b2?\u00bcE)\uda8b\udc99\udbe9\udec8e\u00e4')\nPASS: ascii_average_transformed(s='\u00b49G\udae3\uddfb\u0095\ud972\udc2c')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[4, 0])\nPASS: list_balance_transformed(nums=[4, 6, 8, 9])\nPASS: list_balance_transformed(nums=[0, 2, 0])\nPASS: list_balance_transformed(nums=[4, 5, 4, 7, 1, 1, 10, 9, 0, 4])\nPASS: list_balance_transformed(nums=[10, 5, 6, 1, 2, 7, 7, 5, 5])\nPASS: list_balance_transformed(nums=[9, 7, 0])\nPASS: list_balance_transformed(nums=[9, 5, 5])\nPASS: list_balance_transformed(nums=[4, 6])\nPASS: list_balance_transformed(nums=[1, 3, 8, 3, 7, 1, 3])\nPASS: list_balance_transformed(nums=[7, 6, 4, 3, 1, 7, 6, 8, 6])\nPASS: list_balance_transformed(nums=[7, 6, 8, 3, 1, 7, 6, 8, 6])\nPASS: list_balance_transformed(nums=[7, 6, 8, 3, 1, 7, 8, 8, 6])\nPASS: list_balance_transformed(nums=[7, 6, 8, 3, 1, 7, 8, 7, 6])\nPASS: list_balance_transformed(nums=[7, 6, 8, 3, 1, 3, 8, 7, 6])\nPASS: list_balance_transformed(nums=[7, 1, 8, 3, 1, 3, 8, 7, 6])\nPASS: list_balance_transformed(nums=[10, 6, 4, 1, 10, 2, 2, 3])\nPASS: list_balance_transformed(nums=[10, 6, 4, 1, 10, 2, 4, 3])\nPASS: list_balance_transformed(nums=[10, 6, 4, 1, 10, 2, 10, 3])\nPASS: list_balance_transformed(nums=[10, 6, 10, 1, 10, 2, 10, 3])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[1])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[0, 7, 4, 0, 6, 2, 1, 0, 1, 9])\nPASS: odd_sum_validator_transformed(lst=[10, 6, 10, 10, 9, 8, 4, 9])\nPASS: odd_sum_validator_transformed(lst=[2, 1, 8, 6])\nPASS: odd_sum_validator_transformed(lst=[6, 9])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[4])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[5, 2, 2, 0, 6])\nPASS: odd_sum_validator_transformed(lst=[5, 2, 2, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[2, 2, 2, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[6])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[10, 6])\nPASS: odd_sum_validator_transformed(lst=[7, 5, 2, 2, 6, 7, 10, 9, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[7, 5, 0, 2, 6, 7, 10, 9, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[7, 5, 0, 2, 6, 10, 10, 9, 0, 2])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u0004\u00ab\ud9a1\udd6f\ud8fc\uddf3\u001b\udb1b\udf59\u00d8\ud20a\u000b')\nPASS: string_pattern_score_transformed(s='\ud968\ude98\u00a4\u00f4')\nPASS: string_pattern_score_transformed(s='none')\nPASS: string_pattern_score_transformed(s='\u0089\u00a0\u009b\u00dcr\u0005\udb62\ude7c')\nPASS: string_pattern_score_transformed(s='K 3\udb27\uded3\u009a\bM\u001b\u00ab0')\nPASS: string_pattern_score_transformed(s='1\u0097\n\u00be7\u009bD\u00b1j\u00dd')\nPASS: string_pattern_score_transformed(s='~')\nPASS: string_pattern_score_transformed(s='\u00da\u0011\u009d\u00da\u00bb\u00af')\nPASS: string_pattern_score_transformed(s='\u009b\u156f\ud9b8\udd18\u00be\u00cb\ud978\ude2e')\nPASS: string_pattern_score_transformed(s='\u00be~\u00a9\u00f5')\nPASS: string_pattern_score_transformed(s='U\ud9c7\udfcf\u000f')\nPASS: string_pattern_score_transformed(s='X\u00eb\u0080\u00e4A\u009c6\ud809\udc6c\ud806\udc9c'')\nPASS: string_pattern_score_transformed(s='\u00f9')\nPASS: string_pattern_score_transformed(s='\u00fa')\nPASS: string_pattern_score_transformed(s='\u0012\u00a4\u00e5')\nPASS: string_pattern_score_transformed(s='\u00fd9,')\nPASS: string_pattern_score_transformed(s='\uda0e\ude78\u0015SM\ud926\ude82\u00f8zo>(')\nPASS: string_pattern_score_transformed(s='\u00be|a')\nPASS: string_pattern_score_transformed(s='\u00e8\u00a9\udb21\udf6f')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[6])\nPASS: sum_until_limit_transformed(nums=[12])\nPASS: sum_until_limit_transformed(nums=[11, 15, 7, 1, 11])\nPASS: sum_until_limit_transformed(nums=[4, 10, 3, 20, 13, 13, 17, 14, 5])\nPASS: sum_until_limit_transformed(nums=[13, 18, 14])\nPASS: sum_until_limit_transformed(nums=[15, 13, 13, 11, 18, 4, 2, 12, 10])\nPASS: sum_until_limit_transformed(nums=[19, 15, 13])\nPASS: sum_until_limit_transformed(nums=[19])\nPASS: sum_until_limit_transformed(nums=[18, 9, 11, 2])\nPASS: sum_until_limit_transformed(nums=[16, 17])\nPASS: sum_until_limit_transformed(nums=[17, 17])\nPASS: sum_until_limit_transformed(nums=[17])\nPASS: sum_until_limit_transformed(nums=[10, 2, 10, 13, 9, 8])\nPASS: sum_until_limit_transformed(nums=[8, 2, 10, 13, 9, 8])\nPASS: sum_until_limit_transformed(nums=[8, 2, 8, 13, 9, 8])\nPASS: sum_until_limit_transformed(nums=[8, 2, 13, 13, 9, 8])\nPASS: sum_until_limit_transformed(nums=[8, 8, 13, 13, 9, 8])\nPASS: sum_until_limit_transformed(nums=[8, 8, 13, 13, 9, 13])\nPASS: sum_until_limit_transformed(nums=[8, 8, 9, 13, 9, 13])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[17])\nPASS: count_divisibles_transformed(nums=[20])\nPASS: count_divisibles_transformed(nums=[20, 11, 9])\nPASS: count_divisibles_transformed(nums=[2])\nPASS: count_divisibles_transformed(nums=[6, 18, 1, 11, 3, 1])\nPASS: count_divisibles_transformed(nums=[1])\nPASS: count_divisibles_transformed(nums=[17, 1, 14, 13, 19, 6, 13, 15, 11, 6])\nPASS: count_divisibles_transformed(nums=[13, 13, 15, 15, 11, 20, 13, 10, 2, 16])\nPASS: count_divisibles_transformed(nums=[0, 4, 1, 3, 13, 13, 2, 6, 1, 15])\nPASS: count_divisibles_transformed(nums=[4, 17, 14, 9, 20, 13, 19, 18, 13, 2])\nPASS: count_divisibles_transformed(nums=[4, 17, 18, 9, 20, 13, 19, 18, 13, 2])\nPASS: count_divisibles_transformed(nums=[4, 4, 18, 9, 20, 13, 19, 18, 13, 2])\nPASS: count_divisibles_transformed(nums=[4, 4, 19, 9, 20, 13, 19, 18, 13, 2])\nPASS: count_divisibles_transformed(nums=[4, 4, 19, 4, 20, 13, 19, 18, 13, 2])\nPASS: count_divisibles_transformed(nums=[4, 4, 19, 4, 20, 4, 19, 18, 13, 2])\nPASS: count_divisibles_transformed(nums=[4, 4, 19, 4, 20, 4, 4, 18, 13, 2])\nPASS: count_divisibles_transformed(nums=[11])\nPASS: count_divisibles_transformed(nums=[6])\nPASS: count_divisibles_transformed(nums=[16, 7, 17, 18, 17, 17, 17])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[9])\nPASS: index_weighted_sum_transformed(lst=[3])\nPASS: index_weighted_sum_transformed(lst=[4])\nPASS: index_weighted_sum_transformed(lst=[8, 1, 5, 8])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[6, 6, 10])\nPASS: index_weighted_sum_transformed(lst=[1, 5, 7])\nPASS: index_weighted_sum_transformed(lst=[0, 1, 7, 9, 6, 7, 2, 7, 8, 0])\nPASS: index_weighted_sum_transformed(lst=[10, 0, 9, 3, 7, 2])\nPASS: index_weighted_sum_transformed(lst=[5, 5, 3, 8, 1, 3, 1, 9])\nPASS: index_weighted_sum_transformed(lst=[3, 5, 3, 8, 1, 3, 1, 9])\nPASS: index_weighted_sum_transformed(lst=[3, 5, 3, 8, 1, 3, 1, 8])\nPASS: index_weighted_sum_transformed(lst=[3, 5, 3, 8, 1, 3, 1, 5])\nPASS: index_weighted_sum_transformed(lst=[3, 5, 3, 1, 1, 3, 1, 5])\nPASS: index_weighted_sum_transformed(lst=[3, 5, 3, 1, 1, 3, 3, 5])\nPASS: index_weighted_sum_transformed(lst=[3, 5, 3, 1, 1, 3, 5, 5])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[8, 8, 2, 5])\nPASS: index_weighted_sum_transformed(lst=[2, 8, 2, 5])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=2)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00f0\ud83d\udf22\u00c5^\u0012\u00d3L\udb3f\udfdc\u0004\ucbb3')\nPASS: character_counter_transformed(text='5\u008c\u00e0H')\nPASS: character_counter_transformed(text='\u001b\u00f5\u00b1\u0080')\nPASS: character_counter_transformed(text='\u00a6\ud8e6\udc99\u0017\u00b7\ud82a\ude7f\ud9bd\ude69')\nPASS: character_counter_transformed(text='1R')\nPASS: character_counter_transformed(text='\u00b6\u00d6Jr\u00c4\ud913\ude16_cA\uda63\udd85')\nPASS: character_counter_transformed(text='M\u0016\u00d0\ud8b2\udf4b')\nPASS: character_counter_transformed(text='\u000b\u0004\udbd7\udc18\u00c5(@\uda20\udc9e]p\u00b3')\nPASS: character_counter_transformed(text='\udb9d\udcf3\u00f1\uda85\ude4a~\ud849\udd96J}7\u0015-')\nPASS: character_counter_transformed(text='\u007f')\nPASS: character_counter_transformed(text='\ud8ac\ude83\u00b2\u00e5\udba3\udde7\u00ea\u00d0\uda80\udf7a$\u00bd\u008e')\nPASS: character_counter_transformed(text='\udb31\uddde\u00baqj2VI~\u00a1\u0086')\nPASS: character_counter_transformed(text='\u0091m\udb3c\udc63\u0014\ud9c5\udee7\u001f\uda6f\ude6c\u0007\u00df\u0095')\nPASS: character_counter_transformed(text='\u00a9\ud82c\ude31')\nPASS: character_counter_transformed(text='\udb1d\udc61')\nPASS: character_counter_transformed(text='z\u00cb\u0087\"\u00cf\ud9ba\udc4d\ud89b\ude3c\ud899\udefe')\nPASS: character_counter_transformed(text='W\u72bd\u00c8\u001a\u00d0}\u00b1\u34c0\u0099\u0087')\nPASS: character_counter_transformed(text='\ud97b\ude49\u00d0')\nPASS: character_counter_transformed(text='\u001f')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[33])\nPASS: rolling_maximum_transformed(values=[33, 13, 83])\nPASS: rolling_maximum_transformed(values=[10])\nPASS: rolling_maximum_transformed(values=[93, 25, 2])\nPASS: rolling_maximum_transformed(values=[0, 10, 70, 91, 13, 35, 36, 23, 54, 63])\nPASS: rolling_maximum_transformed(values=[75, 68, 35, 25, 90, 27, 88, 32, 68, 33])\nPASS: rolling_maximum_transformed(values=[93])\nPASS: rolling_maximum_transformed(values=[88, 0, 13, 43, 89, 56, 12, 99, 53, 80])\nPASS: rolling_maximum_transformed(values=[47, 47, 36, 0, 92, 87, 52, 63, 8, 57])\nPASS: rolling_maximum_transformed(values=[76, 92, 57, 34])\nPASS: rolling_maximum_transformed(values=[76, 92, 34, 34])\nPASS: rolling_maximum_transformed(values=[92, 92, 34, 34])\nPASS: rolling_maximum_transformed(values=[92, 92, 92, 34])\nPASS: rolling_maximum_transformed(values=[92, 92, 92, 92])\nPASS: rolling_maximum_transformed(values=[68])\nPASS: rolling_maximum_transformed(values=[53, 92, 15, 34, 49, 42, 81])\nPASS: rolling_maximum_transformed(values=[53, 15, 15, 34, 49, 42, 81])\nPASS: rolling_maximum_transformed(values=[53, 15, 15, 34, 49, 42, 42])\nPASS: rolling_maximum_transformed(values=[53, 15, 15, 34, 49, 42, 53])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "list_balance": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=47)\nPASS: process_data_transformed(x=5)\nPASS: process_data_transformed(x=21)\nPASS: process_data_transformed(x=12)\nPASS: process_data_transformed(x=22)\nPASS: process_data_transformed(x=75)\nPASS: process_data_transformed(x=38)\nPASS: process_data_transformed(x=59)\nPASS: process_data_transformed(x=62)\nPASS: process_data_transformed(x=58)\nPASS: process_data_transformed(x=43)\nPASS: process_data_transformed(x=97)\nPASS: process_data_transformed(x=16)\nPASS: process_data_transformed(x=4)\nPASS: process_data_transformed(x=2)\nPASS: process_data_transformed(x=82)\nPASS: process_data_transformed(x=99)\nPASS: process_data_transformed(x=83)\nPASS: process_data_transformed(x=86)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=2.2250738585072014e-308)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=63.306096046588245)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=54.224305348688574)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=59.108134020549144)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=77.48806247309467)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=98.29806392307306)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=0.1358498222632545)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=1.401298464324817e-45)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=197.80416665489983, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=6.103515625e-05, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=23.49294996607157, discount_rate=0.2800978210218628)\nPASS: calculate_discount_transformed(price=0.2800978210218628, discount_rate=0.2800978210218628)\nPASS: calculate_discount_transformed(price=101.8985613336784, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=0.0)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=-1.5)\nPASS: process_complex_number_transformed(real=-11.497305118757842, imag=2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=-2.225073858507203e-309, imag=0.5)\nPASS: process_complex_number_transformed(real=1e-05, imag=16.839265729663012)\nPASS: process_complex_number_transformed(real=-7.077790951250671, imag=2.2250738585e-313)\nPASS: process_complex_number_transformed(real=-10.19663234232098, imag=-7.581149837940762)\nPASS: process_complex_number_transformed(real=19.999999999999996, imag=-2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-2.225073858507203e-309, imag=5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=-1.1, imag=-6.103515625e-05)\nPASS: process_complex_number_transformed(real=-1.1, imag=-1.1)\nPASS: process_complex_number_transformed(real=-2.220446049250313e-16, imag=4.881388276347224)\nPASS: process_complex_number_transformed(real=-2.220446049250313e-16, imag=-2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=-19.0, imag=10.25541107368155)\nPASS: process_complex_number_transformed(real=10.25541107368155, imag=10.25541107368155)\nPASS: process_complex_number_transformed(real=-1.1754943508222875e-38, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-1.1754943508222875e-38, imag=-1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=-1.175494351e-38, imag=-5.4302678100138095)\nPASS: process_complex_number_transformed(real=-5.4302678100138095, imag=-5.4302678100138095)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=52)\nPASS: transform_data_transformed(input_value=62)\nPASS: transform_data_transformed(input_value=24)\nPASS: transform_data_transformed(input_value=80)\nPASS: transform_data_transformed(input_value=16)\nPASS: transform_data_transformed(input_value=94)\nPASS: transform_data_transformed(input_value=93)\nPASS: transform_data_transformed(input_value=3)\nPASS: transform_data_transformed(input_value=26)\nPASS: transform_data_transformed(input_value=44)\nPASS: transform_data_transformed(input_value=19)\nPASS: transform_data_transformed(input_value=58)\nPASS: transform_data_transformed(input_value=55)\nPASS: transform_data_transformed(input_value=77)\nPASS: transform_data_transformed(input_value=29)\nPASS: transform_data_transformed(input_value=23)\nPASS: transform_data_transformed(input_value=51)\nPASS: transform_data_transformed(input_value=21)\nPASS: transform_data_transformed(input_value=76)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=10.47770097325783)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=10.842802143442116)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=20, b=1, c=1)\nPASS: triangle_checker_transformed(a=20, b=2, c=20)\nPASS: triangle_checker_transformed(a=9, b=19, c=13)\nPASS: triangle_checker_transformed(a=9, b=6, c=12)\nPASS: triangle_checker_transformed(a=9, b=14, c=15)\nPASS: triangle_checker_transformed(a=12, b=7, c=3)\nPASS: triangle_checker_transformed(a=4, b=9, c=10)\nPASS: triangle_checker_transformed(a=19, b=4, c=11)\nPASS: triangle_checker_transformed(a=9, b=9, c=4)\nPASS: triangle_checker_transformed(a=9, b=12, c=17)\nPASS: triangle_checker_transformed(a=17, b=12, c=17)\nPASS: triangle_checker_transformed(a=17, b=17, c=17)\nPASS: triangle_checker_transformed(a=12, b=5, c=20)\nPASS: triangle_checker_transformed(a=12, b=5, c=12)\nPASS: triangle_checker_transformed(a=12, b=12, c=12)\nPASS: triangle_checker_transformed(a=16, b=13, c=9)\nPASS: triangle_checker_transformed(a=16, b=13, c=13)\nPASS: triangle_checker_transformed(a=16, b=16, c=13)\nPASS: triangle_checker_transformed(a=16, b=16, c=16)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=63.061095402087965)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=12.717504774698243)\nPASS: temperature_offset_transformed(c=2.1142884062203886)\nPASS: temperature_offset_transformed(c=1.1091612115627039)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=19.115731941976318)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-3, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-3, b=-9, c=3)\nPASS: quadratic_discriminant_transformed(a=7, b=2, c=-10)\nPASS: quadratic_discriminant_transformed(a=-7, b=9, c=-4)\nPASS: quadratic_discriminant_transformed(a=9, b=10, c=-1)\nPASS: quadratic_discriminant_transformed(a=7, b=-8, c=10)\nPASS: quadratic_discriminant_transformed(a=9, b=-9, c=-10)\nPASS: quadratic_discriminant_transformed(a=-1, b=3, c=-6)\nPASS: quadratic_discriminant_transformed(a=6, b=-8, c=-8)\nPASS: quadratic_discriminant_transformed(a=10, b=2, c=-6)\nPASS: quadratic_discriminant_transformed(a=2, b=2, c=-6)\nPASS: quadratic_discriminant_transformed(a=-6, b=2, c=-6)\nPASS: quadratic_discriminant_transformed(a=-6, b=2, c=2)\nPASS: quadratic_discriminant_transformed(a=-6, b=-6, c=2)\nPASS: quadratic_discriminant_transformed(a=2, b=2, c=2)\nPASS: quadratic_discriminant_transformed(a=2, b=-6, c=-1)\nPASS: quadratic_discriminant_transformed(a=-6, b=-6, c=-1)\nPASS: quadratic_discriminant_transformed(a=-1, b=-6, c=-1)\nPASS: quadratic_discriminant_transformed(a=-1, b=-6, c=-6)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=2.220446049250313e-16, y=0.0)\nPASS: vector_norm_transformed(x=2.220446049250313e-16, y=2.220446049250313e-16)\nPASS: vector_norm_transformed(x=-10.0, y=-1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=-2.220446049250313e-16, y=2.2250738585e-313)\nPASS: vector_norm_transformed(x=-5.853258235373974, y=0.0)\nPASS: vector_norm_transformed(x=-1.1, y=-1.3773812194748906e-139)\nPASS: vector_norm_transformed(x=-5e-324, y=-2.220446049250313e-16)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=9.999999999999998)\nPASS: vector_norm_transformed(x=-6.103515625e-05, y=1e-05)\nPASS: vector_norm_transformed(x=-2.225073858507e-311, y=9.0)\nPASS: vector_norm_transformed(x=-2.225073858507e-311, y=-2.225073858507e-311)\nPASS: vector_norm_transformed(x=0.8912165557754932, y=-9.999999999999998)\nPASS: vector_norm_transformed(x=-9.999999999999998, y=-9.999999999999998)\nPASS: vector_norm_transformed(x=2.00001, y=2.2250738585e-313)\nPASS: vector_norm_transformed(x=2.00001, y=2.00001)\nPASS: vector_norm_transformed(x=-6.389007962710824, y=9.600609490757239e-192)\nPASS: vector_norm_transformed(x=9.600609490757239e-192, y=9.600609490757239e-192)\nPASS: vector_norm_transformed(x=9.0, y=-5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-5.960464477539063e-08, y=-5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=0.0, b=1.0)\nPASS: hypotenuse_diff_transformed(a=1.7620760876007526, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=8.113841850510639)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=6.592375143728849)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=0.5, b=3.236797065905766)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=1.1, b=1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=0.6067476448688592, b=1.192092896e-07)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=1.192092896e-07)\nPASS: hypotenuse_diff_transformed(a=0.0, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=1.5, b=9.0)\nPASS: hypotenuse_diff_transformed(a=1.5, b=1.5)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='-|\u00ad~\u0081xv\u00d5\u00c4')\nPASS: ascii_average_transformed(s='\u0002}\u00be\uda6a\ude97\udbb2\udd38\n\u0080\u00c1\ud8c3\ude65\udafb\udebf')\nPASS: ascii_average_transformed(s='\u00d8')\nPASS: ascii_average_transformed(s='\u0099\u0004\udb99\ude36l\u00b2\u00ab\uda83\udc3aj&')\nPASS: ascii_average_transformed(s='E\u00e2\u0094\u0000')\nPASS: ascii_average_transformed(s='L\u00bb\ud9dc\udddd\u0094\u00df\u00a7:\\W\ud8f7\ude72')\nPASS: ascii_average_transformed(s='Cb\u00d1\udae4\udd34\ud96b\udfbf')\nPASS: ascii_average_transformed(s='\u00c5\uda18\udeb7\u0092\u00e7\u00b4\u008e-\ud9bf\udd9a')\nPASS: ascii_average_transformed(s='\u00ad\u00eff')\nPASS: ascii_average_transformed(s='NaN')\nPASS: ascii_average_transformed(s='t.\u00c9\u00c1')\nPASS: ascii_average_transformed(s='5\ud9b4\ude61\u00173&\u00a2\u00f0g\udbe1\uddfe')\nPASS: ascii_average_transformed(s='\uda0c\ude092\u0013a\u0007\u00a6t\ud988\ude92\udbd8\ude6bU')\nPASS: ascii_average_transformed(s='2\u00c8\u8cdcT\u00b4w\u00f3,\u0094\u00e0')\nPASS: ascii_average_transformed(s='\udbb1\udfad\u0016\udbd4\udd25\u00b8\u00ce\udaf0\ude40\u00dfN\u00e0\u00fa')\nPASS: ascii_average_transformed(s='|\ud861\udfec8')\nPASS: ascii_average_transformed(s='y!\n\udb70\uddef')\nPASS: ascii_average_transformed(s='\u0016N\u009ey\uda42\udfc5')\nPASS: ascii_average_transformed(s='\ud874\udc1a\u00a2G\u00ed~\u00a2')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[8, 0])\nPASS: list_balance_transformed(nums=[8, 2])\nPASS: list_balance_transformed(nums=[4, 8, 1, 6])\nPASS: list_balance_transformed(nums=[8, 3])\nPASS: list_balance_transformed(nums=[8, 3, 1, 0, 8, 3, 10, 3, 3])\nPASS: list_balance_transformed(nums=[6, 8, 2])\nPASS: list_balance_transformed(nums=[7, 8, 4, 3, 7])\nPASS: list_balance_transformed(nums=[3, 7, 2, 2, 7, 6, 5])\nPASS: list_balance_transformed(nums=[7, 5, 7, 10])\nPASS: list_balance_transformed(nums=[10, 4, 8, 3, 5, 9, 9, 8, 9])\nPASS: list_balance_transformed(nums=[10, 4, 8, 3, 5, 9, 4, 8, 9])\nPASS: list_balance_transformed(nums=[10, 8, 8, 3, 5, 9, 4, 8, 9])\nPASS: list_balance_transformed(nums=[10, 3, 8, 3, 5, 9, 4, 8, 9])\nPASS: list_balance_transformed(nums=[10, 3, 8, 3, 3, 9, 4, 8, 9])\nPASS: list_balance_transformed(nums=[10, 8, 8, 3, 3, 9, 4, 8, 9])\nPASS: list_balance_transformed(nums=[10, 8, 8, 8, 3, 9, 4, 8, 9])\nPASS: list_balance_transformed(nums=[10, 7, 2, 8])\nPASS: list_balance_transformed(nums=[10, 7, 2, 10])\nPASS: list_balance_transformed(nums=[10, 2, 2, 10])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[8, 7])\nPASS: odd_sum_validator_transformed(lst=[2, 9, 3, 1, 10, 3, 10])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[9, 1, 3, 5])\nPASS: odd_sum_validator_transformed(lst=[0, 10, 6, 4, 1, 1, 7])\nPASS: odd_sum_validator_transformed(lst=[8, 9])\nPASS: odd_sum_validator_transformed(lst=[6, 0, 0, 0, 2, 1, 6, 0, 10, 9])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[7, 7, 10, 8, 4, 0])\nPASS: odd_sum_validator_transformed(lst=[10, 9, 9, 8, 7, 10, 10, 3, 10, 4])\nPASS: odd_sum_validator_transformed(lst=[10, 9, 9, 8, 7, 10, 3, 3, 10, 4])\nPASS: odd_sum_validator_transformed(lst=[10, 7, 9, 8, 7, 10, 10, 3, 10, 4])\nPASS: odd_sum_validator_transformed(lst=[7, 7, 9, 8, 7, 10, 10, 3, 10, 4])\nPASS: odd_sum_validator_transformed(lst=[7, 7, 9, 8, 7, 10, 8, 3, 10, 4])\nPASS: odd_sum_validator_transformed(lst=[4, 7, 9, 8, 7, 10, 8, 3, 10, 4])\nPASS: odd_sum_validator_transformed(lst=[4, 7, 9, 7, 7, 10, 8, 3, 10, 4])\nPASS: odd_sum_validator_transformed(lst=[7])\nPASS: odd_sum_validator_transformed(lst=[1, 9, 4, 10, 5, 7, 6, 3, 2, 1])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='o\u00f4\udb43\udc3c')\nPASS: string_pattern_score_transformed(s='\ud8e2\udeec\u00b6E\u00b04\u00b74A-\u009c')\nPASS: string_pattern_score_transformed(s='1\u00fe\udae8\udc7cE\u00a64\u00b6\ud857\udfac\udace\udda3\u00ca')\nPASS: string_pattern_score_transformed(s='\u0099\\}\u00c0>\n\u0014?\u00e7g')\nPASS: string_pattern_score_transformed(s='\u00c4w\uda46\udfd3')\nPASS: string_pattern_score_transformed(s='\u0015\ud8dd\udda58\u00b4\u00c2\u00e3\u173a7')\nPASS: string_pattern_score_transformed(s='\udb4d\udd214a\uda60\udf71D\u009cc!')\nPASS: string_pattern_score_transformed(s='\u00f7\u001b^%\u0087\u009f~\u0095\u00cf\u00c0')\nPASS: string_pattern_score_transformed(s='\nq\u0016a\u0010\udbf7\uddc3\u009e\ud859\udd9f')\nPASS: string_pattern_score_transformed(s='\udbe0\udd0c\u00a9\u000b\u00fc\ucfb3\u00de\u00e6\u00dcy\udb43\udfb6')\nPASS: string_pattern_score_transformed(s='6\ud9bd\udef4\ud98e\udc52y\u001a\ud943\uddb0\u0097Zqs')\nPASS: string_pattern_score_transformed(s='\n')\nPASS: string_pattern_score_transformed(s='\ubf68\u001f\u00c7\u0013N\u00e9')\nPASS: string_pattern_score_transformed(s='g')\nPASS: string_pattern_score_transformed(s='z\u00b2\ud9ba\udf5f\udb4e\udc7c\u00ff5')\nPASS: string_pattern_score_transformed(s='\u0001')\nPASS: string_pattern_score_transformed(s=' \u00dc\u0084nE\u00b0\ud955\udca6\u00d1s<')\nPASS: string_pattern_score_transformed(s='HF=e\u001d\ud8a0\udc5e\u0083\u00ef\u00c5|')\nPASS: string_pattern_score_transformed(s='\ud9b0\ude85\u0094\u00bd')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[14])\nPASS: sum_until_limit_transformed(nums=[5])\nPASS: sum_until_limit_transformed(nums=[5, 8])\nPASS: sum_until_limit_transformed(nums=[19, 9, 18, 6])\nPASS: sum_until_limit_transformed(nums=[11, 15])\nPASS: sum_until_limit_transformed(nums=[4, 3])\nPASS: sum_until_limit_transformed(nums=[1])\nPASS: sum_until_limit_transformed(nums=[15, 12, 14, 15, 17, 17, 5, 14, 10, 11])\nPASS: sum_until_limit_transformed(nums=[12, 1, 0, 10, 1, 4, 9, 7])\nPASS: sum_until_limit_transformed(nums=[3, 19, 19, 3, 12, 8])\nPASS: sum_until_limit_transformed(nums=[3, 19, 19, 12, 12, 8])\nPASS: sum_until_limit_transformed(nums=[3, 19, 19, 19, 12, 8])\nPASS: sum_until_limit_transformed(nums=[3, 19])\nPASS: sum_until_limit_transformed(nums=[3, 3])\nPASS: sum_until_limit_transformed(nums=[3])\nPASS: sum_until_limit_transformed(nums=[12])\nPASS: sum_until_limit_transformed(nums=[11])\nPASS: sum_until_limit_transformed(nums=[11, 13, 12, 10, 7, 10, 5, 7, 11, 11])\nPASS: sum_until_limit_transformed(nums=[11, 13, 12, 10, 7, 10, 7, 7, 11, 11])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[20])\nPASS: count_divisibles_transformed(nums=[0, 0])\nPASS: count_divisibles_transformed(nums=[0, 15, 2, 8, 1, 5])\nPASS: count_divisibles_transformed(nums=[2, 14])\nPASS: count_divisibles_transformed(nums=[18, 13, 8])\nPASS: count_divisibles_transformed(nums=[11, 6, 0, 14, 12, 1, 1, 1, 5, 20])\nPASS: count_divisibles_transformed(nums=[3])\nPASS: count_divisibles_transformed(nums=[1, 3])\nPASS: count_divisibles_transformed(nums=[1])\nPASS: count_divisibles_transformed(nums=[9, 8, 3, 9, 20, 14])\nPASS: count_divisibles_transformed(nums=[9, 8])\nPASS: count_divisibles_transformed(nums=[8, 8])\nPASS: count_divisibles_transformed(nums=[20, 2])\nPASS: count_divisibles_transformed(nums=[16, 19, 5, 15, 18, 8, 4])\nPASS: count_divisibles_transformed(nums=[16, 19, 5, 15, 18, 8, 19])\nPASS: count_divisibles_transformed(nums=[16, 19, 5, 15, 19, 8, 19])\nPASS: count_divisibles_transformed(nums=[16, 19, 19, 15, 19, 8, 19])\nPASS: count_divisibles_transformed(nums=[16, 19, 19, 8, 19, 8, 19])\nPASS: count_divisibles_transformed(nums=[16, 19, 19, 8, 19, 8, 8])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[3])\nPASS: index_weighted_sum_transformed(lst=[3, 10, 3])\nPASS: index_weighted_sum_transformed(lst=[3, 4])\nPASS: index_weighted_sum_transformed(lst=[3, 0, 10, 0, 7, 3, 5, 6, 1, 8])\nPASS: index_weighted_sum_transformed(lst=[10, 7, 7, 8, 1, 5, 4, 4, 1])\nPASS: index_weighted_sum_transformed(lst=[0, 1, 3, 4])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[7])\nPASS: index_weighted_sum_transformed(lst=[9, 7, 5, 7])\nPASS: index_weighted_sum_transformed(lst=[4, 4, 7, 8, 8, 5, 4, 5])\nPASS: index_weighted_sum_transformed(lst=[4, 4, 7, 8, 8, 5, 7, 5])\nPASS: index_weighted_sum_transformed(lst=[4, 4, 7, 4, 8, 5, 7, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 4, 7, 4, 8, 5, 7, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 5, 7, 4, 8, 5, 7, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 5, 7, 4, 8, 5, 5, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 5, 5, 4, 8, 5, 5, 5])\nPASS: index_weighted_sum_transformed(lst=[10, 9, 5])\nPASS: index_weighted_sum_transformed(lst=[10, 5, 5])\nPASS: index_weighted_sum_transformed(lst=[10, 10, 5])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=1)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\ud990\uddecs\u0000\uda1a\uded9\u00c4\u0015\u00cfi\u00a6\u009d')\nPASS: character_counter_transformed(text='\udaf3\udd4a\u00d5\u00cab\u009dD\udb40\udd9d\ud9ea\udd0a+\u000f')\nPASS: character_counter_transformed(text='\udae3\udcad\uda57\udd76G\u00bf\uda30\udd27\u00de')\nPASS: character_counter_transformed(text=';\u00e4\uf846\ud843\udf8a_\udbeb\udd8e')\nPASS: character_counter_transformed(text='\u0098^,\u00dd\u00f4\u86e8b')\nPASS: character_counter_transformed(text='\u00ba\ud8e2\ude5a\u00ee\t`')\nPASS: character_counter_transformed(text='\u00b4\uda94\udd8d\u00dc3'\u00d4\u00a4\u00a3')\nPASS: character_counter_transformed(text='\ud93e\udcc8')\nPASS: character_counter_transformed(text='\ud96f\ude79\u000e\ud8a8\udc6f')\nPASS: character_counter_transformed(text='\u00f4?')\nPASS: character_counter_transformed(text='none')\nPASS: character_counter_transformed(text='\u00e5\u0011\ud8db\udd7e\u00cb\udaea\udfcd=\udaf2\uddfffH')\nPASS: character_counter_transformed(text='y\udbc2\udeea')\nPASS: character_counter_transformed(text='M\u00ba\u0001_vW]\ud942\udf89>>')\nPASS: character_counter_transformed(text='\u00da8\u00a1\u00bf<\u0095\u1a2a')\nPASS: character_counter_transformed(text='\u00fd\ufb8a\u00b3eS\u008f(\ud9de\udd1e')\nPASS: character_counter_transformed(text='C')\nPASS: character_counter_transformed(text=';>\t\u00a1\udb28\udede\u00fe')\nPASS: character_counter_transformed(text='Q\u008c\u00d0\ud9a1\uddcd\ud81c\udcbar')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[1])\nPASS: rolling_maximum_transformed(values=[33])\nPASS: rolling_maximum_transformed(values=[83, 59, 9, 58, 20, 37, 32, 94, 14, 15])\nPASS: rolling_maximum_transformed(values=[92, 34, 40, 96, 19, 84, 9, 96, 17, 7])\nPASS: rolling_maximum_transformed(values=[88, 5, 3, 15, 59, 73, 11])\nPASS: rolling_maximum_transformed(values=[88])\nPASS: rolling_maximum_transformed(values=[55, 88, 10, 53, 96, 51])\nPASS: rolling_maximum_transformed(values=[85, 17, 34, 81, 92])\nPASS: rolling_maximum_transformed(values=[84, 41, 100, 64, 86, 43, 91, 96])\nPASS: rolling_maximum_transformed(values=[85])\nPASS: rolling_maximum_transformed(values=[78, 96, 100, 99, 14, 88, 68])\nPASS: rolling_maximum_transformed(values=[96, 96, 100, 99, 14, 88, 68])\nPASS: rolling_maximum_transformed(values=[96, 96, 100, 99, 14, 88, 100])\nPASS: rolling_maximum_transformed(values=[96, 96, 96, 99, 14, 88, 100])\nPASS: rolling_maximum_transformed(values=[96, 96, 96, 100, 14, 88, 100])\nPASS: rolling_maximum_transformed(values=[96, 100, 96, 100, 14, 88, 100])\nPASS: rolling_maximum_transformed(values=[33, 36, 30, 26, 22, 31, 50, 68, 22, 94])\nPASS: rolling_maximum_transformed(values=[33, 94, 30, 26, 22, 31, 50, 68, 22, 94])\nPASS: rolling_maximum_transformed(values=[33, 94, 94, 26, 22, 31, 50, 68, 22, 94])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "odd_sum_validator": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=80)\nPASS: process_data_transformed(x=85)\nPASS: process_data_transformed(x=55)\nPASS: process_data_transformed(x=91)\nPASS: process_data_transformed(x=37)\nPASS: process_data_transformed(x=56)\nPASS: process_data_transformed(x=20)\nPASS: process_data_transformed(x=6)\nPASS: process_data_transformed(x=59)\nPASS: process_data_transformed(x=38)\nPASS: process_data_transformed(x=29)\nPASS: process_data_transformed(x=53)\nPASS: process_data_transformed(x=8)\nPASS: process_data_transformed(x=94)\nPASS: process_data_transformed(x=89)\nPASS: process_data_transformed(x=82)\nPASS: process_data_transformed(x=4)\nPASS: process_data_transformed(x=33)\nPASS: process_data_transformed(x=21)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=6.008998797572331)\nPASS: convert_temperature_transformed(c=28.68439037142561)\nPASS: convert_temperature_transformed(c=22.626661631886076)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=96.64085001202555)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=84.87731372380584)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=24.826784105181204)\nPASS: convert_temperature_transformed(c=83.82816222323399)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=70.13731850528005)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=200.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=0.38076758125082855)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=2.00001, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=133.20001358961255, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=162.0636081177044, discount_rate=0.20940760529975405)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=89.13271702190076, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-1e-05, imag=0.0)\nPASS: process_complex_number_transformed(real=-1e-05, imag=-0.3333333333333333)\nPASS: process_complex_number_transformed(real=0.3333333333333333, imag=1.192092896e-07)\nPASS: process_complex_number_transformed(real=1.9, imag=7.9584645528113676)\nPASS: process_complex_number_transformed(real=1e-05, imag=-0.5)\nPASS: process_complex_number_transformed(real=-19.999999999999996, imag=-0.5)\nPASS: process_complex_number_transformed(real=-1.9, imag=1e-05)\nPASS: process_complex_number_transformed(real=2.225073858507203e-309, imag=6.103515625e-05)\nPASS: process_complex_number_transformed(real=-3.8644876435431966e-240, imag=-1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=-1.5, imag=-19.999999999999996)\nPASS: process_complex_number_transformed(real=-1.5, imag=-1.5)\nPASS: process_complex_number_transformed(real=1.1, imag=0.99999)\nPASS: process_complex_number_transformed(real=0.99999, imag=0.99999)\nPASS: process_complex_number_transformed(real=14.598098722682913, imag=1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=14.598098722682913, imag=14.598098722682913)\nPASS: process_complex_number_transformed(real=9.050391198713733, imag=-1.9)\nPASS: process_complex_number_transformed(real=9.050391198713733, imag=9.050391198713733)\nPASS: process_complex_number_transformed(real=-0.0, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-2.2250738585072014e-308, imag=-2.2250738585072014e-308)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=10)\nPASS: transform_data_transformed(input_value=91)\nPASS: transform_data_transformed(input_value=17)\nPASS: transform_data_transformed(input_value=78)\nPASS: transform_data_transformed(input_value=57)\nPASS: transform_data_transformed(input_value=98)\nPASS: transform_data_transformed(input_value=39)\nPASS: transform_data_transformed(input_value=29)\nPASS: transform_data_transformed(input_value=41)\nPASS: transform_data_transformed(input_value=89)\nPASS: transform_data_transformed(input_value=83)\nPASS: transform_data_transformed(input_value=65)\nPASS: transform_data_transformed(input_value=53)\nPASS: transform_data_transformed(input_value=28)\nPASS: transform_data_transformed(input_value=52)\nPASS: transform_data_transformed(input_value=68)\nPASS: transform_data_transformed(input_value=1)\nPASS: transform_data_transformed(input_value=80)\nPASS: transform_data_transformed(input_value=87)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=3.6026123092388933)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=1.192092896e-07)\nPASS: circle_area_diff_transformed(r=5.898853573724115)\nPASS: circle_area_diff_transformed(r=1.175494351e-38)\nPASS: circle_area_diff_transformed(r=19.290561067766667)\nPASS: circle_area_diff_transformed(r=15.969672381728252)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=1.6346866623202152)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=10, b=1, c=1)\nPASS: triangle_checker_transformed(a=10, b=7, c=20)\nPASS: triangle_checker_transformed(a=11, b=13, c=4)\nPASS: triangle_checker_transformed(a=12, b=6, c=3)\nPASS: triangle_checker_transformed(a=6, b=17, c=4)\nPASS: triangle_checker_transformed(a=16, b=9, c=9)\nPASS: triangle_checker_transformed(a=6, b=13, c=13)\nPASS: triangle_checker_transformed(a=5, b=2, c=20)\nPASS: triangle_checker_transformed(a=6, b=1, c=20)\nPASS: triangle_checker_transformed(a=18, b=13, c=7)\nPASS: triangle_checker_transformed(a=13, b=13, c=7)\nPASS: triangle_checker_transformed(a=13, b=13, c=13)\nPASS: triangle_checker_transformed(a=19, b=2, c=8)\nPASS: triangle_checker_transformed(a=19, b=2, c=19)\nPASS: triangle_checker_transformed(a=19, b=19, c=19)\nPASS: triangle_checker_transformed(a=10, b=10, c=10)\nPASS: triangle_checker_transformed(a=16, b=18, c=11)\nPASS: triangle_checker_transformed(a=16, b=18, c=18)\nPASS: triangle_checker_transformed(a=16, b=18, c=16)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=31.60632455987798)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=57.876181327542675)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=14.189341754775356)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=6, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=6, b=2, c=-6)\nPASS: quadratic_discriminant_transformed(a=-5, b=-3, c=4)\nPASS: quadratic_discriminant_transformed(a=1, b=4, c=-6)\nPASS: quadratic_discriminant_transformed(a=3, b=-8, c=6)\nPASS: quadratic_discriminant_transformed(a=8, b=6, c=-3)\nPASS: quadratic_discriminant_transformed(a=1, b=10, c=3)\nPASS: quadratic_discriminant_transformed(a=-4, b=-3, c=2)\nPASS: quadratic_discriminant_transformed(a=-6, b=-9, c=8)\nPASS: quadratic_discriminant_transformed(a=0, b=1, c=1)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=1)\nPASS: quadratic_discriminant_transformed(a=1, b=0, c=1)\nPASS: quadratic_discriminant_transformed(a=1, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=6, b=-1, c=8)\nPASS: quadratic_discriminant_transformed(a=6, b=8, c=8)\nPASS: quadratic_discriminant_transformed(a=8, b=8, c=8)\nPASS: quadratic_discriminant_transformed(a=-8, b=-4, c=1)\nPASS: quadratic_discriminant_transformed(a=-8, b=-4, c=-4)\nPASS: quadratic_discriminant_transformed(a=-8, b=-4, c=-8)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=2.225073858507e-311, y=0.0)\nPASS: vector_norm_transformed(x=2.225073858507e-311, y=-1.5)\nPASS: vector_norm_transformed(x=-2.225073858507203e-309, y=-0.5)\nPASS: vector_norm_transformed(x=2.220446049250313e-16, y=6.103515625e-05)\nPASS: vector_norm_transformed(x=1.401298464324817e-45, y=-2.220446049250313e-16)\nPASS: vector_norm_transformed(x=0.3333333333333333, y=-8.573066622120024)\nPASS: vector_norm_transformed(x=2.225073858507e-311, y=6.103515625e-05)\nPASS: vector_norm_transformed(x=-6.103515625e-05, y=4.135519464575166)\nPASS: vector_norm_transformed(x=0.99999, y=9.999999999999998)\nPASS: vector_norm_transformed(x=2.2250738585072014e-308, y=-9.0)\nPASS: vector_norm_transformed(x=-9.0, y=-9.0)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=1.1)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=2.225073858507203e-309)\nPASS: vector_norm_transformed(x=2.00001, y=-9.0)\nPASS: vector_norm_transformed(x=1.192092896e-07, y=-2.225073858507e-311)\nPASS: vector_norm_transformed(x=1.192092896e-07, y=1.192092896e-07)\nPASS: vector_norm_transformed(x=2.225073858507e-311, y=-4.11744719609418e-248)\nPASS: vector_norm_transformed(x=-4.11744719609418e-248, y=-4.11744719609418e-248)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=9.0)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=0.0)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=10.0, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=9.94390720450318, b=1.5)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5.3644002346180955)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=1.8195294171931755)\nPASS: hypotenuse_diff_transformed(a=9.0, b=0.5)\nPASS: hypotenuse_diff_transformed(a=9.0, b=9.0)\nPASS: hypotenuse_diff_transformed(a=1.1, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=1.1, b=1.1)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=1.192092896e-07)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=2.225073858507203e-309)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u00ae?\ud9d4\ude4e\u0006\ud83d\udfcf\udb5d\ude04\u00be')\nPASS: ascii_average_transformed(s='\ud89e\udf64\uda39\udfe5\udbe3\udf8f\u00d3\u0082\u0019\u00c1')\nPASS: ascii_average_transformed(s='\udb69\udddd!\u00f4\u00a9\u0004\u00cf,\n\u00b9\ud8f1\udc87')\nPASS: ascii_average_transformed(s='B')\nPASS: ascii_average_transformed(s='\")')\nPASS: ascii_average_transformed(s='\uda2b\udcaf\u00cdK\udbcf\uddcfZ\u00e1\ud9ea\ude0d\u00c9\u0003\u00fb')\nPASS: ascii_average_transformed(s='\u00ef\u00b9\udaf0\ude2f7')\nPASS: ascii_average_transformed(s='\ud870\udc48\u00cb\u00b8\u55a3r\ud8f2\ude0e\u0002\u00b3\u007f\u00bf')\nPASS: ascii_average_transformed(s='#m\u00b9\u00efz\u0004\u00dd\u00fe\u00cd\u00ed')\nPASS: ascii_average_transformed(s='\uda4c\udc05\u00f6\u00d1K}')\nPASS: ascii_average_transformed(s='\u00b7\u007f\u00aa\u00a4\u00a2\u00e7X8')\nPASS: ascii_average_transformed(s='\b')\nPASS: ascii_average_transformed(s='?-\u00df\u00cb{\ud861\udc85')\nPASS: ascii_average_transformed(s='\ud83d\ude0d')\nPASS: ascii_average_transformed(s='\udad4\udca0')\nPASS: ascii_average_transformed(s='M\u0096\udac1\udc0ao\u0086\u00b2O~\u00e9%')\nPASS: ascii_average_transformed(s='\u00a2\u00d9\u00a0\u0093\udb92\udecc\u008d\u008a\n\u00fc')\nPASS: ascii_average_transformed(s='COM1')\nPASS: ascii_average_transformed(s='?')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[3, 0])\nPASS: list_balance_transformed(nums=[3, 0, 3, 9, 3, 7])\nPASS: list_balance_transformed(nums=[3, 9, 4, 10, 7, 2, 3])\nPASS: list_balance_transformed(nums=[7, 3, 1, 4, 2, 10, 0, 10, 9, 7])\nPASS: list_balance_transformed(nums=[5, 4, 9, 9, 1, 0, 6, 1, 4, 1])\nPASS: list_balance_transformed(nums=[1, 9, 7, 2, 3, 9, 2, 8, 7, 5])\nPASS: list_balance_transformed(nums=[6, 2, 0, 3, 1])\nPASS: list_balance_transformed(nums=[10, 4, 7, 10, 1, 2, 7, 9])\nPASS: list_balance_transformed(nums=[1, 4])\nPASS: list_balance_transformed(nums=[8, 1])\nPASS: list_balance_transformed(nums=[8, 8])\nPASS: list_balance_transformed(nums=[2, 7, 2, 8, 10, 5, 9, 8])\nPASS: list_balance_transformed(nums=[2, 7, 2, 5, 10, 5, 9, 8])\nPASS: list_balance_transformed(nums=[2, 7, 2, 5, 2, 5, 9, 8])\nPASS: list_balance_transformed(nums=[2, 7, 2, 5, 2, 5, 2, 8])\nPASS: list_balance_transformed(nums=[2, 7, 2, 5, 2, 7, 2, 8])\nPASS: list_balance_transformed(nums=[2, 7, 2, 7, 2, 7, 2, 8])\nPASS: list_balance_transformed(nums=[2, 7, 7, 7, 2, 7, 2, 8])\nPASS: list_balance_transformed(nums=[4, 0, 3, 7, 0, 1, 10, 4, 10, 1])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[6, 7, 6, 9, 4, 1, 8, 3, 2, 3])\nPASS: odd_sum_validator_transformed(lst=[8, 2])\nPASS: odd_sum_validator_transformed(lst=[2, 3])\nPASS: odd_sum_validator_transformed(lst=[9, 5, 5])\nPASS: odd_sum_validator_transformed(lst=[4, 3])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[6])\nPASS: odd_sum_validator_transformed(lst=[3, 2, 9, 7])\nPASS: odd_sum_validator_transformed(lst=[2, 2, 9, 7])\nPASS: odd_sum_validator_transformed(lst=[2, 2, 2, 7])\nPASS: odd_sum_validator_transformed(lst=[2, 2, 2, 2])\nPASS: odd_sum_validator_transformed(lst=[2, 2])\nPASS: odd_sum_validator_transformed(lst=[1, 3, 0, 5, 2, 9, 0, 5, 0, 5])\nPASS: odd_sum_validator_transformed(lst=[1, 0, 0, 5, 2, 9, 0, 5, 0, 5])\nPASS: odd_sum_validator_transformed(lst=[1, 0, 0, 5, 2, 5, 0, 5, 0, 5])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 0, 5, 2, 5, 0, 5, 0, 5])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\\\u00d3')\nPASS: string_pattern_score_transformed(s='\u0085')\nPASS: string_pattern_score_transformed(s='%Z\u00c9\u00da\u00e3\u0019\ud972\udfa8\ud876\udd80\b\u0005')\nPASS: string_pattern_score_transformed(s='\udae1\udd11\ud9bc\udf7c\ud8bc\udda3')\nPASS: string_pattern_score_transformed(s='\ue62d`')\nPASS: string_pattern_score_transformed(s='E')\nPASS: string_pattern_score_transformed(s='\u00a6~\u0015\u5b36')\nPASS: string_pattern_score_transformed(s='`')\nPASS: string_pattern_score_transformed(s='\u0098j\udad1\udebb\u00fa\u0084\u00ba')\nPASS: string_pattern_score_transformed(s='\u00c1Z')\nPASS: string_pattern_score_transformed(s='\u00ea\u0011')\nPASS: string_pattern_score_transformed(s='\u0094\u00ec1;')\nPASS: string_pattern_score_transformed(s='\u008c\u00c8\u00d8')\nPASS: string_pattern_score_transformed(s='r\u00a7PC\ud814\udc28\ud965\udea2')\nPASS: string_pattern_score_transformed(s='!s\ud964\udf40')\nPASS: string_pattern_score_transformed(s='\u00b0')\nPASS: string_pattern_score_transformed(s='k\u00c2K.\ud87f\udf54\u00bb\u00cf')\nPASS: string_pattern_score_transformed(s='\u0089k\u00f6\u00e0')\nPASS: string_pattern_score_transformed(s='\u0015\u0095\ud9db\ude94\ud99e\udd63\u00c0\ud933\udcaf5')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[17])\nPASS: sum_until_limit_transformed(nums=[1])\nPASS: sum_until_limit_transformed(nums=[10, 11, 11, 10, 10, 13])\nPASS: sum_until_limit_transformed(nums=[2, 5, 3, 0])\nPASS: sum_until_limit_transformed(nums=[18, 7, 7])\nPASS: sum_until_limit_transformed(nums=[9, 8, 13, 2, 3, 19, 0, 6, 5, 9])\nPASS: sum_until_limit_transformed(nums=[8, 2, 12])\nFAIL: sum_until_limit_transformed(nums=[3, 18, 8, 14, 11, 6])\nPASS: sum_until_limit_transformed(nums=[10])\nPASS: sum_until_limit_transformed(nums=[1, 8, 0, 5, 2, 3, 18, 3, 11, 14])\nPASS: sum_until_limit_transformed(nums=[1, 8, 2, 5, 2, 3, 18, 3, 11, 14])\nPASS: sum_until_limit_transformed(nums=[1, 8, 2, 14, 2, 3, 18, 3, 11, 14])\nPASS: sum_until_limit_transformed(nums=[1, 8, 2, 14, 2, 3, 18, 14, 11, 14])\nFAIL: sum_until_limit_transformed(nums=[3, 8, 2, 14, 2, 3, 18, 3, 11, 14])\nPASS: sum_until_limit_transformed(nums=[3, 8, 8, 14, 2, 3, 18, 3, 11, 14])\nPASS: sum_until_limit_transformed(nums=[3, 8, 8, 14, 2, 3, 18, 3, 8, 14])\nPASS: sum_until_limit_transformed(nums=[16, 1, 6, 6, 0, 0, 10])\nPASS: sum_until_limit_transformed(nums=[16, 1, 6, 6, 6, 0, 10])\nPASS: sum_until_limit_transformed(nums=[6])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[19])\nPASS: count_divisibles_transformed(nums=[19, 0, 11])\nPASS: count_divisibles_transformed(nums=[2, 5, 5, 19])\nPASS: count_divisibles_transformed(nums=[8])\nPASS: count_divisibles_transformed(nums=[11, 15])\nPASS: count_divisibles_transformed(nums=[0, 9, 15, 3])\nPASS: count_divisibles_transformed(nums=[16, 15, 7, 16])\nPASS: count_divisibles_transformed(nums=[4, 1, 2])\nPASS: count_divisibles_transformed(nums=[11])\nPASS: count_divisibles_transformed(nums=[6, 11, 20, 12, 20, 9, 9, 12])\nPASS: count_divisibles_transformed(nums=[6, 11, 20, 6, 20, 9, 9, 12])\nPASS: count_divisibles_transformed(nums=[6, 9, 20, 6, 20, 9, 9, 12])\nPASS: count_divisibles_transformed(nums=[14, 7, 2, 20, 15, 12, 14, 1])\nPASS: count_divisibles_transformed(nums=[12, 7, 2, 20, 15, 12, 14, 1])\nPASS: count_divisibles_transformed(nums=[12, 7, 2, 20, 20, 12, 14, 1])\nPASS: count_divisibles_transformed(nums=[12, 7, 20, 20, 20, 12, 14, 1])\nPASS: count_divisibles_transformed(nums=[12, 7, 20, 20, 20, 12, 7, 1])\nPASS: count_divisibles_transformed(nums=[12, 7, 20, 20, 20, 12])\nPASS: count_divisibles_transformed(nums=[12, 7, 7, 20, 20, 12])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[3])\nPASS: index_weighted_sum_transformed(lst=[3, 0])\nPASS: index_weighted_sum_transformed(lst=[2, 9, 2, 9, 1, 3, 0, 3, 0, 2])\nPASS: index_weighted_sum_transformed(lst=[10, 8, 3, 5, 7, 9, 4, 0, 4, 4])\nPASS: index_weighted_sum_transformed(lst=[8, 3, 4, 10, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 3])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[7, 9, 2, 8])\nPASS: index_weighted_sum_transformed(lst=[7])\nPASS: index_weighted_sum_transformed(lst=[6, 1, 4, 6])\nPASS: index_weighted_sum_transformed(lst=[6, 6, 4, 6])\nPASS: index_weighted_sum_transformed(lst=[6, 6])\nPASS: index_weighted_sum_transformed(lst=[5])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[9, 4, 6, 4, 4])\nPASS: index_weighted_sum_transformed(lst=[9, 4, 4, 4, 4])\nPASS: index_weighted_sum_transformed(lst=[4, 4, 4, 4, 4])\nPASS: index_weighted_sum_transformed(lst=[4, 4])\nPASS: index_weighted_sum_transformed(lst=[4])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=9)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00db')\nPASS: character_counter_transformed(text='\u00b7\u00b6;\u0013\u0080\ud985\udcb0Oq\uda87\udcef8')\nPASS: character_counter_transformed(text='x\u00f5\u00fb\ud921\ude97\uda57\udea9\u00a2\u00d9(r\u00ed')\nPASS: character_counter_transformed(text='\u0006\u00d0\u0080\u00fe\u001b')\nPASS: character_counter_transformed(text='\u00d5\ud85d\ude71)\u000f7\u0090^\u001f\udbce\udc88\u0096')\nPASS: character_counter_transformed(text='\u00c2\ud8ad\uddc3\u000b(r\ud90f\udff6\uda72\udea3\ud901\udf6cN')\nPASS: character_counter_transformed(text='\u00e6?\u007f]\u0081D\u0094\u00dce$')\nPASS: character_counter_transformed(text='\uda74\udcba')\nPASS: character_counter_transformed(text=''h~\u00e4\ud829\udfcf\u00e7\u4fce\u00f0\ud8e5\udd52 ')\nPASS: character_counter_transformed(text='\u00f2\u001b\u00ff\u0018\u00b6')\nPASS: character_counter_transformed(text='\u00aez')\nPASS: character_counter_transformed(text='\ud81c\udd45')\nPASS: character_counter_transformed(text='\u00a0')\nPASS: character_counter_transformed(text='\uda79\udea8')\nPASS: character_counter_transformed(text='\u00cd\udb23\udd1c')\nPASS: character_counter_transformed(text='_6\u001f\u0095\ud80b\udf34\udba7\ude7a')\nPASS: character_counter_transformed(text='}\uda5d\uddcd\u00ec\u008e\u00ba\u00e9\u00f2\u00c9?\u00c0')\nPASS: character_counter_transformed(text='\u00ed\ud90e\udddf\ud859\udda5\u00e1\ud92e\udee3a')\nPASS: character_counter_transformed(text='\uda7d\udcc9\u0088\u00a3\u008b\u00f7')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[23])\nPASS: rolling_maximum_transformed(values=[23, 88])\nPASS: rolling_maximum_transformed(values=[30, 47, 96, 56, 56, 85, 59, 56, 95, 22])\nPASS: rolling_maximum_transformed(values=[55, 56, 64, 67, 97, 40, 15, 60, 27])\nPASS: rolling_maximum_transformed(values=[56, 96, 46, 78, 47, 21, 59])\nPASS: rolling_maximum_transformed(values=[88, 58, 9, 5, 72, 86, 32])\nPASS: rolling_maximum_transformed(values=[14, 13, 23, 89, 89, 33, 12, 75, 77, 67])\nPASS: rolling_maximum_transformed(values=[18, 9])\nPASS: rolling_maximum_transformed(values=[71, 40, 47, 76, 71, 62, 7, 82, 40, 36])\nPASS: rolling_maximum_transformed(values=[49, 37])\nPASS: rolling_maximum_transformed(values=[49, 49])\nPASS: rolling_maximum_transformed(values=[27, 64, 52, 21])\nPASS: rolling_maximum_transformed(values=[27, 64, 21, 21])\nPASS: rolling_maximum_transformed(values=[27, 64, 64, 21])\nPASS: rolling_maximum_transformed(values=[64, 64, 64, 21])\nPASS: rolling_maximum_transformed(values=[64, 64, 21, 21])\nPASS: rolling_maximum_transformed(values=[64, 64, 21])\nPASS: rolling_maximum_transformed(values=[82])\nPASS: rolling_maximum_transformed(values=[24, 55, 72, 79])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "string_pattern_score": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=93)\nPASS: process_data_transformed(x=59)\nPASS: process_data_transformed(x=95)\nPASS: process_data_transformed(x=37)\nPASS: process_data_transformed(x=13)\nPASS: process_data_transformed(x=83)\nPASS: process_data_transformed(x=4)\nPASS: process_data_transformed(x=86)\nPASS: process_data_transformed(x=100)\nPASS: process_data_transformed(x=69)\nPASS: process_data_transformed(x=24)\nPASS: process_data_transformed(x=16)\nPASS: process_data_transformed(x=11)\nPASS: process_data_transformed(x=71)\nPASS: process_data_transformed(x=97)\nPASS: process_data_transformed(x=62)\nPASS: process_data_transformed(x=85)\nPASS: process_data_transformed(x=82)\nPASS: process_data_transformed(x=88)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=2.2250738585072014e-308)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=67.70037741656246)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=24.137660893540264)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=0.3333333333333333)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=2.824095856002662e-235)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=0.1865113846339537)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=0.04204050420013195)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=129.04892825903823, discount_rate=0.0)\nFAIL: calculate_discount_transformed(price=50.06830881555119, discount_rate=1.1754943508222875e-38)\nFAIL: calculate_discount_transformed(price=50.06830881555119, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=0.11555324898536126)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.3333333333333333)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=0.0)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=16.836490810522243)\nPASS: process_complex_number_transformed(real=-0.0, imag=2.7132432502106102e-279)\nPASS: process_complex_number_transformed(real=-2.0376668290030118, imag=-0.0)\nPASS: process_complex_number_transformed(real=1.1754943508222875e-38, imag=12.532160416646875)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=-1.175494351e-38)\nPASS: process_complex_number_transformed(real=0.3333333333333333, imag=-2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=-2.220446049250313e-16, imag=5e-324)\nPASS: process_complex_number_transformed(real=-1.9, imag=-5.685744319386064)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=1.175494351e-38)\nPASS: process_complex_number_transformed(real=1.175494351e-38, imag=1.175494351e-38)\nPASS: process_complex_number_transformed(real=-1.5, imag=19.999999999999996)\nPASS: process_complex_number_transformed(real=-1.5, imag=-1.5)\nPASS: process_complex_number_transformed(real=-2.2250738585072014e-308, imag=13.45835193361878)\nPASS: process_complex_number_transformed(real=13.45835193361878, imag=13.45835193361878)\nPASS: process_complex_number_transformed(real=-1.1, imag=-0.99999)\nPASS: process_complex_number_transformed(real=-0.99999, imag=-0.99999)\nPASS: process_complex_number_transformed(real=-2.220446049250313e-16, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=1.1125369292536007e-308)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=83)\nPASS: transform_data_transformed(input_value=2)\nPASS: transform_data_transformed(input_value=86)\nPASS: transform_data_transformed(input_value=12)\nPASS: transform_data_transformed(input_value=60)\nPASS: transform_data_transformed(input_value=31)\nPASS: transform_data_transformed(input_value=59)\nPASS: transform_data_transformed(input_value=22)\nPASS: transform_data_transformed(input_value=81)\nPASS: transform_data_transformed(input_value=41)\nPASS: transform_data_transformed(input_value=20)\nPASS: transform_data_transformed(input_value=27)\nPASS: transform_data_transformed(input_value=32)\nPASS: transform_data_transformed(input_value=6)\nPASS: transform_data_transformed(input_value=100)\nPASS: transform_data_transformed(input_value=77)\nPASS: transform_data_transformed(input_value=75)\nPASS: transform_data_transformed(input_value=44)\nPASS: transform_data_transformed(input_value=72)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=2.190854814138599e-151)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=14.81374745834614)\nPASS: circle_area_diff_transformed(r=7.460115553079377)\nPASS: circle_area_diff_transformed(r=10.99728635416507)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=1.6906037945487686)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=1.175494351e-38)\nPASS: circle_area_diff_transformed(r=10.416620167473864)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=16, b=1, c=1)\nPASS: triangle_checker_transformed(a=16, b=8, c=7)\nPASS: triangle_checker_transformed(a=10, b=15, c=2)\nPASS: triangle_checker_transformed(a=10, b=18, c=8)\nPASS: triangle_checker_transformed(a=7, b=15, c=15)\nPASS: triangle_checker_transformed(a=13, b=17, c=11)\nPASS: triangle_checker_transformed(a=9, b=4, c=12)\nPASS: triangle_checker_transformed(a=5, b=6, c=18)\nPASS: triangle_checker_transformed(a=16, b=14, c=3)\nPASS: triangle_checker_transformed(a=6, b=13, c=4)\nPASS: triangle_checker_transformed(a=6, b=13, c=6)\nPASS: triangle_checker_transformed(a=13, b=13, c=6)\nPASS: triangle_checker_transformed(a=6, b=13, c=13)\nPASS: triangle_checker_transformed(a=13, b=13, c=13)\nPASS: triangle_checker_transformed(a=3, b=8, c=11)\nPASS: triangle_checker_transformed(a=8, b=8, c=11)\nPASS: triangle_checker_transformed(a=8, b=8, c=8)\nPASS: triangle_checker_transformed(a=4, b=14, c=12)\nPASS: triangle_checker_transformed(a=14, b=14, c=12)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=11.167787570930802)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=5.310796593504862e-190)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=8.115297644595131e-185)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=80.20383051496596)\nPASS: temperature_offset_transformed(c=93.90345834913312)\nPASS: temperature_offset_transformed(c=59.721755184793714)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-8, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-8, b=-6, c=-10)\nPASS: quadratic_discriminant_transformed(a=-2, b=-10, c=9)\nPASS: quadratic_discriminant_transformed(a=-5, b=9, c=-5)\nPASS: quadratic_discriminant_transformed(a=7, b=5, c=-2)\nPASS: quadratic_discriminant_transformed(a=-2, b=3, c=7)\nPASS: quadratic_discriminant_transformed(a=2, b=-4, c=9)\nPASS: quadratic_discriminant_transformed(a=4, b=-10, c=-2)\nPASS: quadratic_discriminant_transformed(a=0, b=-10, c=7)\nPASS: quadratic_discriminant_transformed(a=-1, b=6, c=-3)\nPASS: quadratic_discriminant_transformed(a=-1, b=-1, c=-3)\nPASS: quadratic_discriminant_transformed(a=-3, b=-1, c=-3)\nPASS: quadratic_discriminant_transformed(a=-3, b=-3, c=-3)\nPASS: quadratic_discriminant_transformed(a=3, b=-7, c=-7)\nPASS: quadratic_discriminant_transformed(a=3, b=3, c=-7)\nPASS: quadratic_discriminant_transformed(a=3, b=3, c=3)\nPASS: quadratic_discriminant_transformed(a=6, b=2, c=-7)\nPASS: quadratic_discriminant_transformed(a=2, b=2, c=-7)\nPASS: quadratic_discriminant_transformed(a=2, b=2, c=2)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=0.0)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=3.0069305918826643)\nPASS: vector_norm_transformed(x=1.1754943508222875e-38, y=-2.2250738585e-313)\nPASS: vector_norm_transformed(x=5.529955953324453, y=6.978441511997655e-96)\nPASS: vector_norm_transformed(x=-0.5, y=-10.0)\nPASS: vector_norm_transformed(x=-9.0, y=-2.220446049250313e-16)\nPASS: vector_norm_transformed(x=5e-324, y=1e-05)\nPASS: vector_norm_transformed(x=1.9, y=3.0930262637215638)\nPASS: vector_norm_transformed(x=0.0, y=-9.999999999999998)\nPASS: vector_norm_transformed(x=-3.4874085914558887e-189, y=1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=-3.4874085914558887e-189, y=-3.4874085914558887e-189)\nPASS: vector_norm_transformed(x=-1e-05, y=1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=1.1754943508222875e-38, y=1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=2.00001, y=-2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=-2.2250738585072014e-308, y=-2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=1.192092896e-07, y=-1.192092896e-07)\nPASS: vector_norm_transformed(x=1.192092896e-07, y=1.192092896e-07)\nPASS: vector_norm_transformed(x=-1.1125369292536007e-308, y=2.225073858507203e-309)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=0.5, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=1.1, b=1.99364702407596)\nPASS: hypotenuse_diff_transformed(a=1.0, b=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=9.0)\nPASS: hypotenuse_diff_transformed(a=1.9, b=1.0)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=1e-05)\nPASS: hypotenuse_diff_transformed(a=1.5, b=1.192092896e-07)\nPASS: hypotenuse_diff_transformed(a=1.5, b=1.5)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=3.064967110620465)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=1.5)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=1.401298464324817e-45)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\udaf1\ude1b')\nPASS: ascii_average_transformed(s='\ud861\ude2e\udbdf\udd1b~\u000f\u00aa\u00ac\u0090\udb16\udc43&\udad1\udc85')\nPASS: ascii_average_transformed(s='\uda9a\udc5e')\nPASS: ascii_average_transformed(s='J\u00eb0')\nPASS: ascii_average_transformed(s='\"\u00e2\u0005')\nPASS: ascii_average_transformed(s='\u0010\uda34\udc4bY\u0090\u00e7\u0083\u00e8\u00f4q}')\nPASS: ascii_average_transformed(s='v\u00bd\u0010\udb7d\udc24\u465d-\u00df\u001ch\u00b9')\nPASS: ascii_average_transformed(s='\u00fd\ud8d4\ude6b\u001a\u0080\u0095Z\u00b5\udb5d\udd5b\ud827\ude7b\udbfd\uddfd')\nPASS: ascii_average_transformed(s='S\u0097\udbe0\uddab\u00c2\u0019')\nPASS: ascii_average_transformed(s='\n\u0089')\nPASS: ascii_average_transformed(s='\u00cb\ud828\ude52\u00c9\ud801\udd7b')\nPASS: ascii_average_transformed(s='\ud822\ude36')\nPASS: ascii_average_transformed(s='\u00e3\ud9dd\udea3\u00f2j')\nPASS: ascii_average_transformed(s='\ud906\udf42\ud976\udd4cj\u008a\udb37\udff0\u009a')\nPASS: ascii_average_transformed(s='\ud922\udf35O\u00dfc\u0083')\nPASS: ascii_average_transformed(s='\u00dd\ud8fd\udec4\ud96f\udf7fd\udadc\udfe0p\u00e4\u00a4\u000eQ')\nPASS: ascii_average_transformed(s='\ud8a9\udd12')\nPASS: ascii_average_transformed(s='\ud8ef\udcd9\u00ca\u0081T')\nPASS: ascii_average_transformed(s='\u00b6#]\u00b5\u00015\u00d6\u00b8\u00f99')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[7, 0])\nPASS: list_balance_transformed(nums=[7, 4])\nPASS: list_balance_transformed(nums=[7, 1])\nPASS: list_balance_transformed(nums=[9, 10, 6, 4])\nPASS: list_balance_transformed(nums=[7, 4, 2, 10, 7, 10, 3, 6])\nPASS: list_balance_transformed(nums=[2, 10, 0, 1, 7, 1, 1, 0])\nPASS: list_balance_transformed(nums=[7, 3, 9, 8, 0, 6, 1])\nPASS: list_balance_transformed(nums=[10, 5, 1, 3, 9, 0, 5, 8, 1, 5])\nPASS: list_balance_transformed(nums=[4, 6, 0, 0, 4, 8, 1, 5, 9, 2])\nPASS: list_balance_transformed(nums=[9, 8])\nPASS: list_balance_transformed(nums=[8, 8])\nPASS: list_balance_transformed(nums=[6, 3])\nPASS: list_balance_transformed(nums=[3, 3])\nPASS: list_balance_transformed(nums=[4, 5, 1, 9, 5, 3])\nPASS: list_balance_transformed(nums=[1, 5, 1, 9, 5, 3])\nPASS: list_balance_transformed(nums=[1, 5, 1, 1, 5, 3])\nPASS: list_balance_transformed(nums=[1, 5, 1, 3, 5, 3])\nPASS: list_balance_transformed(nums=[1, 5, 1])\nPASS: list_balance_transformed(nums=[1, 0])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[7])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[7, 4, 6, 4, 7, 9, 4, 6, 1, 1])\nPASS: odd_sum_validator_transformed(lst=[5, 7, 0, 6, 0])\nPASS: odd_sum_validator_transformed(lst=[9, 3, 4, 3, 0, 3, 5, 8, 5])\nPASS: odd_sum_validator_transformed(lst=[2, 5, 7, 0, 10, 5, 4, 0, 6, 10])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[7, 7, 6, 5, 10, 0, 2, 2, 1, 10])\nPASS: odd_sum_validator_transformed(lst=[1, 9, 6, 5, 3, 4, 1, 1])\nPASS: odd_sum_validator_transformed(lst=[3, 2, 9, 3])\nPASS: odd_sum_validator_transformed(lst=[3, 2, 2, 3])\nPASS: odd_sum_validator_transformed(lst=[3, 2, 3, 3])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[7, 8, 8, 2, 7, 7, 3, 1, 4])\nPASS: odd_sum_validator_transformed(lst=[7, 8, 4, 2, 7, 7, 3, 1, 4])\nPASS: odd_sum_validator_transformed(lst=[7, 8, 4, 7, 7, 7, 3, 1, 4])\nPASS: odd_sum_validator_transformed(lst=[7, 8, 4, 7, 7, 7, 3, 8, 4])\nPASS: odd_sum_validator_transformed(lst=[4, 8, 4, 7, 7, 7, 3, 8, 4])\nPASS: odd_sum_validator_transformed(lst=[7, 8, 4, 7, 7, 7, 8, 8, 4])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u00f7B\udaa0\udeb1\u00d8\u00a8\u008aI\u00a5Pp')\nPASS: string_pattern_score_transformed(s='\u0093\uda19\udfcb\u00f6D')\nPASS: string_pattern_score_transformed(s='(K\u0080VC')\nPASS: string_pattern_score_transformed(s='j2')\nPASS: string_pattern_score_transformed(s='\u00a3\u0096\u00b4')\nPASS: string_pattern_score_transformed(s='?')\nPASS: string_pattern_score_transformed(s='\udbdf\udfa9\u00d2\u00d2\u0083')\nPASS: string_pattern_score_transformed(s='\u0086\u000bZ(\u0085\u00ad\u0010} \u00c2')\nPASS: string_pattern_score_transformed(s='\u00b2\u008b\u00f3\u00e0(')\nPASS: string_pattern_score_transformed(s=';')\nPASS: string_pattern_score_transformed(s='\u00df\u008b@\u00c3\"\u00ee@')\nPASS: string_pattern_score_transformed(s=';\u009f\u00c7\u00cb\u0089g\u0080\uda63\udd33\ud9d2\uddcaN')\nPASS: string_pattern_score_transformed(s='\u0094\ud9e2\udc82\u001c\udbe0\udd30\u00a3\ud960\udd63i\uda6e\udfbb\u00b5\udbcf\udd98')\nPASS: string_pattern_score_transformed(s='\udad2\udd6e\u000f\u00de]')\nPASS: string_pattern_score_transformed(s='U3')\nPASS: string_pattern_score_transformed(s='\u009c~\u00a7\u00b9\udb47\udc10YL*&E')\nPASS: string_pattern_score_transformed(s='\u00a0\u00a8\u0000kf~\u0010j')\nPASS: string_pattern_score_transformed(s='\u009a\u0086')\nPASS: string_pattern_score_transformed(s='\u00ce\u00f1\u0080')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[8])\nPASS: sum_until_limit_transformed(nums=[5])\nPASS: sum_until_limit_transformed(nums=[9])\nPASS: sum_until_limit_transformed(nums=[10, 19, 9])\nPASS: sum_until_limit_transformed(nums=[18, 5, 17, 14, 19, 3, 12, 15, 8, 11])\nPASS: sum_until_limit_transformed(nums=[12, 6, 14, 13, 8, 18, 13, 8, 13])\nPASS: sum_until_limit_transformed(nums=[15])\nPASS: sum_until_limit_transformed(nums=[20, 15, 4])\nPASS: sum_until_limit_transformed(nums=[5, 3, 1])\nPASS: sum_until_limit_transformed(nums=[20])\nPASS: sum_until_limit_transformed(nums=[20, 15])\nPASS: sum_until_limit_transformed(nums=[15, 15])\nPASS: sum_until_limit_transformed(nums=[15, 13, 16])\nPASS: sum_until_limit_transformed(nums=[13, 13, 16])\nPASS: sum_until_limit_transformed(nums=[13, 13, 13])\nPASS: sum_until_limit_transformed(nums=[14, 9, 0, 11])\nPASS: sum_until_limit_transformed(nums=[14, 9, 0, 14])\nPASS: sum_until_limit_transformed(nums=[14, 9, 0, 9])\nPASS: sum_until_limit_transformed(nums=[14, 9, 0, 0])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[8])\nPASS: count_divisibles_transformed(nums=[11])\nPASS: count_divisibles_transformed(nums=[15, 4, 9, 12, 2, 9, 6, 4, 5, 7])\nPASS: count_divisibles_transformed(nums=[11, 1])\nPASS: count_divisibles_transformed(nums=[18, 6, 11])\nPASS: count_divisibles_transformed(nums=[18])\nPASS: count_divisibles_transformed(nums=[18, 4, 15])\nPASS: count_divisibles_transformed(nums=[11, 1, 19, 16, 14, 15, 5])\nPASS: count_divisibles_transformed(nums=[2, 4])\nPASS: count_divisibles_transformed(nums=[9])\nPASS: count_divisibles_transformed(nums=[17, 9, 5, 10])\nPASS: count_divisibles_transformed(nums=[17, 5, 5, 10])\nPASS: count_divisibles_transformed(nums=[17, 5, 17, 10])\nPASS: count_divisibles_transformed(nums=[17])\nPASS: count_divisibles_transformed(nums=[19, 1])\nPASS: count_divisibles_transformed(nums=[1, 1])\nPASS: count_divisibles_transformed(nums=[16, 1])\nPASS: count_divisibles_transformed(nums=[16, 16])\nPASS: count_divisibles_transformed(nums=[5, 0, 10, 14, 10, 5, 9, 6, 2])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[7])\nPASS: index_weighted_sum_transformed(lst=[7, 9, 9])\nPASS: index_weighted_sum_transformed(lst=[1, 0])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[6, 5])\nPASS: index_weighted_sum_transformed(lst=[6])\nPASS: index_weighted_sum_transformed(lst=[10, 1, 0, 3])\nPASS: index_weighted_sum_transformed(lst=[1])\nPASS: index_weighted_sum_transformed(lst=[1, 10, 0, 6, 5, 5, 2, 7, 4, 5])\nPASS: index_weighted_sum_transformed(lst=[7, 4, 8, 7, 7, 5])\nPASS: index_weighted_sum_transformed(lst=[7, 7, 8, 7, 7, 5])\nPASS: index_weighted_sum_transformed(lst=[7, 7, 8, 7, 7, 7])\nPASS: index_weighted_sum_transformed(lst=[7, 7, 8, 7, 8, 7])\nPASS: index_weighted_sum_transformed(lst=[7, 7, 7, 7, 8, 7])\nPASS: index_weighted_sum_transformed(lst=[7, 7, 7, 7, 8])\nPASS: index_weighted_sum_transformed(lst=[5, 6, 1, 10, 10, 4, 7, 6, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 6, 1, 10, 10, 4, 10, 6, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 6, 10, 10, 10, 4, 10, 6, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 6, 4, 10, 10, 4, 10, 6, 5])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=9)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\udb2d\udf4a\u0092K\ud979\uddaeO')\nPASS: character_counter_transformed(text='\u0014\ud8ec\udfcf\u0018\n\u00e4')\nPASS: character_counter_transformed(text='}\u00a5')\nPASS: character_counter_transformed(text='\u0019')\nPASS: character_counter_transformed(text='U\u0018+')\nPASS: character_counter_transformed(text='\u000eS\u001e')\nPASS: character_counter_transformed(text='\u00c1%\u0088')\nPASS: character_counter_transformed(text='z')\nPASS: character_counter_transformed(text='\u00edg\u00a1\u00cc\u0010\t')\nPASS: character_counter_transformed(text='\ud9e4\udfb3\u00f6\u00d8\u00c9')\nPASS: character_counter_transformed(text='\u000b\u00bc\udaeb\udd33xx\u009bs,\u009c\u00a3')\nPASS: character_counter_transformed(text='\u0010')\nPASS: character_counter_transformed(text='?\u00d9\u0088\u00beZ\u00ad)')\nPASS: character_counter_transformed(text='\u00c5\u00c2\u000bD\u2460')\nPASS: character_counter_transformed(text='c\u00d4RH')\nPASS: character_counter_transformed(text='\u00b5\u00e2\u0003[\u0018\u00bd\u0099')\nPASS: character_counter_transformed(text='\u0094\udb60\udd26\f\u00b9\udb1f\uddd9\u00da8\u008b')\nPASS: character_counter_transformed(text='\u0091\u00c1\u00dc\udb24\udeaeT')\nPASS: character_counter_transformed(text='\u00da\u008b\"\u00ebR\u0095\u00e2\udafe\udc21\u00ef\u00c3')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[61])\nPASS: rolling_maximum_transformed(values=[61, 65])\nPASS: rolling_maximum_transformed(values=[56])\nPASS: rolling_maximum_transformed(values=[79, 71, 13, 3, 1, 45, 60, 34, 3])\nPASS: rolling_maximum_transformed(values=[63])\nPASS: rolling_maximum_transformed(values=[7])\nPASS: rolling_maximum_transformed(values=[19])\nPASS: rolling_maximum_transformed(values=[48, 62])\nPASS: rolling_maximum_transformed(values=[62, 87, 7])\nPASS: rolling_maximum_transformed(values=[58, 13, 86, 75, 98, 15, 61, 78, 12, 8])\nPASS: rolling_maximum_transformed(values=[58, 13, 86, 98, 98, 15, 61, 78, 12, 8])\nPASS: rolling_maximum_transformed(values=[58, 13, 86, 86, 98, 15, 61, 78, 12, 8])\nPASS: rolling_maximum_transformed(values=[61, 13, 86, 86, 98, 15, 61, 78, 12, 8])\nPASS: rolling_maximum_transformed(values=[98, 13, 86, 86, 98, 15, 61, 78, 12, 8])\nPASS: rolling_maximum_transformed(values=[98, 13, 86, 86, 61, 15, 61, 78, 12, 8])\nPASS: rolling_maximum_transformed(values=[98, 13, 86, 86, 61, 15, 61, 78, 8, 8])\nPASS: rolling_maximum_transformed(values=[12, 91, 48, 38, 0])\nPASS: rolling_maximum_transformed(values=[0, 91, 48, 38, 0])\nPASS: rolling_maximum_transformed(values=[0, 91, 48, 0, 0])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_11": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=28)\nPASS: process_data_transformed(x=87)\nPASS: process_data_transformed(x=69)\nPASS: process_data_transformed(x=51)\nPASS: process_data_transformed(x=73)\nPASS: process_data_transformed(x=74)\nPASS: process_data_transformed(x=35)\nPASS: process_data_transformed(x=17)\nPASS: process_data_transformed(x=43)\nPASS: process_data_transformed(x=77)\nPASS: process_data_transformed(x=95)\nPASS: process_data_transformed(x=39)\nPASS: process_data_transformed(x=63)\nPASS: process_data_transformed(x=61)\nPASS: process_data_transformed(x=99)\nPASS: process_data_transformed(x=26)\nPASS: process_data_transformed(x=53)\nPASS: process_data_transformed(x=36)\nPASS: process_data_transformed(x=93)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=99.43687884491688)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=5.875316602911409)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=70.05444914801521)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=41.24232634959403)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=83.48051778050971)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=4.027484001672522, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=4.027484001672522, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=49.147366728098085, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=127.46170941089684, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=124.8327102096152, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=162.0177675817812, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.4894369818559122)\nPASS: calculate_discount_transformed(price=0.4894369818559122, discount_rate=0.4894369818559122)\nPASS: calculate_discount_transformed(price=116.7913400006502, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=177.02094809172357, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=0.99999)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=1.5, imag=0.0)\nPASS: process_complex_number_transformed(real=1.5, imag=19.0)\nPASS: process_complex_number_transformed(real=-1.401298464324817e-45, imag=-1.8046989062922446e-62)\nPASS: process_complex_number_transformed(real=-2.2250738585072014e-308, imag=2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=-0.5, imag=-0.3333333333333333)\nPASS: process_complex_number_transformed(real=-18.006151989911714, imag=-0.0)\nPASS: process_complex_number_transformed(real=-0.99999, imag=2.2250738585e-313)\nPASS: process_complex_number_transformed(real=-15.866099871490356, imag=9.323402611386381)\nPASS: process_complex_number_transformed(real=-1e-05, imag=0.0)\nPASS: process_complex_number_transformed(real=0.3333333333333333, imag=0.0)\nPASS: process_complex_number_transformed(real=0.3333333333333333, imag=0.3333333333333333)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=-2.225073858507e-311)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=-2.2250738585e-313, imag=2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=2.220446049250313e-16, imag=2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=-0.0, imag=5.374542903092985e-51)\nPASS: process_complex_number_transformed(real=5.374542903092985e-51, imag=5.374542903092985e-51)\nPASS: process_complex_number_transformed(real=2.220446049250313e-16, imag=-5e-324)\nPASS: process_complex_number_transformed(real=-5e-324, imag=-5e-324)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=90)\nPASS: transform_data_transformed(input_value=39)\nPASS: transform_data_transformed(input_value=2)\nPASS: transform_data_transformed(input_value=77)\nPASS: transform_data_transformed(input_value=93)\nPASS: transform_data_transformed(input_value=11)\nPASS: transform_data_transformed(input_value=55)\nPASS: transform_data_transformed(input_value=29)\nPASS: transform_data_transformed(input_value=13)\nPASS: transform_data_transformed(input_value=59)\nPASS: transform_data_transformed(input_value=18)\nPASS: transform_data_transformed(input_value=72)\nPASS: transform_data_transformed(input_value=48)\nPASS: transform_data_transformed(input_value=89)\nPASS: transform_data_transformed(input_value=80)\nPASS: transform_data_transformed(input_value=52)\nPASS: transform_data_transformed(input_value=34)\nPASS: transform_data_transformed(input_value=64)\nPASS: transform_data_transformed(input_value=91)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=7.345562836030109)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=0.6324710847562011)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=16.771707891463798)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=10.050433200995814)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: circle_area_diff_transformed(r=4.2940973536601765)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=9.633163944454683)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=3, b=1, c=1)\nPASS: triangle_checker_transformed(a=3, b=18, c=17)\nPASS: triangle_checker_transformed(a=1, b=16, c=15)\nPASS: triangle_checker_transformed(a=4, b=3, c=15)\nPASS: triangle_checker_transformed(a=16, b=9, c=17)\nPASS: triangle_checker_transformed(a=19, b=7, c=14)\nPASS: triangle_checker_transformed(a=14, b=7, c=4)\nPASS: triangle_checker_transformed(a=13, b=1, c=6)\nPASS: triangle_checker_transformed(a=1, b=4, c=19)\nPASS: triangle_checker_transformed(a=2, b=8, c=8)\nPASS: triangle_checker_transformed(a=2, b=8, c=2)\nPASS: triangle_checker_transformed(a=2, b=2, c=2)\nPASS: triangle_checker_transformed(a=6, b=5, c=6)\nPASS: triangle_checker_transformed(a=6, b=5, c=5)\nPASS: triangle_checker_transformed(a=6, b=6, c=6)\nPASS: triangle_checker_transformed(a=14, b=2, c=19)\nPASS: triangle_checker_transformed(a=2, b=2, c=19)\nPASS: triangle_checker_transformed(a=4, b=2, c=13)\nPASS: triangle_checker_transformed(a=4, b=4, c=13)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=1.192092896e-07)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=69.05151213891548)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=19.773130328522466)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=3.9994495734398144e-179)\nPASS: temperature_offset_transformed(c=1.105849375680247e-277)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=71.697031446792)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=97.71947376906513)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=1.3333652796449128e-98)\nPASS: temperature_offset_transformed(c=36.54559296967755)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-4, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-4, b=-8, c=-1)\nPASS: quadratic_discriminant_transformed(a=-3, b=-9, c=8)\nPASS: quadratic_discriminant_transformed(a=8, b=-4, c=-7)\nPASS: quadratic_discriminant_transformed(a=-9, b=0, c=-8)\nPASS: quadratic_discriminant_transformed(a=8, b=5, c=9)\nPASS: quadratic_discriminant_transformed(a=7, b=3, c=-7)\nPASS: quadratic_discriminant_transformed(a=2, b=-3, c=10)\nPASS: quadratic_discriminant_transformed(a=8, b=3, c=-8)\nPASS: quadratic_discriminant_transformed(a=7, b=-2, c=3)\nPASS: quadratic_discriminant_transformed(a=3, b=-2, c=3)\nPASS: quadratic_discriminant_transformed(a=-2, b=-2, c=3)\nPASS: quadratic_discriminant_transformed(a=-2, b=-2, c=-2)\nPASS: quadratic_discriminant_transformed(a=-3, b=-7, c=-2)\nPASS: quadratic_discriminant_transformed(a=-3, b=-7, c=-7)\nPASS: quadratic_discriminant_transformed(a=-3, b=-7, c=-3)\nPASS: quadratic_discriminant_transformed(a=-3, b=-3, c=-3)\nPASS: quadratic_discriminant_transformed(a=10, b=3, c=2)\nPASS: quadratic_discriminant_transformed(a=3, b=3, c=2)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=7.3767925485821095, y=0.0)\nPASS: vector_norm_transformed(x=7.3767925485821095, y=9.999999999999998)\nPASS: vector_norm_transformed(x=-2.225073858507203e-309, y=0.5)\nPASS: vector_norm_transformed(x=1.1125369292536007e-308, y=-1.175494351e-38)\nPASS: vector_norm_transformed(x=1.1125369292536007e-308, y=-1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=2.2250738585e-313, y=6.183549200386885)\nPASS: vector_norm_transformed(x=-1.5, y=-0.0)\nPASS: vector_norm_transformed(x=6.103515625e-05, y=-9.0)\nPASS: vector_norm_transformed(x=-0.3333333333333333, y=-9.714416890548762)\nPASS: vector_norm_transformed(x=-2.00001, y=0.3333333333333333)\nPASS: vector_norm_transformed(x=0.3333333333333333, y=0.3333333333333333)\nPASS: vector_norm_transformed(x=-2.2250738585e-313, y=-6.103515625e-05)\nPASS: vector_norm_transformed(x=-6.103515625e-05, y=-6.103515625e-05)\nPASS: vector_norm_transformed(x=0.3333333333333333, y=2.225073858507203e-309)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=2.225073858507203e-309)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=-3.2247914858156115)\nPASS: vector_norm_transformed(x=1.1754943508222875e-38, y=1.3428003513185641e-204)\nPASS: vector_norm_transformed(x=1.1754943508222875e-38, y=1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=8.546280429724348, y=-2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=1.0)\nPASS: hypotenuse_diff_transformed(a=8.653737963484403, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=4.406320926782615)\nPASS: hypotenuse_diff_transformed(a=5.8978651227151255, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=5.715683255468215)\nPASS: hypotenuse_diff_transformed(a=6.3786559360650505, b=1.5)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=0.5)\nPASS: hypotenuse_diff_transformed(a=5.090982248153338, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=5.090982248153338, b=5.090982248153338)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=1.0, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=1.0, b=1.0)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=0.3333333333333333)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\ud88f\udd6a\u00b6\u0001\u00df\u00b5O\u00de\u00b8\u00dd')\nPASS: ascii_average_transformed(s='\u0081^\uda6b\udc30\ud898\udd6el\u00a3 \u00fb\u00d6\u00c3')\nPASS: ascii_average_transformed(s='\u0007')\nPASS: ascii_average_transformed(s='Fh\u009c\u008fN')\nPASS: ascii_average_transformed(s='p')\nPASS: ascii_average_transformed(s='\u009f<\u00fa\udb30\ude57')\nPASS: ascii_average_transformed(s='L')\nPASS: ascii_average_transformed(s='\u00e0<z')\nPASS: ascii_average_transformed(s='\u00e2\u008b\udbc2\udc29\u00dc\u00dc')\nPASS: ascii_average_transformed(s='0/0')\nPASS: ascii_average_transformed(s='\u00b7\ud853\ude08\u0096\u00e6{\u00b1@')\nPASS: ascii_average_transformed(s='\u00c3\u0088'\u00b7\ud935\udcb7\u00a7\ud9a3\udc31\u00f0|\u00bd')\nPASS: ascii_average_transformed(s='D')\nPASS: ascii_average_transformed(s='\u00ee\ud94a\ude34\ud813\uddd9\u00f4')\nPASS: ascii_average_transformed(s='\u00d7*\u00fb\u00dfp\u009b1\b\u00e9\u0092')\nPASS: ascii_average_transformed(s='\ud94b\udfcc\u00da\ud94d\uddbf0')\nPASS: ascii_average_transformed(s='\ud832\ude9f1\u001f\u00d6')\nPASS: ascii_average_transformed(s='\ud997\ude3b\u0004\ud9dc\udc50s\u00b7\u008d')\nPASS: ascii_average_transformed(s='\u00f1s@\uda5c\udd8b\udb1d\udc03\u0097')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[5, 0])\nPASS: list_balance_transformed(nums=[5, 2, 8, 5, 5, 9, 6, 7])\nPASS: list_balance_transformed(nums=[6, 1, 4])\nPASS: list_balance_transformed(nums=[7, 4, 7, 8, 0, 6, 10, 2, 3, 8])\nPASS: list_balance_transformed(nums=[2, 1, 3, 0, 0, 8])\nPASS: list_balance_transformed(nums=[8, 1, 6, 3, 9, 5, 5])\nPASS: list_balance_transformed(nums=[9, 1, 0, 5, 6, 0])\nPASS: list_balance_transformed(nums=[3, 10, 8, 9, 1, 0, 0, 7])\nPASS: list_balance_transformed(nums=[5, 8, 8, 10, 3, 2, 0, 5, 2, 10])\nPASS: list_balance_transformed(nums=[0, 1, 0, 0, 8, 10, 8, 10])\nPASS: list_balance_transformed(nums=[0, 1, 0, 0, 0, 10, 8, 10])\nPASS: list_balance_transformed(nums=[1, 1, 0, 0, 0, 10, 8, 10])\nPASS: list_balance_transformed(nums=[1, 1, 0, 0, 0, 0, 8, 10])\nPASS: list_balance_transformed(nums=[1, 0, 0, 0, 0, 0, 8, 10])\nPASS: list_balance_transformed(nums=[1, 0, 0, 0, 0, 0, 0, 10])\nPASS: list_balance_transformed(nums=[1, 0, 0, 0, 0, 0, 0, 1])\nPASS: list_balance_transformed(nums=[10, 6, 1, 4])\nPASS: list_balance_transformed(nums=[4, 6, 1, 4])\nPASS: list_balance_transformed(nums=[4, 6, 4, 4])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[5, 2, 8])\nPASS: odd_sum_validator_transformed(lst=[8, 8, 0, 0, 4])\nPASS: odd_sum_validator_transformed(lst=[9, 1, 9, 1])\nPASS: odd_sum_validator_transformed(lst=[0, 3, 8, 10, 10, 8])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[8, 5])\nPASS: odd_sum_validator_transformed(lst=[9, 2])\nPASS: odd_sum_validator_transformed(lst=[2, 8, 8, 4, 0, 6])\nPASS: odd_sum_validator_transformed(lst=[2, 8, 8, 4, 4, 6])\nPASS: odd_sum_validator_transformed(lst=[2, 2, 8, 4, 4, 6])\nPASS: odd_sum_validator_transformed(lst=[2, 4, 8, 4, 4, 6])\nPASS: odd_sum_validator_transformed(lst=[2, 4, 8, 4, 8, 6])\nPASS: odd_sum_validator_transformed(lst=[2, 4, 8, 4, 6, 6])\nPASS: odd_sum_validator_transformed(lst=[2, 2, 8, 4, 6, 6])\nPASS: odd_sum_validator_transformed(lst=[8, 3, 1, 9, 5, 2, 0, 5, 0, 8])\nPASS: odd_sum_validator_transformed(lst=[8, 3, 1, 9, 5, 0, 0, 5, 0, 8])\nPASS: odd_sum_validator_transformed(lst=[8, 3, 1, 9, 5, 0, 3, 5, 0, 8])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\uda6b\udf52\u0080\u00e6!+Q\u0088\u00ad\u009f\ud8d3\udf87')\nPASS: string_pattern_score_transformed(s='4')\nPASS: string_pattern_score_transformed(s='\u0080j')\nPASS: string_pattern_score_transformed(s='\u00a1~\u0082')\nPASS: string_pattern_score_transformed(s='\ud9d8\ude5b\u0081V')\nPASS: string_pattern_score_transformed(s='\u009d')\nPASS: string_pattern_score_transformed(s='W')\nPASS: string_pattern_score_transformed(s='~\ud905\udc85\u00d5 \u00c7\f')\nPASS: string_pattern_score_transformed(s='\udba2\udc1fP|\u00db\u5ed5')\nPASS: string_pattern_score_transformed(s='\u00f0\u00ca\u00fb\u0081\u0085')\nPASS: string_pattern_score_transformed(s='\u00a9S\u0015T#1\u0001\u00b5p`')\nPASS: string_pattern_score_transformed(s='\u00c6\uda24\udc8f\\\u00bd\u00f8')\nPASS: string_pattern_score_transformed(s='\udbea\udd23')\nPASS: string_pattern_score_transformed(s='7')\nPASS: string_pattern_score_transformed(s='\u4b73')\nPASS: string_pattern_score_transformed(s='I\ud982\udcf7\u00f9Y\ud8c6\udf02\u009by\u008a\ud815\udd61D')\nPASS: string_pattern_score_transformed(s='\u00ca%6\u0004\\*\u009b\u009c\u00ad')\nPASS: string_pattern_score_transformed(s='+-\u008e\uda1e\ude88\uda4e\udc7c\ud941\udf0fU*')\nPASS: string_pattern_score_transformed(s='\u0002\ub5e6\udb90\uddaa\u00e0\u00f9\ud9d8\udcea\u00a5\u001cU5')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[16])\nPASS: sum_until_limit_transformed(nums=[4])\nPASS: sum_until_limit_transformed(nums=[6, 18, 13])\nPASS: sum_until_limit_transformed(nums=[3, 8, 11])\nPASS: sum_until_limit_transformed(nums=[3])\nPASS: sum_until_limit_transformed(nums=[9, 0, 10, 9, 6, 0, 8, 20])\nPASS: sum_until_limit_transformed(nums=[15, 4])\nPASS: sum_until_limit_transformed(nums=[16, 2, 9, 2, 0, 10, 1, 0, 1, 5])\nPASS: sum_until_limit_transformed(nums=[17])\nPASS: sum_until_limit_transformed(nums=[2, 18, 13, 4, 10])\nPASS: sum_until_limit_transformed(nums=[2, 18, 13, 4, 18])\nPASS: sum_until_limit_transformed(nums=[2, 4, 13, 4, 18])\nPASS: sum_until_limit_transformed(nums=[4, 4, 13, 4, 18])\nPASS: sum_until_limit_transformed(nums=[18, 4, 13, 4, 18])\nPASS: sum_until_limit_transformed(nums=[18, 13, 13, 4, 18])\nPASS: sum_until_limit_transformed(nums=[18, 13, 13, 4, 13])\nPASS: sum_until_limit_transformed(nums=[14, 15, 3, 9, 0, 18, 16, 10, 17, 14])\nPASS: sum_until_limit_transformed(nums=[14, 15, 3, 9, 0, 18, 16, 10, 17, 17])\nPASS: sum_until_limit_transformed(nums=[14, 15, 3, 9, 0, 18, 16, 10, 17, 3])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[6])\nPASS: count_divisibles_transformed(nums=[16])\nPASS: count_divisibles_transformed(nums=[3, 3, 1, 17, 5, 4, 13, 10, 17, 3])\nPASS: count_divisibles_transformed(nums=[6, 18, 17, 13, 14, 12, 0, 11])\nPASS: count_divisibles_transformed(nums=[0, 15, 4, 12, 13, 3, 11, 2, 18, 2])\nPASS: count_divisibles_transformed(nums=[15])\nPASS: count_divisibles_transformed(nums=[12, 17, 5, 11, 7, 19, 17, 4, 14])\nPASS: count_divisibles_transformed(nums=[19, 18, 20, 18, 0, 17, 18, 18, 13])\nPASS: count_divisibles_transformed(nums=[7])\nPASS: count_divisibles_transformed(nums=[3])\nPASS: count_divisibles_transformed(nums=[14, 16, 14, 2, 12, 11, 17, 13, 13, 19])\nPASS: count_divisibles_transformed(nums=[14, 16, 11, 2, 12, 11, 17, 13, 13, 19])\nPASS: count_divisibles_transformed(nums=[14, 16, 17, 2, 12, 11, 17, 13, 13, 19])\nPASS: count_divisibles_transformed(nums=[14, 16, 17, 2, 12, 11, 17, 13, 17, 19])\nPASS: count_divisibles_transformed(nums=[12, 16, 17, 2, 12, 11, 17, 13, 17, 19])\nPASS: count_divisibles_transformed(nums=[16, 16, 17, 2, 12, 11, 17, 13, 17, 19])\nPASS: count_divisibles_transformed(nums=[16, 16, 17, 19, 12, 11, 17, 13, 17, 19])\nPASS: count_divisibles_transformed(nums=[7, 14, 5, 0, 18, 17, 1, 11, 8, 7])\nPASS: count_divisibles_transformed(nums=[7, 14, 18, 0, 18, 17, 1, 11, 8, 7])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[6])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[7, 1, 1, 3, 9, 5, 6, 2])\nPASS: index_weighted_sum_transformed(lst=[7])\nPASS: index_weighted_sum_transformed(lst=[3, 9, 9, 1, 5, 5, 6, 4])\nPASS: index_weighted_sum_transformed(lst=[0, 7, 8, 1, 8, 9, 5, 4, 4, 2])\nPASS: index_weighted_sum_transformed(lst=[1, 3, 7, 7])\nPASS: index_weighted_sum_transformed(lst=[5, 4])\nPASS: index_weighted_sum_transformed(lst=[1])\nPASS: index_weighted_sum_transformed(lst=[6, 0, 2, 5, 6])\nPASS: index_weighted_sum_transformed(lst=[6, 0, 2, 5, 0])\nPASS: index_weighted_sum_transformed(lst=[6, 0, 2, 0, 0])\nPASS: index_weighted_sum_transformed(lst=[6, 0, 2, 0, 2])\nPASS: index_weighted_sum_transformed(lst=[6, 2, 2, 0, 2])\nPASS: index_weighted_sum_transformed(lst=[6, 2, 2, 0, 0])\nPASS: index_weighted_sum_transformed(lst=[0, 2, 2, 0, 0])\nPASS: index_weighted_sum_transformed(lst=[1, 7, 9])\nPASS: index_weighted_sum_transformed(lst=[1, 7, 7])\nPASS: index_weighted_sum_transformed(lst=[7, 7, 7])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=1)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='9\u00a0\u00caA\uda68\udc83')\nPASS: character_counter_transformed(text='t\u00ff\u00e2\u000f\u00af\u0002B\uda6c\ude2fU\u00f6')\nPASS: character_counter_transformed(text='\u0096\u00d0\u00a7a\u0007f\u00f7\ud9ae\udeae\u00c3\u0015')\nPASS: character_counter_transformed(text='\ud8fa\udc3ba\uda10\udc0f\u00c0Q\u00d49\udbfc\udc6f\u00d3\u00ed')\nPASS: character_counter_transformed(text='R')\nPASS: character_counter_transformed(text='\u009e\u001b\uda8d\udcfe\fH\u00bb\udb7a\udf0al')\nPASS: character_counter_transformed(text='\u0086')\nPASS: character_counter_transformed(text='\u00ec\u00d3x])\ud88f\ude19')\nPASS: character_counter_transformed(text='\u00e4\u0002\udb06\udef8:8')\nPASS: character_counter_transformed(text='\u00c0')\nPASS: character_counter_transformed(text='\u0087vz\u008c\n\u00abM\u0000')\nPASS: character_counter_transformed(text='\udbff\uddb9\u00ad')\nPASS: character_counter_transformed(text='\u092e\u0928\u0940\u0937 \u0645\u0646\u0634')\nPASS: character_counter_transformed(text='\u00b2\u009a\u00f1')\nPASS: character_counter_transformed(text='\udbd1\udfe6\u0011\udbf1\udd6d`\udab5\ude7e\uda41\udff6\n\u00d5\u00c3')\nPASS: character_counter_transformed(text='\u001b\u4e0c\u00bd\u00ac')\nPASS: character_counter_transformed(text='\ud88c\udc32\uda75\udcf8')\nPASS: character_counter_transformed(text='\u00e1E\u0087J')\nPASS: character_counter_transformed(text='*u\ud936\udfa8\u0006P')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[6])\nPASS: rolling_maximum_transformed(values=[52])\nPASS: rolling_maximum_transformed(values=[7])\nPASS: rolling_maximum_transformed(values=[36, 60, 65, 6])\nPASS: rolling_maximum_transformed(values=[68, 82, 41, 79, 56, 71, 63, 20, 79, 14])\nPASS: rolling_maximum_transformed(values=[34, 50, 90])\nPASS: rolling_maximum_transformed(values=[33, 34, 20, 95, 21, 56, 57, 95, 79, 63])\nPASS: rolling_maximum_transformed(values=[25, 21, 73, 94, 64, 43, 68, 98, 96, 30])\nPASS: rolling_maximum_transformed(values=[96])\nPASS: rolling_maximum_transformed(values=[7, 41, 92, 30, 54])\nPASS: rolling_maximum_transformed(values=[54, 41, 92, 30, 54])\nPASS: rolling_maximum_transformed(values=[54, 92, 92, 30, 54])\nPASS: rolling_maximum_transformed(values=[54, 30, 92, 30, 54])\nPASS: rolling_maximum_transformed(values=[54, 30, 92, 30, 30])\nPASS: rolling_maximum_transformed(values=[92, 30, 92, 30, 30])\nPASS: rolling_maximum_transformed(values=[92, 30, 92, 92, 30])\nPASS: rolling_maximum_transformed(values=[1, 58, 6, 40, 75, 90, 51, 37, 73])\nPASS: rolling_maximum_transformed(values=[1, 58, 6])\nPASS: rolling_maximum_transformed(values=[1, 6, 6])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_12": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=49)\nPASS: process_data_transformed(x=42)\nPASS: process_data_transformed(x=71)\nPASS: process_data_transformed(x=15)\nPASS: process_data_transformed(x=80)\nPASS: process_data_transformed(x=2)\nPASS: process_data_transformed(x=43)\nPASS: process_data_transformed(x=89)\nPASS: process_data_transformed(x=32)\nPASS: process_data_transformed(x=31)\nPASS: process_data_transformed(x=11)\nPASS: process_data_transformed(x=82)\nPASS: process_data_transformed(x=36)\nPASS: process_data_transformed(x=16)\nPASS: process_data_transformed(x=44)\nPASS: process_data_transformed(x=66)\nPASS: process_data_transformed(x=57)\nPASS: process_data_transformed(x=79)\nPASS: process_data_transformed(x=61)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=16.805402018050167)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=24.680998830961425)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=1.056030625090824e-124)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=53.60671424726596)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=18.86917321691633)\nPASS: convert_temperature_transformed(c=5.6622594391197925e-223)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=0.885192761699247)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.401298464324817e-45)\nPASS: calculate_discount_transformed(price=2.00001, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=128.4140445641596, discount_rate=0.029417418279753756)\nPASS: calculate_discount_transformed(price=200.0, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=0.6532074577567143)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=0.3333333333333333)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=1.401298464324817e-45)\nPASS: calculate_discount_transformed(price=1.5, discount_rate=2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=1.1754943508222875e-38, imag=0.0)\nPASS: process_complex_number_transformed(real=1.1754943508222875e-38, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=10.14764332803803, imag=-19.999999999999996)\nPASS: process_complex_number_transformed(real=-2.2250738585072014e-308, imag=2.225073858507e-311)\nPASS: process_complex_number_transformed(real=14.938980391882247, imag=1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=1.9, imag=2.00001)\nPASS: process_complex_number_transformed(real=-1.1125369292536007e-308, imag=-0.3333333333333333)\nPASS: process_complex_number_transformed(real=-0.0, imag=-1.175494351e-38)\nPASS: process_complex_number_transformed(real=-20.0, imag=6.103515625e-05)\nPASS: process_complex_number_transformed(real=16.610133901857537, imag=-2.00001)\nPASS: process_complex_number_transformed(real=16.610133901857537, imag=16.610133901857537)\nPASS: process_complex_number_transformed(real=0.0, imag=0.99999)\nPASS: process_complex_number_transformed(real=1e-05, imag=5e-324)\nPASS: process_complex_number_transformed(real=1e-05, imag=1e-05)\nPASS: process_complex_number_transformed(real=19.0, imag=0.0)\nPASS: process_complex_number_transformed(real=19.0, imag=19.0)\nPASS: process_complex_number_transformed(real=0.5, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=-16.581749345825294, imag=-1.175494351e-38)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=16)\nPASS: transform_data_transformed(input_value=45)\nPASS: transform_data_transformed(input_value=41)\nPASS: transform_data_transformed(input_value=84)\nPASS: transform_data_transformed(input_value=76)\nPASS: transform_data_transformed(input_value=62)\nPASS: transform_data_transformed(input_value=86)\nPASS: transform_data_transformed(input_value=13)\nPASS: transform_data_transformed(input_value=87)\nPASS: transform_data_transformed(input_value=49)\nPASS: transform_data_transformed(input_value=9)\nPASS: transform_data_transformed(input_value=80)\nPASS: transform_data_transformed(input_value=40)\nPASS: transform_data_transformed(input_value=94)\nPASS: transform_data_transformed(input_value=90)\nPASS: transform_data_transformed(input_value=22)\nPASS: transform_data_transformed(input_value=46)\nPASS: transform_data_transformed(input_value=36)\nPASS: transform_data_transformed(input_value=7)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=1.175494351e-38)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=16.671323520322634)\nPASS: circle_area_diff_transformed(r=15.802458031100105)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=0.9498805045277516)\nPASS: circle_area_diff_transformed(r=1.1403122435980124e-230)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=15.412157180919582)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=14, b=1, c=1)\nPASS: triangle_checker_transformed(a=14, b=9, c=8)\nPASS: triangle_checker_transformed(a=9, b=14, c=12)\nPASS: triangle_checker_transformed(a=4, b=20, c=4)\nPASS: triangle_checker_transformed(a=6, b=1, c=12)\nPASS: triangle_checker_transformed(a=14, b=1, c=19)\nPASS: triangle_checker_transformed(a=2, b=10, c=10)\nPASS: triangle_checker_transformed(a=4, b=12, c=20)\nPASS: triangle_checker_transformed(a=20, b=13, c=17)\nPASS: triangle_checker_transformed(a=1, b=11, c=13)\nPASS: triangle_checker_transformed(a=11, b=11, c=13)\nPASS: triangle_checker_transformed(a=13, b=11, c=13)\nPASS: triangle_checker_transformed(a=13, b=11, c=11)\nPASS: triangle_checker_transformed(a=11, b=11, c=11)\nPASS: triangle_checker_transformed(a=4, b=18, c=10)\nPASS: triangle_checker_transformed(a=4, b=10, c=10)\nPASS: triangle_checker_transformed(a=10, b=10, c=10)\nPASS: triangle_checker_transformed(a=1, b=9, c=17)\nPASS: triangle_checker_transformed(a=1, b=9, c=9)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=54.06020612476136)\nPASS: temperature_offset_transformed(c=43.119879204628845)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=37.25557268450901)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=33.6635943370345)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=8, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=8, b=0, c=5)\nPASS: quadratic_discriminant_transformed(a=-2, b=10, c=-5)\nPASS: quadratic_discriminant_transformed(a=-9, b=-10, c=9)\nPASS: quadratic_discriminant_transformed(a=4, b=-7, c=3)\nPASS: quadratic_discriminant_transformed(a=-10, b=9, c=-7)\nPASS: quadratic_discriminant_transformed(a=-1, b=-6, c=-7)\nPASS: quadratic_discriminant_transformed(a=4, b=-6, c=8)\nPASS: quadratic_discriminant_transformed(a=-3, b=-3, c=-6)\nPASS: quadratic_discriminant_transformed(a=8, b=4, c=3)\nPASS: quadratic_discriminant_transformed(a=8, b=4, c=4)\nPASS: quadratic_discriminant_transformed(a=4, b=4, c=4)\nPASS: quadratic_discriminant_transformed(a=0, b=-5, c=-10)\nPASS: quadratic_discriminant_transformed(a=0, b=-5, c=0)\nPASS: quadratic_discriminant_transformed(a=-5, b=-5, c=0)\nPASS: quadratic_discriminant_transformed(a=-5, b=-5, c=-5)\nPASS: quadratic_discriminant_transformed(a=5, b=4, c=0)\nPASS: quadratic_discriminant_transformed(a=0, b=4, c=0)\nPASS: quadratic_discriminant_transformed(a=1, b=10, c=1)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-9.497165363780459, y=0.0)\nPASS: vector_norm_transformed(x=-9.497165363780459, y=-2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=0.99999, y=-0.3333333333333333)\nPASS: vector_norm_transformed(x=9.0, y=7.436602778049014)\nPASS: vector_norm_transformed(x=1.401298464324817e-45, y=2.225073858507203e-309)\nPASS: vector_norm_transformed(x=1.1125369292536007e-308, y=-1e-05)\nPASS: vector_norm_transformed(x=-6.103515625e-05, y=2.225073858507e-311)\nPASS: vector_norm_transformed(x=-5e-324, y=-9.0)\nPASS: vector_norm_transformed(x=-1.1754943508222875e-38, y=-7.408866600365851)\nPASS: vector_norm_transformed(x=1.1754943508222875e-38, y=-2.2250738585e-313)\nPASS: vector_norm_transformed(x=1.1754943508222875e-38, y=1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=8.947856966802622, y=2.2250738585e-313)\nPASS: vector_norm_transformed(x=8.947856966802622, y=8.947856966802622)\nPASS: vector_norm_transformed(x=1.9, y=-1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=1.9, y=1.9)\nPASS: vector_norm_transformed(x=1.1, y=-1.5)\nPASS: vector_norm_transformed(x=-1.5, y=-1.5)\nPASS: vector_norm_transformed(x=-1.9, y=-0.5)\nPASS: vector_norm_transformed(x=-0.5, y=-0.5)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=4.9552788021768273e-197)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=4.934063893323669)\nPASS: hypotenuse_diff_transformed(a=5.627999605180013, b=2.188787209359102e-93)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=4.046739365885887)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=9.629873744178)\nPASS: hypotenuse_diff_transformed(a=0.7553683132390577, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=1.1)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=3.720506203382035)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=0.8708429836016919, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=9.999999999999998)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u00b85\ud834\udc6d5\u0097\ud9d3\udc9d\udbd5\udc9e\udbbf\udda1\u008a7')\nPASS: ascii_average_transformed(s='\u00cctev\u00be^\u009c\u00d3\u00fd\u00f0')\nPASS: ascii_average_transformed(s='NIL')\nPASS: ascii_average_transformed(s='\u0015\udbb3\udd52\u0ee9\u00f8\ud803\udd90L\n\udad5\ude6c\f\udbb9\udc55')\nPASS: ascii_average_transformed(s='\udb7e\udd2f\u00e1\u00a9\udb5a\udeda\ud898\udf50\ud82b\ude4d\t\uda6c\ude32')\nPASS: ascii_average_transformed(s='\u001a\u0018\u00b8)\u00ea\ud8a2\udfcd\udbf7\ude75gl\u00ee')\nPASS: ascii_average_transformed(s='\u00c3\u0018\u00e0\u009a\u00c6\u00f5x')\nPASS: ascii_average_transformed(s='\u0017@\u00ad\u0082\uc4c0\u001d\u0001\udab0\udc61jH')\nPASS: ascii_average_transformed(s='\u0004\"\u0012\u00bd\u009c')\nPASS: ascii_average_transformed(s='\u0019\\E\udbbd\udc46\u00c9*\ud930\udfed')\nPASS: ascii_average_transformed(s='\u00fbP\u00ec\uda22\udfbf')\nPASS: ascii_average_transformed(s='O\udbdd\udf0a\u00b5\ud807\udd29\u00c0\u0000.\u0017H')\nPASS: ascii_average_transformed(s='then')\nPASS: ascii_average_transformed(s='\u00fbV\udb01\ude3f')\nPASS: ascii_average_transformed(s='\u00f0\u00e2p\u0083')\nPASS: ascii_average_transformed(s='\u009b\u9cff\u00a8s\u00a4\u0012\u008a\u00f0Y$')\nPASS: ascii_average_transformed(s='(f')\nPASS: ascii_average_transformed(s='A\u00bf')\nPASS: ascii_average_transformed(s='w\u00d9\u00ce\u00c1q\udb38\udebc0xk^')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[1, 0])\nPASS: list_balance_transformed(nums=[1, 5, 2, 10])\nPASS: list_balance_transformed(nums=[5, 1, 5])\nPASS: list_balance_transformed(nums=[5, 5, 7, 4, 8, 8, 0, 4, 10, 3])\nPASS: list_balance_transformed(nums=[10, 0])\nPASS: list_balance_transformed(nums=[4, 1, 10, 6])\nPASS: list_balance_transformed(nums=[3, 10, 9, 2, 6, 5, 10, 9, 1, 4])\nPASS: list_balance_transformed(nums=[10, 8, 1, 4, 6, 2, 3, 7, 4, 9])\nPASS: list_balance_transformed(nums=[8, 1])\nPASS: list_balance_transformed(nums=[10, 2, 10, 3])\nPASS: list_balance_transformed(nums=[10, 2])\nPASS: list_balance_transformed(nums=[2, 2])\nPASS: list_balance_transformed(nums=[2, 1, 7, 1, 8, 2, 1, 3, 3, 10])\nPASS: list_balance_transformed(nums=[1, 1, 7, 1, 8, 2, 1, 3, 3, 10])\nPASS: list_balance_transformed(nums=[1, 1, 10, 1, 8, 2, 1, 3, 3, 10])\nPASS: list_balance_transformed(nums=[1, 1, 10, 1, 8, 3, 1, 3, 3, 10])\nPASS: list_balance_transformed(nums=[1, 10, 10, 1, 8, 3, 1, 3, 3, 10])\nPASS: list_balance_transformed(nums=[1, 10, 10, 1, 8, 3, 1, 3, 10, 10])\nPASS: list_balance_transformed(nums=[1, 10, 1, 1, 8, 3, 1, 3, 10, 10])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[0, 0])\nPASS: odd_sum_validator_transformed(lst=[0, 9, 10, 0, 4, 10, 0, 8, 8, 2])\nPASS: odd_sum_validator_transformed(lst=[3, 7, 6, 0, 4])\nPASS: odd_sum_validator_transformed(lst=[6, 8, 1, 5, 6, 9, 5, 6, 0, 10])\nPASS: odd_sum_validator_transformed(lst=[10, 4])\nPASS: odd_sum_validator_transformed(lst=[2, 10, 3, 4, 10, 5, 8, 1, 4])\nPASS: odd_sum_validator_transformed(lst=[0, 6])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[7, 6, 3, 4, 10, 5, 5, 0, 2, 9])\nPASS: odd_sum_validator_transformed(lst=[7, 6, 3, 4, 10, 5, 5, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[7, 6, 3, 0, 10, 5, 5, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[7, 6, 3, 0, 10, 0, 5, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[7, 6, 3, 6, 10, 0, 5, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[7, 6, 3, 6, 10, 7, 5, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[7, 6, 3, 10, 10, 7, 5, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[3, 3, 10, 2])\nPASS: odd_sum_validator_transformed(lst=[3, 3, 2, 2])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u0010\u009e')\nPASS: string_pattern_score_transformed(s='|\u00ab')\nPASS: string_pattern_score_transformed(s='\ud904\udc53x\u0011')\nPASS: string_pattern_score_transformed(s='\u0017\u0081\u00bb\u00c4\ud995\udfeb\u009c\u001a')\nPASS: string_pattern_score_transformed(s='jF\u00d3\udaf5\ude2c\uda02\ude4e\u00f4o\u00df\u00ae\u00af')\nPASS: string_pattern_score_transformed(s='\u00a6\u0082Q\u0080\u0018\u0080')\nPASS: string_pattern_score_transformed(s='\u00b4\u0014\u00a8\u008e\ud917\udf76\u00d6\u00d1\u000b')\nPASS: string_pattern_score_transformed(s='\u0017z\ud838\ude67')\nPASS: string_pattern_score_transformed(s='\u00dee\u00bf\udaa7\udc17*\u00bd7\ud8bb\udfbd\u00f3Z')\nPASS: string_pattern_score_transformed(s='\u00ac\u000f\u00e0\u0012')\nPASS: string_pattern_score_transformed(s='@\u00a7\u0000\ud9cf\ude53,v\ud953\udc69\uda9a\udcf7+\ud80b\uddeb')\nPASS: string_pattern_score_transformed(s='C\u0016\u0093\u0090 o\u00c0\u00cc\u0090\u008b')\nPASS: string_pattern_score_transformed(s='\udb02\udf81\u00c2\u00a2U\u00c5n')\nPASS: string_pattern_score_transformed(s='@')\nPASS: string_pattern_score_transformed(s='none')\nPASS: string_pattern_score_transformed(s='\u0017\u00c7@\uda4b\udf30\ud8dc\udfb1\uda7a\udcd6\u00f7T\n\udb38\udccb')\nPASS: string_pattern_score_transformed(s='\udb47\udf2d\u0011z\u00a3\udbc7\udd58\u00da')\nPASS: string_pattern_score_transformed(s='\u001a\u008aw\u00e6'A{\u009f\u008d\u000e')\nPASS: string_pattern_score_transformed(s='\udb0b\udf4c')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[3])\nPASS: sum_until_limit_transformed(nums=[0, 0])\nPASS: sum_until_limit_transformed(nums=[12])\nPASS: sum_until_limit_transformed(nums=[13, 8, 4, 2, 3])\nPASS: sum_until_limit_transformed(nums=[16])\nPASS: sum_until_limit_transformed(nums=[12, 18, 1])\nPASS: sum_until_limit_transformed(nums=[5])\nPASS: sum_until_limit_transformed(nums=[2, 7, 4, 13, 18, 11, 12, 19, 2, 13])\nPASS: sum_until_limit_transformed(nums=[4, 13, 19, 12])\nPASS: sum_until_limit_transformed(nums=[20, 10, 8, 14, 4, 8, 3])\nPASS: sum_until_limit_transformed(nums=[20, 10, 8, 8, 4, 8, 3])\nPASS: sum_until_limit_transformed(nums=[20, 10, 8, 10, 4, 8, 3])\nPASS: sum_until_limit_transformed(nums=[20, 10, 10, 10, 4, 8, 3])\nPASS: sum_until_limit_transformed(nums=[20, 10, 10, 10, 4, 8, 8])\nPASS: sum_until_limit_transformed(nums=[20, 10, 10, 10, 4, 8, 4])\nPASS: sum_until_limit_transformed(nums=[20, 10, 10, 10, 4, 20, 4])\nPASS: sum_until_limit_transformed(nums=[14, 11])\nPASS: sum_until_limit_transformed(nums=[14, 14])\nPASS: sum_until_limit_transformed(nums=[17, 15, 9, 4, 17, 14, 18, 13, 14, 7])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[12])\nPASS: count_divisibles_transformed(nums=[19])\nPASS: count_divisibles_transformed(nums=[14, 17])\nPASS: count_divisibles_transformed(nums=[12, 4, 11, 1, 14, 6, 12, 2, 18, 3])\nPASS: count_divisibles_transformed(nums=[16, 12, 7, 1, 7, 19, 7])\nPASS: count_divisibles_transformed(nums=[5, 4, 0, 1])\nPASS: count_divisibles_transformed(nums=[4, 17, 14, 1, 1, 3, 9, 14, 13, 16])\nPASS: count_divisibles_transformed(nums=[17])\nPASS: count_divisibles_transformed(nums=[11, 9, 15, 4, 1, 7, 20, 6, 9, 12])\nPASS: count_divisibles_transformed(nums=[16])\nPASS: count_divisibles_transformed(nums=[9, 9, 9])\nPASS: count_divisibles_transformed(nums=[9])\nPASS: count_divisibles_transformed(nums=[20])\nPASS: count_divisibles_transformed(nums=[20, 19, 9, 20, 9, 16, 2, 9, 14, 12])\nPASS: count_divisibles_transformed(nums=[20, 19, 9, 20, 9])\nPASS: count_divisibles_transformed(nums=[20, 19, 20, 20, 9])\nPASS: count_divisibles_transformed(nums=[9, 19, 20, 20, 9])\nPASS: count_divisibles_transformed(nums=[20, 19, 20, 20, 20])\nPASS: count_divisibles_transformed(nums=[19, 19, 20, 20, 20])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[8, 6, 2])\nPASS: index_weighted_sum_transformed(lst=[10, 4, 7, 2, 3, 0])\nPASS: index_weighted_sum_transformed(lst=[8, 4])\nPASS: index_weighted_sum_transformed(lst=[9, 4, 10, 4, 9, 1, 4, 9, 5, 0])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[8, 9, 0, 1, 8, 5, 4, 0, 0])\nPASS: index_weighted_sum_transformed(lst=[6, 10, 2])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[8, 8])\nPASS: index_weighted_sum_transformed(lst=[2, 3, 4, 4, 1, 5, 6, 4])\nPASS: index_weighted_sum_transformed(lst=[2, 3, 5, 4, 1, 5, 6, 4])\nPASS: index_weighted_sum_transformed(lst=[2, 3, 5, 4, 1, 5, 6, 6])\nPASS: index_weighted_sum_transformed(lst=[2, 3, 5, 4, 5, 5, 6, 6])\nPASS: index_weighted_sum_transformed(lst=[2, 3, 5, 4, 2, 5, 6, 6])\nPASS: index_weighted_sum_transformed(lst=[6, 3, 5, 4, 2, 5, 6, 6])\nPASS: index_weighted_sum_transformed(lst=[7, 3, 6])\nPASS: index_weighted_sum_transformed(lst=[7, 6, 6])\nPASS: index_weighted_sum_transformed(lst=[7, 6])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=3)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00b7\u0012\u00e9\u00b9\udb40\udfb3')\nPASS: character_counter_transformed(text='\u0082\u00c8~\u00b2\ud802\udf41\u007f\u0006\u00d1\u00c0\ud90e\udcb6')\nPASS: character_counter_transformed(text='\u0088\u00a9S\u000fE\ud8aa\udc14<k\u00b3\udaa5\udce8')\nPASS: character_counter_transformed(text='\u00db\u0018\u00ed\u00f1.\u00c5\u00aa\u00cd6\udafa\udd21')\nPASS: character_counter_transformed(text='@\udae9\udff9\u00a0\u00ad\u00c3')\nPASS: character_counter_transformed(text='\ud952\udd4a\u00a0\u00eb')\nPASS: character_counter_transformed(text='\u0003h\udb15\udcc87\udb18\udd59')\nPASS: character_counter_transformed(text='\u0013\u0099\uda8f\udc66\u00f6r\u00a15\ud91b\udcfa\u00fa\uda26\udc8a')\nPASS: character_counter_transformed(text='\u00a5\u0004\u00f5')\nPASS: character_counter_transformed(text='\udb05\udde0r')\nPASS: character_counter_transformed(text='\u0002y\ud91b\udf47')\nPASS: character_counter_transformed(text='5%')\nPASS: character_counter_transformed(text='9p')\nPASS: character_counter_transformed(text='j`\u00de\u0083\udb65\ude50>')\nPASS: character_counter_transformed(text='\uda8f\udf3c\u00f3\u0001\u00e8\u0015\ud91b\udd94\n\u00b8\u00dd\u00dc')\nPASS: character_counter_transformed(text='#')\nPASS: character_counter_transformed(text='\u0000\uda7b\ude31\u00f2l\u00dc\udb32\udd0b\u00ec\ud89c\uddfbM-')\nPASS: character_counter_transformed(text='A\u00109\udb17\ude3b\uda67\udf14\ud814\udc49\ud89b\udd0d\u00db\udb51\ude1e\ud828\udedb')\nPASS: character_counter_transformed(text='<\ud8e8\udef8F\ud9c0\uddff\uda3b\udffe')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[7])\nPASS: rolling_maximum_transformed(values=[62])\nPASS: rolling_maximum_transformed(values=[20])\nPASS: rolling_maximum_transformed(values=[40, 82, 36, 59])\nPASS: rolling_maximum_transformed(values=[98])\nPASS: rolling_maximum_transformed(values=[85, 13, 71, 2, 86, 95, 78, 56, 90, 88])\nPASS: rolling_maximum_transformed(values=[36])\nPASS: rolling_maximum_transformed(values=[39])\nPASS: rolling_maximum_transformed(values=[32, 20])\nPASS: rolling_maximum_transformed(values=[16, 63, 22, 4, 25])\nPASS: rolling_maximum_transformed(values=[16, 22, 22, 4, 25])\nPASS: rolling_maximum_transformed(values=[25, 22, 22, 4, 25])\nPASS: rolling_maximum_transformed(values=[25, 25, 22, 4, 25])\nPASS: rolling_maximum_transformed(values=[22, 25, 22, 4, 25])\nPASS: rolling_maximum_transformed(values=[25, 25, 22, 25, 25])\nPASS: rolling_maximum_transformed(values=[13, 33, 68, 37, 95, 82, 61, 7, 43, 88])\nPASS: rolling_maximum_transformed(values=[13, 33, 68, 37, 95, 82, 61, 7, 43, 82])\nPASS: rolling_maximum_transformed(values=[13, 33, 68, 37, 95, 82, 61, 7, 95, 82])\nPASS: rolling_maximum_transformed(values=[13, 7, 68, 37, 95, 82, 61, 7, 95, 82])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_13": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=59)\nPASS: process_data_transformed(x=9)\nPASS: process_data_transformed(x=73)\nPASS: process_data_transformed(x=40)\nPASS: process_data_transformed(x=60)\nPASS: process_data_transformed(x=19)\nPASS: process_data_transformed(x=12)\nPASS: process_data_transformed(x=20)\nPASS: process_data_transformed(x=2)\nPASS: process_data_transformed(x=52)\nPASS: process_data_transformed(x=95)\nPASS: process_data_transformed(x=14)\nPASS: process_data_transformed(x=21)\nPASS: process_data_transformed(x=49)\nPASS: process_data_transformed(x=86)\nPASS: process_data_transformed(x=17)\nPASS: process_data_transformed(x=62)\nPASS: process_data_transformed(x=13)\nPASS: process_data_transformed(x=53)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=0.99999)\nPASS: convert_temperature_transformed(c=9.948142483460568)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=2.2250738585072014e-308)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=36.71546791608616)\nPASS: convert_temperature_transformed(c=5.916813741421769)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=61.23352425948067)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=1.1109038434010724e-114)\nPASS: convert_temperature_transformed(c=25.530527002854924)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=44.847759514165745, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=44.847759514165745, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=2.00001, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=172.94306727172653, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=193.14426214956958, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.40356427566596886)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=0.3194063595589059)\nPASS: calculate_discount_transformed(price=0.3194063595589059, discount_rate=0.3194063595589059)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=1.192092896e-07)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-1.9, imag=0.0)\nPASS: process_complex_number_transformed(real=-1.9, imag=-1.5)\nPASS: process_complex_number_transformed(real=-0.0, imag=-20.0)\nPASS: process_complex_number_transformed(real=1.192092896e-07, imag=-2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=-19.999999999999996, imag=2.2250738585e-313)\nPASS: process_complex_number_transformed(real=2.220446049250313e-16, imag=1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=-19.0, imag=1.9)\nPASS: process_complex_number_transformed(real=1.401298464324817e-45, imag=2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=-2.3109420244245453e-121, imag=-1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=-2.888078109729925, imag=1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=-2.888078109729925, imag=-2.888078109729925)\nPASS: process_complex_number_transformed(real=-2.220446049250313e-16, imag=1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=1.401298464324817e-45, imag=1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=-1.192092896e-07, imag=-1.9)\nPASS: process_complex_number_transformed(real=-1.9, imag=-1.9)\nPASS: process_complex_number_transformed(real=-2.225073858507203e-309, imag=-6.154643591770606)\nPASS: process_complex_number_transformed(real=-2.225073858507203e-309, imag=-2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=16.89242119054793, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-2.2250738585072014e-308, imag=-2.2250738585072014e-308)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=80)\nPASS: transform_data_transformed(input_value=24)\nPASS: transform_data_transformed(input_value=22)\nPASS: transform_data_transformed(input_value=94)\nPASS: transform_data_transformed(input_value=71)\nPASS: transform_data_transformed(input_value=62)\nPASS: transform_data_transformed(input_value=49)\nPASS: transform_data_transformed(input_value=75)\nPASS: transform_data_transformed(input_value=34)\nPASS: transform_data_transformed(input_value=88)\nPASS: transform_data_transformed(input_value=99)\nPASS: transform_data_transformed(input_value=70)\nPASS: transform_data_transformed(input_value=73)\nPASS: transform_data_transformed(input_value=37)\nPASS: transform_data_transformed(input_value=20)\nPASS: transform_data_transformed(input_value=39)\nPASS: transform_data_transformed(input_value=63)\nPASS: transform_data_transformed(input_value=16)\nPASS: transform_data_transformed(input_value=33)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=16.53677815891825)\nPASS: circle_area_diff_transformed(r=15.646725955811625)\nPASS: circle_area_diff_transformed(r=6.343835176324478)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=18.406538590437474)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=19.163990462235777)\nPASS: circle_area_diff_transformed(r=2.294056495571332e-209)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=6, b=1, c=1)\nPASS: triangle_checker_transformed(a=6, b=13, c=4)\nPASS: triangle_checker_transformed(a=10, b=5, c=7)\nPASS: triangle_checker_transformed(a=18, b=3, c=11)\nPASS: triangle_checker_transformed(a=20, b=10, c=5)\nPASS: triangle_checker_transformed(a=11, b=4, c=6)\nPASS: triangle_checker_transformed(a=2, b=19, c=15)\nPASS: triangle_checker_transformed(a=12, b=3, c=19)\nPASS: triangle_checker_transformed(a=13, b=18, c=4)\nPASS: triangle_checker_transformed(a=20, b=5, c=9)\nPASS: triangle_checker_transformed(a=20, b=9, c=9)\nPASS: triangle_checker_transformed(a=20, b=9, c=20)\nPASS: triangle_checker_transformed(a=20, b=20, c=20)\nPASS: triangle_checker_transformed(a=10, b=15, c=17)\nPASS: triangle_checker_transformed(a=17, b=15, c=17)\nPASS: triangle_checker_transformed(a=15, b=15, c=17)\nPASS: triangle_checker_transformed(a=15, b=15, c=15)\nPASS: triangle_checker_transformed(a=7, b=6, c=10)\nPASS: triangle_checker_transformed(a=6, b=6, c=10)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=30.124380736299443)\nPASS: temperature_offset_transformed(c=1.192092896e-07)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=92.45442357262819)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=15.874758535362691)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=58.45787448272194)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=10, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=10, b=8, c=8)\nPASS: quadratic_discriminant_transformed(a=-2, b=2, c=-9)\nPASS: quadratic_discriminant_transformed(a=5, b=3, c=-5)\nPASS: quadratic_discriminant_transformed(a=-2, b=9, c=-3)\nPASS: quadratic_discriminant_transformed(a=4, b=7, c=-9)\nPASS: quadratic_discriminant_transformed(a=-3, b=0, c=8)\nPASS: quadratic_discriminant_transformed(a=-4, b=8, c=-4)\nPASS: quadratic_discriminant_transformed(a=-9, b=-5, c=-8)\nPASS: quadratic_discriminant_transformed(a=-10, b=-5, c=-2)\nPASS: quadratic_discriminant_transformed(a=-10, b=-5, c=-5)\nPASS: quadratic_discriminant_transformed(a=-5, b=-5, c=-5)\nPASS: quadratic_discriminant_transformed(a=8, b=7, c=8)\nPASS: quadratic_discriminant_transformed(a=8, b=7, c=7)\nPASS: quadratic_discriminant_transformed(a=7, b=7, c=7)\nPASS: quadratic_discriminant_transformed(a=-8, b=-4, c=-3)\nPASS: quadratic_discriminant_transformed(a=-3, b=-4, c=-3)\nPASS: quadratic_discriminant_transformed(a=-3, b=-4, c=-4)\nPASS: quadratic_discriminant_transformed(a=-4, b=-4, c=-4)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-1.1125369292536007e-308, y=0.0)\nPASS: vector_norm_transformed(x=-1.1125369292536007e-308, y=-1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=-2.00001, y=8.92537974439529)\nPASS: vector_norm_transformed(x=0.3333333333333333, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=0.41626334262782017, y=3.915341388189974)\nPASS: vector_norm_transformed(x=-0.99999, y=-6.103515625e-05)\nPASS: vector_norm_transformed(x=-8.94896260032561, y=9.0)\nPASS: vector_norm_transformed(x=1.9, y=-6.103515625e-05)\nPASS: vector_norm_transformed(x=2.2250738585072014e-308, y=-5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-1.9, y=1.9)\nPASS: vector_norm_transformed(x=-1.9, y=-1.9)\nPASS: vector_norm_transformed(x=-0.3333333333333333, y=2.2250738585e-313)\nPASS: vector_norm_transformed(x=2.2250738585e-313, y=2.2250738585e-313)\nPASS: vector_norm_transformed(x=-2.00001, y=2.988939991868414e-193)\nPASS: vector_norm_transformed(x=-2.00001, y=-2.00001)\nPASS: vector_norm_transformed(x=0.5, y=-1.9)\nPASS: vector_norm_transformed(x=1.9, y=-2.00001)\nPASS: vector_norm_transformed(x=6.103515625e-05, y=-1.9)\nPASS: vector_norm_transformed(x=0.0, y=-1.5)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=9.0)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=1.2788602316161104)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=1.9, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=1.0, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=1.0, b=1.9)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=1.5)\nPASS: hypotenuse_diff_transformed(a=1.5, b=1.5)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=1e-05)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=9.313754005703377)\nPASS: hypotenuse_diff_transformed(a=9.313754005703377, b=9.313754005703377)\nPASS: hypotenuse_diff_transformed(a=3.59404600959302, b=5e-324)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u00da;')\nPASS: ascii_average_transformed(s='_\u00e4\u121f\uda39\uddfe\n\u00a3\u00c9\ud95e\udcc6\u0001')\nPASS: ascii_average_transformed(s='\u0012\u00dbk')\nPASS: ascii_average_transformed(s='\u0000\u5f9b\udb1e\ude18pi\u009c\ud8d6\udf66\u00b4')\nPASS: ascii_average_transformed(s='\udb41\uddab\u00d6\udbcd\udedc\u00ee\u00c9')\nPASS: ascii_average_transformed(s='\u008aP\u00bb\u009f\u00e7')\nPASS: ascii_average_transformed(s='\u00c2')\nPASS: ascii_average_transformed(s='\udbb4\udc2b')\nPASS: ascii_average_transformed(s='NIL')\nPASS: ascii_average_transformed(s='\u00e5/u')\nPASS: ascii_average_transformed(s='V\u0011\u008d!\u0004')\nPASS: ascii_average_transformed(s='#;\u00f8\u009d\u8271')\nPASS: ascii_average_transformed(s='+B%\u00c0\u00cb\u00a1\ud98a\udc72\u0082_\u0099')\nPASS: ascii_average_transformed(s='\ub980\u00b0')\nPASS: ascii_average_transformed(s='\udad0\udc4d>\udabe\udc9d\u009ea\u00d9C\u59ecv6')\nPASS: ascii_average_transformed(s='Infinity')\nPASS: ascii_average_transformed(s='f\u00f7\u0007\u0085\u00b8\u0017\u0015')\nPASS: ascii_average_transformed(s='\ue342\u00eb\udb45\udfe2g\uda35\udf6b\udb17\udf40\u0002\b')\nPASS: ascii_average_transformed(s='\u00a2\u0003\ud9fd\udd6b\u00e4\u0086\u00d6\u00bc>\uda65\udf90\u00c8')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[6, 0])\nPASS: list_balance_transformed(nums=[6, 7])\nPASS: list_balance_transformed(nums=[7, 9, 2, 10, 7, 3])\nPASS: list_balance_transformed(nums=[8, 8, 1, 3, 4, 1, 5, 6, 3])\nPASS: list_balance_transformed(nums=[3, 10, 8, 4, 0, 9, 1])\nPASS: list_balance_transformed(nums=[4, 5, 2, 6, 6, 6, 1, 10])\nPASS: list_balance_transformed(nums=[0, 8, 10, 10, 10, 8, 7, 5, 8, 6])\nPASS: list_balance_transformed(nums=[7, 1, 4])\nPASS: list_balance_transformed(nums=[7, 7])\nPASS: list_balance_transformed(nums=[0, 6, 8, 4, 0, 9, 1, 7, 9, 0])\nPASS: list_balance_transformed(nums=[1, 6, 8, 4, 0, 9, 1, 7, 9, 0])\nPASS: list_balance_transformed(nums=[1, 6, 8, 4, 0, 4, 1, 7, 9, 0])\nPASS: list_balance_transformed(nums=[4, 6, 8, 4, 0, 4, 1, 7, 9, 0])\nPASS: list_balance_transformed(nums=[4, 6, 8, 4, 0, 4, 1, 6, 9, 0])\nPASS: list_balance_transformed(nums=[4, 6, 8, 0, 0, 4, 1, 6, 9, 0])\nPASS: list_balance_transformed(nums=[4, 6, 8, 0, 0, 4, 1, 6, 9, 4])\nPASS: list_balance_transformed(nums=[0, 3, 2, 3])\nPASS: list_balance_transformed(nums=[2, 3, 2, 3])\nPASS: list_balance_transformed(nums=[3, 3, 2, 3])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[1])\nPASS: odd_sum_validator_transformed(lst=[1, 4])\nPASS: odd_sum_validator_transformed(lst=[1, 8, 7, 0, 5])\nPASS: odd_sum_validator_transformed(lst=[5, 10, 0, 10, 10, 8, 0, 7, 6, 6])\nPASS: odd_sum_validator_transformed(lst=[4, 6, 7, 2])\nPASS: odd_sum_validator_transformed(lst=[1, 6, 1, 7, 7, 6, 0, 0, 1, 0])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[7, 7, 10, 6, 8, 2, 3, 2])\nPASS: odd_sum_validator_transformed(lst=[7])\nPASS: odd_sum_validator_transformed(lst=[8, 10, 0, 8, 6, 8, 10, 7, 6, 3])\nPASS: odd_sum_validator_transformed(lst=[8, 10, 0, 8, 6, 8, 10, 7, 6, 6])\nPASS: odd_sum_validator_transformed(lst=[8, 10, 0, 10, 6, 8, 10, 7, 6, 6])\nPASS: odd_sum_validator_transformed(lst=[8, 10, 0, 10, 7, 8, 10, 7, 6, 6])\nPASS: odd_sum_validator_transformed(lst=[8, 10, 0, 10, 7, 8, 8, 7, 6, 6])\nPASS: odd_sum_validator_transformed(lst=[8, 10, 0, 10, 7, 10, 8, 7, 6, 6])\nPASS: odd_sum_validator_transformed(lst=[8, 10, 0, 10, 7, 10, 8, 10, 6, 6])\nPASS: odd_sum_validator_transformed(lst=[10, 0, 8, 1, 1, 0, 3, 6, 4, 8])\nPASS: odd_sum_validator_transformed(lst=[10, 0, 8, 1, 1, 0, 3, 6, 8, 8])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='Irym\u0002d R\u00a0s')\nPASS: string_pattern_score_transformed(s='\udb80\udfd7\u001f\u00a2\u00c0[\u0080')\nPASS: string_pattern_score_transformed(s='Q\u0010\ud829\udec4\u00b2\udac2\udc99\u00d8d\ud890\udfa8a\u0082')\nPASS: string_pattern_score_transformed(s='\u00ac')\nPASS: string_pattern_score_transformed(s='z\u00f0\u00f5\u009c]\ud8a6\udd3a\u00d9)I\u00b5')\nPASS: string_pattern_score_transformed(s='\u009a\u00a9\udac6\ude77\udac0\ude2a\u0098\u00b3\u00e6+'\ud949\uddf0')\nPASS: string_pattern_score_transformed(s='\u00e4C')\nPASS: string_pattern_score_transformed(s='}p\u00a6u\u00a0\u00f8\u00fe{')\nPASS: string_pattern_score_transformed(s='\u00e2')\nPASS: string_pattern_score_transformed(s='V\ud8b3\udfba\u0095\u00c5=\udb95\udd69H\u00cf\u00d4\u0014')\nPASS: string_pattern_score_transformed(s='\ud8ef\udcc6\n_9!\u00c90\u0016\u00d4')\nPASS: string_pattern_score_transformed(s='\u00da\f')\nPASS: string_pattern_score_transformed(s='R\u00e9!\u00ec\u00bdz\u001cE\u00fc\u00c5')\nPASS: string_pattern_score_transformed(s='\udbb7\udce4\u0083(\u00cc')\nPASS: string_pattern_score_transformed(s='\u00d9M\udb0a\udf27\u00e8\u00c6\u00c2\u00ed')\nPASS: string_pattern_score_transformed(s='\u00c5\u00ad\u00cc')\nPASS: string_pattern_score_transformed(s='\n\u00b7\uda90\udf37')\nPASS: string_pattern_score_transformed(s='true')\nPASS: string_pattern_score_transformed(s='\u00fb\u0003\u00d1\u00d0X\u0014`\udb97\udf3f')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[15])\nPASS: sum_until_limit_transformed(nums=[15, 4])\nPASS: sum_until_limit_transformed(nums=[13, 10, 3, 0, 14, 1, 10, 7, 11, 0])\nPASS: sum_until_limit_transformed(nums=[15, 17, 15, 2])\nPASS: sum_until_limit_transformed(nums=[15, 8, 18, 0, 18, 11, 19, 3, 13, 14])\nPASS: sum_until_limit_transformed(nums=[3, 15, 2, 3, 15, 5, 20, 1, 2, 11])\nPASS: sum_until_limit_transformed(nums=[11, 19, 14, 7, 0, 14, 12, 8, 17, 11])\nPASS: sum_until_limit_transformed(nums=[3])\nPASS: sum_until_limit_transformed(nums=[17, 15, 7, 9])\nPASS: sum_until_limit_transformed(nums=[2, 17, 2, 16])\nPASS: sum_until_limit_transformed(nums=[17, 17, 2, 16])\nPASS: sum_until_limit_transformed(nums=[17, 17, 2, 17])\nPASS: sum_until_limit_transformed(nums=[2, 17, 2, 17])\nPASS: sum_until_limit_transformed(nums=[2, 17, 2, 2])\nPASS: sum_until_limit_transformed(nums=[2, 2, 2, 2])\nPASS: sum_until_limit_transformed(nums=[2, 2])\nPASS: sum_until_limit_transformed(nums=[5, 10, 15, 7, 3])\nPASS: sum_until_limit_transformed(nums=[5, 15, 15, 7, 3])\nPASS: sum_until_limit_transformed(nums=[5, 15, 3, 7, 3])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[6])\nPASS: count_divisibles_transformed(nums=[9])\nPASS: count_divisibles_transformed(nums=[9, 4, 11])\nPASS: count_divisibles_transformed(nums=[12, 2, 16, 4, 20, 19])\nPASS: count_divisibles_transformed(nums=[8, 16, 15, 16, 4, 9, 20, 7, 5])\nPASS: count_divisibles_transformed(nums=[19, 18, 6, 4])\nPASS: count_divisibles_transformed(nums=[13, 9, 18])\nPASS: count_divisibles_transformed(nums=[8])\nPASS: count_divisibles_transformed(nums=[18, 17])\nPASS: count_divisibles_transformed(nums=[4])\nPASS: count_divisibles_transformed(nums=[16, 6, 3, 6, 1, 2, 9, 17, 14, 6])\nPASS: count_divisibles_transformed(nums=[16, 6, 3, 6, 1, 2, 9, 17, 3, 6])\nPASS: count_divisibles_transformed(nums=[16, 6, 3, 6, 9, 2, 9, 17, 3, 6])\nPASS: count_divisibles_transformed(nums=[16, 6, 3, 6, 9, 3, 9, 17, 3, 6])\nPASS: count_divisibles_transformed(nums=[16, 6, 3, 6, 9, 3, 9, 17, 3, 9])\nPASS: count_divisibles_transformed(nums=[16, 6, 9, 6, 9, 3, 9, 17, 3, 9])\nPASS: count_divisibles_transformed(nums=[16, 6, 17, 6, 9, 3, 9, 17, 3, 9])\nPASS: count_divisibles_transformed(nums=[6, 5, 1, 11])\nPASS: count_divisibles_transformed(nums=[6, 11, 1, 11])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[2, 5, 4, 7, 2, 0, 4])\nPASS: index_weighted_sum_transformed(lst=[3])\nPASS: index_weighted_sum_transformed(lst=[9, 2, 1, 0, 2, 9, 1, 4, 9, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 0, 1, 5, 7, 9, 0, 7, 10, 1])\nPASS: index_weighted_sum_transformed(lst=[9])\nPASS: index_weighted_sum_transformed(lst=[9, 6, 6, 7, 10, 10, 10, 1, 8, 8])\nPASS: index_weighted_sum_transformed(lst=[8, 10, 3, 3, 8, 5])\nPASS: index_weighted_sum_transformed(lst=[10, 0, 2, 0, 3])\nPASS: index_weighted_sum_transformed(lst=[0, 0, 2, 0, 3])\nPASS: index_weighted_sum_transformed(lst=[0, 2, 2, 0, 3])\nPASS: index_weighted_sum_transformed(lst=[0, 2, 2, 2, 3])\nPASS: index_weighted_sum_transformed(lst=[0, 0, 2, 2, 3])\nPASS: index_weighted_sum_transformed(lst=[0, 2])\nPASS: index_weighted_sum_transformed(lst=[4, 1, 6, 1, 9])\nPASS: index_weighted_sum_transformed(lst=[4, 1, 1, 1, 9])\nPASS: index_weighted_sum_transformed(lst=[4, 9, 1, 1, 9])\nPASS: index_weighted_sum_transformed(lst=[4, 9, 1, 1, 4])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=5)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='undefined')\nPASS: character_counter_transformed(text='\udaba\udda3')\nPASS: character_counter_transformed(text='\u00a5!\u00eb\u008ec\u000f\u00b2X\u00b4a')\nPASS: character_counter_transformed(text='\u00fa')\nPASS: character_counter_transformed(text='\u00b5\u00e7')\nPASS: character_counter_transformed(text='\u00f6D\uda46\udc6a\u00eb<i\u00c4\udab5\udfc72\u0016')\nPASS: character_counter_transformed(text='\udab7\udf5d\u00ef3\u00eaQ\u0002\u00ebdA')\nPASS: character_counter_transformed(text='\u008e\udbbe\ude1c')\nPASS: character_counter_transformed(text='A')\nPASS: character_counter_transformed(text='\uda45\udee6\ud90f\ude94\u0091q\u00d2\u0096MWw\u0099')\nPASS: character_counter_transformed(text='`\ud966\uddbe\u0003&\ud851\udd9b\u00c4U\u00e9\u00f1\ud9df\ude5b')\nPASS: character_counter_transformed(text='\f)\u00f9n\ud998\ude2c\u0017v')\nPASS: character_counter_transformed(text='f\u00b9')\nPASS: character_counter_transformed(text='\u001d\u00c1\u00b8M\u009f')\nPASS: character_counter_transformed(text='\u00df\ud963\udccas:B\udbea\udfba\u001dc\u00ce')\nPASS: character_counter_transformed(text='XD\ud8dd\udc2d\u00d6\u0096')\nPASS: character_counter_transformed(text='\u00d4')\nPASS: character_counter_transformed(text='7\u00ca\u00c5\ud8d6\udd1b\udbcb\udc57\u00c4\u0087\u00fa\u00fc\u7d36')\nPASS: character_counter_transformed(text='\ucb8e\ud8f1\udcde\uda0d\udde1\u00ec\udb4c\ude77c\u00a9\u00fb')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[45])\nPASS: rolling_maximum_transformed(values=[45, 37, 52])\nPASS: rolling_maximum_transformed(values=[15, 42, 67, 54, 45, 1, 25, 56, 56, 12])\nPASS: rolling_maximum_transformed(values=[30, 88, 19, 97, 48, 7])\nPASS: rolling_maximum_transformed(values=[48, 64, 8, 26, 39, 80, 37, 36, 30, 58])\nPASS: rolling_maximum_transformed(values=[52, 75, 89, 36])\nPASS: rolling_maximum_transformed(values=[81, 58, 15, 55, 86, 70, 99, 10, 97, 23])\nPASS: rolling_maximum_transformed(values=[58, 22, 24, 9, 28, 75, 64, 22, 60, 80])\nPASS: rolling_maximum_transformed(values=[93, 99])\nPASS: rolling_maximum_transformed(values=[13, 39, 24])\nPASS: rolling_maximum_transformed(values=[13, 39, 39])\nPASS: rolling_maximum_transformed(values=[13, 13, 39])\nPASS: rolling_maximum_transformed(values=[39, 13, 39])\nPASS: rolling_maximum_transformed(values=[39, 13, 13])\nPASS: rolling_maximum_transformed(values=[13, 13, 13])\nPASS: rolling_maximum_transformed(values=[13])\nPASS: rolling_maximum_transformed(values=[31, 28, 83, 75, 52, 61])\nPASS: rolling_maximum_transformed(values=[31, 75, 83, 75, 52, 61])\nPASS: rolling_maximum_transformed(values=[31, 75, 83, 75])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_14": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=71)\nPASS: process_data_transformed(x=46)\nPASS: process_data_transformed(x=50)\nPASS: process_data_transformed(x=59)\nPASS: process_data_transformed(x=69)\nPASS: process_data_transformed(x=79)\nPASS: process_data_transformed(x=40)\nPASS: process_data_transformed(x=5)\nPASS: process_data_transformed(x=72)\nPASS: process_data_transformed(x=94)\nPASS: process_data_transformed(x=100)\nPASS: process_data_transformed(x=24)\nPASS: process_data_transformed(x=14)\nPASS: process_data_transformed(x=93)\nPASS: process_data_transformed(x=57)\nPASS: process_data_transformed(x=18)\nPASS: process_data_transformed(x=63)\nPASS: process_data_transformed(x=67)\nPASS: process_data_transformed(x=95)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=97.42593136989781)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=32.26765367050526)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=0.99999)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=2.2250738585072014e-308)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=76.5695129237425)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=86.89029460574287)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=6.103515625e-05, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=0.9891858624977032)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=78.37529399142727, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=6.103515625e-05, discount_rate=6.870460594937845e-290)\nPASS: calculate_discount_transformed(price=6.870460594937845e-290, discount_rate=6.870460594937845e-290)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.3333333333333333)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=0.3333333333333333)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.6923189135618822)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=200.0, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=200.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=2.225073858507e-311)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=0.3333333333333333, imag=0.0)\nPASS: process_complex_number_transformed(real=0.3333333333333333, imag=0.3333333333333333)\nPASS: process_complex_number_transformed(real=-0.3333333333333333, imag=-2.472741810524667e-273)\nPASS: process_complex_number_transformed(real=2.5740736312863106e-238, imag=-0.035149441023833106)\nPASS: process_complex_number_transformed(real=7.215467231554247e-265, imag=-1.5)\nPASS: process_complex_number_transformed(real=1.9, imag=19.999999999999996)\nPASS: process_complex_number_transformed(real=-2.220446049250313e-16, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-1.9, imag=17.410782872405903)\nPASS: process_complex_number_transformed(real=-0.99999, imag=-0.99999)\nPASS: process_complex_number_transformed(real=1.401298464324817e-45, imag=1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=1.401298464324817e-45, imag=1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=-1e-05, imag=-4.8400648854063964e-67)\nPASS: process_complex_number_transformed(real=-1e-05, imag=-1e-05)\nPASS: process_complex_number_transformed(real=14.764536093781395, imag=1.1)\nPASS: process_complex_number_transformed(real=14.764536093781395, imag=14.764536093781395)\nPASS: process_complex_number_transformed(real=1e-05, imag=2.00001)\nPASS: process_complex_number_transformed(real=2.00001, imag=2.00001)\nPASS: process_complex_number_transformed(real=16.08868795807811, imag=1.175494351e-38)\nPASS: process_complex_number_transformed(real=16.08868795807811, imag=16.08868795807811)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=61)\nPASS: transform_data_transformed(input_value=87)\nPASS: transform_data_transformed(input_value=11)\nPASS: transform_data_transformed(input_value=28)\nPASS: transform_data_transformed(input_value=31)\nPASS: transform_data_transformed(input_value=35)\nPASS: transform_data_transformed(input_value=100)\nPASS: transform_data_transformed(input_value=26)\nPASS: transform_data_transformed(input_value=65)\nPASS: transform_data_transformed(input_value=77)\nPASS: transform_data_transformed(input_value=41)\nPASS: transform_data_transformed(input_value=67)\nPASS: transform_data_transformed(input_value=98)\nPASS: transform_data_transformed(input_value=86)\nPASS: transform_data_transformed(input_value=63)\nPASS: transform_data_transformed(input_value=94)\nPASS: transform_data_transformed(input_value=24)\nPASS: transform_data_transformed(input_value=58)\nPASS: transform_data_transformed(input_value=76)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=7.016212305966071)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=18.60039661014525)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=18.240392242479246)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: circle_area_diff_transformed(r=13.048957314086175)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=10.563428300781778)\nPASS: circle_area_diff_transformed(r=11.247601154153772)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=2.572923573999878e-185)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=9, b=1, c=1)\nPASS: triangle_checker_transformed(a=9, b=11, c=4)\nPASS: triangle_checker_transformed(a=1, b=14, c=10)\nPASS: triangle_checker_transformed(a=15, b=18, c=4)\nPASS: triangle_checker_transformed(a=10, b=12, c=14)\nPASS: triangle_checker_transformed(a=15, b=2, c=8)\nPASS: triangle_checker_transformed(a=3, b=6, c=10)\nPASS: triangle_checker_transformed(a=10, b=11, c=15)\nPASS: triangle_checker_transformed(a=16, b=8, c=13)\nPASS: triangle_checker_transformed(a=18, b=14, c=14)\nPASS: triangle_checker_transformed(a=18, b=14, c=18)\nPASS: triangle_checker_transformed(a=18, b=18, c=18)\nPASS: triangle_checker_transformed(a=6, b=7, c=12)\nPASS: triangle_checker_transformed(a=6, b=7, c=6)\nPASS: triangle_checker_transformed(a=6, b=7, c=7)\nPASS: triangle_checker_transformed(a=7, b=7, c=6)\nPASS: triangle_checker_transformed(a=7, b=6, c=6)\nPASS: triangle_checker_transformed(a=6, b=6, c=6)\nPASS: triangle_checker_transformed(a=9, b=20, c=16)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=27.478127027295802)\nPASS: temperature_offset_transformed(c=5.227939128134198)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: temperature_offset_transformed(c=32.202313871007895)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=93.5555949239935)\nPASS: temperature_offset_transformed(c=0.5955292264536729)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=20.516808189808796)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-6, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-6, b=8, c=-9)\nPASS: quadratic_discriminant_transformed(a=-5, b=-8, c=-3)\nPASS: quadratic_discriminant_transformed(a=3, b=-8, c=-4)\nPASS: quadratic_discriminant_transformed(a=5, b=-1, c=-2)\nPASS: quadratic_discriminant_transformed(a=-8, b=-5, c=3)\nPASS: quadratic_discriminant_transformed(a=8, b=-1, c=6)\nPASS: quadratic_discriminant_transformed(a=-4, b=5, c=-8)\nPASS: quadratic_discriminant_transformed(a=4, b=0, c=1)\nPASS: quadratic_discriminant_transformed(a=9, b=-4, c=7)\nPASS: quadratic_discriminant_transformed(a=9, b=-4, c=-4)\nPASS: quadratic_discriminant_transformed(a=9, b=9, c=-4)\nPASS: quadratic_discriminant_transformed(a=9, b=9, c=9)\nPASS: quadratic_discriminant_transformed(a=-6, b=-1, c=3)\nPASS: quadratic_discriminant_transformed(a=-1, b=-1, c=3)\nPASS: quadratic_discriminant_transformed(a=-1, b=3, c=3)\nPASS: quadratic_discriminant_transformed(a=3, b=3, c=3)\nPASS: quadratic_discriminant_transformed(a=-9, b=-9, c=-9)\nPASS: quadratic_discriminant_transformed(a=3, b=2, c=-4)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-2.220446049250313e-16, y=0.0)\nPASS: vector_norm_transformed(x=-2.220446049250313e-16, y=4.9757917472693265)\nPASS: vector_norm_transformed(x=10.0, y=-5e-324)\nPASS: vector_norm_transformed(x=-4.1740205152216835e-19, y=1e-05)\nPASS: vector_norm_transformed(x=5.960464477539063e-08, y=9.999999999999998)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=-1.1)\nPASS: vector_norm_transformed(x=1e-05, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-10.0, y=-6.945973328841809)\nPASS: vector_norm_transformed(x=1.175494351e-38, y=-0.0)\nPASS: vector_norm_transformed(x=1.401298464324817e-45, y=-1e-05)\nPASS: vector_norm_transformed(x=1.401298464324817e-45, y=1.401298464324817e-45)\nPASS: vector_norm_transformed(x=4.689100971944866, y=1.1)\nPASS: vector_norm_transformed(x=4.689100971944866, y=4.689100971944866)\nPASS: vector_norm_transformed(x=1.5, y=1.401298464324817e-45)\nPASS: vector_norm_transformed(x=5.387722023923613, y=-2.268876267623831)\nPASS: vector_norm_transformed(x=5.387722023923613, y=5.387722023923613)\nPASS: vector_norm_transformed(x=-3.1410858664693366, y=9.995187367841062)\nPASS: vector_norm_transformed(x=-3.1410858664693366, y=-3.1410858664693366)\nPASS: vector_norm_transformed(x=2.7789451486463594, y=9.0)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=0.5, b=0.0)\nPASS: hypotenuse_diff_transformed(a=0.0, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=0.5)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=8.360416631497141e-207)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=1.0)\nPASS: hypotenuse_diff_transformed(a=1.9, b=1.5)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=4.507998531296177)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=1.5)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=1.0, b=6.862188691854131)\nPASS: hypotenuse_diff_transformed(a=6.862188691854131, b=6.862188691854131)\nPASS: hypotenuse_diff_transformed(a=5.208357572263425, b=5.8974414483435435e-87)\nPASS: hypotenuse_diff_transformed(a=5.8974414483435435e-87, b=5.8974414483435435e-87)\nPASS: hypotenuse_diff_transformed(a=3.5076043887659107, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=3.627037117195471)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=1.192092896e-07)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u00d1w&2\u007f\u00b64&')\nPASS: ascii_average_transformed(s='3\uda0f\udeb7')\nPASS: ascii_average_transformed(s='\u00db\u0087')\nPASS: ascii_average_transformed(s='\ud887\udc5c\uda95\udfff')\nPASS: ascii_average_transformed(s='NaN')\nPASS: ascii_average_transformed(s='\u000b\u00f8\ud9fd\udde3')\nPASS: ascii_average_transformed(s='\uda68\ude49')\nPASS: ascii_average_transformed(s='2\u00b8\ud9a9\udffd\ud863\ude03\u009a\u0088\ud9bc\udeee\u009b\u009e\u00e4')\nPASS: ascii_average_transformed(s='c\u00ad')\nPASS: ascii_average_transformed(s='\u0084\u0091m\u0084\u00a8C\u00d5~\ud940\ude48')\nPASS: ascii_average_transformed(s='{\"')\nPASS: ascii_average_transformed(s='@F')\nPASS: ascii_average_transformed(s='\u00a1')\nPASS: ascii_average_transformed(s='\u00b6\u00aa')\nPASS: ascii_average_transformed(s='\u00b9')\nPASS: ascii_average_transformed(s='\u00ce')\nPASS: ascii_average_transformed(s='t`\u00b5[\u00d9$\u00be')\nPASS: ascii_average_transformed(s='\u009c@')\nPASS: ascii_average_transformed(s='\u0089\ud878\udf83\udac1\udd3c')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[2, 0])\nPASS: list_balance_transformed(nums=[2, 4, 1, 1])\nPASS: list_balance_transformed(nums=[8, 10, 4, 8, 5, 8, 0])\nPASS: list_balance_transformed(nums=[3, 2, 8, 0, 9, 0, 8])\nPASS: list_balance_transformed(nums=[5, 2, 3, 3, 9, 5, 8, 6, 8])\nPASS: list_balance_transformed(nums=[8, 1])\nPASS: list_balance_transformed(nums=[7, 4, 6, 3, 7, 5])\nPASS: list_balance_transformed(nums=[3, 7, 5, 10, 5, 5, 6, 5, 5, 2])\nPASS: list_balance_transformed(nums=[7, 7, 3, 6, 2, 7, 7])\nPASS: list_balance_transformed(nums=[5, 10, 2, 0, 7, 8, 10])\nPASS: list_balance_transformed(nums=[5, 10, 7, 0, 7, 8, 10])\nPASS: list_balance_transformed(nums=[5, 10, 7, 0, 10, 8, 10])\nPASS: list_balance_transformed(nums=[5, 10, 10, 0, 10, 8, 10])\nPASS: list_balance_transformed(nums=[10, 10, 10, 0, 10, 8, 10])\nPASS: list_balance_transformed(nums=[10, 10, 10, 0, 10, 10, 10])\nPASS: list_balance_transformed(nums=[10, 10, 10, 10, 10, 10, 10])\nPASS: list_balance_transformed(nums=[6, 4, 7, 5, 2, 8, 1, 0, 5, 3])\nPASS: list_balance_transformed(nums=[7, 4, 7, 5, 2, 8, 1, 0, 5, 3])\nPASS: list_balance_transformed(nums=[7, 4, 7, 5, 2, 8, 1, 0, 0, 3])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[3, 4, 5, 8, 7, 8, 5, 2, 1, 5])\nPASS: odd_sum_validator_transformed(lst=[8, 5, 1])\nPASS: odd_sum_validator_transformed(lst=[10, 9])\nPASS: odd_sum_validator_transformed(lst=[2, 5, 6, 2, 0, 0, 10])\nPASS: odd_sum_validator_transformed(lst=[7])\nPASS: odd_sum_validator_transformed(lst=[1, 5])\nPASS: odd_sum_validator_transformed(lst=[4, 5, 7])\nPASS: odd_sum_validator_transformed(lst=[8, 5])\nPASS: odd_sum_validator_transformed(lst=[5, 5])\nPASS: odd_sum_validator_transformed(lst=[8, 2])\nPASS: odd_sum_validator_transformed(lst=[2, 2])\nPASS: odd_sum_validator_transformed(lst=[4])\nPASS: odd_sum_validator_transformed(lst=[7, 9, 5, 3, 2, 4, 4, 3, 0, 5])\nPASS: odd_sum_validator_transformed(lst=[7, 9, 5, 3, 2, 4, 4, 0, 0, 5])\nPASS: odd_sum_validator_transformed(lst=[7, 9, 5, 3, 2, 4, 4, 0, 5, 5])\nPASS: odd_sum_validator_transformed(lst=[7, 9, 5, 3, 2, 5, 4, 0, 5, 5])\nPASS: odd_sum_validator_transformed(lst=[7, 9, 5, 7, 2, 5, 4, 0, 5, 5])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u00b4')\nPASS: string_pattern_score_transformed(s='w\u00b1v\n{<E`y\u0098')\nPASS: string_pattern_score_transformed(s='T')\nPASS: string_pattern_score_transformed(s='\u0001\u0098')\nPASS: string_pattern_score_transformed(s='\u0019yqQ\ud89f\udda8\udb87\udfa3n#\u0013p')\nPASS: string_pattern_score_transformed(s='\u00ab9\udab6\udc04')\nPASS: string_pattern_score_transformed(s='\u00da\u0089')\nPASS: string_pattern_score_transformed(s='INF')\nPASS: string_pattern_score_transformed(s='UE\ud8d3\udfd13\u00a4c\uda2a\ude262\u00b7\u00f5')\nPASS: string_pattern_score_transformed(s='\ud907\uddf4\uda80\uddaa\u000e\udab7\uddcew\u009c\udabb\ude26\u00a6')\nPASS: string_pattern_score_transformed(s='\u00d2')\nPASS: string_pattern_score_transformed(s='\ud94e\udda6\u00ff\u0015')\nPASS: string_pattern_score_transformed(s='\u0011!\udb3e\ude3e\u00cf\u00cd')\nPASS: string_pattern_score_transformed(s='\u008e\u00bb\u00ec\u00d4\udb53\udc4at\u0089\ud9b1\udd05')\nPASS: string_pattern_score_transformed(s='\f\u008f\u0093\u009c\u00ed\udb89\udf8a}\udbe8\udc00\u00cf\u00a3')\nPASS: string_pattern_score_transformed(s='\ud894\ude38\u00bb\u008c')\nPASS: string_pattern_score_transformed(s='\u00a5')\nPASS: string_pattern_score_transformed(s='fn')\nPASS: string_pattern_score_transformed(s='undefined')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[20])\nPASS: sum_until_limit_transformed(nums=[2])\nFAIL: sum_until_limit_transformed(nums=[14, 9, 10, 17, 11, 5, 9, 15, 20, 0])\nPASS: sum_until_limit_transformed(nums=[8])\nPASS: sum_until_limit_transformed(nums=[9, 6, 11, 7])\nPASS: sum_until_limit_transformed(nums=[1, 1, 2, 5, 9, 10, 4, 8, 9, 5])\nPASS: sum_until_limit_transformed(nums=[12, 18, 3, 1, 7, 19, 16, 13, 15, 10])\nPASS: sum_until_limit_transformed(nums=[13, 13])\nPASS: sum_until_limit_transformed(nums=[18, 4, 18, 16, 7, 16, 17, 4, 7])\nPASS: sum_until_limit_transformed(nums=[5, 18, 19, 11, 14, 2, 12, 15, 14, 13])\nPASS: sum_until_limit_transformed(nums=[5, 5, 19, 11, 14, 2, 12, 15, 14, 13])\nFAIL: sum_until_limit_transformed(nums=[15, 5, 19, 11, 14, 2, 12, 15, 14, 13])\nFAIL: sum_until_limit_transformed(nums=[15, 5, 19, 11, 14, 2, 15, 15, 14, 13])\nPASS: sum_until_limit_transformed(nums=[15, 15, 19, 11, 14, 2, 15, 15, 14, 13])\nPASS: sum_until_limit_transformed(nums=[15, 14, 19, 11, 14, 2, 15, 15, 14, 13])\nPASS: sum_until_limit_transformed(nums=[13, 14, 19, 11, 14, 2, 15, 15, 14, 13])\nPASS: sum_until_limit_transformed(nums=[12])\nPASS: sum_until_limit_transformed(nums=[10, 19])\nPASS: sum_until_limit_transformed(nums=[10, 10])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[8])\nPASS: count_divisibles_transformed(nums=[3])\nPASS: count_divisibles_transformed(nums=[1, 18, 10, 7])\nPASS: count_divisibles_transformed(nums=[18, 19, 1])\nPASS: count_divisibles_transformed(nums=[3, 16, 19, 10, 18, 16, 8, 0, 20, 0])\nPASS: count_divisibles_transformed(nums=[8, 2, 16])\nPASS: count_divisibles_transformed(nums=[4])\nPASS: count_divisibles_transformed(nums=[6, 4, 8, 9, 10, 7])\nPASS: count_divisibles_transformed(nums=[20, 5, 15, 6, 3, 6, 7, 18, 18, 17])\nPASS: count_divisibles_transformed(nums=[13, 3])\nPASS: count_divisibles_transformed(nums=[13, 13])\nPASS: count_divisibles_transformed(nums=[14, 7, 17, 11, 18, 12, 14, 19, 8, 3])\nPASS: count_divisibles_transformed(nums=[14, 7, 17, 11, 11, 12, 14, 19, 8, 3])\nPASS: count_divisibles_transformed(nums=[14, 7, 17, 11, 11, 8, 14, 19, 8, 3])\nPASS: count_divisibles_transformed(nums=[8, 7, 17, 11, 11, 8, 14, 19, 8, 3])\nPASS: count_divisibles_transformed(nums=[8, 7, 17, 11, 11, 11, 14, 19, 8, 3])\nPASS: count_divisibles_transformed(nums=[8, 11, 17, 11, 11, 11, 14, 19, 8, 3])\nPASS: count_divisibles_transformed(nums=[8, 11, 8, 11, 11, 11, 14, 19, 8, 3])\nPASS: count_divisibles_transformed(nums=[7, 9, 6, 7, 11])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[7, 1, 1, 9, 4, 0])\nPASS: index_weighted_sum_transformed(lst=[0, 4, 3, 4, 3])\nPASS: index_weighted_sum_transformed(lst=[5])\nPASS: index_weighted_sum_transformed(lst=[3, 2, 3])\nPASS: index_weighted_sum_transformed(lst=[8, 7])\nPASS: index_weighted_sum_transformed(lst=[4, 8])\nPASS: index_weighted_sum_transformed(lst=[1, 4, 7, 3, 3])\nPASS: index_weighted_sum_transformed(lst=[9])\nPASS: index_weighted_sum_transformed(lst=[6, 7, 7, 8, 2, 10, 10, 9, 9, 10])\nPASS: index_weighted_sum_transformed(lst=[6, 7, 7, 9, 2, 10, 10, 9, 9, 10])\nPASS: index_weighted_sum_transformed(lst=[10, 7, 7, 9, 2, 10, 10, 9, 9, 10])\nPASS: index_weighted_sum_transformed(lst=[10, 10, 7, 9, 2, 10, 10, 9, 9, 10])\nPASS: index_weighted_sum_transformed(lst=[10, 10, 9, 9, 2, 10, 10, 9, 9, 10])\nPASS: index_weighted_sum_transformed(lst=[10, 10, 10, 9, 2, 10, 10, 9, 9, 10])\nPASS: index_weighted_sum_transformed(lst=[10, 10, 10, 9, 2, 10, 10, 9, 10, 10])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[5, 4, 7])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=4)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u0007\u0082\u00a5\u00e2\u008b\u00b0\u00ff')\nPASS: character_counter_transformed(text='\u00ff\u00ed\u00b1_\u00ea\u00f4\u000b')\nPASS: character_counter_transformed(text='J\u00f2\u0013\udbf2\udd3e\u00b2\u00ad')\nPASS: character_counter_transformed(text='\u0080\u008a\u000b,\u008f\u009c\u00fb')\nPASS: character_counter_transformed(text=' Z')\nPASS: character_counter_transformed(text='\u0003\u00f7\u008e;O\ud9e2\udc45\u0085z\u00ef')\nPASS: character_counter_transformed(text='\u00a4\u00e1$')\nPASS: character_counter_transformed(text='\u00e0')\nPASS: character_counter_transformed(text='c\u00fdU5')\nPASS: character_counter_transformed(text='o\ud806\udf4d\u00b6\udba9\udd53')\nPASS: character_counter_transformed(text='\u0013\ud9ca\udcf0\u00db')\nPASS: character_counter_transformed(text='6\uda83\ude03')\nPASS: character_counter_transformed(text='\ud849\udeff\n\u0003\u0093a\u00f6\u007f')\nPASS: character_counter_transformed(text='\u00d7>')\nPASS: character_counter_transformed(text='\ud94e\udedd\u00a6e'')\nPASS: character_counter_transformed(text='\uda7b\udf25\u00f8\u001a\u00e8_\uda4f\udee3&\udbf8\ude0a\u00b1\u0012')\nPASS: character_counter_transformed(text='\u00cb\u000f')\nPASS: character_counter_transformed(text='d\udbc6\udc32\u00ee\u00b2\u00c3\n?')\nPASS: character_counter_transformed(text='\u0013\uda43\ude87\u0086\u00a6\ud969\udeee\u00ce\u0089\u00ee\u0011y')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[73])\nPASS: rolling_maximum_transformed(values=[35])\nPASS: rolling_maximum_transformed(values=[35, 9, 2])\nPASS: rolling_maximum_transformed(values=[90, 50])\nPASS: rolling_maximum_transformed(values=[71])\nPASS: rolling_maximum_transformed(values=[68, 54, 82, 15, 97, 11, 69, 55, 100, 48])\nPASS: rolling_maximum_transformed(values=[43, 99])\nPASS: rolling_maximum_transformed(values=[99])\nPASS: rolling_maximum_transformed(values=[7, 69, 93, 88, 52, 81, 53, 12, 24, 47])\nPASS: rolling_maximum_transformed(values=[97, 9, 78, 80])\nPASS: rolling_maximum_transformed(values=[97, 9, 97, 80])\nPASS: rolling_maximum_transformed(values=[97, 9, 97, 97])\nPASS: rolling_maximum_transformed(values=[97, 9, 97])\nPASS: rolling_maximum_transformed(values=[97])\nPASS: rolling_maximum_transformed(values=[46, 59, 13, 47, 88, 95, 9, 57, 96, 100])\nPASS: rolling_maximum_transformed(values=[46, 59, 95, 47, 88, 95, 9, 57, 96, 100])\nPASS: rolling_maximum_transformed(values=[46, 59, 95, 47, 57, 95, 9, 57, 96, 100])\nPASS: rolling_maximum_transformed(values=[46, 59, 95, 46, 57, 95, 9, 57, 96, 100])\nPASS: rolling_maximum_transformed(values=[46, 59, 95, 95, 57, 95, 9, 57, 96, 100])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_15": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=56)\nPASS: process_data_transformed(x=52)\nPASS: process_data_transformed(x=53)\nPASS: process_data_transformed(x=7)\nPASS: process_data_transformed(x=31)\nPASS: process_data_transformed(x=91)\nPASS: process_data_transformed(x=90)\nPASS: process_data_transformed(x=65)\nPASS: process_data_transformed(x=100)\nPASS: process_data_transformed(x=87)\nPASS: process_data_transformed(x=50)\nPASS: process_data_transformed(x=20)\nPASS: process_data_transformed(x=44)\nPASS: process_data_transformed(x=47)\nPASS: process_data_transformed(x=22)\nPASS: process_data_transformed(x=5)\nPASS: process_data_transformed(x=8)\nPASS: process_data_transformed(x=63)\nPASS: process_data_transformed(x=49)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=2.2250738585072014e-308)\nPASS: convert_temperature_transformed(c=32.202631739832896)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=99.56646071189567)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=70.49698832795565)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=91.47004517582151)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=34.18082306861866)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=18.702766880497283)\nPASS: convert_temperature_transformed(c=92.19469589037249)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=161.25665326859865, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=161.25665326859865, discount_rate=0.9446630695476297)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=1.5, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=0.14840702618682292)\nPASS: calculate_discount_transformed(price=81.96053339513514, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=186.61060469342198, discount_rate=0.3333333333333333)\nPASS: calculate_discount_transformed(price=14.862836066650202, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=0.141508198394275)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=0.4567959561011189)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=115.21081529832425, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=0.9563997846111956)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=2.00001, imag=0.0)\nPASS: process_complex_number_transformed(real=2.00001, imag=2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-1.1125369292536007e-308, imag=-20.0)\nPASS: process_complex_number_transformed(real=-0.0, imag=2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=-1.192092896e-07, imag=1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=-1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=-0.0, imag=-5e-324)\nPASS: process_complex_number_transformed(real=-2.225073858507e-311, imag=1.5)\nPASS: process_complex_number_transformed(real=0.99999, imag=19.0)\nPASS: process_complex_number_transformed(real=19.446344560905573, imag=-1e-05)\nPASS: process_complex_number_transformed(real=19.446344560905573, imag=19.446344560905573)\nPASS: process_complex_number_transformed(real=-1.175494351e-38, imag=1.1)\nPASS: process_complex_number_transformed(real=1.1, imag=1.1)\nPASS: process_complex_number_transformed(real=19.999999999999996, imag=2.2250738585e-313)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=2.2250738585e-313)\nPASS: process_complex_number_transformed(real=1.4802139717208043, imag=-1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=1.4802139717208043, imag=1.4802139717208043)\nPASS: process_complex_number_transformed(real=11.961113898718196, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=1.1125369292536007e-308)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=59)\nPASS: transform_data_transformed(input_value=84)\nPASS: transform_data_transformed(input_value=67)\nPASS: transform_data_transformed(input_value=56)\nPASS: transform_data_transformed(input_value=92)\nPASS: transform_data_transformed(input_value=41)\nPASS: transform_data_transformed(input_value=49)\nPASS: transform_data_transformed(input_value=77)\nPASS: transform_data_transformed(input_value=38)\nPASS: transform_data_transformed(input_value=42)\nPASS: transform_data_transformed(input_value=87)\nPASS: transform_data_transformed(input_value=2)\nPASS: transform_data_transformed(input_value=23)\nPASS: transform_data_transformed(input_value=78)\nPASS: transform_data_transformed(input_value=99)\nPASS: transform_data_transformed(input_value=3)\nPASS: transform_data_transformed(input_value=40)\nPASS: transform_data_transformed(input_value=58)\nPASS: transform_data_transformed(input_value=7)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=10.991860233914704)\nPASS: circle_area_diff_transformed(r=15.143300344831975)\nPASS: circle_area_diff_transformed(r=9.262132028311381)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=14.515269740995695)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=19.16548149667492)\nPASS: circle_area_diff_transformed(r=10.307504127240083)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=3.7955499020847947)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: circle_area_diff_transformed(r=13.370702576416951)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=9.243213158933143)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=10, b=1, c=1)\nPASS: triangle_checker_transformed(a=10, b=12, c=3)\nPASS: triangle_checker_transformed(a=12, b=1, c=7)\nPASS: triangle_checker_transformed(a=17, b=9, c=19)\nPASS: triangle_checker_transformed(a=16, b=11, c=6)\nPASS: triangle_checker_transformed(a=7, b=18, c=20)\nPASS: triangle_checker_transformed(a=2, b=3, c=2)\nPASS: triangle_checker_transformed(a=16, b=6, c=8)\nPASS: triangle_checker_transformed(a=9, b=17, c=1)\nPASS: triangle_checker_transformed(a=17, b=14, c=20)\nPASS: triangle_checker_transformed(a=17, b=14, c=17)\nPASS: triangle_checker_transformed(a=17, b=14, c=14)\nPASS: triangle_checker_transformed(a=14, b=14, c=14)\nPASS: triangle_checker_transformed(a=12, b=5, c=4)\nPASS: triangle_checker_transformed(a=5, b=5, c=4)\nPASS: triangle_checker_transformed(a=5, b=4, c=4)\nPASS: triangle_checker_transformed(a=4, b=4, c=4)\nPASS: triangle_checker_transformed(a=17, b=5, c=15)\nPASS: triangle_checker_transformed(a=17, b=17, c=15)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=78.64242801483606)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=1.192092896e-07)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=20.957245656629226)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=52.4206391840582)\nPASS: temperature_offset_transformed(c=52.04991137487013)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=5, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=5, b=-2, c=0)\nPASS: quadratic_discriminant_transformed(a=-9, b=4, c=-5)\nPASS: quadratic_discriminant_transformed(a=9, b=-6, c=9)\nPASS: quadratic_discriminant_transformed(a=-9, b=1, c=7)\nPASS: quadratic_discriminant_transformed(a=-1, b=-3, c=1)\nPASS: quadratic_discriminant_transformed(a=9, b=4, c=7)\nPASS: quadratic_discriminant_transformed(a=0, b=-5, c=7)\nPASS: quadratic_discriminant_transformed(a=7, b=0, c=-8)\nPASS: quadratic_discriminant_transformed(a=6, b=-10, c=6)\nPASS: quadratic_discriminant_transformed(a=6, b=6, c=6)\nPASS: quadratic_discriminant_transformed(a=-8, b=9, c=7)\nPASS: quadratic_discriminant_transformed(a=-8, b=9, c=-8)\nPASS: quadratic_discriminant_transformed(a=-8, b=9, c=9)\nPASS: quadratic_discriminant_transformed(a=9, b=9, c=9)\nPASS: quadratic_discriminant_transformed(a=4, b=2, c=4)\nPASS: quadratic_discriminant_transformed(a=2, b=2, c=4)\nPASS: quadratic_discriminant_transformed(a=2, b=2, c=2)\nPASS: quadratic_discriminant_transformed(a=-2, b=7, c=8)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=5.960464477539063e-08, y=0.0)\nPASS: vector_norm_transformed(x=-7.300853993356666, y=0.0)\nPASS: vector_norm_transformed(x=-7.300853993356666, y=5e-324)\nPASS: vector_norm_transformed(x=-1.1125369292536007e-308, y=-5.582925566895102)\nPASS: vector_norm_transformed(x=10.0, y=1.5675043548257488)\nPASS: vector_norm_transformed(x=1.1754943508222875e-38, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=1.9, y=2.00001)\nPASS: vector_norm_transformed(x=-2.313043118029661, y=0.5)\nPASS: vector_norm_transformed(x=-0.5, y=-0.5)\nPASS: vector_norm_transformed(x=0.20699360725379634, y=0.0)\nPASS: vector_norm_transformed(x=0.20699360725379634, y=0.20699360725379634)\nPASS: vector_norm_transformed(x=-1.5, y=-10.0)\nPASS: vector_norm_transformed(x=-1.5, y=-1.5)\nPASS: vector_norm_transformed(x=2.220446049250313e-16, y=-0.780830964030244)\nPASS: vector_norm_transformed(x=-0.780830964030244, y=-0.780830964030244)\nPASS: vector_norm_transformed(x=1.1, y=0.0)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=1.192092896e-07)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=-1.192092896e-07)\nPASS: vector_norm_transformed(x=1.1754943508222875e-38, y=-4.639918063977716)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=1.0)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=0.0, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=1.0)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=10.0)\nPASS: hypotenuse_diff_transformed(a=4.9651363878741215, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=5.695447406295916)\nPASS: hypotenuse_diff_transformed(a=5.695447406295916, b=5.695447406295916)\nPASS: hypotenuse_diff_transformed(a=5.195600672959325, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=5.195600672959325, b=5.195600672959325)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=5.960464477539063e-08)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='<H\u00e4\u00d4d\udbbf\ude8a\u00f2\u00ad\u001b\ud9de\udd90')\nPASS: ascii_average_transformed(s='\u00c4\uda11\udcc0\u0097')\nPASS: ascii_average_transformed(s='\\K\u00aa\u00c3')\nPASS: ascii_average_transformed(s='\u0013')\nPASS: ascii_average_transformed(s='\u00bf\u00fb\udb1d\udedd\u00c3\u00ad\u00f5\ud90a\udfce')\nPASS: ascii_average_transformed(s='\udb10\ude87\u00d2c\u0007\u0096')\nPASS: ascii_average_transformed(s='\n')\nPASS: ascii_average_transformed(s='\u0004')\nPASS: ascii_average_transformed(s='\uda0b\udcda\u00d8\u00df*\u00aa\u00ce\u00d9\udb75\udccb\u0017\b')\nPASS: ascii_average_transformed(s='d;/\udae0\udc91')\nPASS: ascii_average_transformed(s=''\"\udbfa\udce4\u00b2t\ud9f1\ude91@\u00f7\u00af\u00f1')\nPASS: ascii_average_transformed(s=',\u0004\u00dc')\nPASS: ascii_average_transformed(s='\u00b5\ud951\ude3c\udbb0\udfd9\u00e9\u0001')\nPASS: ascii_average_transformed(s='V\u008e\u00ea\u00d1\ud8bc\udf3d\u0084')\nPASS: ascii_average_transformed(s='\u00b21*\u0013U\u00b9R\u00da6\u0002')\nPASS: ascii_average_transformed(s='V\u0015\u00b4')\nPASS: ascii_average_transformed(s='\u00bc')\nPASS: ascii_average_transformed(s='\u00f2')\nPASS: ascii_average_transformed(s='o)*')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[9, 0])\nPASS: list_balance_transformed(nums=[3, 0])\nPASS: list_balance_transformed(nums=[10, 6, 10, 5, 2, 5, 2, 1, 10, 5])\nPASS: list_balance_transformed(nums=[8, 3, 5, 7, 7, 4, 10])\nPASS: list_balance_transformed(nums=[9, 10, 3, 4, 9])\nPASS: list_balance_transformed(nums=[10, 3, 0, 6, 2, 5])\nPASS: list_balance_transformed(nums=[6, 1, 9, 1, 3, 6, 9, 10])\nPASS: list_balance_transformed(nums=[7, 2, 0, 5, 9])\nPASS: list_balance_transformed(nums=[3, 6, 0, 2])\nPASS: list_balance_transformed(nums=[4, 8, 10, 0, 4, 7, 7, 7, 5])\nPASS: list_balance_transformed(nums=[4, 8, 10, 0, 4, 7, 7, 7, 0])\nPASS: list_balance_transformed(nums=[4, 8, 0, 0, 4, 7, 7, 7, 0])\nPASS: list_balance_transformed(nums=[4, 8, 8, 0, 4, 7, 7, 7, 0])\nPASS: list_balance_transformed(nums=[4, 8, 8, 0, 7, 7, 7, 7, 0])\nPASS: list_balance_transformed(nums=[7, 8, 8, 0, 7, 7, 7, 7, 0])\nPASS: list_balance_transformed(nums=[1, 0, 10, 4, 10, 10, 6, 8])\nPASS: list_balance_transformed(nums=[1, 0, 10, 4, 10, 10, 6, 10])\nPASS: list_balance_transformed(nums=[1, 0, 6, 4, 10, 10, 6, 10])\nPASS: list_balance_transformed(nums=[1, 4, 6, 4, 10, 10, 6, 10])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[7])\nPASS: odd_sum_validator_transformed(lst=[4, 3, 5, 3])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 6, 2, 5, 4, 10, 5, 2])\nPASS: odd_sum_validator_transformed(lst=[2, 1, 5, 1, 8, 0, 4, 5])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[1])\nPASS: odd_sum_validator_transformed(lst=[7, 2, 9])\nPASS: odd_sum_validator_transformed(lst=[4])\nPASS: odd_sum_validator_transformed(lst=[8, 9, 0, 10, 7, 6, 10, 1, 2])\nPASS: odd_sum_validator_transformed(lst=[8, 9, 0, 7, 7, 6, 10, 1, 2])\nPASS: odd_sum_validator_transformed(lst=[8, 9, 0, 7, 7, 6, 7, 1, 2])\nPASS: odd_sum_validator_transformed(lst=[8, 2, 0, 7, 7, 6, 7, 1, 2])\nPASS: odd_sum_validator_transformed(lst=[8, 2, 0, 7, 7, 6, 7, 7, 2])\nPASS: odd_sum_validator_transformed(lst=[8, 2, 0, 7, 7, 6, 7, 7, 8])\nPASS: odd_sum_validator_transformed(lst=[8, 0, 0, 7, 7, 6, 7, 7, 8])\nPASS: odd_sum_validator_transformed(lst=[3, 2, 1, 0, 9, 4])\nPASS: odd_sum_validator_transformed(lst=[3, 2, 0, 0, 9, 4])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u00b2\u00ce\u008b')\nPASS: string_pattern_score_transformed(s='\u00e89\u0007o\ud965\uddae\u00a1\u00e6\u00fd\u00ca\u00a4')\nPASS: string_pattern_score_transformed(s='\u0081\u0098\u00ba7M|')\nPASS: string_pattern_score_transformed(s='Gv')\nPASS: string_pattern_score_transformed(s='\u00b0\udba9\uddb8\u00c7')\nPASS: string_pattern_score_transformed(s='\u00b4')\nPASS: string_pattern_score_transformed(s='\ud94e\udcfa\u0097\ud992\udf15\u00e1[w\fT\u00e5')\nPASS: string_pattern_score_transformed(s='\u00e0~\ud8ae\udca4')\nPASS: string_pattern_score_transformed(s='\u00c5\ud9ba\udf47\u00d4\u00ec\u008du')\nPASS: string_pattern_score_transformed(s='m\udad0\udfc12\u008b\u00a0<')\nPASS: string_pattern_score_transformed(s='\u00a85\udb7d\udd1d\u00a4\fq\u009a\u00b4\u0094X')\nPASS: string_pattern_score_transformed(s='\ud879\udced\u00d7\udb9b\udf9b\u00fa')\nPASS: string_pattern_score_transformed(s='\u00dc')\nPASS: string_pattern_score_transformed(s='QG\u0014\u00ae\u00bd\udb45\udd20\u000b]\u0001')\nPASS: string_pattern_score_transformed(s='\uda9a\udebd\ud955\ude51\u0011\u00f9\u00db\u001f\u00c5\u00010-')\nPASS: string_pattern_score_transformed(s='5\u008d;\ud979\udce9')\nPASS: string_pattern_score_transformed(s='\u009dU\u007ff)\uda43\udee1;\u00d1\u00a2\u00dc')\nPASS: string_pattern_score_transformed(s='\uda58\udec6\u00184')\nPASS: string_pattern_score_transformed(s='\u00c3\u00f4\u00cec\u0006\u009b\u0000\u00ff\udb37\udfcf')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[17])\nPASS: sum_until_limit_transformed(nums=[10])\nPASS: sum_until_limit_transformed(nums=[5, 6, 3, 3])\nPASS: sum_until_limit_transformed(nums=[12, 17, 18, 19])\nPASS: sum_until_limit_transformed(nums=[7, 4, 13, 4, 13, 18, 12])\nPASS: sum_until_limit_transformed(nums=[14])\nPASS: sum_until_limit_transformed(nums=[17, 14, 17, 16, 9, 5, 16, 1, 6])\nPASS: sum_until_limit_transformed(nums=[6, 13, 0, 9, 9, 12, 0, 0, 19, 16])\nPASS: sum_until_limit_transformed(nums=[0, 14, 16, 7])\nPASS: sum_until_limit_transformed(nums=[20])\nPASS: sum_until_limit_transformed(nums=[11, 1, 0, 2, 6, 19])\nPASS: sum_until_limit_transformed(nums=[11, 1, 19, 2, 6, 19])\nPASS: sum_until_limit_transformed(nums=[11, 1, 19, 2, 6, 6])\nPASS: sum_until_limit_transformed(nums=[6, 1, 19, 2, 6, 6])\nPASS: sum_until_limit_transformed(nums=[6, 1, 19, 6, 6, 6])\nPASS: sum_until_limit_transformed(nums=[6, 1, 19, 6, 6])\nPASS: sum_until_limit_transformed(nums=[6, 1, 1, 6, 6])\nFAIL: sum_until_limit_transformed(nums=[4, 19, 15, 16, 4, 2])\nPASS: sum_until_limit_transformed(nums=[4, 16, 15, 16, 4, 2])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[6])\nPASS: count_divisibles_transformed(nums=[17])\nPASS: count_divisibles_transformed(nums=[9, 17])\nPASS: count_divisibles_transformed(nums=[5, 4, 2, 17, 15, 12, 9])\nPASS: count_divisibles_transformed(nums=[10, 17, 10, 11, 14, 16, 10])\nPASS: count_divisibles_transformed(nums=[5])\nPASS: count_divisibles_transformed(nums=[0, 14, 10, 15, 14])\nPASS: count_divisibles_transformed(nums=[8])\nPASS: count_divisibles_transformed(nums=[0, 10])\nPASS: count_divisibles_transformed(nums=[13, 2, 13, 2, 13, 14, 2, 16, 19, 3])\nPASS: count_divisibles_transformed(nums=[13, 2, 13, 2, 13, 14, 2, 16, 13, 3])\nPASS: count_divisibles_transformed(nums=[13, 2, 13, 2, 13, 14, 2, 13, 13, 3])\nPASS: count_divisibles_transformed(nums=[13, 2, 13])\nPASS: count_divisibles_transformed(nums=[13])\nPASS: count_divisibles_transformed(nums=[20, 9, 4, 1, 2, 9, 2, 6, 7])\nPASS: count_divisibles_transformed(nums=[20, 9, 4, 1, 2, 9, 4, 6, 7])\nPASS: count_divisibles_transformed(nums=[20, 9, 20, 1, 2, 9, 4, 6, 7])\nPASS: count_divisibles_transformed(nums=[20, 20, 20, 1, 2, 9, 4, 6, 7])\nPASS: count_divisibles_transformed(nums=[20, 6, 20, 1, 2, 9, 4, 6, 7])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[5])\nPASS: index_weighted_sum_transformed(lst=[9])\nPASS: index_weighted_sum_transformed(lst=[7])\nPASS: index_weighted_sum_transformed(lst=[3, 0, 10])\nPASS: index_weighted_sum_transformed(lst=[0, 0, 0, 2, 5, 1, 5, 6])\nPASS: index_weighted_sum_transformed(lst=[10, 3])\nPASS: index_weighted_sum_transformed(lst=[0, 7, 1, 7, 4, 5, 8, 1])\nPASS: index_weighted_sum_transformed(lst=[0, 1])\nPASS: index_weighted_sum_transformed(lst=[8, 1, 0, 2, 7, 0, 1, 6, 0, 4])\nPASS: index_weighted_sum_transformed(lst=[5, 8, 9, 6, 1, 6, 4, 7, 2, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 8, 9, 6, 1, 6, 4, 7, 8, 5])\nPASS: index_weighted_sum_transformed(lst=[8, 8, 9, 6, 1, 6, 4, 7, 8, 5])\nPASS: index_weighted_sum_transformed(lst=[8, 8, 1, 6, 1, 6, 4, 7, 8, 5])\nPASS: index_weighted_sum_transformed(lst=[8, 8, 1, 6, 1, 6, 4, 8, 8, 5])\nPASS: index_weighted_sum_transformed(lst=[8, 8, 1, 6, 1, 6, 4, 6, 8, 5])\nPASS: index_weighted_sum_transformed(lst=[8, 8, 1, 6, 1, 6, 6, 6, 8, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 10, 9])\nPASS: index_weighted_sum_transformed(lst=[5, 10, 10])\nPASS: index_weighted_sum_transformed(lst=[5, 10, 5])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=9)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='b\ud845\udf7f\u008f\u008e\u00a6}\ud9d7\udddf\uda51\udcd8')\nPASS: character_counter_transformed(text='gtG^\u001d\u0099\ud83a\ude16')\nPASS: character_counter_transformed(text='\u00f4')\nPASS: character_counter_transformed(text='\u00b7\u00fa\u00c5\u00043\u009c+\u976d\u0014Z')\nPASS: character_counter_transformed(text='\u00f3\u00d8?\u009fB\u00db')\nPASS: character_counter_transformed(text=' ')\nPASS: character_counter_transformed(text='S')\nPASS: character_counter_transformed(text='\u00b8\u00e6\u00f0')\nPASS: character_counter_transformed(text='\u0013k6\u00f5')\nPASS: character_counter_transformed(text='|C\uda9a\udd76\ud88d\udd0f\u00ce')\nPASS: character_counter_transformed(text='g\u00ba\udab6\udfb7-\u0086\ud867\udcf0\u009bxU')\nPASS: character_counter_transformed(text='i\udb34\udd27u&\u00d7I3')\nPASS: character_counter_transformed(text='\u00832\u0090I\u009f')\nPASS: character_counter_transformed(text='\u00f4\u00b6)')\nPASS: character_counter_transformed(text='k\u0011x\\')\nPASS: character_counter_transformed(text='\u009ch\ud900\ude8a')\nPASS: character_counter_transformed(text='\u0097\u00e9\u00a7\u00c1')\nPASS: character_counter_transformed(text='\udada\udd90\u00e4\u008f')\nPASS: character_counter_transformed(text='\u00eb\u001e\ud83d\udc3c')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[57])\nPASS: rolling_maximum_transformed(values=[32])\nPASS: rolling_maximum_transformed(values=[80, 26, 66, 94, 68, 13, 59, 99, 7, 12])\nPASS: rolling_maximum_transformed(values=[87])\nPASS: rolling_maximum_transformed(values=[98, 82, 43, 38, 12, 38, 73, 77])\nPASS: rolling_maximum_transformed(values=[49, 14])\nPASS: rolling_maximum_transformed(values=[74, 65, 4, 73, 87, 51, 13])\nPASS: rolling_maximum_transformed(values=[14, 62, 96])\nPASS: rolling_maximum_transformed(values=[43])\nPASS: rolling_maximum_transformed(values=[1, 70])\nPASS: rolling_maximum_transformed(values=[96, 72, 95, 22, 79])\nPASS: rolling_maximum_transformed(values=[96, 72, 22, 22, 79])\nPASS: rolling_maximum_transformed(values=[96, 96, 22, 22, 79])\nPASS: rolling_maximum_transformed(values=[96, 96, 22, 96, 79])\nPASS: rolling_maximum_transformed(values=[96, 79, 22, 96, 79])\nPASS: rolling_maximum_transformed(values=[79, 79, 22, 96, 79])\nPASS: rolling_maximum_transformed(values=[79, 79, 22, 96, 22])\nPASS: rolling_maximum_transformed(values=[18, 5, 84, 78, 79, 60, 96, 41, 49, 26])\nPASS: rolling_maximum_transformed(values=[18, 5, 84, 78, 79, 60, 96, 78, 49, 26])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_16": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=67)\nPASS: process_data_transformed(x=30)\nPASS: process_data_transformed(x=86)\nPASS: process_data_transformed(x=83)\nPASS: process_data_transformed(x=50)\nPASS: process_data_transformed(x=62)\nPASS: process_data_transformed(x=65)\nPASS: process_data_transformed(x=6)\nPASS: process_data_transformed(x=43)\nPASS: process_data_transformed(x=29)\nPASS: process_data_transformed(x=44)\nPASS: process_data_transformed(x=71)\nPASS: process_data_transformed(x=40)\nPASS: process_data_transformed(x=92)\nPASS: process_data_transformed(x=88)\nPASS: process_data_transformed(x=91)\nPASS: process_data_transformed(x=20)\nPASS: process_data_transformed(x=23)\nPASS: process_data_transformed(x=41)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=71.58546458824947)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=7.742728234465048)\nPASS: convert_temperature_transformed(c=2.2250738585072014e-308)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=85.62805831222087)\nPASS: convert_temperature_transformed(c=36.862862932324155)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=0.45475737799189486)\nPASS: calculate_discount_transformed(price=147.589895761505, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=200.0, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=1.5, discount_rate=0.17880518484452915)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=2.94738274739892, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=2.94738274739892, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-1.1125369292536007e-308, imag=0.0)\nPASS: process_complex_number_transformed(real=-1.1125369292536007e-308, imag=-16.47418493251897)\nPASS: process_complex_number_transformed(real=-1.9, imag=-20.0)\nPASS: process_complex_number_transformed(real=-0.0, imag=-20.0)\nPASS: process_complex_number_transformed(real=-2.3232951973566287, imag=-2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=20.0, imag=19.0)\nPASS: process_complex_number_transformed(real=0.99999, imag=-3.584112819188884e-264)\nPASS: process_complex_number_transformed(real=0.5, imag=1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=0.5393180837965907, imag=0.5)\nPASS: process_complex_number_transformed(real=1.1484811619737954e-126, imag=-15.58288673448601)\nPASS: process_complex_number_transformed(real=-15.58288673448601, imag=-15.58288673448601)\nPASS: process_complex_number_transformed(real=5e-324, imag=-1.175494351e-38)\nPASS: process_complex_number_transformed(real=-1.175494351e-38, imag=-1.175494351e-38)\nPASS: process_complex_number_transformed(real=-0.3333333333333333, imag=19.0)\nPASS: process_complex_number_transformed(real=19.0, imag=19.0)\nPASS: process_complex_number_transformed(real=-19.999999999999996, imag=1.9)\nPASS: process_complex_number_transformed(real=1.9, imag=1.9)\nPASS: process_complex_number_transformed(real=-13.195262959265364, imag=-6.103515625e-05)\nPASS: process_complex_number_transformed(real=-6.103515625e-05, imag=-6.103515625e-05)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=76)\nPASS: transform_data_transformed(input_value=25)\nPASS: transform_data_transformed(input_value=14)\nPASS: transform_data_transformed(input_value=15)\nPASS: transform_data_transformed(input_value=5)\nPASS: transform_data_transformed(input_value=39)\nPASS: transform_data_transformed(input_value=44)\nPASS: transform_data_transformed(input_value=88)\nPASS: transform_data_transformed(input_value=52)\nPASS: transform_data_transformed(input_value=89)\nPASS: transform_data_transformed(input_value=69)\nPASS: transform_data_transformed(input_value=6)\nPASS: transform_data_transformed(input_value=4)\nPASS: transform_data_transformed(input_value=24)\nPASS: transform_data_transformed(input_value=7)\nPASS: transform_data_transformed(input_value=34)\nPASS: transform_data_transformed(input_value=55)\nPASS: transform_data_transformed(input_value=91)\nPASS: transform_data_transformed(input_value=72)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=1.7923392803565345e-17)\nPASS: circle_area_diff_transformed(r=0.8761432619284061)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=1.192092896e-07)\nPASS: circle_area_diff_transformed(r=13.075681817689697)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=10.815612238621489)\nPASS: circle_area_diff_transformed(r=16.018839358497058)\nPASS: circle_area_diff_transformed(r=10.49931236639406)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=14, b=1, c=1)\nPASS: triangle_checker_transformed(a=14, b=17, c=4)\nPASS: triangle_checker_transformed(a=12, b=1, c=4)\nPASS: triangle_checker_transformed(a=20, b=8, c=7)\nPASS: triangle_checker_transformed(a=12, b=20, c=9)\nPASS: triangle_checker_transformed(a=1, b=9, c=13)\nPASS: triangle_checker_transformed(a=13, b=18, c=19)\nPASS: triangle_checker_transformed(a=15, b=6, c=1)\nPASS: triangle_checker_transformed(a=17, b=3, c=14)\nPASS: triangle_checker_transformed(a=16, b=9, c=6)\nPASS: triangle_checker_transformed(a=16, b=16, c=6)\nPASS: triangle_checker_transformed(a=16, b=16, c=16)\nPASS: triangle_checker_transformed(a=2, b=7, c=18)\nPASS: triangle_checker_transformed(a=18, b=7, c=18)\nPASS: triangle_checker_transformed(a=7, b=7, c=18)\nPASS: triangle_checker_transformed(a=7, b=7, c=7)\nPASS: triangle_checker_transformed(a=2, b=19, c=6)\nPASS: triangle_checker_transformed(a=19, b=19, c=6)\nPASS: triangle_checker_transformed(a=19, b=19, c=19)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=83.90515772630695)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=7.789622779527596)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=96.72510755896246)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=4, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=4, b=-6, c=2)\nPASS: quadratic_discriminant_transformed(a=-1, b=-9, c=-1)\nPASS: quadratic_discriminant_transformed(a=1, b=5, c=6)\nPASS: quadratic_discriminant_transformed(a=-9, b=1, c=9)\nPASS: quadratic_discriminant_transformed(a=5, b=1, c=7)\nPASS: quadratic_discriminant_transformed(a=-7, b=8, c=-8)\nPASS: quadratic_discriminant_transformed(a=1, b=10, c=3)\nPASS: quadratic_discriminant_transformed(a=-10, b=-9, c=-9)\nPASS: quadratic_discriminant_transformed(a=-3, b=4, c=-8)\nPASS: quadratic_discriminant_transformed(a=-3, b=-3, c=-8)\nPASS: quadratic_discriminant_transformed(a=-3, b=-8, c=-8)\nPASS: quadratic_discriminant_transformed(a=-8, b=-8, c=-8)\nPASS: quadratic_discriminant_transformed(a=5, b=-3, c=7)\nPASS: quadratic_discriminant_transformed(a=-3, b=-3, c=7)\nPASS: quadratic_discriminant_transformed(a=-3, b=-3, c=-3)\nPASS: quadratic_discriminant_transformed(a=-10, b=4, c=3)\nPASS: quadratic_discriminant_transformed(a=4, b=4, c=3)\nPASS: quadratic_discriminant_transformed(a=4, b=4, c=4)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-2.225073858507203e-309, y=0.0)\nPASS: vector_norm_transformed(x=-2.225073858507203e-309, y=1.4466749739942574e-81)\nPASS: vector_norm_transformed(x=-1.401298464324817e-45, y=1.9)\nPASS: vector_norm_transformed(x=1.401298464324817e-45, y=8.778863922298385)\nPASS: vector_norm_transformed(x=-1.401298464324817e-45, y=-1e-05)\nPASS: vector_norm_transformed(x=-1.1754943508222875e-38, y=-2.707853109169424)\nPASS: vector_norm_transformed(x=-9.0, y=-1.1)\nPASS: vector_norm_transformed(x=2.225073858507e-311, y=-8.16815852008233)\nPASS: vector_norm_transformed(x=1e-05, y=1.401298464324817e-45)\nPASS: vector_norm_transformed(x=1.058491917982169e-120, y=0.99999)\nPASS: vector_norm_transformed(x=0.99999, y=0.99999)\nPASS: vector_norm_transformed(x=-0.3333333333333333, y=2.00001)\nPASS: vector_norm_transformed(x=2.00001, y=2.00001)\nPASS: vector_norm_transformed(x=3.69112945215874e-174, y=-0.99999)\nPASS: vector_norm_transformed(x=3.69112945215874e-174, y=3.69112945215874e-174)\nPASS: vector_norm_transformed(x=4.734658514390306e-82, y=-7.956006686071051)\nPASS: vector_norm_transformed(x=-7.956006686071051, y=-7.956006686071051)\nPASS: vector_norm_transformed(x=1.328272650750602, y=10.0)\nPASS: vector_norm_transformed(x=10.0, y=10.0)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.1253398333501898, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.1253398333501898, b=0.7586001109296238)\nPASS: hypotenuse_diff_transformed(a=0.4843230549525136, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=1.9, b=0.0)\nPASS: hypotenuse_diff_transformed(a=0.5, b=6.258626862088584)\nPASS: hypotenuse_diff_transformed(a=8.208487520830134, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=1.0, b=6.63003686131519)\nPASS: hypotenuse_diff_transformed(a=7.022935172607761, b=1.5)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=1.1)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=9.112689359375485, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=9.112689359375485, b=9.112689359375485)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=1.5824672110303653)\nPASS: hypotenuse_diff_transformed(a=1.5824672110303653, b=1.5824672110303653)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='Od\u00d1\u00c5\u00bf\u00c0\u008f}1\u00f6')\nPASS: ascii_average_transformed(s='\u00bd')\nPASS: ascii_average_transformed(s='\u00af\u00b6[\ud822\udc32\u0016\u00fc\u0016\u00ea\u00f8\uda15\udd24')\nPASS: ascii_average_transformed(s='d\u00a5\u00f7')\nPASS: ascii_average_transformed(s='>\ub567\u0007\u0098\u00df\ud951\uddfc\u0013')\nPASS: ascii_average_transformed(s='&\ud814\udc17\udaca\ude82\u001er/')\nPASS: ascii_average_transformed(s='F\u009ex\u00e2\\\ud9e1\ude91\u00ff\u001aK\u00ab')\nPASS: ascii_average_transformed(s='\u00ceV\u00ef\uda1b\udc72\udbcd\udd83\u009e\u00bf\u00cd\u001a\uda9c\udc47')\nPASS: ascii_average_transformed(s='\ud9e1\udf24\u00de')\nPASS: ascii_average_transformed(s='\u001f\udbe6\udf7d\n\ud896\udc29\f\u0088\u00da\u00a1\uda25\ude92#')\nPASS: ascii_average_transformed(s='x')\nPASS: ascii_average_transformed(s='\uda23\udd4b\udbab\udec2\ud896\udc79\u0001\ud859\udea8\u000b\ud97f\udd32')\nPASS: ascii_average_transformed(s='6w\u00be\u008f\u00ed\u0089{\u00b7E\u00c6')\nPASS: ascii_average_transformed(s='\uda4d\udc1d\u0089\ud8a6\udc83\u0092\ud963\udc6e\u00a6\u00e6\ud956\udf5c')\nPASS: ascii_average_transformed(s='\udbe0\udf8a!-')\nPASS: ascii_average_transformed(s='\u00c6\u0019/e')\nPASS: ascii_average_transformed(s='\ua583\u00b6\ud802\uddc9')\nPASS: ascii_average_transformed(s='\u00b9\u00d8\u0097\u00bb')\nPASS: ascii_average_transformed(s='\u00b2\udb68\udd95b\u00eb\u00c9J\u0088')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[3, 0])\nPASS: list_balance_transformed(nums=[2, 0])\nPASS: list_balance_transformed(nums=[5, 7, 1, 4, 8, 6, 0, 10, 10, 6])\nPASS: list_balance_transformed(nums=[4, 0, 10])\nPASS: list_balance_transformed(nums=[5, 4, 6, 8, 6, 2, 7])\nPASS: list_balance_transformed(nums=[4, 8, 4, 8])\nPASS: list_balance_transformed(nums=[8, 4, 3, 8, 0, 2, 9, 6, 5, 2])\nPASS: list_balance_transformed(nums=[9, 6])\nPASS: list_balance_transformed(nums=[8, 8])\nPASS: list_balance_transformed(nums=[5, 5])\nPASS: list_balance_transformed(nums=[5, 3, 9, 3, 2, 6])\nPASS: list_balance_transformed(nums=[5, 3, 5, 3, 2, 6])\nPASS: list_balance_transformed(nums=[5, 3, 5, 2, 2, 6])\nPASS: list_balance_transformed(nums=[3, 3, 5, 2, 2, 6])\nPASS: list_balance_transformed(nums=[3, 3, 5, 2, 3, 6])\nPASS: list_balance_transformed(nums=[3, 3, 5, 2, 3, 3])\nPASS: list_balance_transformed(nums=[2, 6, 8, 0, 6, 9, 10, 10, 3, 5])\nPASS: list_balance_transformed(nums=[2, 6, 8, 6, 6, 9, 10, 10, 3, 5])\nPASS: list_balance_transformed(nums=[2, 6, 8, 6, 6, 9, 10, 8, 3, 5])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[1])\nPASS: odd_sum_validator_transformed(lst=[0, 0])\nPASS: odd_sum_validator_transformed(lst=[0, 10])\nPASS: odd_sum_validator_transformed(lst=[10, 3, 4, 5, 4, 1, 10, 8, 0, 6])\nPASS: odd_sum_validator_transformed(lst=[8, 9])\nPASS: odd_sum_validator_transformed(lst=[1, 10, 3, 6])\nPASS: odd_sum_validator_transformed(lst=[3, 8])\nPASS: odd_sum_validator_transformed(lst=[0, 4, 2])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[9, 10, 3])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[7])\nPASS: odd_sum_validator_transformed(lst=[4, 3, 3])\nPASS: odd_sum_validator_transformed(lst=[3, 3, 3])\nPASS: odd_sum_validator_transformed(lst=[4])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[8, 7, 3, 1, 4, 10, 6, 8, 6, 4])\nPASS: odd_sum_validator_transformed(lst=[8, 7, 3, 1, 4, 10, 6, 6, 6, 4])\nPASS: odd_sum_validator_transformed(lst=[8, 7, 3, 4, 4, 10, 6, 6, 6, 4])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u00da\ud8eb\udd6a\u00b7]R\u00be\u009b\n\u00fd\u001f')\nPASS: string_pattern_score_transformed(s='{\uda8b\udd1c')\nPASS: string_pattern_score_transformed(s='\u00bd\u00eee[\u0083')\nPASS: string_pattern_score_transformed(s=':\u00d0')\nPASS: string_pattern_score_transformed(s='\udab0\udee4|r\u0094')\nPASS: string_pattern_score_transformed(s='q\u00be\u0081\u00a1')\nPASS: string_pattern_score_transformed(s='\u008d\uda56\udfd0\u00d5k')\nPASS: string_pattern_score_transformed(s='N\u00ef#')\nPASS: string_pattern_score_transformed(s='\ud925\udf27Q')\nPASS: string_pattern_score_transformed(s='\u0018h')\nPASS: string_pattern_score_transformed(s='\u008f\u00b7\u001cZL\ud854\uddd1M\u00150')\nPASS: string_pattern_score_transformed(s='mw\u0098\u00b8c')\nPASS: string_pattern_score_transformed(s='\u009c')\nPASS: string_pattern_score_transformed(s='\u007f\u0081\ud9e2\udd97\u00ad2}\u00ed')\nPASS: string_pattern_score_transformed(s='}')\nPASS: string_pattern_score_transformed(s='G')\nPASS: string_pattern_score_transformed(s='then')\nPASS: string_pattern_score_transformed(s='\u6c9d$\u00cc\u0003\u00011]')\nPASS: string_pattern_score_transformed(s='\u0092')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[10])\nPASS: sum_until_limit_transformed(nums=[10, 3])\nPASS: sum_until_limit_transformed(nums=[17])\nPASS: sum_until_limit_transformed(nums=[5, 20, 15, 19, 12])\nPASS: sum_until_limit_transformed(nums=[18])\nPASS: sum_until_limit_transformed(nums=[8, 18, 19, 12, 19, 14, 4, 2, 10, 18])\nPASS: sum_until_limit_transformed(nums=[10, 17, 17, 12, 16, 19, 2, 10, 13])\nPASS: sum_until_limit_transformed(nums=[10, 16, 12, 18, 9])\nPASS: sum_until_limit_transformed(nums=[17, 16, 4, 18, 7, 7, 4, 0, 17, 15])\nPASS: sum_until_limit_transformed(nums=[2])\nPASS: sum_until_limit_transformed(nums=[13, 6, 15])\nPASS: sum_until_limit_transformed(nums=[13, 6, 13])\nPASS: sum_until_limit_transformed(nums=[6, 6, 13])\nPASS: sum_until_limit_transformed(nums=[6, 6, 6])\nPASS: sum_until_limit_transformed(nums=[6, 6])\nPASS: sum_until_limit_transformed(nums=[12, 10, 4, 5, 18, 20])\nPASS: sum_until_limit_transformed(nums=[12, 10, 4, 5, 18, 12])\nPASS: sum_until_limit_transformed(nums=[10, 10, 4, 5, 18, 12])\nPASS: sum_until_limit_transformed(nums=[10, 10, 4, 5, 5, 12])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[18])\nPASS: count_divisibles_transformed(nums=[16])\nPASS: count_divisibles_transformed(nums=[0, 1, 7, 13, 12, 11, 7, 15])\nPASS: count_divisibles_transformed(nums=[13, 6, 12, 6, 15, 13, 20])\nPASS: count_divisibles_transformed(nums=[15, 0, 0, 11, 0, 18, 4, 20])\nPASS: count_divisibles_transformed(nums=[20, 1])\nPASS: count_divisibles_transformed(nums=[20])\nPASS: count_divisibles_transformed(nums=[3])\nPASS: count_divisibles_transformed(nums=[9])\nPASS: count_divisibles_transformed(nums=[12, 8, 6, 19, 15, 7, 20, 2, 4, 10])\nPASS: count_divisibles_transformed(nums=[12, 8, 6, 19, 10, 7, 20, 2, 4, 10])\nPASS: count_divisibles_transformed(nums=[12, 8, 12, 19, 10, 7, 20, 2, 4, 10])\nPASS: count_divisibles_transformed(nums=[4, 8, 12, 19, 10, 7, 20, 2, 4, 10])\nPASS: count_divisibles_transformed(nums=[4, 8, 12, 19, 10, 10, 20, 2, 4, 10])\nPASS: count_divisibles_transformed(nums=[2, 8, 12, 19, 10, 10, 20, 2, 4, 10])\nPASS: count_divisibles_transformed(nums=[2, 8, 12, 19, 10, 10, 20, 2, 10, 10])\nPASS: count_divisibles_transformed(nums=[7, 2, 2, 18, 1, 14, 3, 19])\nPASS: count_divisibles_transformed(nums=[7, 2, 2, 18, 1, 14, 2, 19])\nPASS: count_divisibles_transformed(nums=[2, 2, 2, 18, 1, 14, 2, 19])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[10, 6])\nPASS: index_weighted_sum_transformed(lst=[5, 2, 9, 4, 5, 3, 2, 0])\nPASS: index_weighted_sum_transformed(lst=[5])\nPASS: index_weighted_sum_transformed(lst=[3, 7, 3])\nPASS: index_weighted_sum_transformed(lst=[5, 8, 5, 6, 6, 8, 7, 1, 6, 3])\nPASS: index_weighted_sum_transformed(lst=[6, 2, 4, 1])\nPASS: index_weighted_sum_transformed(lst=[0, 3, 1, 9, 10, 3])\nPASS: index_weighted_sum_transformed(lst=[1, 1, 5, 8, 7, 8, 1, 1, 10, 5])\nPASS: index_weighted_sum_transformed(lst=[8, 6, 9, 4, 2, 2])\nPASS: index_weighted_sum_transformed(lst=[8, 6, 9, 6, 2, 2])\nPASS: index_weighted_sum_transformed(lst=[8, 6, 9, 8, 2, 2])\nPASS: index_weighted_sum_transformed(lst=[8, 6, 9, 8, 8, 2])\nPASS: index_weighted_sum_transformed(lst=[8, 6, 9, 9, 8, 2])\nPASS: index_weighted_sum_transformed(lst=[8, 6, 9, 9, 2, 2])\nPASS: index_weighted_sum_transformed(lst=[8, 6, 2, 9, 2, 2])\nPASS: index_weighted_sum_transformed(lst=[4, 3, 8, 2, 7])\nPASS: index_weighted_sum_transformed(lst=[4, 3, 8, 3, 7])\nPASS: index_weighted_sum_transformed(lst=[7, 3, 8, 3, 7])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=9)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00d6')\nPASS: character_counter_transformed(text='\u00a7\u00e5')\nPASS: character_counter_transformed(text='Hf\u00d3\u0085N\u00d5\u00b5\uda2c\ude90\u0018l')\nPASS: character_counter_transformed(text='\u00e8\u00da)\u00dd\u00dc\u00f0\u0004Q\u00f1\u00c9')\nPASS: character_counter_transformed(text='okX\u0005_')\nPASS: character_counter_transformed(text='\u00ba')\nPASS: character_counter_transformed(text='\ud906\udf7e')\nPASS: character_counter_transformed(text='\u00fd9<i:\u00c8>\u00e8\ud86f\uddd1\u00ec')\nPASS: character_counter_transformed(text='\u00ea\u009f{\u00f2H')\nPASS: character_counter_transformed(text='\u00d08\u001e~\ud839\ude6b\udb20\udf7a')\nPASS: character_counter_transformed(text='\u00f1\uda83\ude84\u0006\u00c2=')\nPASS: character_counter_transformed(text='\udb07\udeb6\u008b*\u00b4D\u6210\u00be')\nPASS: character_counter_transformed(text='\u00c0\ud9c4\ude54\ud8e9\uddc5\ud924\udf46\u00e6G\u0088\ud865\udd85\u00afF')\nPASS: character_counter_transformed(text='1e100')\nPASS: character_counter_transformed(text='\u0091\uda9d\uddc3\u008a <\u000fu\u0018')\nPASS: character_counter_transformed(text='\u00b9<\u0093\u0094\u00dd')\nPASS: character_counter_transformed(text=',\u00c3\u009e\u00c7')\nPASS: character_counter_transformed(text='G\u00f0\u00ab\u00b7\ud952\udca1u\u001121\u0015')\nPASS: character_counter_transformed(text='\u00e4\u000f\ud9ee\udcbf\u0082')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[4])\nPASS: rolling_maximum_transformed(values=[4, 80])\nPASS: rolling_maximum_transformed(values=[18, 62, 91, 42, 42, 25, 37, 29, 86, 41])\nPASS: rolling_maximum_transformed(values=[54, 66, 66, 75, 59])\nPASS: rolling_maximum_transformed(values=[69, 82, 36, 87])\nPASS: rolling_maximum_transformed(values=[99, 48, 82])\nPASS: rolling_maximum_transformed(values=[3, 61, 96])\nPASS: rolling_maximum_transformed(values=[3])\nPASS: rolling_maximum_transformed(values=[85, 4, 98, 80, 46, 90, 51])\nPASS: rolling_maximum_transformed(values=[77])\nPASS: rolling_maximum_transformed(values=[1, 69, 1, 73])\nPASS: rolling_maximum_transformed(values=[1, 69, 1])\nPASS: rolling_maximum_transformed(values=[1, 1, 1])\nPASS: rolling_maximum_transformed(values=[22])\nPASS: rolling_maximum_transformed(values=[18])\nPASS: rolling_maximum_transformed(values=[95, 80, 100, 39, 47, 89, 9, 61, 12, 81])\nPASS: rolling_maximum_transformed(values=[95, 80, 100, 39, 47, 89, 9, 61, 95, 81])\nPASS: rolling_maximum_transformed(values=[95, 80, 100, 39, 47, 89, 9, 95, 95, 81])\nPASS: rolling_maximum_transformed(values=[95, 80, 100, 39, 95, 89, 9, 95, 95, 81])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_17": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=34)\nPASS: process_data_transformed(x=64)\nPASS: process_data_transformed(x=11)\nPASS: process_data_transformed(x=98)\nPASS: process_data_transformed(x=66)\nPASS: process_data_transformed(x=50)\nPASS: process_data_transformed(x=33)\nPASS: process_data_transformed(x=74)\nPASS: process_data_transformed(x=6)\nPASS: process_data_transformed(x=41)\nPASS: process_data_transformed(x=63)\nPASS: process_data_transformed(x=1)\nPASS: process_data_transformed(x=61)\nPASS: process_data_transformed(x=80)\nPASS: process_data_transformed(x=78)\nPASS: process_data_transformed(x=75)\nPASS: process_data_transformed(x=45)\nPASS: process_data_transformed(x=32)\nPASS: process_data_transformed(x=38)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=52.153359679015324)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=0.99999)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=1.8069914892613343e-46)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=0.4187206651113572)\nPASS: calculate_discount_transformed(price=1.5, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=0.4619574481803105)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=1.5, discount_rate=5e-324)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=1.5, imag=0.0)\nPASS: process_complex_number_transformed(real=1.5, imag=5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=1.6785542240168256e-37, imag=-1.9)\nPASS: process_complex_number_transformed(real=-0.99999, imag=-8.056902978945295e-171)\nPASS: process_complex_number_transformed(real=0.3333333333333333, imag=-1.9)\nPASS: process_complex_number_transformed(real=1.401298464324817e-45, imag=1.1)\nPASS: process_complex_number_transformed(real=16.094494070063803, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=1.1754943508222875e-38, imag=19.999999999999996)\nPASS: process_complex_number_transformed(real=-1.192092896e-07, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=0.0, imag=19.999999999999996)\nPASS: process_complex_number_transformed(real=19.999999999999996, imag=19.999999999999996)\nPASS: process_complex_number_transformed(real=1.5, imag=-19.0)\nPASS: process_complex_number_transformed(real=-19.0, imag=-19.0)\nPASS: process_complex_number_transformed(real=-7.892839141360602, imag=2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=-7.892839141360602, imag=-7.892839141360602)\nPASS: process_complex_number_transformed(real=19.0, imag=-7.538029521834957)\nPASS: process_complex_number_transformed(real=-7.538029521834957, imag=-7.538029521834957)\nPASS: process_complex_number_transformed(real=1.1754943508222875e-38, imag=1.175494351e-38)\nPASS: process_complex_number_transformed(real=1.175494351e-38, imag=1.175494351e-38)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=83)\nPASS: transform_data_transformed(input_value=56)\nPASS: transform_data_transformed(input_value=74)\nPASS: transform_data_transformed(input_value=57)\nPASS: transform_data_transformed(input_value=45)\nPASS: transform_data_transformed(input_value=43)\nPASS: transform_data_transformed(input_value=24)\nPASS: transform_data_transformed(input_value=70)\nPASS: transform_data_transformed(input_value=14)\nPASS: transform_data_transformed(input_value=90)\nPASS: transform_data_transformed(input_value=88)\nPASS: transform_data_transformed(input_value=100)\nPASS: transform_data_transformed(input_value=20)\nPASS: transform_data_transformed(input_value=75)\nPASS: transform_data_transformed(input_value=13)\nPASS: transform_data_transformed(input_value=91)\nPASS: transform_data_transformed(input_value=59)\nPASS: transform_data_transformed(input_value=41)\nPASS: transform_data_transformed(input_value=22)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=1.192092896e-07)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=19.149561773980913)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=1.3765845477164087)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=7.180556167801218)\nPASS: circle_area_diff_transformed(r=15.03172656031432)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=0.5495223123861105)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=9.265854525345675e-69)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=9, b=1, c=1)\nPASS: triangle_checker_transformed(a=9, b=2, c=7)\nPASS: triangle_checker_transformed(a=6, b=4, c=17)\nPASS: triangle_checker_transformed(a=5, b=1, c=7)\nPASS: triangle_checker_transformed(a=12, b=11, c=19)\nPASS: triangle_checker_transformed(a=9, b=3, c=19)\nPASS: triangle_checker_transformed(a=16, b=20, c=2)\nPASS: triangle_checker_transformed(a=10, b=8, c=11)\nPASS: triangle_checker_transformed(a=11, b=16, c=17)\nPASS: triangle_checker_transformed(a=14, b=1, c=2)\nPASS: triangle_checker_transformed(a=1, b=1, c=2)\nPASS: triangle_checker_transformed(a=16, b=13, c=6)\nPASS: triangle_checker_transformed(a=16, b=6, c=6)\nPASS: triangle_checker_transformed(a=6, b=6, c=6)\nPASS: triangle_checker_transformed(a=3, b=4, c=16)\nPASS: triangle_checker_transformed(a=3, b=16, c=16)\nPASS: triangle_checker_transformed(a=3, b=16, c=3)\nPASS: triangle_checker_transformed(a=16, b=16, c=16)\nPASS: triangle_checker_transformed(a=17, b=18, c=16)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=2.3229704693524593)\nPASS: temperature_offset_transformed(c=1.192092896e-07)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: temperature_offset_transformed(c=4.199158774138756e-214)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=3.720881623237387e-194)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=67.68522402608455)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=75.54947346156122)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=26.24831707952598)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=8, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=8, b=5, c=-6)\nPASS: quadratic_discriminant_transformed(a=-2, b=9, c=-9)\nPASS: quadratic_discriminant_transformed(a=7, b=-1, c=5)\nPASS: quadratic_discriminant_transformed(a=2, b=3, c=-7)\nPASS: quadratic_discriminant_transformed(a=-9, b=-7, c=6)\nPASS: quadratic_discriminant_transformed(a=-7, b=10, c=-1)\nPASS: quadratic_discriminant_transformed(a=1, b=10, c=-3)\nPASS: quadratic_discriminant_transformed(a=9, b=-4, c=-9)\nPASS: quadratic_discriminant_transformed(a=10, b=10, c=0)\nPASS: quadratic_discriminant_transformed(a=10, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=10, b=0, c=10)\nPASS: quadratic_discriminant_transformed(a=10, b=10, c=10)\nPASS: quadratic_discriminant_transformed(a=-5, b=-3, c=-7)\nPASS: quadratic_discriminant_transformed(a=-7, b=-3, c=-7)\nPASS: quadratic_discriminant_transformed(a=-3, b=-3, c=-7)\nPASS: quadratic_discriminant_transformed(a=-3, b=-7, c=-7)\nPASS: quadratic_discriminant_transformed(a=-3, b=-7, c=-3)\nPASS: quadratic_discriminant_transformed(a=-7, b=-7, c=-7)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=10.0, y=0.0)\nPASS: vector_norm_transformed(x=10.0, y=-7.156512718325746e-267)\nPASS: vector_norm_transformed(x=0.5, y=6.524467562528265)\nPASS: vector_norm_transformed(x=-7.623585866526783, y=-9.569490338147979)\nPASS: vector_norm_transformed(x=0.99999, y=-1.5)\nPASS: vector_norm_transformed(x=-2.00001, y=-2.225073858507203e-309)\nPASS: vector_norm_transformed(x=-6.103515625e-05, y=1e-05)\nPASS: vector_norm_transformed(x=-2.2250738585072014e-308, y=-6.20771098702026)\nPASS: vector_norm_transformed(x=-10.0, y=7.709881037181145)\nPASS: vector_norm_transformed(x=-2.225073858507203e-309, y=9.0)\nPASS: vector_norm_transformed(x=9.0, y=9.0)\nPASS: vector_norm_transformed(x=-0.99999, y=10.0)\nPASS: vector_norm_transformed(x=10.0, y=10.0)\nPASS: vector_norm_transformed(x=2.7418324198443607, y=-1.192092896e-07)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=-1.192092896e-07)\nPASS: vector_norm_transformed(x=-0.0, y=-1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=-0.0, y=-0.0)\nPASS: vector_norm_transformed(x=-0.5, y=0.99999)\nPASS: vector_norm_transformed(x=-0.5, y=-0.5)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=3.324404847766936e-125, b=0.0)\nPASS: hypotenuse_diff_transformed(a=3.324404847766936e-125, b=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=2.4517328305737744, b=8.383208923886558)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=1e-05)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=1e-05)\nPASS: hypotenuse_diff_transformed(a=1.0, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=1.0, b=1.0)\nPASS: hypotenuse_diff_transformed(a=1.5, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=2.1909255165209782e-92, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=1.401298464324817e-45)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='9\u00f8}')\nPASS: ascii_average_transformed(s='\ud9dc\udf1b\u00c7')\nPASS: ascii_average_transformed(s='\ud9dc\udea8\u00b5)Z\u00e7\u00fd^\u00d4.\u00ca')\nPASS: ascii_average_transformed(s='\u0001\ud818\udec26')\nPASS: ascii_average_transformed(s='\u00a8')\nPASS: ascii_average_transformed(s='\u00e28{\u008b%')\nPASS: ascii_average_transformed(s='\u00ea\udad3\udfd86')\nPASS: ascii_average_transformed(s='+\t\u00ff?\u0013\u001a\u00ea')\nPASS: ascii_average_transformed(s='$')\nPASS: ascii_average_transformed(s='I\u0014')\nPASS: ascii_average_transformed(s='\ud83d\ude0d')\nPASS: ascii_average_transformed(s='\u0092I\u00ef')\nPASS: ascii_average_transformed(s='\\\b\u00ffk\u00ca\u00f5')\nPASS: ascii_average_transformed(s='\udbd0\udcdb\u00c8\u00d3d\ud97f\udecdKh\u001aQ$')\nPASS: ascii_average_transformed(s='`')\nPASS: ascii_average_transformed(s='\u00eb\u0011\u00ec\u001f\udbf4\udf9b\u00e4\ud86c\udd7fDS')\nPASS: ascii_average_transformed(s='\u0083)\udb78\udd5a2\u00a5\ud90e\udea2\u008bK\u008e\udb36\udc0e')\nPASS: ascii_average_transformed(s='\u00c5xv#\u0081\udad1\udc4f')\nPASS: ascii_average_transformed(s='\u0017Y\uda7d\udd30\u0098\u00c6\u00db\udbfc\udd23/\u00a3')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[3, 0])\nPASS: list_balance_transformed(nums=[2, 0])\nPASS: list_balance_transformed(nums=[2, 0, 6])\nPASS: list_balance_transformed(nums=[8, 8, 3, 6, 2, 3, 0])\nPASS: list_balance_transformed(nums=[8, 2, 6, 2])\nPASS: list_balance_transformed(nums=[3, 0, 9, 3, 3])\nPASS: list_balance_transformed(nums=[3, 7, 10, 8, 10, 7, 5, 0, 2, 2])\nPASS: list_balance_transformed(nums=[1, 7, 0, 5, 8, 0, 2])\nPASS: list_balance_transformed(nums=[6, 1])\nPASS: list_balance_transformed(nums=[2, 7])\nPASS: list_balance_transformed(nums=[7, 7])\nPASS: list_balance_transformed(nums=[10, 0, 8, 0, 3, 3])\nPASS: list_balance_transformed(nums=[10, 8, 8, 0, 3, 3])\nPASS: list_balance_transformed(nums=[10, 8, 8, 0, 3, 0])\nPASS: list_balance_transformed(nums=[8, 8, 8, 0, 3, 0])\nPASS: list_balance_transformed(nums=[8, 8, 8, 3, 3, 0])\nPASS: list_balance_transformed(nums=[8, 8, 3, 3, 3, 0])\nPASS: list_balance_transformed(nums=[8, 3, 3, 3, 3, 0])\nPASS: list_balance_transformed(nums=[9, 9, 2, 7, 1])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[7])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[10, 1, 7])\nPASS: odd_sum_validator_transformed(lst=[9, 6])\nPASS: odd_sum_validator_transformed(lst=[5, 10, 7, 4, 2, 0])\nPASS: odd_sum_validator_transformed(lst=[1, 6, 4, 1, 4, 4, 4])\nPASS: odd_sum_validator_transformed(lst=[8, 8, 3, 6])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[0, 9, 10, 10, 6, 5, 2, 1, 3, 10])\nPASS: odd_sum_validator_transformed(lst=[9, 2, 3, 8, 0, 6, 8, 8, 9, 8])\nPASS: odd_sum_validator_transformed(lst=[9, 2, 3, 8, 0, 6, 8, 8, 8, 8])\nPASS: odd_sum_validator_transformed(lst=[9, 2, 8, 8, 0, 6, 8, 8, 8, 8])\nPASS: odd_sum_validator_transformed(lst=[2, 2, 8, 8, 0, 6, 8, 8, 8, 8])\nPASS: odd_sum_validator_transformed(lst=[2, 2, 8, 8, 0, 6, 8, 0, 8, 8])\nPASS: odd_sum_validator_transformed(lst=[2, 2, 8, 8, 8, 6, 8, 0, 8, 8])\nPASS: odd_sum_validator_transformed(lst=[2, 2])\nPASS: odd_sum_validator_transformed(lst=[1])\nPASS: odd_sum_validator_transformed(lst=[4, 1, 5, 2, 0, 1, 6, 4, 2, 2])\nPASS: odd_sum_validator_transformed(lst=[4, 1, 5, 1, 0, 1, 6, 4, 2, 2])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\n\u0090}\u00d8')\nPASS: string_pattern_score_transformed(s='-Infinity')\nPASS: string_pattern_score_transformed(s='\u0007k\u00ca=')\nPASS: string_pattern_score_transformed(s='>\u000b\u00df\b\u00c5\u0096\ud84d\udc05\udbc7\udc22\u0096,')\nPASS: string_pattern_score_transformed(s='U\u008c\uda34\udc50')\nPASS: string_pattern_score_transformed(s='\u008d')\nPASS: string_pattern_score_transformed(s='\u0090(:A\u0091\u0080\ud9af\udd97[\u0003c')\nPASS: string_pattern_score_transformed(s='\u00fd\u00d1\u00ef\u0090-G\ud928\ude77\u00f0@')\nPASS: string_pattern_score_transformed(s='\u00d9\u001d\u0007a\ud9e8\uddd9\u00f7\u00d4\u0004:\u0017')\nPASS: string_pattern_score_transformed(s='\u0001\u0007\udbe9\ude3f\u00bc')\nPASS: string_pattern_score_transformed(s='\u0013\u00d5h\u00d7\u0099\u0081\u00fd\u0019Fk')\nPASS: string_pattern_score_transformed(s='\u0093')\nPASS: string_pattern_score_transformed(s='\u00d6\n\u00ed\u009e\u0089\u00de')\nPASS: string_pattern_score_transformed(s='\u0095\ud952\uddb2\u000br\uc1d6|H\u00a8\ud957\ude09\u0003')\nPASS: string_pattern_score_transformed(s='\ud944\udc42')\nPASS: string_pattern_score_transformed(s='\u00dd\u00dbnAlO')\nPASS: string_pattern_score_transformed(s='\u00c1\u00f5\uda13\udd71h)')\nPASS: string_pattern_score_transformed(s='\ud91a\udeca?\ud8b2\udecf\u0085\ud839\uded54\u00b5\udbdf\udd16\u00ae\u0014')\nPASS: string_pattern_score_transformed(s='\ud83d\ude0d')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[18])\nPASS: sum_until_limit_transformed(nums=[18, 17])\nPASS: sum_until_limit_transformed(nums=[5, 2, 10, 12])\nPASS: sum_until_limit_transformed(nums=[6])\nPASS: sum_until_limit_transformed(nums=[6, 0, 4])\nPASS: sum_until_limit_transformed(nums=[16, 5, 8, 20, 19, 8, 5])\nPASS: sum_until_limit_transformed(nums=[2, 3, 14, 6, 7])\nPASS: sum_until_limit_transformed(nums=[2])\nPASS: sum_until_limit_transformed(nums=[9, 12, 8, 17, 12])\nPASS: sum_until_limit_transformed(nums=[4, 15])\nPASS: sum_until_limit_transformed(nums=[15, 15])\nPASS: sum_until_limit_transformed(nums=[20, 18, 9, 20, 20])\nPASS: sum_until_limit_transformed(nums=[20, 20, 9, 20, 20])\nPASS: sum_until_limit_transformed(nums=[20, 20, 20, 20, 20])\nPASS: sum_until_limit_transformed(nums=[20, 20])\nPASS: sum_until_limit_transformed(nums=[0, 19, 13, 14, 14])\nPASS: sum_until_limit_transformed(nums=[0, 19])\nPASS: sum_until_limit_transformed(nums=[19, 19])\nPASS: sum_until_limit_transformed(nums=[20])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[9])\nPASS: count_divisibles_transformed(nums=[5])\nPASS: count_divisibles_transformed(nums=[11, 12, 11, 0])\nPASS: count_divisibles_transformed(nums=[20, 0])\nPASS: count_divisibles_transformed(nums=[11])\nPASS: count_divisibles_transformed(nums=[10, 2])\nPASS: count_divisibles_transformed(nums=[11, 11, 7, 13, 16])\nPASS: count_divisibles_transformed(nums=[13, 14, 16])\nPASS: count_divisibles_transformed(nums=[18])\nPASS: count_divisibles_transformed(nums=[6])\nPASS: count_divisibles_transformed(nums=[3, 8, 10, 18, 19, 16, 12, 3])\nPASS: count_divisibles_transformed(nums=[3, 8, 10, 18, 3, 16, 12, 3])\nPASS: count_divisibles_transformed(nums=[3, 8, 10, 18, 3, 16, 12, 12])\nPASS: count_divisibles_transformed(nums=[3, 8, 16, 18, 3, 16, 12, 12])\nPASS: count_divisibles_transformed(nums=[3, 8, 16, 18, 8, 16, 12, 12])\nPASS: count_divisibles_transformed(nums=[3, 8, 16, 16, 8, 16, 12, 12])\nPASS: count_divisibles_transformed(nums=[3, 8, 16, 8, 8, 16, 12, 12])\nPASS: count_divisibles_transformed(nums=[7, 9])\nPASS: count_divisibles_transformed(nums=[9, 9])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[5])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[10, 2, 8, 8, 7, 10, 7, 9, 1, 1])\nPASS: index_weighted_sum_transformed(lst=[0, 1, 7, 6])\nPASS: index_weighted_sum_transformed(lst=[1, 5, 0, 3, 4, 3, 2, 3, 2, 1])\nPASS: index_weighted_sum_transformed(lst=[4, 3, 7, 2])\nPASS: index_weighted_sum_transformed(lst=[8, 4, 6, 5, 9, 6, 7, 4, 0, 3])\nPASS: index_weighted_sum_transformed(lst=[0, 8, 5, 9, 8, 4, 4, 4, 10, 10])\nPASS: index_weighted_sum_transformed(lst=[0, 9])\nPASS: index_weighted_sum_transformed(lst=[0, 4])\nPASS: index_weighted_sum_transformed(lst=[4, 4])\nPASS: index_weighted_sum_transformed(lst=[8, 2, 6, 5, 1, 2, 5, 2])\nPASS: index_weighted_sum_transformed(lst=[8, 2, 6, 5, 8, 2, 5, 2])\nPASS: index_weighted_sum_transformed(lst=[8, 2, 8, 5, 8, 2, 5, 2])\nPASS: index_weighted_sum_transformed(lst=[8, 2, 8, 5, 8, 2, 8, 2])\nPASS: index_weighted_sum_transformed(lst=[8, 5, 8, 5, 8, 2, 8, 2])\nPASS: index_weighted_sum_transformed(lst=[8, 5, 5, 5, 8, 2, 8, 2])\nPASS: index_weighted_sum_transformed(lst=[8, 5, 5, 5, 8, 2, 8])\nPASS: index_weighted_sum_transformed(lst=[8, 3, 3])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=2)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='%K\u00dc')\nPASS: character_counter_transformed(text='d\uda25\udefb\ud94d\udf7c{\u0000\u00ba+\u00ea8\u00a3')\nPASS: character_counter_transformed(text='\u00f9\u00dd\u00c5\u53b4')\nPASS: character_counter_transformed(text='Y\ud8e5\udca5\ud9e8\uddb5u\ud949\udd21\udb87\udd1e\u0081')\nPASS: character_counter_transformed(text=']:.\u0087\u0094')\nPASS: character_counter_transformed(text='\u00b5\u00f9P\u00cd\u0082f\uf1b6')\nPASS: character_counter_transformed(text='t\u000bE(\u00c2\u00d4')\nPASS: character_counter_transformed(text='\u001a\u0019\u0015')\nPASS: character_counter_transformed(text='\u00c8')\nPASS: character_counter_transformed(text='\u00b5\u00b0\u009a\b\u0086(\u00e2F\u00c5q')\nPASS: character_counter_transformed(text='\u0001')\nPASS: character_counter_transformed(text='\u00cc#')\nPASS: character_counter_transformed(text='3\u00f7U\u00c0\ud926\ude36\u00f6\ud94c\udcf2q\u001c\u00fc')\nPASS: character_counter_transformed(text='\u00c53:')\nPASS: character_counter_transformed(text='j\u00a7=')\nPASS: character_counter_transformed(text='\udbc4\ude11')\nPASS: character_counter_transformed(text='\u00e5=\u00d3\u009e\ud900\udedeaq\ud87a\udd88mY')\nPASS: character_counter_transformed(text='\u00c0\ud932\udd2c\u00c7\u00f4>\u00e5\u00ac\u0093\uda23\ude02\u00f3')\nPASS: character_counter_transformed(text=']\u001e\ud9c0\ude3b\u00b1\u000f\u00cd\u00ed\uda9a\udc8b\u00bd\u00ee')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[64])\nPASS: rolling_maximum_transformed(values=[94])\nPASS: rolling_maximum_transformed(values=[78])\nPASS: rolling_maximum_transformed(values=[74, 88, 16, 26, 92])\nPASS: rolling_maximum_transformed(values=[100, 3])\nPASS: rolling_maximum_transformed(values=[90, 86, 12, 33, 20, 55, 24, 72, 76])\nPASS: rolling_maximum_transformed(values=[9, 51, 2, 97, 18, 9, 6])\nPASS: rolling_maximum_transformed(values=[88, 28, 14, 34, 72, 65, 34, 97, 44])\nPASS: rolling_maximum_transformed(values=[5])\nPASS: rolling_maximum_transformed(values=[36, 10, 13, 14, 84, 53, 70, 75, 23, 36])\nPASS: rolling_maximum_transformed(values=[36, 84, 13, 14, 84, 53, 70, 75, 23, 36])\nPASS: rolling_maximum_transformed(values=[36, 70, 13, 14, 84, 53, 70, 75, 23, 36])\nPASS: rolling_maximum_transformed(values=[36, 70, 70, 14, 84, 53, 70, 75, 23, 36])\nPASS: rolling_maximum_transformed(values=[36, 14, 70, 14, 84, 53, 70, 75, 23, 36])\nPASS: rolling_maximum_transformed(values=[36, 14, 70, 23, 84, 53, 70, 75, 23, 36])\nPASS: rolling_maximum_transformed(values=[36, 14, 70, 23, 75, 53, 70, 75, 23, 36])\nPASS: rolling_maximum_transformed(values=[25, 21, 8, 6, 78, 50, 12, 30])\nPASS: rolling_maximum_transformed(values=[25, 21, 6, 6, 78, 50, 12, 30])\nPASS: rolling_maximum_transformed(values=[25, 21, 6, 6, 78, 6, 12, 30])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_18": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=82)\nPASS: process_data_transformed(x=80)\nPASS: process_data_transformed(x=61)\nPASS: process_data_transformed(x=53)\nPASS: process_data_transformed(x=37)\nPASS: process_data_transformed(x=63)\nPASS: process_data_transformed(x=64)\nPASS: process_data_transformed(x=70)\nPASS: process_data_transformed(x=99)\nPASS: process_data_transformed(x=49)\nPASS: process_data_transformed(x=66)\nPASS: process_data_transformed(x=24)\nPASS: process_data_transformed(x=5)\nPASS: process_data_transformed(x=8)\nPASS: process_data_transformed(x=79)\nPASS: process_data_transformed(x=11)\nPASS: process_data_transformed(x=68)\nPASS: process_data_transformed(x=40)\nPASS: process_data_transformed(x=23)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=1.356981227479606e-292)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=24.3652379828943)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=2.0193771802009906e-130)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=6.103515625e-05, discount_rate=0.9632256478319052)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=199.99999999999997, discount_rate=0.2902842340547201)\nPASS: calculate_discount_transformed(price=1.5, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.5414373466610268)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.09309585626109042)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=1.401298464324817e-45)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=27.957351644027025, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=120.88233459912365, discount_rate=5e-324)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=5.960464477539063e-08, imag=0.0)\nPASS: process_complex_number_transformed(real=5.960464477539063e-08, imag=0.5)\nPASS: process_complex_number_transformed(real=1.5, imag=5e-324)\nPASS: process_complex_number_transformed(real=-1.175494351e-38, imag=-9.893061804255277)\nPASS: process_complex_number_transformed(real=-8.290511188076815, imag=1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=1.175494351e-38, imag=0.5)\nPASS: process_complex_number_transformed(real=-1.192092896e-07, imag=-1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=5e-324, imag=-1.1)\nPASS: process_complex_number_transformed(real=2.225073858507203e-309, imag=1.175494351e-38)\nPASS: process_complex_number_transformed(real=1.175494351e-38, imag=1.175494351e-38)\nPASS: process_complex_number_transformed(real=-19.0, imag=6.103515625e-05)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=6.103515625e-05)\nPASS: process_complex_number_transformed(real=0.5, imag=-1.9)\nPASS: process_complex_number_transformed(real=0.5, imag=0.5)\nPASS: process_complex_number_transformed(real=15.827781700907622, imag=6.103515625e-05)\nPASS: process_complex_number_transformed(real=-1.192092896e-07, imag=-0.5)\nPASS: process_complex_number_transformed(real=-1.192092896e-07, imag=-1.192092896e-07)\nPASS: process_complex_number_transformed(real=-1e-05, imag=-1.7484696965120392)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=4)\nPASS: transform_data_transformed(input_value=51)\nPASS: transform_data_transformed(input_value=84)\nPASS: transform_data_transformed(input_value=5)\nPASS: transform_data_transformed(input_value=12)\nPASS: transform_data_transformed(input_value=44)\nPASS: transform_data_transformed(input_value=42)\nPASS: transform_data_transformed(input_value=71)\nPASS: transform_data_transformed(input_value=11)\nPASS: transform_data_transformed(input_value=64)\nPASS: transform_data_transformed(input_value=60)\nPASS: transform_data_transformed(input_value=18)\nPASS: transform_data_transformed(input_value=3)\nPASS: transform_data_transformed(input_value=97)\nPASS: transform_data_transformed(input_value=47)\nPASS: transform_data_transformed(input_value=72)\nPASS: transform_data_transformed(input_value=40)\nPASS: transform_data_transformed(input_value=35)\nPASS: transform_data_transformed(input_value=6)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=4.637537641193933)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=7.8476548499471495)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=9.615690751719763)\nPASS: circle_area_diff_transformed(r=14.409880785473172)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=8, b=1, c=1)\nPASS: triangle_checker_transformed(a=8, b=14, c=16)\nPASS: triangle_checker_transformed(a=12, b=7, c=13)\nPASS: triangle_checker_transformed(a=1, b=9, c=5)\nPASS: triangle_checker_transformed(a=19, b=20, c=4)\nPASS: triangle_checker_transformed(a=13, b=6, c=19)\nPASS: triangle_checker_transformed(a=12, b=4, c=1)\nPASS: triangle_checker_transformed(a=4, b=18, c=13)\nPASS: triangle_checker_transformed(a=12, b=13, c=15)\nPASS: triangle_checker_transformed(a=4, b=13, c=3)\nPASS: triangle_checker_transformed(a=3, b=13, c=3)\nPASS: triangle_checker_transformed(a=3, b=13, c=13)\nPASS: triangle_checker_transformed(a=13, b=13, c=13)\nPASS: triangle_checker_transformed(a=18, b=6, c=4)\nPASS: triangle_checker_transformed(a=18, b=6, c=6)\nPASS: triangle_checker_transformed(a=6, b=6, c=6)\nPASS: triangle_checker_transformed(a=3, b=16, c=5)\nPASS: triangle_checker_transformed(a=3, b=5, c=5)\nPASS: triangle_checker_transformed(a=3, b=5, c=3)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=18.967390733034623)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=30.706841590039964)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=1.192092896e-07)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-7, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-7, b=0, c=-6)\nPASS: quadratic_discriminant_transformed(a=-5, b=-10, c=-1)\nPASS: quadratic_discriminant_transformed(a=10, b=-3, c=-1)\nPASS: quadratic_discriminant_transformed(a=3, b=5, c=-9)\nPASS: quadratic_discriminant_transformed(a=-3, b=-6, c=-2)\nPASS: quadratic_discriminant_transformed(a=6, b=4, c=10)\nPASS: quadratic_discriminant_transformed(a=-6, b=5, c=0)\nPASS: quadratic_discriminant_transformed(a=-3, b=7, c=0)\nPASS: quadratic_discriminant_transformed(a=9, b=-3, c=-3)\nPASS: quadratic_discriminant_transformed(a=-3, b=-3, c=-3)\nPASS: quadratic_discriminant_transformed(a=10, b=1, c=-6)\nPASS: quadratic_discriminant_transformed(a=-6, b=1, c=-6)\nPASS: quadratic_discriminant_transformed(a=1, b=1, c=-6)\nPASS: quadratic_discriminant_transformed(a=1, b=-6, c=-6)\nPASS: quadratic_discriminant_transformed(a=8, b=-3, c=-9)\nPASS: quadratic_discriminant_transformed(a=8, b=-3, c=8)\nPASS: quadratic_discriminant_transformed(a=8, b=-3, c=-3)\nPASS: quadratic_discriminant_transformed(a=9, b=-4, c=7)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-0.99999, y=0.0)\nPASS: vector_norm_transformed(x=-0.99999, y=-2.225073858507203e-309)\nPASS: vector_norm_transformed(x=1.175494351e-38, y=2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=2.071151719418813, y=-7.185251500070562)\nPASS: vector_norm_transformed(x=-1.5, y=1.175494351e-38)\nPASS: vector_norm_transformed(x=2.225073858507e-311, y=0.5)\nPASS: vector_norm_transformed(x=1e-05, y=-9.512712428053947)\nPASS: vector_norm_transformed(x=-2.225073858507203e-309, y=9.999999999999998)\nPASS: vector_norm_transformed(x=4.273925233887301, y=-1.401298464324817e-45)\nPASS: vector_norm_transformed(x=2.00001, y=0.3333333333333333)\nPASS: vector_norm_transformed(x=2.00001, y=2.00001)\nPASS: vector_norm_transformed(x=0.593457071112196, y=-6.277041217530144)\nPASS: vector_norm_transformed(x=-6.277041217530144, y=-6.277041217530144)\nPASS: vector_norm_transformed(x=-5e-324, y=1.401298464324817e-45)\nPASS: vector_norm_transformed(x=1.401298464324817e-45, y=1.401298464324817e-45)\nPASS: vector_norm_transformed(x=0.3333333333333333, y=-2.2250738585e-313)\nPASS: vector_norm_transformed(x=-2.2250738585e-313, y=-2.2250738585e-313)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=5.0310684876596135)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=-1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=1e-05)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=9.0)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=1e-05)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=9.0, b=1e-05)\nPASS: hypotenuse_diff_transformed(a=0.5, b=9.0)\nPASS: hypotenuse_diff_transformed(a=0.0, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=5.900128355048388, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=2.00001)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\udaa4\udf49\u00847!\u00bemA\u00be\ud84e\ude7cY')\nPASS: ascii_average_transformed(s='\ub0c2')\nPASS: ascii_average_transformed(s='\ud959\udffehJ\uda52\udf68\u001a')\nPASS: ascii_average_transformed(s='\u0001\u00df;\u0097\u0097G\u0086\u001b\ud9fe\udca7v')\nPASS: ascii_average_transformed(s='undefined')\nPASS: ascii_average_transformed(s='\ud800\udcad\u00e9\u00d8\udb8f\udec7&\udbb8\udc2e\ud9b7\ude22+\uda35\udd27\u00f3')\nPASS: ascii_average_transformed(s='\u001c\udbd2\udff4\u008d))\ud957\udef0\u00a5\u00fa\uda42\udead\u0250')\nPASS: ascii_average_transformed(s='(!\u0014\udb5e\udc5d\udbed\udfff\u0089\ud999\ude4bfK\u00e2')\nPASS: ascii_average_transformed(s='\u000f\u00bc\u0083\ud8ab\udd32')\nPASS: ascii_average_transformed(s='\uda53\ude1e\u00aa\u00f5')\nPASS: ascii_average_transformed(s='.\u00e9\ud945\udcddM\u00a3\udb9d\uddbfK0\u00c4\ud8fc\udea8')\nPASS: ascii_average_transformed(s='\u001b\u00ad\ud894\udddf\u00c1\udb7b\udc96\u000bH\u0000')\nPASS: ascii_average_transformed(s='Inf')\nPASS: ascii_average_transformed(s='\u0004\u0091iaE\u00f6<\uda7e\udec2o\u0098')\nPASS: ascii_average_transformed(s='\u000f\u00ad')\nPASS: ascii_average_transformed(s='\u00f4\u0083\u00c9\u00ed\ud879\udc12\u008c\u0086\u00ae%\u00e6')\nPASS: ascii_average_transformed(s='\u00fc\u00b7\ud8a3\ude87K\u00a2')\nPASS: ascii_average_transformed(s='\udb30\udc7a&\ud98b\ude27\u0087')\nPASS: ascii_average_transformed(s='\u00a2\u0016\u000f{\u00cd')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[7, 0])\nPASS: list_balance_transformed(nums=[7, 9])\nPASS: list_balance_transformed(nums=[5, 6, 4, 2, 1, 6, 2, 7, 8, 7])\nPASS: list_balance_transformed(nums=[3, 9, 0, 4, 7])\nPASS: list_balance_transformed(nums=[1, 3, 6, 4, 3, 7, 3, 4, 4])\nPASS: list_balance_transformed(nums=[5, 3, 10, 9, 3, 5, 6, 2, 4, 9])\nPASS: list_balance_transformed(nums=[8, 10, 5, 4, 5, 8, 6, 7, 0, 5])\nPASS: list_balance_transformed(nums=[5, 3])\nPASS: list_balance_transformed(nums=[6, 4, 6])\nPASS: list_balance_transformed(nums=[0, 3, 8, 6, 3, 7])\nPASS: list_balance_transformed(nums=[0, 3, 8, 6, 3])\nPASS: list_balance_transformed(nums=[0, 3, 6, 6, 3])\nPASS: list_balance_transformed(nums=[0, 3, 3, 6, 3])\nPASS: list_balance_transformed(nums=[0, 3, 3, 6, 0])\nPASS: list_balance_transformed(nums=[0, 3, 6, 6, 0])\nPASS: list_balance_transformed(nums=[0, 0, 6, 6, 0])\nPASS: list_balance_transformed(nums=[4, 8, 1, 3])\nPASS: list_balance_transformed(nums=[4, 0])\nPASS: list_balance_transformed(nums=[3, 4, 0, 10, 9, 8, 4, 6, 2, 3])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[4])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[5, 10, 5])\nPASS: odd_sum_validator_transformed(lst=[3, 7, 1, 3, 7, 5, 10, 1])\nPASS: odd_sum_validator_transformed(lst=[4, 5])\nPASS: odd_sum_validator_transformed(lst=[9, 5, 4, 6, 9])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[2, 5, 2, 3, 1, 7, 2, 1, 0, 9])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[0, 6])\nPASS: odd_sum_validator_transformed(lst=[6, 6])\nPASS: odd_sum_validator_transformed(lst=[6])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[4, 1, 7, 4])\nPASS: odd_sum_validator_transformed(lst=[4, 1, 1, 4])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 1, 4])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 4, 4])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 4, 1])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 1, 1])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u009fp\u00e3\u00817\u00c7')\nPASS: string_pattern_score_transformed(s='t')\nPASS: string_pattern_score_transformed(s='.\u00ae')\nPASS: string_pattern_score_transformed(s='\udb32\udc6e\u000eT')\nPASS: string_pattern_score_transformed(s='y1\uda07\udd40\ud88a\udd84j\u0095:\u00e2f')\nPASS: string_pattern_score_transformed(s='LPT1')\nPASS: string_pattern_score_transformed(s='true')\nPASS: string_pattern_score_transformed(s='Q')\nPASS: string_pattern_score_transformed(s='1\u0017UP\udb59\udc2c\ud869\ude8c\u00c6\u00ba\u00cfN')\nPASS: string_pattern_score_transformed(s='\u00b6\ud8ed\udec5')\nPASS: string_pattern_score_transformed(s='\u023a')\nPASS: string_pattern_score_transformed(s='+')\nPASS: string_pattern_score_transformed(s='\u00ea\u00fea:P\u009f')\nPASS: string_pattern_score_transformed(s='\u009c')\nPASS: string_pattern_score_transformed(s='\f')\nPASS: string_pattern_score_transformed(s='\u00ea\udba6\udc93\u00f8\ud994\udde7\u00ac\u007f\u00da')\nPASS: string_pattern_score_transformed(s='\u00e8c:t^\u00d5\u001eT?\ud9c9\udca0')\nPASS: string_pattern_score_transformed(s='\u008b')\nPASS: string_pattern_score_transformed(s='\uda12\ude00\u9964\u00b4')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[20])\nPASS: sum_until_limit_transformed(nums=[11])\nPASS: sum_until_limit_transformed(nums=[11, 5, 16])\nPASS: sum_until_limit_transformed(nums=[20, 7, 7, 7, 2])\nPASS: sum_until_limit_transformed(nums=[0, 0])\nPASS: sum_until_limit_transformed(nums=[17])\nPASS: sum_until_limit_transformed(nums=[15])\nPASS: sum_until_limit_transformed(nums=[15, 17, 6, 2, 11, 7, 17, 19])\nPASS: sum_until_limit_transformed(nums=[12, 10, 12, 2])\nPASS: sum_until_limit_transformed(nums=[9, 13, 18, 0, 0, 0, 15, 14, 19, 8])\nPASS: sum_until_limit_transformed(nums=[9, 13, 18, 0, 13, 0, 15, 14, 19, 8])\nPASS: sum_until_limit_transformed(nums=[15, 13, 18, 0, 13, 0, 15, 14, 19, 8])\nPASS: sum_until_limit_transformed(nums=[15, 13, 18, 0, 13, 0, 15, 14, 15, 8])\nPASS: sum_until_limit_transformed(nums=[13, 13, 18, 0, 13, 0, 15, 14, 15, 8])\nPASS: sum_until_limit_transformed(nums=[13, 13, 18, 0, 13, 0, 15, 0, 15, 8])\nPASS: sum_until_limit_transformed(nums=[13, 13, 18, 0, 13, 0, 13, 0, 15, 8])\nPASS: sum_until_limit_transformed(nums=[7, 17, 7, 5, 15, 7, 6, 5, 15, 7])\nPASS: sum_until_limit_transformed(nums=[7, 17, 7, 5, 15, 7, 5, 5, 15, 7])\nPASS: sum_until_limit_transformed(nums=[7, 17, 7, 5, 15, 7, 5, 7, 15, 7])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[8])\nPASS: count_divisibles_transformed(nums=[8, 14])\nPASS: count_divisibles_transformed(nums=[1, 19, 1, 17, 1])\nPASS: count_divisibles_transformed(nums=[15, 6])\nPASS: count_divisibles_transformed(nums=[16, 4, 13, 8, 10, 10, 18])\nPASS: count_divisibles_transformed(nums=[2, 13, 17, 1, 10, 5, 16, 0, 10, 3])\nPASS: count_divisibles_transformed(nums=[7])\nPASS: count_divisibles_transformed(nums=[4, 11, 14, 8, 18, 7, 20, 20, 15, 4])\nPASS: count_divisibles_transformed(nums=[13, 20])\nPASS: count_divisibles_transformed(nums=[2])\nPASS: count_divisibles_transformed(nums=[0, 3])\nPASS: count_divisibles_transformed(nums=[0, 0])\nPASS: count_divisibles_transformed(nums=[5, 1, 7, 1, 1, 19, 16, 10])\nPASS: count_divisibles_transformed(nums=[5, 1, 1, 1, 1, 19, 16, 10])\nPASS: count_divisibles_transformed(nums=[5, 1, 1, 1, 1, 19, 16, 1])\nPASS: count_divisibles_transformed(nums=[5, 16, 1, 1, 1, 19, 16, 1])\nPASS: count_divisibles_transformed(nums=[5, 16, 1, 5, 1, 19, 16, 1])\nPASS: count_divisibles_transformed(nums=[19, 16, 1, 5, 1, 19, 16, 1])\nPASS: count_divisibles_transformed(nums=[13])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[9])\nPASS: index_weighted_sum_transformed(lst=[9, 0])\nPASS: index_weighted_sum_transformed(lst=[9, 9, 2, 6, 8])\nPASS: index_weighted_sum_transformed(lst=[2, 10, 9, 2, 8, 4, 7, 6, 8, 3])\nPASS: index_weighted_sum_transformed(lst=[6, 2, 2, 0, 0, 5])\nPASS: index_weighted_sum_transformed(lst=[6])\nPASS: index_weighted_sum_transformed(lst=[5, 2, 9, 3, 2, 4, 9, 6, 9, 8])\nPASS: index_weighted_sum_transformed(lst=[10, 6, 6, 1, 4, 4, 9, 4, 3, 0])\nPASS: index_weighted_sum_transformed(lst=[5])\nPASS: index_weighted_sum_transformed(lst=[9, 6, 5, 0, 4])\nPASS: index_weighted_sum_transformed(lst=[4, 6, 5, 0, 4])\nPASS: index_weighted_sum_transformed(lst=[5, 6, 5, 0, 4])\nPASS: index_weighted_sum_transformed(lst=[5, 6, 0, 0, 4])\nPASS: index_weighted_sum_transformed(lst=[5, 6, 0, 0, 6])\nPASS: index_weighted_sum_transformed(lst=[5, 6, 5, 0, 6])\nPASS: index_weighted_sum_transformed(lst=[5, 6, 6, 0, 6])\nPASS: index_weighted_sum_transformed(lst=[5, 4, 3, 2, 3])\nPASS: index_weighted_sum_transformed(lst=[5, 4, 3, 2, 2])\nPASS: index_weighted_sum_transformed(lst=[5, 4, 2, 2, 2])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=8)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='+\u0089')\nPASS: character_counter_transformed(text='\udb68\udec4q\ud8af\uddf6\u008c\u00e7\u00ab\u00ba\ud979\udc49\ud8db\udee7\u00e5')\nPASS: character_counter_transformed(text='u\u00f0\u00b8\udb9a\ude41\fb')\nPASS: character_counter_transformed(text='\u00d1\ua763G\ud86b\udef3\u008a\u00f8\u0002\udbd8\ude6a')\nPASS: character_counter_transformed(text='\u00f6\ns3\u00ed\ud967\udc0b\u00b3\u0092')\nPASS: character_counter_transformed(text='\u00cd\u00f9')\nPASS: character_counter_transformed(text='\u00a7\u00de\u00d8>\u00bb\u00b0F')\nPASS: character_counter_transformed(text='\udaa9\udc75\u00cb\u9c1f')\nPASS: character_counter_transformed(text='\ud9ca\udfa1)\u00e2')\nPASS: character_counter_transformed(text='\u00c1c\u00fd\ud846\udd10\u00f7\u007f\u00f1\udbf1\udf49\u00d5\u00e1')\nPASS: character_counter_transformed(text='\u0019\u00ed')\nPASS: character_counter_transformed(text='\u001f\u00a1@\ud85b\uded3\udb29\ude66\ud8b9\udd0d^y!\u0085')\nPASS: character_counter_transformed(text='\u0005\u00ebs\ud840\udff4\u00d9\u00e11\u00f9\u00c3\u0004')\nPASS: character_counter_transformed(text='\u000b5\u00fd\u00f2*\u001a\u00af\u00b0y\uda8d\udf23')\nPASS: character_counter_transformed(text='\u0098')\nPASS: character_counter_transformed(text='\"')\nPASS: character_counter_transformed(text='<B\udb6d\udeca\u00e3rM\ud94b\ude34\u00e8\ud856\ude79X')\nPASS: character_counter_transformed(text='l~W')\nPASS: character_counter_transformed(text='7\u00e5va\u000f\u00b1\u00dd\u0089\f\u00b3')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[80])\nPASS: rolling_maximum_transformed(values=[89])\nPASS: rolling_maximum_transformed(values=[29, 54, 61, 51, 88])\nPASS: rolling_maximum_transformed(values=[89, 18, 29, 26])\nPASS: rolling_maximum_transformed(values=[80, 31, 53])\nPASS: rolling_maximum_transformed(values=[8])\nPASS: rolling_maximum_transformed(values=[12, 56, 77, 44, 81, 64, 50, 84, 41, 87])\nPASS: rolling_maximum_transformed(values=[54, 60, 59])\nPASS: rolling_maximum_transformed(values=[44])\nPASS: rolling_maximum_transformed(values=[64])\nPASS: rolling_maximum_transformed(values=[86, 86])\nPASS: rolling_maximum_transformed(values=[54])\nPASS: rolling_maximum_transformed(values=[3, 10, 33])\nPASS: rolling_maximum_transformed(values=[3, 10, 3])\nPASS: rolling_maximum_transformed(values=[3, 10, 10])\nPASS: rolling_maximum_transformed(values=[10, 10, 10])\nPASS: rolling_maximum_transformed(values=[44, 65, 45, 48])\nPASS: rolling_maximum_transformed(values=[45, 65, 45, 48])\nPASS: rolling_maximum_transformed(values=[45, 45, 45, 48])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_19": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=75)\nPASS: process_data_transformed(x=28)\nPASS: process_data_transformed(x=42)\nPASS: process_data_transformed(x=35)\nPASS: process_data_transformed(x=84)\nPASS: process_data_transformed(x=96)\nPASS: process_data_transformed(x=11)\nPASS: process_data_transformed(x=26)\nPASS: process_data_transformed(x=80)\nPASS: process_data_transformed(x=41)\nPASS: process_data_transformed(x=59)\nPASS: process_data_transformed(x=18)\nPASS: process_data_transformed(x=37)\nPASS: process_data_transformed(x=91)\nPASS: process_data_transformed(x=97)\nPASS: process_data_transformed(x=98)\nPASS: process_data_transformed(x=5)\nPASS: process_data_transformed(x=71)\nPASS: process_data_transformed(x=14)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=0.99999)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=7.032995641486474)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=8.072676609610113e-190)\nPASS: convert_temperature_transformed(c=13.14568006836099)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=72.08722577045435)\nPASS: convert_temperature_transformed(c=73.12109417081098)\nPASS: convert_temperature_transformed(c=43.00923707659944)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=89.11625420351423)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=61.7209288686562)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=92.21490893454639, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=92.21490893454639, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=2.00001, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.9535232120906179)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=1.3874321758344793e-246, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=0.7843058289919345)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=1.401298464324817e-45)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=0.1971550653461807)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=1.175494351e-38)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-0.99999, imag=0.0)\nPASS: process_complex_number_transformed(real=-0.99999, imag=19.0)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=-0.99999)\nPASS: process_complex_number_transformed(real=1.9, imag=-1.5)\nPASS: process_complex_number_transformed(real=15.468530154326757, imag=2.00001)\nPASS: process_complex_number_transformed(real=-1.1754943508222875e-38, imag=5e-324)\nPASS: process_complex_number_transformed(real=1.1754943508222875e-38, imag=-1e-05)\nPASS: process_complex_number_transformed(real=5e-324, imag=1.1)\nPASS: process_complex_number_transformed(real=1.401298464324817e-45, imag=-19.999999999999996)\nPASS: process_complex_number_transformed(real=1.401298464324817e-45, imag=-9.715922658286907)\nPASS: process_complex_number_transformed(real=-9.715922658286907, imag=-9.715922658286907)\nPASS: process_complex_number_transformed(real=1.192092896e-07, imag=-19.0)\nPASS: process_complex_number_transformed(real=1.192092896e-07, imag=1.192092896e-07)\nPASS: process_complex_number_transformed(real=-1.1, imag=-1.5)\nPASS: process_complex_number_transformed(real=-1.1, imag=-1.1)\nPASS: process_complex_number_transformed(real=0.0, imag=0.5198877437304503)\nPASS: process_complex_number_transformed(real=14.413283985099909, imag=1.175494351e-38)\nPASS: process_complex_number_transformed(real=1.175494351e-38, imag=1.175494351e-38)\nPASS: process_complex_number_transformed(real=-2.220446049250313e-16, imag=2.00001)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=33)\nPASS: transform_data_transformed(input_value=97)\nPASS: transform_data_transformed(input_value=89)\nPASS: transform_data_transformed(input_value=88)\nPASS: transform_data_transformed(input_value=82)\nPASS: transform_data_transformed(input_value=73)\nPASS: transform_data_transformed(input_value=63)\nPASS: transform_data_transformed(input_value=36)\nPASS: transform_data_transformed(input_value=83)\nPASS: transform_data_transformed(input_value=50)\nPASS: transform_data_transformed(input_value=12)\nPASS: transform_data_transformed(input_value=21)\nPASS: transform_data_transformed(input_value=32)\nPASS: transform_data_transformed(input_value=38)\nPASS: transform_data_transformed(input_value=79)\nPASS: transform_data_transformed(input_value=1)\nPASS: transform_data_transformed(input_value=18)\nPASS: transform_data_transformed(input_value=30)\nPASS: transform_data_transformed(input_value=99)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=1.175494351e-38)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=15.062575149782539)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=13.14925261419212)\nPASS: circle_area_diff_transformed(r=3.081483271745849)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=7.815998680750102)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=14, b=1, c=1)\nPASS: triangle_checker_transformed(a=14, b=5, c=2)\nPASS: triangle_checker_transformed(a=14, b=7, c=2)\nPASS: triangle_checker_transformed(a=15, b=17, c=16)\nPASS: triangle_checker_transformed(a=10, b=16, c=17)\nPASS: triangle_checker_transformed(a=11, b=14, c=7)\nPASS: triangle_checker_transformed(a=15, b=20, c=5)\nPASS: triangle_checker_transformed(a=17, b=11, c=9)\nPASS: triangle_checker_transformed(a=8, b=19, c=13)\nPASS: triangle_checker_transformed(a=14, b=14, c=10)\nPASS: triangle_checker_transformed(a=14, b=14, c=14)\nPASS: triangle_checker_transformed(a=12, b=1, c=17)\nPASS: triangle_checker_transformed(a=12, b=1, c=12)\nPASS: triangle_checker_transformed(a=12, b=12, c=12)\nPASS: triangle_checker_transformed(a=13, b=6, c=8)\nPASS: triangle_checker_transformed(a=8, b=6, c=8)\nPASS: triangle_checker_transformed(a=8, b=8, c=8)\nPASS: triangle_checker_transformed(a=3, b=10, c=1)\nPASS: triangle_checker_transformed(a=1, b=10, c=1)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=1.192092896e-07)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=5.11006644779599e-303)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=47.15331568395046)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=7, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=7, b=-1, c=-1)\nPASS: quadratic_discriminant_transformed(a=4, b=7, c=4)\nPASS: quadratic_discriminant_transformed(a=4, b=-6, c=4)\nPASS: quadratic_discriminant_transformed(a=-3, b=-5, c=-7)\nPASS: quadratic_discriminant_transformed(a=-7, b=1, c=6)\nPASS: quadratic_discriminant_transformed(a=-7, b=-8, c=-2)\nPASS: quadratic_discriminant_transformed(a=-3, b=6, c=9)\nPASS: quadratic_discriminant_transformed(a=0, b=6, c=-2)\nPASS: quadratic_discriminant_transformed(a=6, b=-3, c=9)\nPASS: quadratic_discriminant_transformed(a=6, b=-3, c=6)\nPASS: quadratic_discriminant_transformed(a=6, b=-3, c=-3)\nPASS: quadratic_discriminant_transformed(a=-3, b=-3, c=-3)\nPASS: quadratic_discriminant_transformed(a=-6, b=-1, c=3)\nPASS: quadratic_discriminant_transformed(a=-6, b=3, c=3)\nPASS: quadratic_discriminant_transformed(a=3, b=3, c=3)\nPASS: quadratic_discriminant_transformed(a=-4, b=-7, c=0)\nPASS: quadratic_discriminant_transformed(a=0, b=-7, c=0)\nPASS: quadratic_discriminant_transformed(a=-7, b=-7, c=0)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-5e-324, y=0.0)\nPASS: vector_norm_transformed(x=-5e-324, y=1.401298464324817e-45)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=6.152163551265929)\nPASS: vector_norm_transformed(x=9.0, y=-9.051424707098445)\nPASS: vector_norm_transformed(x=2.4050656890933197e-208, y=2.00001)\nPASS: vector_norm_transformed(x=-9.999999999999998, y=-6.103515625e-05)\nPASS: vector_norm_transformed(x=10.0, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-2.225073858507e-311, y=0.5)\nPASS: vector_norm_transformed(x=7.755121493470398, y=-6.103515625e-05)\nPASS: vector_norm_transformed(x=5.040342613456911, y=-1.175494351e-38)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=-1.175494351e-38)\nPASS: vector_norm_transformed(x=5.960464477539063e-08, y=-0.929809699572834)\nPASS: vector_norm_transformed(x=5.960464477539063e-08, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-3.354910900482343e-304, y=-5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-3.354910900482343e-304, y=-3.354910900482343e-304)\nPASS: vector_norm_transformed(x=-2.225073858507203e-309, y=1.9790284974668477)\nPASS: vector_norm_transformed(x=1.9790284974668477, y=1.9790284974668477)\nPASS: vector_norm_transformed(x=4.2627357566810815, y=9.0)\nPASS: vector_norm_transformed(x=4.2627357566810815, y=4.2627357566810815)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=9.774850765818165, b=0.0)\nPASS: hypotenuse_diff_transformed(a=9.774850765818165, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=9.0, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=9.0)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=0.0)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=0.0, b=10.0)\nPASS: hypotenuse_diff_transformed(a=1.5, b=1.0205863010669016)\nPASS: hypotenuse_diff_transformed(a=1.5, b=1e-05)\nPASS: hypotenuse_diff_transformed(a=3.1325779745115327, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=1.1, b=1.5)\nPASS: hypotenuse_diff_transformed(a=1.5, b=1.5)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=1.5)\nPASS: hypotenuse_diff_transformed(a=1.0, b=3.03487528649979)\nPASS: hypotenuse_diff_transformed(a=3.03487528649979, b=3.03487528649979)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=3.3666021377795667)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=5.6049805187334765e-273)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='^>\u00fc\n\u00df\ud947\udd01\ud957\ude24\u00a8\udb8f\udda8\u0007')\nPASS: ascii_average_transformed(s='\ud83f\ude5c\ud8e5\uddfe\u1fcb\u00ad\u007f/\u0088\u009f\uda36\udc05\ud8bd\udd96')\nPASS: ascii_average_transformed(s='\uda78\udf1f\u009a\u00b87O')\nPASS: ascii_average_transformed(s='\u00d4\u0007C\u00dd\ud812\udf5d\udba0\udf8f\u00ccu4\uda47\udc02')\nPASS: ascii_average_transformed(s='7\ud870\udfe0\u0096\u00b9LV')\nPASS: ascii_average_transformed(s='\u00d2')\nPASS: ascii_average_transformed(s='\u00c8\t\u00a5\u0001F\u001c')\nPASS: ascii_average_transformed(s='\u0097\u0007')\nPASS: ascii_average_transformed(s='VS\u00d4\u000f\u0095')\nPASS: ascii_average_transformed(s='\\')\nPASS: ascii_average_transformed(s='n'!')\nPASS: ascii_average_transformed(s='\u2a3d\u00dc\u009bJ\u009di')\nPASS: ascii_average_transformed(s='\u0095\u00b7\u00ef\n\u00f2\u0015>\u00c2\u00e6\u008b')\nPASS: ascii_average_transformed(s='J\u0000\u0014\ud823\uddfc\u00ca\u00ef\ud934\udde2')\nPASS: ascii_average_transformed(s='j_=')\nPASS: ascii_average_transformed(s='\u00a0Z\u00fdF\ud988\ude8cc+\u00d2\u00a4\u0015')\nPASS: ascii_average_transformed(s='G\ud9af\udc03\u00ec\u009de\ud8f6\uddf6T\u00bc\u00fa\u00b0')\nPASS: ascii_average_transformed(s='1\u00fa\u00f2\ud97d\ude03\u00casS\udaad\udc15g\u0096')\nPASS: ascii_average_transformed(s='\u00a6r]')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[5, 0])\nPASS: list_balance_transformed(nums=[5, 2, 1, 7])\nPASS: list_balance_transformed(nums=[5, 7, 6, 3, 1])\nPASS: list_balance_transformed(nums=[0, 4])\nPASS: list_balance_transformed(nums=[10, 2, 8, 3, 6, 2, 2])\nPASS: list_balance_transformed(nums=[1, 2, 2, 7, 3, 9, 10, 3, 1, 1])\nPASS: list_balance_transformed(nums=[2, 0])\nPASS: list_balance_transformed(nums=[5, 8, 3, 9, 7, 6, 8, 9, 5, 0])\nPASS: list_balance_transformed(nums=[10, 4, 7, 3, 10, 3, 10, 5])\nPASS: list_balance_transformed(nums=[10, 9, 10])\nPASS: list_balance_transformed(nums=[10, 10, 10])\nPASS: list_balance_transformed(nums=[6, 0, 4])\nPASS: list_balance_transformed(nums=[0, 0, 4])\nPASS: list_balance_transformed(nums=[0, 4, 4])\nPASS: list_balance_transformed(nums=[9, 1, 8, 0, 2, 3, 1, 0])\nPASS: list_balance_transformed(nums=[9, 1, 8, 1, 2, 3, 1, 0])\nPASS: list_balance_transformed(nums=[9, 9, 8, 1, 2, 3, 1, 0])\nPASS: list_balance_transformed(nums=[9, 0, 8, 1, 2, 3, 1, 0])\nPASS: list_balance_transformed(nums=[9, 0, 8, 1, 1, 3, 1, 0])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[2, 7])\nPASS: odd_sum_validator_transformed(lst=[10, 9, 2])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[5, 6, 2, 6, 5, 10, 1])\nPASS: odd_sum_validator_transformed(lst=[4])\nPASS: odd_sum_validator_transformed(lst=[6, 10, 8, 6, 8, 10, 2, 1, 7, 6])\nPASS: odd_sum_validator_transformed(lst=[2, 1, 2, 3])\nPASS: odd_sum_validator_transformed(lst=[10, 2])\nPASS: odd_sum_validator_transformed(lst=[1, 8, 6, 2])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[0, 7, 10, 2, 3, 0, 8, 4, 3, 0])\nPASS: odd_sum_validator_transformed(lst=[0, 7, 2, 2, 3, 0, 8, 4, 3, 0])\nPASS: odd_sum_validator_transformed(lst=[0, 7, 2, 2, 7, 0, 8, 4, 3, 0])\nPASS: odd_sum_validator_transformed(lst=[0, 7, 2, 2, 7, 0, 8, 0, 3, 0])\nPASS: odd_sum_validator_transformed(lst=[0, 7, 7, 2, 7, 0, 8, 0, 3, 0])\nPASS: odd_sum_validator_transformed(lst=[0, 7, 7, 7, 7, 0, 8, 0, 3, 0])\nPASS: odd_sum_validator_transformed(lst=[0, 7, 7, 7, 7, 0, 3, 0, 3, 0])\nPASS: odd_sum_validator_transformed(lst=[10, 8])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u00d9P')\nPASS: string_pattern_score_transformed(s='\u00f6\u00b0\u00e8')\nPASS: string_pattern_score_transformed(s='\f')\nPASS: string_pattern_score_transformed(s='P\u0000\u043b\udb8c\udcd0\udbb9\udd38\ud87c\udedb')\nPASS: string_pattern_score_transformed(s='\u001f\u0015\u00e0')\nPASS: string_pattern_score_transformed(s='l\uda09\udcf4U]\u0001\udbf0\ude24\u0091\u00a9')\nPASS: string_pattern_score_transformed(s='\u00b1m\u008c\u00dc\u009dD\u009b\u00e5\uda1b\udcde\u0087')\nPASS: string_pattern_score_transformed(s='\ud967\udca7')\nPASS: string_pattern_score_transformed(s='n\ud886\udc574\\TR\ud8a8\udcfe\u00d0U\u009c')\nPASS: string_pattern_score_transformed(s='\u00e1G\udbba\udc80\udad1\ude6b')\nPASS: string_pattern_score_transformed(s='\u00d7\u00f9*\u00b0\udb60\uded62\ud98f\udda1\u0018\u00eaW')\nPASS: string_pattern_score_transformed(s='\u00b9\uda40\udce1^\u00a7Z\u000b')\nPASS: string_pattern_score_transformed(s='S')\nPASS: string_pattern_score_transformed(s='mU\u00e2\u00aa\u000f\u00d9')\nPASS: string_pattern_score_transformed(s='b\u00acp\udac6\udc20')\nPASS: string_pattern_score_transformed(s='\u00a7l\u0010\u00b7\udac1\udd962')\nPASS: string_pattern_score_transformed(s='d\u0093\u00be\u0098|\u00d5\u00cb')\nPASS: string_pattern_score_transformed(s='\udbfc\udd07\u000b\ud833\udc15\ud9c4\ude0c')\nPASS: string_pattern_score_transformed(s='\u000b')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[16])\nPASS: sum_until_limit_transformed(nums=[10])\nPASS: sum_until_limit_transformed(nums=[13, 12, 4, 7, 12, 4, 14, 6])\nPASS: sum_until_limit_transformed(nums=[12, 2, 9, 6, 0, 20])\nPASS: sum_until_limit_transformed(nums=[1, 11, 11, 17, 12, 0, 8, 16, 13, 10])\nFAIL: sum_until_limit_transformed(nums=[20, 15, 2, 6, 10, 7, 4])\nPASS: sum_until_limit_transformed(nums=[4, 16, 8])\nPASS: sum_until_limit_transformed(nums=[8, 5, 11, 13, 16, 12, 4, 5, 13, 1])\nPASS: sum_until_limit_transformed(nums=[17, 7, 6, 6, 12, 18])\nPASS: sum_until_limit_transformed(nums=[12])\nPASS: sum_until_limit_transformed(nums=[17])\nPASS: sum_until_limit_transformed(nums=[12, 3, 8, 18, 10])\nPASS: sum_until_limit_transformed(nums=[12, 3, 8, 12, 10])\nPASS: sum_until_limit_transformed(nums=[12, 3, 8, 12, 12])\nPASS: sum_until_limit_transformed(nums=[12, 8, 8, 12, 12])\nPASS: sum_until_limit_transformed(nums=[12, 8, 8, 8, 12])\nPASS: sum_until_limit_transformed(nums=[11, 15, 12, 3])\nPASS: sum_until_limit_transformed(nums=[11, 15, 12])\nPASS: sum_until_limit_transformed(nums=[11, 15, 11])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[15])\nPASS: count_divisibles_transformed(nums=[15, 13])\nPASS: count_divisibles_transformed(nums=[13, 6, 10, 3, 2, 3, 14, 8, 3, 20])\nPASS: count_divisibles_transformed(nums=[20, 2, 14])\nPASS: count_divisibles_transformed(nums=[7, 19, 8, 1, 2, 2, 2, 1, 18, 14])\nPASS: count_divisibles_transformed(nums=[9, 13, 2, 0, 1])\nPASS: count_divisibles_transformed(nums=[8, 9, 13, 12])\nPASS: count_divisibles_transformed(nums=[13])\nPASS: count_divisibles_transformed(nums=[9])\nPASS: count_divisibles_transformed(nums=[12, 1, 10, 20, 12, 1, 20, 15])\nPASS: count_divisibles_transformed(nums=[12, 1, 10, 20, 12, 1, 1, 15])\nPASS: count_divisibles_transformed(nums=[12, 1, 10, 20, 12, 1, 15, 15])\nPASS: count_divisibles_transformed(nums=[12, 1, 10, 15, 12, 1, 15, 15])\nPASS: count_divisibles_transformed(nums=[12, 1])\nPASS: count_divisibles_transformed(nums=[12])\nPASS: count_divisibles_transformed(nums=[9, 1, 16, 16, 15, 7, 9, 4, 7, 7])\nPASS: count_divisibles_transformed(nums=[9, 1, 16, 16, 15, 7, 9, 4, 1, 7])\nPASS: count_divisibles_transformed(nums=[15, 1, 16, 16, 15, 7, 9, 4, 1, 7])\nPASS: count_divisibles_transformed(nums=[15, 7, 16, 16, 15, 7, 9, 4, 1, 7])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[8, 5])\nPASS: index_weighted_sum_transformed(lst=[0, 2, 9, 0, 4, 8, 5, 0, 1, 6])\nPASS: index_weighted_sum_transformed(lst=[1, 2, 8, 2, 2, 7, 10, 8, 5, 4])\nPASS: index_weighted_sum_transformed(lst=[7, 2, 1, 5])\nPASS: index_weighted_sum_transformed(lst=[6])\nPASS: index_weighted_sum_transformed(lst=[0, 3, 3, 2, 0, 4, 1, 1, 6, 2])\nPASS: index_weighted_sum_transformed(lst=[5, 6, 10, 1, 4])\nPASS: index_weighted_sum_transformed(lst=[7])\nPASS: index_weighted_sum_transformed(lst=[4, 3, 8, 8, 1, 3, 1, 0, 9, 1])\nPASS: index_weighted_sum_transformed(lst=[4, 3, 8, 8, 1, 4, 1, 0, 9, 1])\nPASS: index_weighted_sum_transformed(lst=[4, 3, 8, 8, 1, 4, 3, 0, 9, 1])\nPASS: index_weighted_sum_transformed(lst=[4, 3, 8, 8, 1, 4, 3, 8, 9, 1])\nPASS: index_weighted_sum_transformed(lst=[4, 3, 8, 8, 4, 4, 3, 8, 9, 1])\nPASS: index_weighted_sum_transformed(lst=[3, 3, 8, 8, 4, 4, 3, 8, 9, 1])\nPASS: index_weighted_sum_transformed(lst=[3, 3, 8, 8, 4, 4, 3, 8])\nPASS: index_weighted_sum_transformed(lst=[9, 2, 3, 1])\nPASS: index_weighted_sum_transformed(lst=[9, 2, 9, 1])\nPASS: index_weighted_sum_transformed(lst=[9, 2])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=2)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='S&{\u00c5\n{\u00c4\u00d1\u00d0\u0095')\nPASS: character_counter_transformed(text='Gb\u00bf\uda4e\udef7\u0080\u0012\u00de6\u00bb\u00c8')\nPASS: character_counter_transformed(text='\ud810\udee0\udba3\udcf5\u00a6yX\u009e')\nPASS: character_counter_transformed(text='om\u00b8\f\u0089\ud87c\udf2a\u0084\u00fa\uda2d\udedfY')\nPASS: character_counter_transformed(text='false')\nPASS: character_counter_transformed(text='\u0081\u00f3\udb8b\udff7')\nPASS: character_counter_transformed(text='<\u0018')\nPASS: character_counter_transformed(text='N\ud94c\udd50\u0094\u00b7\udbe1\udc97k\u00ee\ud849\ude25\u0001\ud8fc\udd66')\nPASS: character_counter_transformed(text='\u00aeOB\u00a6\u00b6\ud907\uddb0v\u0090')\nPASS: character_counter_transformed(text='\u00e8\u008f\u00b1\uda40\udc94\u009d')\nPASS: character_counter_transformed(text='\u0017\ud9a2\udd18(\u0007\u00ear\u008a')\nPASS: character_counter_transformed(text='\u00da\u0015\u00e9\u0090\u0013\uda24\udd629\u00b81#')\nPASS: character_counter_transformed(text='\ud83c\uddfa\ud83c\uddf8')\nPASS: character_counter_transformed(text='P>SUkz\uda94\udc64K\ud951\udd07\f')\nPASS: character_counter_transformed(text='\u009e')\nPASS: character_counter_transformed(text='\uda38\udecb\u008c\u00e9\u00f5\u00ca')\nPASS: character_counter_transformed(text='\u001b\ud835\udc05]\u0091\u00d1\u00dc}\u00d6P\u0090')\nPASS: character_counter_transformed(text='Kw\u008cJ5\u00fc\u00e1\u00e5\u00f9:')\nPASS: character_counter_transformed(text='\u00f5\u00f2\udbd4\ude05\u00f71\u00ad\ud89d\udfaa\u00b5,\u00e8')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[13])\nPASS: rolling_maximum_transformed(values=[11])\nPASS: rolling_maximum_transformed(values=[81])\nPASS: rolling_maximum_transformed(values=[69, 66])\nPASS: rolling_maximum_transformed(values=[58, 20, 3, 100, 62, 43, 89, 50, 10, 13])\nPASS: rolling_maximum_transformed(values=[86, 11, 80, 70, 38, 8, 11, 80])\nPASS: rolling_maximum_transformed(values=[87])\nPASS: rolling_maximum_transformed(values=[66, 7, 11, 28, 3, 45, 99])\nPASS: rolling_maximum_transformed(values=[51, 65, 50, 36, 54, 3, 3])\nPASS: rolling_maximum_transformed(values=[18, 71, 31, 34, 10, 63, 10, 51, 5, 76])\nPASS: rolling_maximum_transformed(values=[18, 71, 31, 34, 10, 63, 63, 51, 5, 76])\nPASS: rolling_maximum_transformed(values=[18, 71, 31, 34, 10, 63, 63, 51, 5, 63])\nPASS: rolling_maximum_transformed(values=[18, 71, 31, 34, 51, 63, 63, 51, 5, 63])\nPASS: rolling_maximum_transformed(values=[18, 71, 31, 34, 51, 34, 63, 51, 5, 63])\nPASS: rolling_maximum_transformed(values=[71, 71, 31, 34, 51, 34, 63, 51, 5, 63])\nPASS: rolling_maximum_transformed(values=[71, 71, 31, 34, 51, 34, 63, 71, 5, 63])\nPASS: rolling_maximum_transformed(values=[8, 95])\nPASS: rolling_maximum_transformed(values=[95, 95])\nPASS: rolling_maximum_transformed(values=[95])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_20": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=45)\nPASS: process_data_transformed(x=65)\nPASS: process_data_transformed(x=25)\nPASS: process_data_transformed(x=70)\nPASS: process_data_transformed(x=44)\nPASS: process_data_transformed(x=22)\nPASS: process_data_transformed(x=66)\nPASS: process_data_transformed(x=99)\nPASS: process_data_transformed(x=34)\nPASS: process_data_transformed(x=39)\nPASS: process_data_transformed(x=28)\nPASS: process_data_transformed(x=91)\nPASS: process_data_transformed(x=10)\nPASS: process_data_transformed(x=69)\nPASS: process_data_transformed(x=6)\nPASS: process_data_transformed(x=27)\nPASS: process_data_transformed(x=48)\nPASS: process_data_transformed(x=18)\nPASS: process_data_transformed(x=88)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=96.79907092153144)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=1.1184776476328417e-253)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=20.529034292356467)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=26.263009083542048)\nPASS: convert_temperature_transformed(c=75.93253503140775)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=0.2674108723762659)\nPASS: calculate_discount_transformed(price=199.99999999999997, discount_rate=0.3333333333333333)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=0.07728608041535213)\nPASS: calculate_discount_transformed(price=153.12602436355448, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=93.54783233505837, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=2.00001, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=174.68843795558243, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=174.68843795558243, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=199.99999999999997, discount_rate=1.192092896e-07)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=5e-324, imag=0.0)\nPASS: process_complex_number_transformed(real=5e-324, imag=1.192092896e-07)\nPASS: process_complex_number_transformed(real=-1e-05, imag=0.5)\nPASS: process_complex_number_transformed(real=-19.011687148083148, imag=-1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=-2.225073858507e-311, imag=-5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=1.9, imag=-19.0)\nPASS: process_complex_number_transformed(real=-0.3333333333333333, imag=13.119486205138088)\nPASS: process_complex_number_transformed(real=2.2250738585072014e-308, imag=2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=1.1, imag=-14.221352116947486)\nPASS: process_complex_number_transformed(real=-1e-05, imag=10.655519830680547)\nPASS: process_complex_number_transformed(real=10.655519830680547, imag=10.655519830680547)\nPASS: process_complex_number_transformed(real=7.441673023802661, imag=-1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=-1.1754943508222875e-38, imag=-1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=-0.5, imag=0.99999)\nPASS: process_complex_number_transformed(real=-0.5, imag=-0.5)\nPASS: process_complex_number_transformed(real=-5e-324, imag=-4.2511965310958983e-308)\nPASS: process_complex_number_transformed(real=-5e-324, imag=-5e-324)\nPASS: process_complex_number_transformed(real=1.9, imag=-2.00001)\nPASS: process_complex_number_transformed(real=-2.00001, imag=-2.00001)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=35)\nPASS: transform_data_transformed(input_value=68)\nPASS: transform_data_transformed(input_value=23)\nPASS: transform_data_transformed(input_value=11)\nPASS: transform_data_transformed(input_value=69)\nPASS: transform_data_transformed(input_value=31)\nPASS: transform_data_transformed(input_value=99)\nPASS: transform_data_transformed(input_value=34)\nPASS: transform_data_transformed(input_value=51)\nPASS: transform_data_transformed(input_value=81)\nPASS: transform_data_transformed(input_value=26)\nPASS: transform_data_transformed(input_value=67)\nPASS: transform_data_transformed(input_value=62)\nPASS: transform_data_transformed(input_value=14)\nPASS: transform_data_transformed(input_value=29)\nPASS: transform_data_transformed(input_value=32)\nPASS: transform_data_transformed(input_value=2)\nPASS: transform_data_transformed(input_value=33)\nPASS: transform_data_transformed(input_value=21)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=7.358504788901677)\nPASS: circle_area_diff_transformed(r=17.162915148748073)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=1.7594539361242891)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=9.59581114072887)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=9.679742393092015)\nPASS: circle_area_diff_transformed(r=1.4181790379998717e-57)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=8.211810233432813e-92)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=6.426354267672628)\nPASS: circle_area_diff_transformed(r=4.2712571900726735)\nPASS: circle_area_diff_transformed(r=18.667212189673794)\nPASS: circle_area_diff_transformed(r=6.982715748176439)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=5, b=1, c=1)\nPASS: triangle_checker_transformed(a=5, b=14, c=9)\nPASS: triangle_checker_transformed(a=5, b=3, c=18)\nPASS: triangle_checker_transformed(a=1, b=5, c=15)\nPASS: triangle_checker_transformed(a=11, b=13, c=4)\nPASS: triangle_checker_transformed(a=17, b=9, c=10)\nPASS: triangle_checker_transformed(a=12, b=19, c=15)\nPASS: triangle_checker_transformed(a=2, b=8, c=13)\nPASS: triangle_checker_transformed(a=5, b=6, c=13)\nPASS: triangle_checker_transformed(a=18, b=17, c=6)\nPASS: triangle_checker_transformed(a=17, b=17, c=6)\nPASS: triangle_checker_transformed(a=17, b=17, c=17)\nPASS: triangle_checker_transformed(a=13, b=1, c=17)\nPASS: triangle_checker_transformed(a=13, b=1, c=13)\nPASS: triangle_checker_transformed(a=13, b=13, c=13)\nPASS: triangle_checker_transformed(a=13, b=7, c=16)\nPASS: triangle_checker_transformed(a=13, b=13, c=16)\nPASS: triangle_checker_transformed(a=13, b=16, c=16)\nPASS: triangle_checker_transformed(a=3, b=17, c=7)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=52.854323370054566)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=86.1121913976516)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=80.90185056375223)\nPASS: temperature_offset_transformed(c=98.88867894379116)\nPASS: temperature_offset_transformed(c=1.192092896e-07)\nPASS: temperature_offset_transformed(c=3.0598150788804253e-58)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=90.67237327267057)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=98.06867108993534)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-7, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-7, b=-1, c=-9)\nPASS: quadratic_discriminant_transformed(a=-6, b=3, c=-2)\nPASS: quadratic_discriminant_transformed(a=0, b=2, c=-5)\nPASS: quadratic_discriminant_transformed(a=2, b=7, c=1)\nPASS: quadratic_discriminant_transformed(a=9, b=-3, c=-8)\nPASS: quadratic_discriminant_transformed(a=-4, b=9, c=-9)\nPASS: quadratic_discriminant_transformed(a=-1, b=2, c=-4)\nPASS: quadratic_discriminant_transformed(a=10, b=-6, c=-2)\nPASS: quadratic_discriminant_transformed(a=-5, b=2, c=-3)\nPASS: quadratic_discriminant_transformed(a=-5, b=-3, c=-3)\nPASS: quadratic_discriminant_transformed(a=-5, b=-5, c=-3)\nPASS: quadratic_discriminant_transformed(a=-5, b=-5, c=-5)\nPASS: quadratic_discriminant_transformed(a=5, b=1, c=0)\nPASS: quadratic_discriminant_transformed(a=5, b=5, c=0)\nPASS: quadratic_discriminant_transformed(a=0, b=5, c=0)\nPASS: quadratic_discriminant_transformed(a=6, b=0, c=-4)\nPASS: quadratic_discriminant_transformed(a=6, b=-4, c=-4)\nPASS: quadratic_discriminant_transformed(a=-4, b=-4, c=-4)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-1.1, y=0.0)\nPASS: vector_norm_transformed(x=-1.1, y=-1.1)\nPASS: vector_norm_transformed(x=2.2250738585e-313, y=4.809272846788028)\nPASS: vector_norm_transformed(x=0.3333333333333333, y=-9.999999999999998)\nPASS: vector_norm_transformed(x=6.103515625e-05, y=10.0)\nPASS: vector_norm_transformed(x=4.2120442742701485, y=2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=-1.3299726594073373, y=1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=-0.3333333333333333, y=-1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=-0.3333333333333333, y=2.5310176813956904)\nPASS: vector_norm_transformed(x=1.1, y=-6.103515625e-05)\nPASS: vector_norm_transformed(x=-6.103515625e-05, y=-6.103515625e-05)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=-6.103515625e-05)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=-1.192092896e-07)\nPASS: vector_norm_transformed(x=1.192092896e-07, y=0.99999)\nPASS: vector_norm_transformed(x=0.99999, y=0.99999)\nPASS: vector_norm_transformed(x=-0.0, y=2.220446049250313e-16)\nPASS: vector_norm_transformed(x=2.220446049250313e-16, y=2.220446049250313e-16)\nPASS: vector_norm_transformed(x=-6.508712049423995, y=-5e-324)\nPASS: vector_norm_transformed(x=-6.508712049423995, y=-6.508712049423995)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=9.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=9.0, b=7.166940505043567e-159)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=1.0)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=10.0)\nPASS: hypotenuse_diff_transformed(a=1.0, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=4.817061879724508, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=1.5, b=1e-05)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=1.1, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=1.2587569815627366, b=1.5)\nPASS: hypotenuse_diff_transformed(a=1.2587569815627366, b=1.2587569815627366)\nPASS: hypotenuse_diff_transformed(a=0.5, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=0.5, b=0.5)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=5.070051111716901)\nPASS: hypotenuse_diff_transformed(a=5.070051111716901, b=5.070051111716901)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='2\u00bb\u00cd\uda8b\udd57\uda13\ude18\u00d4\udadb\ude8bw\u008e5')\nPASS: ascii_average_transformed(s='\udb56\udccb\u00af'')\nPASS: ascii_average_transformed(s='\u00f8')\nPASS: ascii_average_transformed(s='\u00b7')\nPASS: ascii_average_transformed(s='\u0013\u00d6\u00b8H\u00a3q\u00a8\uda94\ude44\u00c4T')\nPASS: ascii_average_transformed(s='.\u00cc\ud8d0\udc0b\u00a1E\uda44\udcf7^\u00cd\ud995\udea9\u0093')\nPASS: ascii_average_transformed(s='\u00ab')\nPASS: ascii_average_transformed(s='\ud92f\udf4d')\nPASS: ascii_average_transformed(s='_\u00f7\u009fB\u00c9\u00c5')\nPASS: ascii_average_transformed(s='\u000e\udaaf\udc51\u001c\u7e5cSE`\u001a\u00b6\ud806\ude3d')\nPASS: ascii_average_transformed(s='\u00deC0\u00f4\uda40\udc35\u001b\udabc\udd22\u009b\u0098')\nPASS: ascii_average_transformed(s='\u007fB\u00ba\u008d%3\u00ea\u5c2f\u00e7\u00ca')\nPASS: ascii_average_transformed(s='\u0006\u0007')\nPASS: ascii_average_transformed(s='UO^\udba4\udfd6\u00a9<\u00a7\u0000\u00c4\u0019')\nPASS: ascii_average_transformed(s='\u00eb\u00fa\ud8aa\udcd7\u0092')\nPASS: ascii_average_transformed(s='\u00e1\uda34\udf81_\u00ec\ud9c6\udffb')\nPASS: ascii_average_transformed(s='\u00e0')\nPASS: ascii_average_transformed(s='\ud802\ude9b')\nPASS: ascii_average_transformed(s='none')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[6, 0])\nPASS: list_balance_transformed(nums=[6, 6])\nPASS: list_balance_transformed(nums=[5, 0, 4, 8, 1])\nPASS: list_balance_transformed(nums=[5, 7, 3, 7, 8, 4, 8, 3, 10, 1])\nPASS: list_balance_transformed(nums=[4, 1, 3, 4, 10, 6, 2, 7, 10])\nPASS: list_balance_transformed(nums=[7, 7])\nPASS: list_balance_transformed(nums=[10, 0, 3, 0, 2, 1, 2, 5, 10, 7])\nPASS: list_balance_transformed(nums=[6, 10, 2, 5, 1, 10, 2, 8, 6, 8])\nPASS: list_balance_transformed(nums=[6, 6, 10, 7])\nPASS: list_balance_transformed(nums=[5, 1, 9, 9, 4, 3, 8, 2, 8, 4])\nPASS: list_balance_transformed(nums=[5, 1, 9, 9, 4, 3, 8, 2, 9, 4])\nPASS: list_balance_transformed(nums=[9, 1, 9, 9, 4, 3, 8, 2, 9, 4])\nPASS: list_balance_transformed(nums=[9, 1, 9, 9, 4, 3, 8, 4, 9, 4])\nPASS: list_balance_transformed(nums=[4, 1, 9, 9, 4, 3, 8, 4, 9, 4])\nPASS: list_balance_transformed(nums=[4, 1, 9, 8, 4, 3, 8, 4, 9, 4])\nPASS: list_balance_transformed(nums=[4, 9, 9, 8, 4, 3, 8, 4, 9, 4])\nPASS: list_balance_transformed(nums=[9, 4, 8, 6, 7])\nPASS: list_balance_transformed(nums=[9, 4, 8, 4, 7])\nPASS: list_balance_transformed(nums=[9, 9, 8, 4, 7])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[4])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[7])\nPASS: odd_sum_validator_transformed(lst=[6, 9, 6, 0, 5, 8, 9, 2])\nPASS: odd_sum_validator_transformed(lst=[3, 2, 7, 9, 7, 6, 9, 9, 6, 3])\nPASS: odd_sum_validator_transformed(lst=[5, 2, 10])\nPASS: odd_sum_validator_transformed(lst=[2, 9, 8, 10, 1, 10, 9, 4, 6, 2])\nPASS: odd_sum_validator_transformed(lst=[7, 10, 3])\nPASS: odd_sum_validator_transformed(lst=[1, 3, 3, 3, 3, 4])\nPASS: odd_sum_validator_transformed(lst=[1])\nPASS: odd_sum_validator_transformed(lst=[9, 1, 8, 0, 2, 6, 5, 6, 1, 3])\nPASS: odd_sum_validator_transformed(lst=[9, 1, 8, 9, 2, 6, 5, 6, 1, 3])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 8, 9, 2, 6, 5, 6, 1, 3])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 6, 9, 2, 6, 5, 6, 1, 3])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 6, 3, 2, 6, 5, 6, 1, 3])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 6, 3, 2, 6, 5, 6, 6, 3])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 6, 3, 2, 6, 5, 1, 6, 3])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[7, 5, 2, 9, 4])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u0094\udbe3\udda2\u0091\u00d4\u00ff\u00b4\u0919\u00a0\u00d9V')\nPASS: string_pattern_score_transformed(s='d\u00ec\u001c+h\ud907\udfcb')\nPASS: string_pattern_score_transformed(s='\u00fe')\nPASS: string_pattern_score_transformed(s='\u00e1\u00e5\ud9fe\uded2\u00ec<\\W[')\nPASS: string_pattern_score_transformed(s='c')\nPASS: string_pattern_score_transformed(s='CI\uda4d\udce8'\uda78\ude55\u009d\ud9da\ude14\uda30\ude7d\u00bdZ')\nPASS: string_pattern_score_transformed(s='m')\nPASS: string_pattern_score_transformed(s='\u00d0')\nPASS: string_pattern_score_transformed(s='k\ud886\udeea\ud97f\udd2dm\u00fcv\ud9f5\udea9')\nPASS: string_pattern_score_transformed(s='\u00ff')\nPASS: string_pattern_score_transformed(s='\uda83\ude25b')\nPASS: string_pattern_score_transformed(s='\udb39\udf4b\u000f\u007f')\nPASS: string_pattern_score_transformed(s='\u00ad\u00d8')\nPASS: string_pattern_score_transformed(s='\u00b5\u00da\u008d\u009f\u0089f\u001f')\nPASS: string_pattern_score_transformed(s='\u0012\ud84d\udd8e\u009d\u00ba\u47ed\u001c*\u0007|\u0092')\nPASS: string_pattern_score_transformed(s='0/0')\nPASS: string_pattern_score_transformed(s='\u0090\udbee\ude72')\nPASS: string_pattern_score_transformed(s='\u00a3\u0084')\nPASS: string_pattern_score_transformed(s='else')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[11])\nPASS: sum_until_limit_transformed(nums=[9])\nPASS: sum_until_limit_transformed(nums=[9, 3])\nPASS: sum_until_limit_transformed(nums=[4, 9, 8, 18, 3, 10, 1])\nPASS: sum_until_limit_transformed(nums=[16])\nPASS: sum_until_limit_transformed(nums=[1, 2, 13, 1, 8, 7])\nPASS: sum_until_limit_transformed(nums=[18, 19, 2, 11, 0, 6, 11])\nPASS: sum_until_limit_transformed(nums=[5, 19, 4, 0, 20, 7, 12, 14, 1])\nPASS: sum_until_limit_transformed(nums=[10, 16])\nPASS: sum_until_limit_transformed(nums=[8, 16])\nPASS: sum_until_limit_transformed(nums=[8, 8])\nPASS: sum_until_limit_transformed(nums=[8])\nPASS: sum_until_limit_transformed(nums=[6, 10, 16, 14, 2, 3, 19, 0, 13, 20])\nFAIL: sum_until_limit_transformed(nums=[6, 10, 16, 14, 2, 3, 2, 0, 13, 20])\nPASS: sum_until_limit_transformed(nums=[6, 10, 16, 14, 2, 3, 2, 14, 13, 20])\nPASS: sum_until_limit_transformed(nums=[6, 16, 16, 14, 2, 3, 2, 14, 13, 20])\nFAIL: sum_until_limit_transformed(nums=[6, 16, 14, 14, 2, 3, 2, 14, 13, 20])\nFAIL: sum_until_limit_transformed(nums=[6, 16, 14, 14, 2, 3, 2, 14, 14, 20])\nFAIL: sum_until_limit_transformed(nums=[6, 16, 14, 14, 14, 3, 2, 14, 14, 20])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[16])\nPASS: count_divisibles_transformed(nums=[20])\nPASS: count_divisibles_transformed(nums=[19, 10, 1, 5, 10])\nPASS: count_divisibles_transformed(nums=[16, 20])\nPASS: count_divisibles_transformed(nums=[14, 14, 4, 3, 0])\nPASS: count_divisibles_transformed(nums=[18])\nPASS: count_divisibles_transformed(nums=[5, 19, 3])\nPASS: count_divisibles_transformed(nums=[13, 9, 13, 20, 2, 19])\nPASS: count_divisibles_transformed(nums=[6, 11, 8, 18, 15, 12, 11])\nPASS: count_divisibles_transformed(nums=[14])\nPASS: count_divisibles_transformed(nums=[12, 4])\nPASS: count_divisibles_transformed(nums=[12, 12])\nPASS: count_divisibles_transformed(nums=[12])\nPASS: count_divisibles_transformed(nums=[9])\nPASS: count_divisibles_transformed(nums=[14, 3])\nPASS: count_divisibles_transformed(nums=[3, 3])\nPASS: count_divisibles_transformed(nums=[16, 7, 0])\nPASS: count_divisibles_transformed(nums=[0, 7, 0])\nPASS: count_divisibles_transformed(nums=[7, 7, 0])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[5])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[10, 7, 0, 9, 7, 1, 9, 7, 3, 5])\nPASS: index_weighted_sum_transformed(lst=[4])\nPASS: index_weighted_sum_transformed(lst=[0, 4, 2, 7, 7, 7, 8])\nPASS: index_weighted_sum_transformed(lst=[7, 8, 7, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 1, 0, 5])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[1, 3, 3, 6])\nPASS: index_weighted_sum_transformed(lst=[10, 4, 4, 0, 9, 3, 8, 10, 4, 1])\nPASS: index_weighted_sum_transformed(lst=[10, 4, 4, 0, 9, 3, 3, 10, 4, 1])\nPASS: index_weighted_sum_transformed(lst=[9, 4, 4, 0, 9, 3, 3, 10, 4, 1])\nPASS: index_weighted_sum_transformed(lst=[9, 4, 4, 0, 9, 3, 3, 10, 10, 1])\nPASS: index_weighted_sum_transformed(lst=[9, 4, 4, 0, 9, 3, 3, 10, 3, 1])\nPASS: index_weighted_sum_transformed(lst=[0, 4, 4, 0, 9, 3, 3, 10, 3, 1])\nPASS: index_weighted_sum_transformed(lst=[3, 4, 4, 0, 9, 3, 3, 10, 3, 1])\nPASS: index_weighted_sum_transformed(lst=[1])\nPASS: index_weighted_sum_transformed(lst=[10, 7])\nPASS: index_weighted_sum_transformed(lst=[10, 10])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=6)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00ba@\u00bc\u00f5\u00a3')\nPASS: character_counter_transformed(text='\u00bd\u0017\u00b6\f\u000b\u001e\ud863\udee9\u00cd')\nPASS: character_counter_transformed(text='\u00b61\u00fd')\nPASS: character_counter_transformed(text='\u00b0\u00d6\u0086\u00fd\u00c7')\nPASS: character_counter_transformed(text='\u00a3M\u00d9')\nPASS: character_counter_transformed(text='\u001f\uda34\udda5\u00ea\u0087\udbe2\ude8e\u00cc\"')\nPASS: character_counter_transformed(text='\ud85c\udf29\uda42\udcdb\u00f84\u0096\uda2a\uddac8\u00b8\u0090\u00e5')\nPASS: character_counter_transformed(text='\u00a5\ud951\udd5cJ\u00e8\b\u00bbN\u0010\uda0b\udff4a')\nPASS: character_counter_transformed(text='\u00f3W\u00fb$\udb66\udf75\ud947\udd7e{'\u00ab\u009d')\nPASS: character_counter_transformed(text='\uda8c\udc0c\u00b1\u00cb')\nPASS: character_counter_transformed(text='\u0006\udb90\udf24\ud8f8\ude07\u00f3\ud91c\udf08\u00f7#\"')\nPASS: character_counter_transformed(text='>\u0005\u0000V\ud941\udd30')\nPASS: character_counter_transformed(text='\u0088\u00d6X\f\u00efQ\udb98\udfe5V\u0007\u0083')\nPASS: character_counter_transformed(text='nil')\nPASS: character_counter_transformed(text='Q')\nPASS: character_counter_transformed(text='\ud9cb\udd52F\u00a3\u0095\u009c\u00b5L\u0093#\u008f')\nPASS: character_counter_transformed(text='F')\nPASS: character_counter_transformed(text='Q\u00c8\u00d3\u00aa{\u0094\u0012\u000e')\nPASS: character_counter_transformed(text='cp\u00d4F\ud832\ude13')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[72])\nPASS: rolling_maximum_transformed(values=[72, 18])\nPASS: rolling_maximum_transformed(values=[55, 95, 92, 18])\nPASS: rolling_maximum_transformed(values=[38, 32, 63, 4, 9, 89])\nPASS: rolling_maximum_transformed(values=[54, 16])\nPASS: rolling_maximum_transformed(values=[63, 38, 81, 55, 71, 32])\nPASS: rolling_maximum_transformed(values=[86, 47, 53, 53])\nPASS: rolling_maximum_transformed(values=[60])\nPASS: rolling_maximum_transformed(values=[35, 14, 30, 50, 68, 16, 78, 29, 37, 94])\nPASS: rolling_maximum_transformed(values=[24, 47, 39, 89, 70, 27])\nPASS: rolling_maximum_transformed(values=[24, 47, 39, 70, 70, 27])\nPASS: rolling_maximum_transformed(values=[24, 47, 39, 70, 70, 24])\nPASS: rolling_maximum_transformed(values=[24, 47, 70, 70, 70, 24])\nPASS: rolling_maximum_transformed(values=[47, 47, 70, 70, 70, 24])\nPASS: rolling_maximum_transformed(values=[47, 47, 70, 70, 24, 24])\nPASS: rolling_maximum_transformed(values=[47, 47])\nPASS: rolling_maximum_transformed(values=[25, 2, 49, 1, 26, 27, 73, 8])\nPASS: rolling_maximum_transformed(values=[25, 2, 49, 73, 26, 27, 73, 8])\nPASS: rolling_maximum_transformed(values=[25, 2, 49, 73, 26, 27, 49, 8])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_21": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=91)\nPASS: process_data_transformed(x=17)\nPASS: process_data_transformed(x=27)\nPASS: process_data_transformed(x=73)\nPASS: process_data_transformed(x=92)\nPASS: process_data_transformed(x=52)\nPASS: process_data_transformed(x=41)\nPASS: process_data_transformed(x=94)\nPASS: process_data_transformed(x=43)\nPASS: process_data_transformed(x=88)\nPASS: process_data_transformed(x=48)\nPASS: process_data_transformed(x=87)\nPASS: process_data_transformed(x=13)\nPASS: process_data_transformed(x=89)\nPASS: process_data_transformed(x=64)\nPASS: process_data_transformed(x=95)\nPASS: process_data_transformed(x=42)\nPASS: process_data_transformed(x=100)\nPASS: process_data_transformed(x=15)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=87.11003829024271)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=48.45743508397772)\nPASS: convert_temperature_transformed(c=10.246988908120638)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=13.235510963886002)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=35.661752929155924)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=90.48845504575127, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=90.48845504575127, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=123.77341455832445, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=0.3333333333333333)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=6.103515625e-05, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.7653070370343058)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-4.304508481217658e-254, imag=0.0)\nPASS: process_complex_number_transformed(real=-4.304508481217658e-254, imag=-1e-05)\nPASS: process_complex_number_transformed(real=-19.999999999999996, imag=-18.97102420589541)\nPASS: process_complex_number_transformed(real=2.00001, imag=-1e-05)\nPASS: process_complex_number_transformed(real=5.607476616184229, imag=-6.95444947271821)\nPASS: process_complex_number_transformed(real=1e-05, imag=-19.999999999999996)\nPASS: process_complex_number_transformed(real=1.9, imag=19.302435534732673)\nPASS: process_complex_number_transformed(real=-5.960464477539063e-08, imag=2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=0.3333333333333333, imag=-3.359767671523974e-50)\nPASS: process_complex_number_transformed(real=-1.192092896e-07, imag=-6.103515625e-05)\nPASS: process_complex_number_transformed(real=-1.192092896e-07, imag=-1.192092896e-07)\nPASS: process_complex_number_transformed(real=9.398072965304497, imag=19.999999999999996)\nPASS: process_complex_number_transformed(real=9.398072965304497, imag=9.398072965304497)\nPASS: process_complex_number_transformed(real=1.192092896e-07, imag=1.1)\nPASS: process_complex_number_transformed(real=1.1, imag=1.1)\nPASS: process_complex_number_transformed(real=2.00001, imag=-1.192092896e-07)\nPASS: process_complex_number_transformed(real=2.00001, imag=2.00001)\nPASS: process_complex_number_transformed(real=0.0, imag=-0.99999)\nPASS: process_complex_number_transformed(real=1.401298464324817e-45, imag=-2.225073858507203e-309)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=61)\nPASS: transform_data_transformed(input_value=43)\nPASS: transform_data_transformed(input_value=56)\nPASS: transform_data_transformed(input_value=2)\nPASS: transform_data_transformed(input_value=22)\nPASS: transform_data_transformed(input_value=80)\nPASS: transform_data_transformed(input_value=30)\nPASS: transform_data_transformed(input_value=99)\nPASS: transform_data_transformed(input_value=65)\nPASS: transform_data_transformed(input_value=83)\nPASS: transform_data_transformed(input_value=37)\nPASS: transform_data_transformed(input_value=45)\nPASS: transform_data_transformed(input_value=87)\nPASS: transform_data_transformed(input_value=21)\nPASS: transform_data_transformed(input_value=47)\nPASS: transform_data_transformed(input_value=78)\nPASS: transform_data_transformed(input_value=97)\nPASS: transform_data_transformed(input_value=11)\nPASS: transform_data_transformed(input_value=16)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=0.9974165254356351)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=16.43936616777449)\nPASS: circle_area_diff_transformed(r=8.789173701095223)\nPASS: circle_area_diff_transformed(r=19.29124136941866)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=8.982675903587818)\nPASS: circle_area_diff_transformed(r=1.8553261806771106)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=7.391468543023599)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=11.46839181460085)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=14.649239423227918)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=10, b=1, c=1)\nPASS: triangle_checker_transformed(a=10, b=13, c=5)\nPASS: triangle_checker_transformed(a=17, b=2, c=7)\nPASS: triangle_checker_transformed(a=8, b=17, c=14)\nPASS: triangle_checker_transformed(a=19, b=4, c=13)\nPASS: triangle_checker_transformed(a=6, b=14, c=18)\nPASS: triangle_checker_transformed(a=8, b=1, c=2)\nPASS: triangle_checker_transformed(a=8, b=11, c=17)\nPASS: triangle_checker_transformed(a=1, b=16, c=11)\nPASS: triangle_checker_transformed(a=5, b=3, c=14)\nPASS: triangle_checker_transformed(a=5, b=3, c=5)\nPASS: triangle_checker_transformed(a=5, b=3, c=3)\nPASS: triangle_checker_transformed(a=3, b=3, c=3)\nPASS: triangle_checker_transformed(a=6, b=17, c=1)\nPASS: triangle_checker_transformed(a=6, b=17, c=6)\nPASS: triangle_checker_transformed(a=6, b=6, c=6)\nPASS: triangle_checker_transformed(a=2, b=1, c=13)\nPASS: triangle_checker_transformed(a=2, b=1, c=1)\nPASS: triangle_checker_transformed(a=2, b=2, c=1)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=2.9804337931797554e-145)\nPASS: temperature_offset_transformed(c=17.827474585862227)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=92.51104551064743)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=7.844968619354854e-19)\nPASS: temperature_offset_transformed(c=82.64620835216756)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=25.51842864369623)\nPASS: temperature_offset_transformed(c=2.1268000330886075e-232)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=45.020239957879085)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=10, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=10, b=4, c=0)\nPASS: quadratic_discriminant_transformed(a=-1, b=9, c=1)\nPASS: quadratic_discriminant_transformed(a=-3, b=5, c=9)\nPASS: quadratic_discriminant_transformed(a=0, b=-5, c=-3)\nPASS: quadratic_discriminant_transformed(a=6, b=-3, c=-4)\nPASS: quadratic_discriminant_transformed(a=-7, b=-2, c=9)\nPASS: quadratic_discriminant_transformed(a=-4, b=-1, c=-10)\nPASS: quadratic_discriminant_transformed(a=-10, b=8, c=0)\nPASS: quadratic_discriminant_transformed(a=-1, b=-8, c=3)\nPASS: quadratic_discriminant_transformed(a=3, b=-8, c=3)\nPASS: quadratic_discriminant_transformed(a=3, b=3, c=3)\nPASS: quadratic_discriminant_transformed(a=7, b=-5, c=-5)\nPASS: quadratic_discriminant_transformed(a=7, b=-5, c=7)\nPASS: quadratic_discriminant_transformed(a=7, b=7, c=7)\nPASS: quadratic_discriminant_transformed(a=-10, b=-2, c=2)\nPASS: quadratic_discriminant_transformed(a=-10, b=-2, c=-2)\nPASS: quadratic_discriminant_transformed(a=-2, b=-2, c=-2)\nPASS: quadratic_discriminant_transformed(a=-1, b=6, c=-4)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-1.401298464324817e-45, y=0.0)\nPASS: vector_norm_transformed(x=-1.401298464324817e-45, y=2.220446049250313e-16)\nPASS: vector_norm_transformed(x=1.175494351e-38, y=-2.220446049250313e-16)\nPASS: vector_norm_transformed(x=-6.103515625e-05, y=-4.2384214629347604e-99)\nPASS: vector_norm_transformed(x=3.234181874981708, y=1.9)\nPASS: vector_norm_transformed(x=-2.2250738585072014e-308, y=-0.0)\nPASS: vector_norm_transformed(x=-1e-05, y=6.103515625e-05)\nPASS: vector_norm_transformed(x=5e-324, y=9.999999999999998)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=-6.103515625e-05)\nPASS: vector_norm_transformed(x=-5.9790317960492025, y=-1.5)\nPASS: vector_norm_transformed(x=-5.9790317960492025, y=-5.9790317960492025)\nPASS: vector_norm_transformed(x=3.9791837604150366, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=5.960464477539063e-08, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-2.5808940416639006, y=5e-324)\nPASS: vector_norm_transformed(x=-2.5808940416639006, y=-2.5808940416639006)\nPASS: vector_norm_transformed(x=4.282146317705083, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-2.2250738585072014e-308, y=0.3333333333333333)\nPASS: vector_norm_transformed(x=-2.2250738585072014e-308, y=-2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=-1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=9.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=9.0, b=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=8.775567903218244)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=1e-05)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=9.133981969016121)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=1.5)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=6.811971247370626)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=1.1)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=0.0, b=2.7010622343617046)\nPASS: hypotenuse_diff_transformed(a=2.7010622343617046, b=2.7010622343617046)\nPASS: hypotenuse_diff_transformed(a=5.441143263885438, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=6.43378822911859, b=7.298786020944395)\nPASS: hypotenuse_diff_transformed(a=7.298786020944395, b=7.298786020944395)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=0.5)\nPASS: hypotenuse_diff_transformed(a=0.5, b=0.5)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u001e')\nPASS: ascii_average_transformed(s='|v\u00e4u\u00c1\u0000\u00d7J.h')\nPASS: ascii_average_transformed(s='\u00e7\u00d0X\u00ed\u0084j\ud9dc\uded8?\uda84\udfb2\ud841\udd3f')\nPASS: ascii_average_transformed(s='\u0086\u00dd\u0085')\nPASS: ascii_average_transformed(s='A\u0015\u00bd\u00ee\u009e\ud9ff\ude9bZ+\u0000\u0093')\nPASS: ascii_average_transformed(s='\u001a9\u00e2\u0d0b\u000f')\nPASS: ascii_average_transformed(s='\u00ca\uda69\udfab\u007f;\u0002\ud904\udc0f\u00f2\u0081\u00d0\u001e')\nPASS: ascii_average_transformed(s='\u00d7\u6537\udbb5\udf58\u0086\ud8e7\udcbaP\u007f\udbaa\uddd2 \u0016')\nPASS: ascii_average_transformed(s='\u0088\ud95c\udd50Q')\nPASS: ascii_average_transformed(s='\u00b7 \u001f4\u00cak\u0016\u001a\udafe\udcbe\u001a')\nPASS: ascii_average_transformed(s='\u00f8\u0001\\\ud8e7\udd7fe\u0012\u00ef\u0007C\udb7c\udf2e')\nPASS: ascii_average_transformed(s='\u008a\u0096+\ud8ec\udded\u00c46')\nPASS: ascii_average_transformed(s='\udbbe\udfcb\u0001P\uaace\u00de\udb6c\ude82\u00cc\u00fd')\nPASS: ascii_average_transformed(s='#\u00bd')\nPASS: ascii_average_transformed(s='\udab8\ude4fA\ue881%\udb41\udf40\u00bd\u000fM')\nPASS: ascii_average_transformed(s='\u00df\u0098\udbdd\ude6f\u0010\u00f2\u00df\u00d7\uda02\udc2cH\udb48\udca1')\nPASS: ascii_average_transformed(s='\uda17\ude58\u001c8=\u00b9\u0015\u00b7\u00b3\u00ae\u00f6')\nPASS: ascii_average_transformed(s='\ud8f3\udd14')\nPASS: ascii_average_transformed(s='\u008a\u00ec')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[10, 0])\nPASS: list_balance_transformed(nums=[10, 10, 4])\nPASS: list_balance_transformed(nums=[5, 8, 9, 7, 9, 0, 6, 2, 10, 8])\nPASS: list_balance_transformed(nums=[8, 9, 4, 5, 7, 2, 1, 3, 8, 6])\nPASS: list_balance_transformed(nums=[1, 1, 2, 2])\nPASS: list_balance_transformed(nums=[3, 9, 0, 1, 4, 5, 8, 10, 1, 10])\nPASS: list_balance_transformed(nums=[10, 9, 7, 8])\nPASS: list_balance_transformed(nums=[4, 2, 6, 6, 8, 3, 8, 8])\nPASS: list_balance_transformed(nums=[10, 0, 6, 7, 6, 2, 2])\nPASS: list_balance_transformed(nums=[0, 6, 1])\nPASS: list_balance_transformed(nums=[0, 6])\nPASS: list_balance_transformed(nums=[10, 5, 8, 7, 7, 10, 10, 0, 9, 7])\nPASS: list_balance_transformed(nums=[10, 5, 8, 10, 7, 10, 10, 0, 9, 7])\nPASS: list_balance_transformed(nums=[10, 5, 8, 10, 7, 10, 10, 0, 9, 0])\nPASS: list_balance_transformed(nums=[10, 5, 8, 10, 7, 10])\nPASS: list_balance_transformed(nums=[10, 5, 5, 10, 7, 10])\nPASS: list_balance_transformed(nums=[10, 5, 10, 10, 7, 10])\nPASS: list_balance_transformed(nums=[10, 5, 10, 10, 7, 5])\nPASS: list_balance_transformed(nums=[5, 7, 4, 9, 4, 6])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[4])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[1, 2, 5, 2, 4, 6])\nPASS: odd_sum_validator_transformed(lst=[2, 4, 7, 8, 7, 0, 9])\nPASS: odd_sum_validator_transformed(lst=[0, 9, 7, 5, 8, 0, 0, 9, 3, 4])\nPASS: odd_sum_validator_transformed(lst=[1])\nPASS: odd_sum_validator_transformed(lst=[6, 4, 7, 8, 1, 2, 8, 6, 2, 3])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[4, 0, 9, 9, 3, 2, 4])\nPASS: odd_sum_validator_transformed(lst=[9, 8, 2, 4, 7, 2, 4, 4, 9, 5])\nPASS: odd_sum_validator_transformed(lst=[9, 8, 2, 4, 2, 2, 4, 4, 9, 5])\nPASS: odd_sum_validator_transformed(lst=[9, 8, 2, 4, 2, 2, 4, 4, 4, 5])\nPASS: odd_sum_validator_transformed(lst=[9, 8, 2, 4, 4, 2, 4, 4, 4, 5])\nPASS: odd_sum_validator_transformed(lst=[9, 8, 2, 4, 4, 2, 2, 4, 4, 5])\nPASS: odd_sum_validator_transformed(lst=[9, 8, 2, 4, 4, 2, 2, 2, 4, 5])\nPASS: odd_sum_validator_transformed(lst=[9, 8, 2, 4, 4, 2, 4, 2, 4, 5])\nPASS: odd_sum_validator_transformed(lst=[0, 2, 4, 1, 8, 0])\nPASS: odd_sum_validator_transformed(lst=[0, 2, 4, 8, 8, 0])\nPASS: odd_sum_validator_transformed(lst=[0, 2, 4, 8, 8, 2])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\ud9c2\udcdd\u8e1d~\u00b9E\u00b4\u000f6\u00d4.')\nPASS: string_pattern_score_transformed(s='\u00b8d\u00d6\u0016a ')\nPASS: string_pattern_score_transformed(s='\u00b5\\')\nPASS: string_pattern_score_transformed(s='\u0096\udae4\udeb6H?+')\nPASS: string_pattern_score_transformed(s=')p\uda6e\udd20\u00c3x\u0087\u0015')\nPASS: string_pattern_score_transformed(s='\u00fd\ud92d\udc39\u00df')\nPASS: string_pattern_score_transformed(s='\u00cd\u0084{\u00e2\u00c7\ud8ad\udeb2\u001f\u00f2\ud85e\udef6\u0081')\nPASS: string_pattern_score_transformed(s='\u0013\u00bd')\nPASS: string_pattern_score_transformed(s='.?')\nPASS: string_pattern_score_transformed(s='y\udb93\udc8a\u001f\u00bd\ud9e2\udfdb\u001e\ufbd6\udaef\udca6\u00d6\u00cf')\nPASS: string_pattern_score_transformed(s='p\u00982')\nPASS: string_pattern_score_transformed(s='\u00d1')\nPASS: string_pattern_score_transformed(s='p')\nPASS: string_pattern_score_transformed(s='\u0088\udbdf\udcd2\uda70\udfba')\nPASS: string_pattern_score_transformed(s='\u00aeE\u0000\u00c9\u0087\u0094\uda0d\udfe2R\u00e6\udbaa\udc8b')\nPASS: string_pattern_score_transformed(s='\u00e9\u00ebyIj(\u00e8?\u00e0\u00cd')\nPASS: string_pattern_score_transformed(s='\u00e6')\nPASS: string_pattern_score_transformed(s='P')\nPASS: string_pattern_score_transformed(s='|0')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[9])\nPASS: sum_until_limit_transformed(nums=[6])\nPASS: sum_until_limit_transformed(nums=[14, 8, 0, 8, 11])\nPASS: sum_until_limit_transformed(nums=[9, 18])\nPASS: sum_until_limit_transformed(nums=[8, 3, 6, 19, 15])\nPASS: sum_until_limit_transformed(nums=[1, 3])\nPASS: sum_until_limit_transformed(nums=[16, 17, 0])\nPASS: sum_until_limit_transformed(nums=[12, 8, 7])\nPASS: sum_until_limit_transformed(nums=[10, 11, 10, 7])\nPASS: sum_until_limit_transformed(nums=[3, 11])\nPASS: sum_until_limit_transformed(nums=[20, 4, 3])\nPASS: sum_until_limit_transformed(nums=[20, 20, 3])\nPASS: sum_until_limit_transformed(nums=[20, 3, 3])\nPASS: sum_until_limit_transformed(nums=[3, 3, 3])\nPASS: sum_until_limit_transformed(nums=[3, 3])\nPASS: sum_until_limit_transformed(nums=[13, 20, 10, 17, 16, 16, 13, 19])\nPASS: sum_until_limit_transformed(nums=[13, 20, 10, 17, 16, 16, 13, 16])\nPASS: sum_until_limit_transformed(nums=[13, 20, 10, 17, 16, 16, 13, 20])\nPASS: sum_until_limit_transformed(nums=[13, 20, 10, 16, 16, 16, 13, 20])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[19])\nPASS: count_divisibles_transformed(nums=[19, 5])\nPASS: count_divisibles_transformed(nums=[0, 19, 6, 17, 4, 20, 3, 6, 0, 0])\nPASS: count_divisibles_transformed(nums=[10, 8, 4, 14])\nPASS: count_divisibles_transformed(nums=[3, 0])\nPASS: count_divisibles_transformed(nums=[16, 7, 6, 10, 15, 9, 11])\nPASS: count_divisibles_transformed(nums=[14, 11, 4, 6, 11])\nPASS: count_divisibles_transformed(nums=[17, 4])\nPASS: count_divisibles_transformed(nums=[10])\nPASS: count_divisibles_transformed(nums=[17])\nPASS: count_divisibles_transformed(nums=[7, 7, 16])\nPASS: count_divisibles_transformed(nums=[7, 7, 7])\nPASS: count_divisibles_transformed(nums=[2])\nPASS: count_divisibles_transformed(nums=[3])\nPASS: count_divisibles_transformed(nums=[16])\nPASS: count_divisibles_transformed(nums=[10, 5, 19, 10, 11, 11])\nPASS: count_divisibles_transformed(nums=[10, 5, 19, 11, 11, 11])\nPASS: count_divisibles_transformed(nums=[10, 11, 19, 11, 11, 11])\nPASS: count_divisibles_transformed(nums=[11, 11, 19, 11, 11, 11])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[9])\nPASS: index_weighted_sum_transformed(lst=[6])\nPASS: index_weighted_sum_transformed(lst=[6, 1, 10])\nPASS: index_weighted_sum_transformed(lst=[4, 3, 8, 10, 6, 8, 8, 2, 1])\nPASS: index_weighted_sum_transformed(lst=[1, 1])\nPASS: index_weighted_sum_transformed(lst=[1])\nPASS: index_weighted_sum_transformed(lst=[3, 0, 4, 8])\nPASS: index_weighted_sum_transformed(lst=[10, 2, 2, 9, 1, 4, 9, 1])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[3])\nPASS: index_weighted_sum_transformed(lst=[9, 4, 9, 1, 4, 10, 7, 9, 4, 4])\nPASS: index_weighted_sum_transformed(lst=[9, 4, 9, 1, 4, 4, 7, 9, 4, 4])\nPASS: index_weighted_sum_transformed(lst=[9, 4, 9, 4, 4, 4, 7, 9, 4, 4])\nPASS: index_weighted_sum_transformed(lst=[9, 4, 4, 4, 4, 4, 7, 9, 4, 4])\nPASS: index_weighted_sum_transformed(lst=[9, 4, 7, 4, 4, 4, 7, 9, 4, 4])\nPASS: index_weighted_sum_transformed(lst=[9, 4, 7, 4, 4, 9, 7, 9, 4, 4])\nPASS: index_weighted_sum_transformed(lst=[9, 4, 7, 4, 4, 9, 7, 9, 4, 7])\nPASS: index_weighted_sum_transformed(lst=[3, 0])\nPASS: index_weighted_sum_transformed(lst=[3, 3])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=7)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00ba')\nPASS: character_counter_transformed(text='\u0003\u0091\u0005\u008e\u001eP2\u00f6\u00a4\u00af')\nPASS: character_counter_transformed(text='t\u00ad\u00d4Kd\udb37\udc05.')\nPASS: character_counter_transformed(text='\u00c6\udad4\udeb2\u00dby\u00f1\u0015')\nPASS: character_counter_transformed(text='\u00db\u00c5\u0019\u001f\u001c\u00c6')\nPASS: character_counter_transformed(text='\ud965\udde4\u0015\u0002\u00edD\u00ff\u0014\u00e0f\u8a50')\nPASS: character_counter_transformed(text='\u00f2\ud835\udee6\udbe7\udcbfw\u00be\u00af\ud87c\udda8\udb0a\udd5a\u00aau')\nPASS: character_counter_transformed(text='\u00c2O\n<')\nPASS: character_counter_transformed(text='\ud9d5\udde6\u00ad\u00d1a(>\u0093\udb2c\udcfchg')\nPASS: character_counter_transformed(text='\u0098\u00eb\u00ac\u00ee')\nPASS: character_counter_transformed(text='\u00e3\u0016uZ')\nPASS: character_counter_transformed(text='\udbe6\udc07S')\nPASS: character_counter_transformed(text='None')\nPASS: character_counter_transformed(text='\u0090^\u0013\u00ef\ud971\udf9dO\u00a3]Ah')\nPASS: character_counter_transformed(text='8')\nPASS: character_counter_transformed(text='\b\u00dfB]\u00de\u00bb\u00d6')\nPASS: character_counter_transformed(text='\u0080{p\udbf5\udc70a\u00c8\ud86a\udd65@')\nPASS: character_counter_transformed(text='\u008dg\u0093\u00ca\u00e9')\nPASS: character_counter_transformed(text='x')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[65])\nPASS: rolling_maximum_transformed(values=[38])\nPASS: rolling_maximum_transformed(values=[13, 6, 34, 78, 11])\nPASS: rolling_maximum_transformed(values=[92, 43])\nPASS: rolling_maximum_transformed(values=[33, 45, 12, 26, 70, 16, 15, 3])\nPASS: rolling_maximum_transformed(values=[13])\nPASS: rolling_maximum_transformed(values=[98, 56, 74])\nPASS: rolling_maximum_transformed(values=[72, 20])\nPASS: rolling_maximum_transformed(values=[16, 54, 52, 51, 27, 62, 90, 88, 38, 65])\nPASS: rolling_maximum_transformed(values=[7, 82, 15, 75, 11, 85, 28, 97, 11, 85])\nPASS: rolling_maximum_transformed(values=[7, 82, 15, 75, 11, 85, 28, 97, 11, 11])\nPASS: rolling_maximum_transformed(values=[7, 82, 15, 75, 11, 11, 28, 97, 11, 11])\nPASS: rolling_maximum_transformed(values=[7, 11, 15, 75, 11, 11, 28, 97, 11, 11])\nPASS: rolling_maximum_transformed(values=[7, 11, 15, 75, 11, 15, 28, 97, 11, 11])\nPASS: rolling_maximum_transformed(values=[7, 11, 15, 75, 11, 15, 11, 97, 11, 11])\nPASS: rolling_maximum_transformed(values=[7, 11, 15, 75, 11, 15, 11])\nPASS: rolling_maximum_transformed(values=[62, 25, 12, 43])\nPASS: rolling_maximum_transformed(values=[25, 25, 12, 43])\nPASS: rolling_maximum_transformed(values=[12, 25, 12, 43])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_22": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=52)\nPASS: process_data_transformed(x=23)\nPASS: process_data_transformed(x=5)\nPASS: process_data_transformed(x=80)\nPASS: process_data_transformed(x=34)\nPASS: process_data_transformed(x=74)\nPASS: process_data_transformed(x=31)\nPASS: process_data_transformed(x=83)\nPASS: process_data_transformed(x=28)\nPASS: process_data_transformed(x=91)\nPASS: process_data_transformed(x=50)\nPASS: process_data_transformed(x=68)\nPASS: process_data_transformed(x=77)\nPASS: process_data_transformed(x=2)\nPASS: process_data_transformed(x=60)\nPASS: process_data_transformed(x=10)\nPASS: process_data_transformed(x=57)\nPASS: process_data_transformed(x=6)\nPASS: process_data_transformed(x=100)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=24.214632363129514)\nPASS: convert_temperature_transformed(c=0.99999)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=24.99751852184429)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=14.86204212782947)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=15.05085587138986)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=2.2195657811035277e-151)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=79.67779005855147)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=6.103515625e-05, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=1.2799137413085433e-216, discount_rate=0.3333333333333333)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.32082407990840905)\nPASS: calculate_discount_transformed(price=1.5, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.00001, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=127.24459816975669, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=5.653459364919703e-196, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=4.689444771265864e-146, discount_rate=0.3333333333333333)\nPASS: calculate_discount_transformed(price=4.689444771265864e-146, discount_rate=4.689444771265864e-146)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=5e-324)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-1.401298464324817e-45, imag=0.0)\nPASS: process_complex_number_transformed(real=-1.401298464324817e-45, imag=-2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=-2.225073858507203e-309, imag=1.175494351e-38)\nPASS: process_complex_number_transformed(real=-0.3333333333333333, imag=-2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=-16.15498158118756, imag=7.757848277653082)\nPASS: process_complex_number_transformed(real=-12.88641792601009, imag=5e-324)\nPASS: process_complex_number_transformed(real=19.0, imag=-1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=5e-324, imag=-1.192092896e-07)\nPASS: process_complex_number_transformed(real=-1.175494351e-38, imag=9.92240103737334e-147)\nPASS: process_complex_number_transformed(real=9.92240103737334e-147, imag=9.92240103737334e-147)\nPASS: process_complex_number_transformed(real=-0.99999, imag=2.225073858507e-311)\nPASS: process_complex_number_transformed(real=2.225073858507e-311, imag=2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-1.2657173301805807e-209, imag=20.0)\nPASS: process_complex_number_transformed(real=-1.2657173301805807e-209, imag=-1.2657173301805807e-209)\nPASS: process_complex_number_transformed(real=1.2414407060273415e-256, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=-2.2250738585e-313, imag=-1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=-1.401298464324817e-45, imag=-1.401298464324817e-45)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=94)\nPASS: transform_data_transformed(input_value=16)\nPASS: transform_data_transformed(input_value=61)\nPASS: transform_data_transformed(input_value=43)\nPASS: transform_data_transformed(input_value=44)\nPASS: transform_data_transformed(input_value=59)\nPASS: transform_data_transformed(input_value=56)\nPASS: transform_data_transformed(input_value=29)\nPASS: transform_data_transformed(input_value=67)\nPASS: transform_data_transformed(input_value=63)\nPASS: transform_data_transformed(input_value=95)\nPASS: transform_data_transformed(input_value=28)\nPASS: transform_data_transformed(input_value=41)\nPASS: transform_data_transformed(input_value=58)\nPASS: transform_data_transformed(input_value=93)\nPASS: transform_data_transformed(input_value=39)\nPASS: transform_data_transformed(input_value=5)\nPASS: transform_data_transformed(input_value=73)\nPASS: transform_data_transformed(input_value=36)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=1.175494351e-38)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=0.3584324220308011)\nPASS: circle_area_diff_transformed(r=13.750498940299638)\nPASS: circle_area_diff_transformed(r=18.180882590966814)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=0.608123256644464)\nPASS: circle_area_diff_transformed(r=6.714757053682972)\nPASS: circle_area_diff_transformed(r=7.638913201547545)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=5.998674532943285)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=15, b=1, c=1)\nPASS: triangle_checker_transformed(a=15, b=19, c=9)\nPASS: triangle_checker_transformed(a=14, b=19, c=5)\nPASS: triangle_checker_transformed(a=2, b=20, c=18)\nPASS: triangle_checker_transformed(a=3, b=10, c=11)\nPASS: triangle_checker_transformed(a=15, b=17, c=11)\nPASS: triangle_checker_transformed(a=16, b=20, c=1)\nPASS: triangle_checker_transformed(a=4, b=12, c=14)\nPASS: triangle_checker_transformed(a=1, b=19, c=18)\nPASS: triangle_checker_transformed(a=10, b=15, c=13)\nPASS: triangle_checker_transformed(a=10, b=13, c=13)\nPASS: triangle_checker_transformed(a=13, b=13, c=13)\nPASS: triangle_checker_transformed(a=12, b=11, c=4)\nPASS: triangle_checker_transformed(a=12, b=4, c=4)\nPASS: triangle_checker_transformed(a=12, b=12, c=4)\nPASS: triangle_checker_transformed(a=4, b=12, c=4)\nPASS: triangle_checker_transformed(a=4, b=12, c=12)\nPASS: triangle_checker_transformed(a=12, b=12, c=12)\nPASS: triangle_checker_transformed(a=4, b=20, c=3)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=84.0069378346085)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=63.84465423797786)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=1.1144620864417486e-160)\nPASS: temperature_offset_transformed(c=11.519176352143393)\nPASS: temperature_offset_transformed(c=47.842794053757586)\nPASS: temperature_offset_transformed(c=44.2429687207167)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-5, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-5, b=8, c=1)\nPASS: quadratic_discriminant_transformed(a=0, b=-4, c=-5)\nPASS: quadratic_discriminant_transformed(a=-1, b=-8, c=7)\nPASS: quadratic_discriminant_transformed(a=10, b=-1, c=9)\nPASS: quadratic_discriminant_transformed(a=-3, b=2, c=6)\nPASS: quadratic_discriminant_transformed(a=3, b=7, c=-10)\nPASS: quadratic_discriminant_transformed(a=0, b=-5, c=-4)\nPASS: quadratic_discriminant_transformed(a=4, b=-3, c=6)\nPASS: quadratic_discriminant_transformed(a=5, b=6, c=-2)\nPASS: quadratic_discriminant_transformed(a=5, b=6, c=5)\nPASS: quadratic_discriminant_transformed(a=5, b=6, c=6)\nPASS: quadratic_discriminant_transformed(a=6, b=6, c=6)\nPASS: quadratic_discriminant_transformed(a=-4, b=-10, c=5)\nPASS: quadratic_discriminant_transformed(a=-4, b=-10, c=-4)\nPASS: quadratic_discriminant_transformed(a=-4, b=-4, c=-4)\nPASS: quadratic_discriminant_transformed(a=-7, b=-7, c=-9)\nPASS: quadratic_discriminant_transformed(a=-7, b=-7, c=-7)\nPASS: quadratic_discriminant_transformed(a=-3, b=1, c=-4)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-2.5845942718398742, y=0.0)\nPASS: vector_norm_transformed(x=-2.5845942718398742, y=-2.220446049250313e-16)\nPASS: vector_norm_transformed(x=1e-05, y=-1e-05)\nPASS: vector_norm_transformed(x=6.664841362280606e-65, y=-2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=3.6991014326946453e-122, y=-1e-05)\nPASS: vector_norm_transformed(x=0.0, y=0.3333333333333333)\nPASS: vector_norm_transformed(x=1.5, y=1.192092896e-07)\nPASS: vector_norm_transformed(x=0.99999, y=-5.344901500748413)\nPASS: vector_norm_transformed(x=-5.259619847576195, y=-2.225073858507203e-309)\nPASS: vector_norm_transformed(x=1e-05, y=-5.138453841729306)\nPASS: vector_norm_transformed(x=1e-05, y=1e-05)\nPASS: vector_norm_transformed(x=-0.3333333333333333, y=-1.9)\nPASS: vector_norm_transformed(x=-0.3333333333333333, y=-0.3333333333333333)\nPASS: vector_norm_transformed(x=2.220446049250313e-16, y=-1.1)\nPASS: vector_norm_transformed(x=-1.1, y=-1.1)\nPASS: vector_norm_transformed(x=-1.401298464324817e-45, y=1e-05)\nPASS: vector_norm_transformed(x=-5e-324, y=-1.192092896e-07)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=-1.192092896e-07)\nPASS: vector_norm_transformed(x=-1.9, y=-9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.9, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.9, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=7.08353669059182)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=3.6908625672618495e-187)\nPASS: hypotenuse_diff_transformed(a=5.502003628477431, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=0.0, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=1.1)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=1.5)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=2.2250738585072014e-308)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\ud89c\udfeb')\nPASS: ascii_average_transformed(s='\udb1b\uddf6')\nPASS: ascii_average_transformed(s='\ud9e8\udf41\u0083\u0080\u0016\u0088\u0003\udabb\ude83\u00887(')\nPASS: ascii_average_transformed(s='<I\uda42\udcf1')\nPASS: ascii_average_transformed(s='\u00b2\n\ud996\udf23\uda10\ude5evy\ud86a\ude0b]\u0090\u00dc')\nPASS: ascii_average_transformed(s='\u001f\u00ed')\nPASS: ascii_average_transformed(s=']4o\u00f8\u00a3\u00c2U\u9367')\nPASS: ascii_average_transformed(s='\u00f1\udbe6\udc61\udb93\udf29\u009e\u00aa\u00b8')\nPASS: ascii_average_transformed(s='\uda81\udc1d')\nPASS: ascii_average_transformed(s='\u00bdt')\nPASS: ascii_average_transformed(s='\udaf2\uddbe\u00da\u0013<?')\nPASS: ascii_average_transformed(s='\u0097K,\u009a&&\u0089\u00cc(h')\nPASS: ascii_average_transformed(s='COM1')\nPASS: ascii_average_transformed(s='\ud83c\uddfa\ud83c\uddf8')\nPASS: ascii_average_transformed(s='\u0006\u0082\ud909\udf1b\udbf2\udeb1\u00c8s#\u0080')\nPASS: ascii_average_transformed(s='\u0005\bi\u00a5\u00ae\u00dfj\u00bb')\nPASS: ascii_average_transformed(s='\u00d3I\u00a4.\u00d3G')\nPASS: ascii_average_transformed(s='k\u0005')\nPASS: ascii_average_transformed(s='\ud9af\udd7f\f\u00d4\udbac\uddda\u00b7')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[3, 0])\nPASS: list_balance_transformed(nums=[3, 0, 10])\nPASS: list_balance_transformed(nums=[0, 4, 0, 3, 6, 5, 2, 9])\nPASS: list_balance_transformed(nums=[7, 8, 5, 1])\nPASS: list_balance_transformed(nums=[4, 2, 3, 2, 5, 1, 2])\nPASS: list_balance_transformed(nums=[8, 0])\nPASS: list_balance_transformed(nums=[1, 9, 5, 6, 8, 4, 6, 5, 7, 7])\nPASS: list_balance_transformed(nums=[4, 1, 8, 1, 5, 6])\nPASS: list_balance_transformed(nums=[6, 5, 8, 3, 6, 4, 7, 9])\nPASS: list_balance_transformed(nums=[5, 4, 0, 2, 1, 1, 0, 5, 8, 1])\nPASS: list_balance_transformed(nums=[5, 1, 0, 2, 1, 1, 0, 5, 8, 1])\nPASS: list_balance_transformed(nums=[5, 1, 5, 2, 1, 1, 0, 5, 8, 1])\nPASS: list_balance_transformed(nums=[5, 1, 5, 1, 1, 1, 0, 5, 8, 1])\nPASS: list_balance_transformed(nums=[5, 1, 5, 1, 1, 1, 0, 0, 8, 1])\nPASS: list_balance_transformed(nums=[5, 1, 5, 1, 1, 1, 0, 1, 8, 1])\nPASS: list_balance_transformed(nums=[5, 1, 1, 1, 1, 1, 0, 1, 8, 1])\nPASS: list_balance_transformed(nums=[7, 9, 1])\nPASS: list_balance_transformed(nums=[7, 9, 9])\nPASS: list_balance_transformed(nums=[7, 9, 7])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[8, 4])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[0, 1, 5, 4, 1])\nPASS: odd_sum_validator_transformed(lst=[2, 6, 3])\nPASS: odd_sum_validator_transformed(lst=[6, 2, 8, 5, 2, 6])\nPASS: odd_sum_validator_transformed(lst=[1, 4, 8])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[7, 0, 6, 10])\nPASS: odd_sum_validator_transformed(lst=[8, 7, 4, 7])\nPASS: odd_sum_validator_transformed(lst=[8, 7])\nPASS: odd_sum_validator_transformed(lst=[7, 7])\nPASS: odd_sum_validator_transformed(lst=[5, 6, 10])\nPASS: odd_sum_validator_transformed(lst=[10, 6, 10])\nPASS: odd_sum_validator_transformed(lst=[10, 10, 10])\nPASS: odd_sum_validator_transformed(lst=[8, 8, 7, 4, 7, 3, 10, 3, 0, 4])\nPASS: odd_sum_validator_transformed(lst=[8, 8, 7, 4, 8, 3, 10, 3, 0, 4])\nPASS: odd_sum_validator_transformed(lst=[8, 8, 7, 4, 8, 3, 10, 10, 0, 4])\nPASS: odd_sum_validator_transformed(lst=[8, 8, 7, 4, 8, 3, 10, 10, 0, 10])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u00121 ')\nPASS: string_pattern_score_transformed(s='\u0096\ud9d4\udc29\u5dcf\u009a\b\u00c1\u009d\u001a\u001c\"')\nPASS: string_pattern_score_transformed(s='{\u00e4\udb0e\ude0e\u00dd\u00e2')\nPASS: string_pattern_score_transformed(s='\u0016\u00fa\u0003\u0092\u00e2\u00dd')\nPASS: string_pattern_score_transformed(s='e\bi\u00d9\ud946\ude5d\u00d5\u0015\u009a\u00a4\"')\nPASS: string_pattern_score_transformed(s='$U\ud89e\ude1f')\nPASS: string_pattern_score_transformed(s='NaN')\nPASS: string_pattern_score_transformed(s='\ud857\udd5b\u00bf<M')\nPASS: string_pattern_score_transformed(s='\u00d3\u00a8E\u0099')\nPASS: string_pattern_score_transformed(s='D\u0010\u00ac')\nPASS: string_pattern_score_transformed(s='8\u0095\u009dAk\u00a0\u0093\u00cbu@')\nPASS: string_pattern_score_transformed(s='\uda70\udff9\ufb57\udb87\udf36iyCn')\nPASS: string_pattern_score_transformed(s='\u00c9\u00d1\u00bf')\nPASS: string_pattern_score_transformed(s='\u00de\ud8cb\udf339')\nPASS: string_pattern_score_transformed(s='\f\u00cc\u00c1\u00ce$\u0093\u00fbI\u0016')\nPASS: string_pattern_score_transformed(s='\ud8f1\udcb3o\u00ed\u00c8\udb63\udfc4w\u00bc9\uda3f\udf5d')\nPASS: string_pattern_score_transformed(s='if')\nPASS: string_pattern_score_transformed(s='|\u009c\u0083\uda93\udc60\u00a5\ud968\udc75b\udbc9\udc8f\u00c4')\nPASS: string_pattern_score_transformed(s='O\u00cc\u00c2t\ud9e4\udda2\ud83a\udd79\u008c\u0089')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[16])\nPASS: sum_until_limit_transformed(nums=[16, 19, 13])\nPASS: sum_until_limit_transformed(nums=[4, 0, 9, 10, 6, 9, 13])\nPASS: sum_until_limit_transformed(nums=[15, 8])\nPASS: sum_until_limit_transformed(nums=[16, 2, 20, 19, 7, 17, 17, 14, 8])\nPASS: sum_until_limit_transformed(nums=[4])\nPASS: sum_until_limit_transformed(nums=[0, 5, 6, 15, 20, 9, 13, 4, 2, 16])\nPASS: sum_until_limit_transformed(nums=[9, 20, 20])\nPASS: sum_until_limit_transformed(nums=[14, 13, 6, 8, 2, 17, 9, 1, 9])\nPASS: sum_until_limit_transformed(nums=[17, 7, 7, 18])\nPASS: sum_until_limit_transformed(nums=[17, 7, 17, 18])\nPASS: sum_until_limit_transformed(nums=[18, 7, 17, 18])\nPASS: sum_until_limit_transformed(nums=[18, 7, 18, 18])\nPASS: sum_until_limit_transformed(nums=[18, 18, 18, 18])\nPASS: sum_until_limit_transformed(nums=[7, 19, 16])\nPASS: sum_until_limit_transformed(nums=[7, 16, 16])\nPASS: sum_until_limit_transformed(nums=[16, 16, 16])\nPASS: sum_until_limit_transformed(nums=[16, 16])\nPASS: sum_until_limit_transformed(nums=[13, 7])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[10])\nPASS: count_divisibles_transformed(nums=[18])\nPASS: count_divisibles_transformed(nums=[15, 10, 13, 16, 12, 5])\nPASS: count_divisibles_transformed(nums=[20, 7, 10, 7, 20, 19, 0, 0, 5, 11])\nPASS: count_divisibles_transformed(nums=[3, 3, 15, 14, 5, 13, 18])\nPASS: count_divisibles_transformed(nums=[1])\nPASS: count_divisibles_transformed(nums=[6])\nPASS: count_divisibles_transformed(nums=[8, 9, 16, 15, 20, 15, 9, 19, 2, 14])\nPASS: count_divisibles_transformed(nums=[19])\nPASS: count_divisibles_transformed(nums=[6, 4, 8])\nPASS: count_divisibles_transformed(nums=[6, 6, 8])\nPASS: count_divisibles_transformed(nums=[8])\nPASS: count_divisibles_transformed(nums=[6, 18, 7, 19, 20, 11, 0, 19, 18, 14])\nPASS: count_divisibles_transformed(nums=[6, 18, 7, 7, 20, 11, 0, 19, 18, 14])\nPASS: count_divisibles_transformed(nums=[6, 18, 7, 7, 20, 20, 0, 19, 18, 14])\nPASS: count_divisibles_transformed(nums=[6, 18, 7, 7, 20, 0, 0, 19, 18, 14])\nPASS: count_divisibles_transformed(nums=[6, 18, 6, 7, 20, 0, 0, 19, 18, 14])\nPASS: count_divisibles_transformed(nums=[6, 18, 6, 19, 20, 0, 0, 19, 18, 14])\nPASS: count_divisibles_transformed(nums=[6, 18, 6, 19, 20, 0, 0, 20, 18, 14])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[1])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[2, 5, 10, 3, 7, 7, 10, 7, 6, 9])\nPASS: index_weighted_sum_transformed(lst=[3, 4, 5])\nPASS: index_weighted_sum_transformed(lst=[4])\nPASS: index_weighted_sum_transformed(lst=[2, 10, 10, 4, 5, 10, 7, 4, 3, 4])\nPASS: index_weighted_sum_transformed(lst=[7, 2])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[0, 0, 4, 10, 3, 8, 0, 4, 4, 2])\nPASS: index_weighted_sum_transformed(lst=[6, 2, 7, 3, 9, 9, 8, 9, 7, 3])\nPASS: index_weighted_sum_transformed(lst=[6, 2, 7, 3, 9, 9, 8, 3, 7, 3])\nPASS: index_weighted_sum_transformed(lst=[6, 2, 7, 7, 9, 9, 8, 3, 7, 3])\nPASS: index_weighted_sum_transformed(lst=[6, 2, 7, 7, 3, 9, 8, 3, 7, 3])\nPASS: index_weighted_sum_transformed(lst=[6, 2, 7, 7, 3, 2, 8, 3, 7, 3])\nPASS: index_weighted_sum_transformed(lst=[7, 2, 7, 7, 3, 2, 8, 3, 7, 3])\nPASS: index_weighted_sum_transformed(lst=[7, 2, 7, 7, 3, 2, 8, 3, 7, 7])\nPASS: index_weighted_sum_transformed(lst=[7])\nPASS: index_weighted_sum_transformed(lst=[0, 4, 10, 10, 10, 3, 3, 1, 5, 6])\nPASS: index_weighted_sum_transformed(lst=[0, 4, 10, 10, 10, 3, 3, 1, 5, 4])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=8)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\uda30\udcee\u00e4')\nPASS: character_counter_transformed(text='\u00c2@')\nPASS: character_counter_transformed(text='\u00aa\u00ed\u00a4Xb4C\u00d80N')\nPASS: character_counter_transformed(text='\u00dc')\nPASS: character_counter_transformed(text='`\u00acP\u00b9j\u00e8\u00d7\ud8e1\uddc0\u00ea\u00ef')\nPASS: character_counter_transformed(text=''\u00f9f\ud955\udcaa\ud8ec\udef1\u00b0\udb2d\udd56\ud97c\udfc4\udbe7\udc1bD')\nPASS: character_counter_transformed(text='\u0084v')\nPASS: character_counter_transformed(text='/b')\nPASS: character_counter_transformed(text='sP\u008e\ud9a3\uddad,\u00c3P\u008d')\nPASS: character_counter_transformed(text='\u001f\u00c2\u0004\ud81a\uded7/\ud8ab\udf4b\u009f\u0092')\nPASS: character_counter_transformed(text='P\u00c0`\udba7\udea8\u001e\u00d2\u0092\u00a7\u00c0\u00d8')\nPASS: character_counter_transformed(text='\b\u0082\udbb8\udeed=V')\nPASS: character_counter_transformed(text='6\udbc6\ude59\ud823\ude2d\udb14\udd0b\u00b0\udaa7\udeac\u00b4Q\ud8c6\udd35\u009d')\nPASS: character_counter_transformed(text='\u00bc\u00b5j\udab8\udf16')\nPASS: character_counter_transformed(text='\u00bc\ud927\udd6cHI\u00a0\ud982\uddba\udb72\udd49\udb28\udf0e')\nPASS: character_counter_transformed(text='X\u00e4C\u00bb')\nPASS: character_counter_transformed(text='\b\uda85\udd35KW\u00f2\uda37\udfb7\ud85f\ude9c\u00afJ\udbda\udf21')\nPASS: character_counter_transformed(text='\ud9be\udfe1<\u009d\u00d3\uda7c\udda7\uda53\udc03')\nPASS: character_counter_transformed(text='\u00c4\u00d0\u001f\ud8b7\udc00\u0012\u00be')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[27])\nPASS: rolling_maximum_transformed(values=[27, 91])\nPASS: rolling_maximum_transformed(values=[75, 69])\nPASS: rolling_maximum_transformed(values=[57, 19, 8, 96])\nPASS: rolling_maximum_transformed(values=[97, 77, 64, 24])\nPASS: rolling_maximum_transformed(values=[81, 44, 5, 1, 19, 93])\nPASS: rolling_maximum_transformed(values=[30, 86])\nPASS: rolling_maximum_transformed(values=[100, 47, 85, 74, 5, 98, 71, 90, 48, 66])\nPASS: rolling_maximum_transformed(values=[14, 90, 23, 67, 5, 46, 21, 95, 53])\nPASS: rolling_maximum_transformed(values=[60, 81, 8, 28, 34, 32, 36, 30, 41, 24])\nPASS: rolling_maximum_transformed(values=[60, 81, 8, 28, 34, 32, 36, 30, 41, 36])\nPASS: rolling_maximum_transformed(values=[60, 81, 8, 28, 34, 32, 32, 30, 41, 36])\nPASS: rolling_maximum_transformed(values=[60, 81, 8, 28, 34, 30, 32, 30, 41, 36])\nPASS: rolling_maximum_transformed(values=[60, 81, 8, 28, 34, 30, 32, 30, 41, 30])\nPASS: rolling_maximum_transformed(values=[60, 81, 8, 28, 34, 30, 28, 30, 41, 30])\nPASS: rolling_maximum_transformed(values=[60, 81, 8, 28, 34, 34, 28, 30, 41, 30])\nPASS: rolling_maximum_transformed(values=[88])\nPASS: rolling_maximum_transformed(values=[80, 42, 55, 99, 12])\nPASS: rolling_maximum_transformed(values=[80, 99, 55, 99, 12])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_23": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=93)\nPASS: process_data_transformed(x=44)\nPASS: process_data_transformed(x=78)\nPASS: process_data_transformed(x=49)\nPASS: process_data_transformed(x=47)\nPASS: process_data_transformed(x=75)\nPASS: process_data_transformed(x=55)\nPASS: process_data_transformed(x=19)\nPASS: process_data_transformed(x=77)\nPASS: process_data_transformed(x=20)\nPASS: process_data_transformed(x=38)\nPASS: process_data_transformed(x=96)\nPASS: process_data_transformed(x=46)\nPASS: process_data_transformed(x=80)\nPASS: process_data_transformed(x=42)\nPASS: process_data_transformed(x=48)\nPASS: process_data_transformed(x=69)\nPASS: process_data_transformed(x=11)\nPASS: process_data_transformed(x=2)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=72.10622757883553)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=40.61541035051249)\nPASS: convert_temperature_transformed(c=80.26979619700381)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=0.99999)\nPASS: convert_temperature_transformed(c=80.55738834288258)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=1.99749698442811e-252)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=34.782633907880374)\nPASS: convert_temperature_transformed(c=68.75441284202935)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=168.8972390516104, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=168.8972390516104, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=91.51321014655956, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=3.954721813664872e-134, discount_rate=0.026591881541402802)\nPASS: calculate_discount_transformed(price=196.29001441675052, discount_rate=0.33688916782576245)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=0.39890929639595696)\nPASS: calculate_discount_transformed(price=199.99999999999997, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=199.99999999999997, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=72.9823657888976, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=72.9823657888976, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.5, discount_rate=5e-324)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=13.459568068290721, imag=0.0)\nPASS: process_complex_number_transformed(real=13.459568068290721, imag=-2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=-2.220446049250313e-16, imag=1.5)\nPASS: process_complex_number_transformed(real=-20.0, imag=0.99999)\nPASS: process_complex_number_transformed(real=-2.2250738585072014e-308, imag=-2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-5e-324, imag=1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=-1.1, imag=1.9)\nPASS: process_complex_number_transformed(real=-0.0, imag=8.098495700428423e-70)\nPASS: process_complex_number_transformed(real=1.5, imag=-1.1)\nPASS: process_complex_number_transformed(real=-1.1754943508222875e-38, imag=-2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=-2.225073858507203e-309, imag=-2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=-20.0, imag=1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=1.1754943508222875e-38, imag=1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=2.225073858507e-311, imag=20.0)\nPASS: process_complex_number_transformed(real=2.225073858507e-311, imag=2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-2.00001, imag=-2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-2.00001, imag=-2.00001)\nPASS: process_complex_number_transformed(real=-1.5, imag=-2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-2.225073858507e-311, imag=-2.225073858507e-311)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=49)\nPASS: transform_data_transformed(input_value=67)\nPASS: transform_data_transformed(input_value=42)\nPASS: transform_data_transformed(input_value=20)\nPASS: transform_data_transformed(input_value=6)\nPASS: transform_data_transformed(input_value=41)\nPASS: transform_data_transformed(input_value=46)\nPASS: transform_data_transformed(input_value=7)\nPASS: transform_data_transformed(input_value=33)\nPASS: transform_data_transformed(input_value=71)\nPASS: transform_data_transformed(input_value=59)\nPASS: transform_data_transformed(input_value=9)\nPASS: transform_data_transformed(input_value=8)\nPASS: transform_data_transformed(input_value=97)\nPASS: transform_data_transformed(input_value=77)\nPASS: transform_data_transformed(input_value=18)\nPASS: transform_data_transformed(input_value=60)\nPASS: transform_data_transformed(input_value=96)\nPASS: transform_data_transformed(input_value=86)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=1.192092896e-07)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=0.25559083013225964)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=17.997628533436956)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=14.637897802485826)\nPASS: circle_area_diff_transformed(r=14.615754862940575)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=0.030595587571582435)\nPASS: circle_area_diff_transformed(r=18.524590617061193)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=1.3770413708434905)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=10, b=1, c=1)\nPASS: triangle_checker_transformed(a=10, b=2, c=14)\nPASS: triangle_checker_transformed(a=5, b=16, c=10)\nPASS: triangle_checker_transformed(a=14, b=15, c=11)\nPASS: triangle_checker_transformed(a=16, b=9, c=15)\nPASS: triangle_checker_transformed(a=17, b=9, c=11)\nPASS: triangle_checker_transformed(a=12, b=1, c=6)\nPASS: triangle_checker_transformed(a=5, b=6, c=4)\nPASS: triangle_checker_transformed(a=7, b=13, c=10)\nPASS: triangle_checker_transformed(a=18, b=2, c=6)\nPASS: triangle_checker_transformed(a=18, b=2, c=18)\nPASS: triangle_checker_transformed(a=2, b=2, c=18)\nPASS: triangle_checker_transformed(a=2, b=2, c=2)\nPASS: triangle_checker_transformed(a=17, b=7, c=5)\nPASS: triangle_checker_transformed(a=17, b=7, c=7)\nPASS: triangle_checker_transformed(a=17, b=17, c=7)\nPASS: triangle_checker_transformed(a=17, b=17, c=17)\nPASS: triangle_checker_transformed(a=7, b=11, c=14)\nPASS: triangle_checker_transformed(a=7, b=11, c=7)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=31.36421971842192)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=23.42395564374587)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=42.43307862409079)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=8.923171900073056e-208)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=60.20038407570022)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=51.419821364877535)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=8, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=8, b=2, c=-4)\nPASS: quadratic_discriminant_transformed(a=8, b=-5, c=1)\nPASS: quadratic_discriminant_transformed(a=-2, b=9, c=-2)\nPASS: quadratic_discriminant_transformed(a=-3, b=0, c=1)\nPASS: quadratic_discriminant_transformed(a=4, b=9, c=-10)\nPASS: quadratic_discriminant_transformed(a=8, b=-3, c=5)\nPASS: quadratic_discriminant_transformed(a=9, b=4, c=-4)\nPASS: quadratic_discriminant_transformed(a=7, b=7, c=-4)\nPASS: quadratic_discriminant_transformed(a=9, b=9, c=5)\nPASS: quadratic_discriminant_transformed(a=5, b=9, c=5)\nPASS: quadratic_discriminant_transformed(a=9, b=9, c=9)\nPASS: quadratic_discriminant_transformed(a=4, b=1, c=0)\nPASS: quadratic_discriminant_transformed(a=1, b=1, c=0)\nPASS: quadratic_discriminant_transformed(a=0, b=1, c=0)\nPASS: quadratic_discriminant_transformed(a=8, b=-5, c=6)\nPASS: quadratic_discriminant_transformed(a=8, b=-5, c=8)\nPASS: quadratic_discriminant_transformed(a=-5, b=-5, c=8)\nPASS: quadratic_discriminant_transformed(a=-5, b=-5, c=-5)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-9.999999999999998, y=0.0)\nPASS: vector_norm_transformed(x=-9.999999999999998, y=2.2250738585e-313)\nPASS: vector_norm_transformed(x=-2.225073858507203e-309, y=9.0)\nPASS: vector_norm_transformed(x=2.2250738585e-313, y=2.220446049250313e-16)\nPASS: vector_norm_transformed(x=5.960464477539063e-08, y=1.1)\nPASS: vector_norm_transformed(x=-0.21445724082097506, y=-1.069160758480015)\nPASS: vector_norm_transformed(x=6.533665627306444, y=-2.2250738585e-313)\nPASS: vector_norm_transformed(x=0.591160345473158, y=2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=0.0, y=2.225073858507203e-309)\nPASS: vector_norm_transformed(x=1.9, y=-0.35711733088564834)\nPASS: vector_norm_transformed(x=1.9, y=1.9)\nPASS: vector_norm_transformed(x=0.5, y=2.00001)\nPASS: vector_norm_transformed(x=2.00001, y=2.00001)\nPASS: vector_norm_transformed(x=1.1, y=2.220446049250313e-16)\nPASS: vector_norm_transformed(x=1.1, y=1.1)\nPASS: vector_norm_transformed(x=2.225073858507e-311, y=0.5)\nPASS: vector_norm_transformed(x=0.5, y=0.5)\nPASS: vector_norm_transformed(x=1.1, y=-9.999999999999998)\nPASS: vector_norm_transformed(x=-9.999999999999998, y=-9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5.400965951973443, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5.400965951973443, b=2.240810474840587)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=9.0, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=0.0, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=0.0, b=1.9)\nPASS: hypotenuse_diff_transformed(a=6.088766508800253, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=1.1, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=9.0, b=1.9)\nPASS: hypotenuse_diff_transformed(a=9.0, b=9.0)\nPASS: hypotenuse_diff_transformed(a=10.0, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=1.5, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=1.5, b=1.5)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=2.2250738585e-313)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\ud97f\udc32\u00d5\ua039SD\u00bco\u00d0')\nPASS: ascii_average_transformed(s='\udbbf\udd63\u0019d\u009cZ\u0015\u0014D\ud963\udcfe{')\nPASS: ascii_average_transformed(s='\u0098E\u00fe\ud892\udeff\u00e3H')\nPASS: ascii_average_transformed(s='7\u00b7')\nPASS: ascii_average_transformed(s='A\udb93\udfe6\u00a4C\ud943\udfaa\ud8d1\udffe')\nPASS: ascii_average_transformed(s='\udab1\ude8b\udb73\ude94\u001cc\u0090y\u00dd\uda1e\udd91\u009cg')\nPASS: ascii_average_transformed(s='~4\ud996\udd9f\u00dd\u00e7')\nPASS: ascii_average_transformed(s='\u00f6S')\nPASS: ascii_average_transformed(s='\u009d\uda0b\udef5f\uca11\u00a6')\nPASS: ascii_average_transformed(s='M\f\u0018\u00a2\u0098\udb4c\udc8f')\nPASS: ascii_average_transformed(s='\u000b\u00aek\ud947\udece \u00e5\ud86c\ude15\u00d3\u0001')\nPASS: ascii_average_transformed(s='\u00fa\udab7\udd30\u00de\uda02\udc75\u00c4j\u00fd')\nPASS: ascii_average_transformed(s='&\ud914\ude1d\u0090')\nPASS: ascii_average_transformed(s='-\udbda\udf3e')\nPASS: ascii_average_transformed(s='\ud83c\uddfa\ud83c\uddf8')\nPASS: ascii_average_transformed(s='\u0085M9')\nPASS: ascii_average_transformed(s='n\u00a7a\u00a23O%\u00b1\u0019q')\nPASS: ascii_average_transformed(s='\u00ba7')\nPASS: ascii_average_transformed(s='\ud865\uded2\u00b15\u00a1\u00c5\udaa2\uddbc\u001f')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[10, 0])\nPASS: list_balance_transformed(nums=[1, 0])\nPASS: list_balance_transformed(nums=[1, 8, 10, 8, 1, 8, 5, 2])\nPASS: list_balance_transformed(nums=[0, 6])\nPASS: list_balance_transformed(nums=[9, 9, 5, 0, 4, 6, 1, 10, 6, 9])\nPASS: list_balance_transformed(nums=[1, 4, 9])\nPASS: list_balance_transformed(nums=[10, 2, 6, 2, 1])\nPASS: list_balance_transformed(nums=[2, 8, 8, 1, 9, 5])\nPASS: list_balance_transformed(nums=[9, 8])\nPASS: list_balance_transformed(nums=[0, 2, 1, 5])\nPASS: list_balance_transformed(nums=[0, 5, 1, 5])\nPASS: list_balance_transformed(nums=[0, 5, 5, 5])\nPASS: list_balance_transformed(nums=[0, 5, 5, 0])\nPASS: list_balance_transformed(nums=[5, 5, 5, 5])\nPASS: list_balance_transformed(nums=[7, 1, 5, 4, 2, 7, 3, 7, 6, 6])\nPASS: list_balance_transformed(nums=[7, 1, 5, 4, 6, 7, 3, 7, 6, 6])\nPASS: list_balance_transformed(nums=[7, 1, 5, 4, 7, 7, 3, 7, 6, 6])\nPASS: list_balance_transformed(nums=[7, 1, 1, 4, 7, 7, 3, 7, 6, 6])\nPASS: list_balance_transformed(nums=[7, 1, 1, 4, 7, 7, 3, 4, 6, 6])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[0, 0])\nPASS: odd_sum_validator_transformed(lst=[1, 2, 5])\nPASS: odd_sum_validator_transformed(lst=[6, 4, 3, 0, 0, 7])\nPASS: odd_sum_validator_transformed(lst=[6])\nPASS: odd_sum_validator_transformed(lst=[1])\nPASS: odd_sum_validator_transformed(lst=[5, 9, 8, 4, 1])\nPASS: odd_sum_validator_transformed(lst=[4, 0, 4, 0, 0, 10, 10, 1, 6, 8])\nPASS: odd_sum_validator_transformed(lst=[3, 7, 6, 7, 5, 8, 5, 6, 10, 10])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[0, 10])\nPASS: odd_sum_validator_transformed(lst=[10, 10])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[3, 6, 4, 2, 6, 6, 4, 0, 2, 8])\nPASS: odd_sum_validator_transformed(lst=[0, 6, 4, 2, 6, 6, 4, 0, 2, 8])\nPASS: odd_sum_validator_transformed(lst=[0, 2, 4, 2, 6, 6, 4, 0, 2, 8])\nPASS: odd_sum_validator_transformed(lst=[0, 2, 4, 2, 6, 0, 4, 0, 2, 8])\nPASS: odd_sum_validator_transformed(lst=[0, 2, 4, 2, 6, 0, 4, 0, 2, 0])\nPASS: odd_sum_validator_transformed(lst=[0, 2, 4, 4, 6, 0, 4, 0, 2, 0])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='77\u0086m\u00c8\u00d0')\nPASS: string_pattern_score_transformed(s='\u00c7\u0089\u00b3\udba2\uddfd')\nPASS: string_pattern_score_transformed(s='\ud8f8\udc47\u00d6')\nPASS: string_pattern_score_transformed(s='3\ud815\udd55\u00fd\u00ba\u00b5')\nPASS: string_pattern_score_transformed(s='\u00e2m')\nPASS: string_pattern_score_transformed(s='\u00d3\u00d6')\nPASS: string_pattern_score_transformed(s='\u00f4\u00c4')\nPASS: string_pattern_score_transformed(s='\u0018')\nPASS: string_pattern_score_transformed(s='\udb60\udd6f7\u00a4\u009d\u00008\udb29\udc88\u000f\uda69\udc8c')\nPASS: string_pattern_score_transformed(s='\u00a9\u00b6')\nPASS: string_pattern_score_transformed(s='\u00b6p\u00f6{\u0099\u00df\b\u00dd\u00ec\udaaa\udd36')\nPASS: string_pattern_score_transformed(s='\udb8d\udc9fF')\nPASS: string_pattern_score_transformed(s='l')\nPASS: string_pattern_score_transformed(s='\u00cc\u00de\u0014\u0092\u00b5(\u0016\ud9d0\ude47v')\nPASS: string_pattern_score_transformed(s='kA\u00b4\u00d1\u0097\u00b2\u00abS\u00f8\u0092')\nPASS: string_pattern_score_transformed(s='\u00d8\uda39\udf45\ud918\udfb3OL\u00f2\u00c7:')\nPASS: string_pattern_score_transformed(s='\uf09c!\u00af\u00a9\u4da0\u00040J\u00c2\u00fc')\nPASS: string_pattern_score_transformed(s='\u00a2\u00ddr\udb9c\udde9c\u00f7{\u00e3\u00b2\u00af')\nPASS: string_pattern_score_transformed(s='\u00be\u00ebf\u00a8\u00fd\u001b{')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[20])\nPASS: sum_until_limit_transformed(nums=[5])\nPASS: sum_until_limit_transformed(nums=[14, 15, 19, 18, 16, 2, 19, 3, 4, 11])\nPASS: sum_until_limit_transformed(nums=[0, 3, 5, 16, 20])\nPASS: sum_until_limit_transformed(nums=[12, 12, 14, 17, 1, 1, 18, 6, 1, 6])\nPASS: sum_until_limit_transformed(nums=[0, 19, 2, 0, 8, 8, 14, 1, 19, 3])\nPASS: sum_until_limit_transformed(nums=[19, 12, 12, 20])\nPASS: sum_until_limit_transformed(nums=[4, 3])\nPASS: sum_until_limit_transformed(nums=[8, 16, 16, 9, 8, 17, 11, 12, 16])\nPASS: sum_until_limit_transformed(nums=[18])\nPASS: sum_until_limit_transformed(nums=[4])\nPASS: sum_until_limit_transformed(nums=[1, 18, 2, 15, 4, 2, 6, 20, 17, 20])\nPASS: sum_until_limit_transformed(nums=[1, 18, 2, 15, 4, 2, 15, 20, 17, 20])\nPASS: sum_until_limit_transformed(nums=[1, 18, 2, 15, 4, 2, 15, 20, 17, 18])\nPASS: sum_until_limit_transformed(nums=[1, 18, 2, 15, 4, 2, 15, 20, 17, 4])\nPASS: sum_until_limit_transformed(nums=[1, 18, 2, 15, 4, 2, 15, 2, 17, 4])\nPASS: sum_until_limit_transformed(nums=[2, 18, 2, 15, 4, 2, 15, 2, 17, 4])\nPASS: sum_until_limit_transformed(nums=[2, 18, 2, 15, 4, 2, 15, 2, 2, 4])\nPASS: sum_until_limit_transformed(nums=[5, 20, 11, 18, 14])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[17])\nPASS: count_divisibles_transformed(nums=[4])\nPASS: count_divisibles_transformed(nums=[4, 20, 19])\nPASS: count_divisibles_transformed(nums=[12, 3, 6])\nPASS: count_divisibles_transformed(nums=[19, 12, 0, 13, 10, 15, 3])\nPASS: count_divisibles_transformed(nums=[5])\nPASS: count_divisibles_transformed(nums=[11, 3, 11, 17, 13, 17, 7, 6, 18, 3])\nPASS: count_divisibles_transformed(nums=[20, 0, 1, 19, 0])\nPASS: count_divisibles_transformed(nums=[8, 13, 5, 12, 17, 11, 19, 4, 3, 10])\nPASS: count_divisibles_transformed(nums=[14, 7, 18, 1, 3, 7])\nPASS: count_divisibles_transformed(nums=[14, 7, 18, 1, 14, 7])\nPASS: count_divisibles_transformed(nums=[14, 7, 18, 1, 14, 18])\nPASS: count_divisibles_transformed(nums=[14, 7, 14, 1, 14, 18])\nPASS: count_divisibles_transformed(nums=[14, 7, 14, 1, 7, 18])\nPASS: count_divisibles_transformed(nums=[14, 7, 14, 7, 7, 18])\nPASS: count_divisibles_transformed(nums=[1, 6, 14])\nPASS: count_divisibles_transformed(nums=[14, 6, 14])\nPASS: count_divisibles_transformed(nums=[14])\nPASS: count_divisibles_transformed(nums=[9, 14, 19])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[5])\nPASS: index_weighted_sum_transformed(lst=[6])\nPASS: index_weighted_sum_transformed(lst=[10, 0, 10, 9])\nPASS: index_weighted_sum_transformed(lst=[7])\nPASS: index_weighted_sum_transformed(lst=[3, 10, 10])\nPASS: index_weighted_sum_transformed(lst=[4, 9, 7, 0, 6, 1, 5])\nPASS: index_weighted_sum_transformed(lst=[9, 0, 2, 7, 3, 5, 4, 6, 10, 0])\nPASS: index_weighted_sum_transformed(lst=[7, 4, 7])\nPASS: index_weighted_sum_transformed(lst=[6, 6])\nPASS: index_weighted_sum_transformed(lst=[7, 9, 1, 9, 9, 6, 5, 8, 8, 7])\nPASS: index_weighted_sum_transformed(lst=[7, 9, 1, 1, 9, 6, 5, 8, 8, 7])\nPASS: index_weighted_sum_transformed(lst=[7, 9, 1, 1, 9, 6, 5, 8, 8, 9])\nPASS: index_weighted_sum_transformed(lst=[7, 9, 1, 1, 9, 6, 5, 6, 8, 9])\nPASS: index_weighted_sum_transformed(lst=[1, 9, 1, 1, 9, 6, 5, 6, 8, 9])\nPASS: index_weighted_sum_transformed(lst=[1, 9, 1, 1, 9, 6, 5, 6, 5, 9])\nPASS: index_weighted_sum_transformed(lst=[1, 9, 1, 1, 9, 6, 5, 6, 1, 9])\nPASS: index_weighted_sum_transformed(lst=[7, 6, 1])\nPASS: index_weighted_sum_transformed(lst=[7, 6])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=7)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00aa')\nPASS: character_counter_transformed(text='\uda06\udf51\t')\nPASS: character_counter_transformed(text='\u001e')\nPASS: character_counter_transformed(text=' M')\nPASS: character_counter_transformed(text='\u023e')\nPASS: character_counter_transformed(text='\t\u00ed\u00a3Kv\u001f\u00d6\u00b4\u00d1\u0090')\nPASS: character_counter_transformed(text='-Infinity')\nPASS: character_counter_transformed(text='\u00caKG\u00d1z\n')\nPASS: character_counter_transformed(text='\ud8e8\udde6x]&\uda7d\udcb6,\u0004\u00f7\u0098\ud9f3\udec7')\nPASS: character_counter_transformed(text='g')\nPASS: character_counter_transformed(text='h')\nPASS: character_counter_transformed(text='\u00f9\udbb0\udc71')\nPASS: character_counter_transformed(text='\u00c8\u00d54z\u0018\u0011)l\udb6e\udc1b\u00eb')\nPASS: character_counter_transformed(text='\ud966\udd71\udb1a\ude6e\u00e8Z')\nPASS: character_counter_transformed(text='\u00cf,\u009c')\nPASS: character_counter_transformed(text='\u0096\u0088s\u00a6\u250a')\nPASS: character_counter_transformed(text='\u00e8\u00b3\u00c7\u00c5,\u00b8')\nPASS: character_counter_transformed(text='!\u00d8\u00d9\u00dd')\nPASS: character_counter_transformed(text='\ud83c\udffb\ud83d\udc4d\ud83c\udffb')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[47])\nPASS: rolling_maximum_transformed(values=[55])\nPASS: rolling_maximum_transformed(values=[88])\nPASS: rolling_maximum_transformed(values=[42])\nPASS: rolling_maximum_transformed(values=[81])\nPASS: rolling_maximum_transformed(values=[49, 85, 94, 10])\nPASS: rolling_maximum_transformed(values=[58, 94, 20, 61, 6])\nPASS: rolling_maximum_transformed(values=[74, 35, 67, 58, 55, 77, 56])\nPASS: rolling_maximum_transformed(values=[77, 16, 36, 59])\nPASS: rolling_maximum_transformed(values=[9, 44, 58, 47, 35])\nPASS: rolling_maximum_transformed(values=[9, 44, 44, 47, 35])\nPASS: rolling_maximum_transformed(values=[9, 44, 35, 47, 35])\nPASS: rolling_maximum_transformed(values=[44, 44, 35, 47, 35])\nPASS: rolling_maximum_transformed(values=[44, 44, 35, 44, 35])\nPASS: rolling_maximum_transformed(values=[44, 44, 35])\nPASS: rolling_maximum_transformed(values=[16, 47, 87, 18, 71, 19, 3, 22, 96, 96])\nPASS: rolling_maximum_transformed(values=[16, 47, 87, 18, 71, 19, 3, 96, 96, 96])\nPASS: rolling_maximum_transformed(values=[16, 47, 87, 18, 71, 19, 96, 96, 96, 96])\nPASS: rolling_maximum_transformed(values=[16, 18, 87, 18, 71, 19, 96, 96, 96, 96])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_24": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=92)\nPASS: process_data_transformed(x=39)\nPASS: process_data_transformed(x=63)\nPASS: process_data_transformed(x=76)\nPASS: process_data_transformed(x=44)\nPASS: process_data_transformed(x=46)\nPASS: process_data_transformed(x=6)\nPASS: process_data_transformed(x=62)\nPASS: process_data_transformed(x=49)\nPASS: process_data_transformed(x=97)\nPASS: process_data_transformed(x=3)\nPASS: process_data_transformed(x=91)\nPASS: process_data_transformed(x=36)\nPASS: process_data_transformed(x=7)\nPASS: process_data_transformed(x=23)\nPASS: process_data_transformed(x=98)\nPASS: process_data_transformed(x=89)\nPASS: process_data_transformed(x=35)\nPASS: process_data_transformed(x=60)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=14.094631638148284)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=98.17626972412903)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=95.01404194235472)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=87.77611527332954)\nPASS: convert_temperature_transformed(c=4.581981217851875e-130)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=12.065471565184941)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=6.103515625e-05, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=6.103515625e-05, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=0.11608368272938877)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=2.00001, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=0.5900323794434331)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=2.8001122796079897e-308, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-1e-05, imag=0.0)\nPASS: process_complex_number_transformed(real=-1e-05, imag=-5e-324)\nPASS: process_complex_number_transformed(real=-1.5, imag=-1.1)\nPASS: process_complex_number_transformed(real=-6.196351511215877, imag=-0.99999)\nPASS: process_complex_number_transformed(real=0.0, imag=-0.0)\nPASS: process_complex_number_transformed(real=-19.999999999999996, imag=-2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=1.175494351e-38, imag=5.564306499218418)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=4.363494471453585)\nPASS: process_complex_number_transformed(real=5.960464477539063e-08, imag=-5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=-0.5, imag=2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-0.5, imag=-0.5)\nPASS: process_complex_number_transformed(real=8.762342946454499, imag=-1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=-1.1125369292536007e-308, imag=-1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=1.9, imag=-1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=1.9, imag=1.9)\nPASS: process_complex_number_transformed(real=-1.1, imag=-1.5292237512275973e-234)\nPASS: process_complex_number_transformed(real=-1.5292237512275973e-234, imag=-1.5292237512275973e-234)\nPASS: process_complex_number_transformed(real=-2.225073858507e-311, imag=-1.5)\nPASS: process_complex_number_transformed(real=-1.5, imag=-1.5)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=15)\nPASS: transform_data_transformed(input_value=16)\nPASS: transform_data_transformed(input_value=30)\nPASS: transform_data_transformed(input_value=8)\nPASS: transform_data_transformed(input_value=48)\nPASS: transform_data_transformed(input_value=18)\nPASS: transform_data_transformed(input_value=91)\nPASS: transform_data_transformed(input_value=22)\nPASS: transform_data_transformed(input_value=54)\nPASS: transform_data_transformed(input_value=86)\nPASS: transform_data_transformed(input_value=60)\nPASS: transform_data_transformed(input_value=4)\nPASS: transform_data_transformed(input_value=44)\nPASS: transform_data_transformed(input_value=78)\nPASS: transform_data_transformed(input_value=2)\nPASS: transform_data_transformed(input_value=65)\nPASS: transform_data_transformed(input_value=33)\nPASS: transform_data_transformed(input_value=10)\nPASS: transform_data_transformed(input_value=6)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=17.14346822225592)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=3.395618967911998)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=17.941907986889127)\nPASS: circle_area_diff_transformed(r=2.9359408025138127)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=11.55898082724626)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=15.343675739455097)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=11, b=1, c=1)\nPASS: triangle_checker_transformed(a=11, b=10, c=8)\nPASS: triangle_checker_transformed(a=10, b=5, c=12)\nPASS: triangle_checker_transformed(a=3, b=1, c=12)\nPASS: triangle_checker_transformed(a=20, b=9, c=8)\nPASS: triangle_checker_transformed(a=14, b=16, c=6)\nPASS: triangle_checker_transformed(a=10, b=8, c=3)\nPASS: triangle_checker_transformed(a=7, b=15, c=12)\nPASS: triangle_checker_transformed(a=10, b=1, c=4)\nPASS: triangle_checker_transformed(a=12, b=6, c=6)\nPASS: triangle_checker_transformed(a=6, b=6, c=6)\nPASS: triangle_checker_transformed(a=3, b=15, c=19)\nPASS: triangle_checker_transformed(a=3, b=15, c=3)\nPASS: triangle_checker_transformed(a=15, b=15, c=3)\nPASS: triangle_checker_transformed(a=3, b=3, c=3)\nPASS: triangle_checker_transformed(a=14, b=5, c=7)\nPASS: triangle_checker_transformed(a=5, b=5, c=7)\nPASS: triangle_checker_transformed(a=5, b=5, c=5)\nPASS: triangle_checker_transformed(a=3, b=14, c=12)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=1.192092896e-07)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=35.25493301442385)\nPASS: temperature_offset_transformed(c=20.64381119597927)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=15.725217236730064)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=10, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=10, b=-5, c=-8)\nPASS: quadratic_discriminant_transformed(a=4, b=-10, c=-6)\nPASS: quadratic_discriminant_transformed(a=-2, b=5, c=0)\nPASS: quadratic_discriminant_transformed(a=-6, b=-8, c=9)\nPASS: quadratic_discriminant_transformed(a=-2, b=9, c=-2)\nPASS: quadratic_discriminant_transformed(a=-2, b=8, c=-4)\nPASS: quadratic_discriminant_transformed(a=5, b=8, c=4)\nPASS: quadratic_discriminant_transformed(a=0, b=3, c=9)\nPASS: quadratic_discriminant_transformed(a=0, b=-5, c=-5)\nPASS: quadratic_discriminant_transformed(a=-5, b=-5, c=-5)\nPASS: quadratic_discriminant_transformed(a=1, b=10, c=-3)\nPASS: quadratic_discriminant_transformed(a=10, b=10, c=-3)\nPASS: quadratic_discriminant_transformed(a=10, b=10, c=10)\nPASS: quadratic_discriminant_transformed(a=5, b=1, c=9)\nPASS: quadratic_discriminant_transformed(a=9, b=1, c=9)\nPASS: quadratic_discriminant_transformed(a=9, b=9, c=9)\nPASS: quadratic_discriminant_transformed(a=-9, b=10, c=-6)\nPASS: quadratic_discriminant_transformed(a=-9, b=10, c=10)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-9.0, y=0.0)\nPASS: vector_norm_transformed(x=-9.0, y=1.5)\nPASS: vector_norm_transformed(x=-1.5, y=-7.065919514622182)\nPASS: vector_norm_transformed(x=9.999999999999998, y=-9.0)\nPASS: vector_norm_transformed(x=-8.774166803883689e-209, y=-9.0)\nPASS: vector_norm_transformed(x=-1.1125369292536007e-308, y=-1.175494351e-38)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=-0.5)\nPASS: vector_norm_transformed(x=2.2624197348994263e-71, y=-9.0)\nPASS: vector_norm_transformed(x=-1.1754943508222875e-38, y=-0.5036710876298383)\nPASS: vector_norm_transformed(x=-1.401298464324817e-45, y=1.5)\nPASS: vector_norm_transformed(x=1.5, y=1.5)\nPASS: vector_norm_transformed(x=-2.225073858507e-311, y=2.9820889985105765)\nPASS: vector_norm_transformed(x=-2.225073858507e-311, y=-2.225073858507e-311)\nPASS: vector_norm_transformed(x=0.99999, y=1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=0.99999, y=0.99999)\nPASS: vector_norm_transformed(x=2.225073858507e-311, y=-3.76207055611835)\nPASS: vector_norm_transformed(x=-3.76207055611835, y=-3.76207055611835)\nPASS: vector_norm_transformed(x=2.3815551761859224e-139, y=6.103515625e-05)\nPASS: vector_norm_transformed(x=2.3815551761859224e-139, y=2.3815551761859224e-139)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=10.0)\nPASS: hypotenuse_diff_transformed(a=0.0, b=1.9)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=3.9371622884182553)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=9.0)\nPASS: hypotenuse_diff_transformed(a=9.0, b=9.0)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=0.5, b=1.5)\nPASS: hypotenuse_diff_transformed(a=0.5, b=0.5)\nPASS: hypotenuse_diff_transformed(a=2.4832424449747537e-16, b=0.4777687415974531)\nPASS: hypotenuse_diff_transformed(a=0.4777687415974531, b=0.4777687415974531)\nPASS: hypotenuse_diff_transformed(a=5.965632921664766e-179, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=5.965632921664766e-179, b=5.965632921664766e-179)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u00d4$\u00b7O\u00f3\u00b7\u009b\uda1f\ude4a\ud877\udfc0!')\nPASS: ascii_average_transformed(s='\u0086m')\nPASS: ascii_average_transformed(s='\u009f\udb09\udc6a3\u0002\u0095\u0011h,')\nPASS: ascii_average_transformed(s='\u00e8\ud99b\udc7b\u00be\u00c1\ud87a\udcbf\u00b4[\u001b\ud93f\ude80\uda57\udee4')\nPASS: ascii_average_transformed(s='\u00a1s')\nPASS: ascii_average_transformed(s='\u00cee\u00ecc\u00ab')\nPASS: ascii_average_transformed(s='-Infinity')\nPASS: ascii_average_transformed(s='\ud9d2\udd2f')\nPASS: ascii_average_transformed(s='\u0015\u00fd\uda3e\udc14\u00fb')\nPASS: ascii_average_transformed(s=':t6.')\nPASS: ascii_average_transformed(s='\u0011\u00d1\u00e3\udbb4\udfe1\u00fb\u00a84\t@\u00fd')\nPASS: ascii_average_transformed(s='\u00b6\u00b0')\nPASS: ascii_average_transformed(s='\u00d7\u00cc\u00045\ud99f\udda1\u06fb\ud874\ude32H')\nPASS: ascii_average_transformed(s='2\u00073#')\nPASS: ascii_average_transformed(s='\u00de\u00f4\ud85f\uddceE\u00f8n')\nPASS: ascii_average_transformed(s='\u00f26\ud956\uddd1\uda49\ude34\u0099\udbb3\udc614$\ud974\udf0c')\nPASS: ascii_average_transformed(s='\u008d\u0087\u0018\u00fb\u00da\u001a\u00e9')\nPASS: ascii_average_transformed(s='\u0081\u00dc\u00f54\ud890\udd04')\nPASS: ascii_average_transformed(s='\u00e4\u0090t\u00e1\u0014')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[3, 0])\nPASS: list_balance_transformed(nums=[4, 0])\nPASS: list_balance_transformed(nums=[4, 10, 1, 0])\nPASS: list_balance_transformed(nums=[4, 4, 5, 6, 3, 3, 5])\nPASS: list_balance_transformed(nums=[3, 0, 9])\nPASS: list_balance_transformed(nums=[8, 9, 6, 4, 7, 5, 0, 7, 3, 3])\nPASS: list_balance_transformed(nums=[5, 1])\nPASS: list_balance_transformed(nums=[2, 9, 9, 0, 8, 10, 5, 4, 8, 6])\nPASS: list_balance_transformed(nums=[7, 1, 0])\nPASS: list_balance_transformed(nums=[10, 1])\nPASS: list_balance_transformed(nums=[10, 10])\nPASS: list_balance_transformed(nums=[4, 2, 2, 5, 1, 8, 7, 5, 5, 0])\nPASS: list_balance_transformed(nums=[4, 2, 2, 5, 1, 8, 7, 5, 7, 0])\nPASS: list_balance_transformed(nums=[4, 2, 2, 5, 1, 0, 7, 5, 7, 0])\nPASS: list_balance_transformed(nums=[4, 2, 2, 5, 1, 0, 7, 5, 5, 0])\nPASS: list_balance_transformed(nums=[4, 5, 2, 5, 1, 0, 7, 5, 5, 0])\nPASS: list_balance_transformed(nums=[4, 1, 2, 5, 1, 0, 7, 5, 5, 0])\nPASS: list_balance_transformed(nums=[4, 1, 2, 5, 1, 5, 7, 5, 5, 0])\nPASS: list_balance_transformed(nums=[0, 5])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[1])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[2, 0, 4, 1, 6, 10, 3, 4, 8, 7])\nPASS: odd_sum_validator_transformed(lst=[0, 8, 7, 5, 8, 7, 8, 0, 3, 3])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[3, 6, 10])\nPASS: odd_sum_validator_transformed(lst=[8, 5, 4, 6, 7, 3, 0, 6])\nPASS: odd_sum_validator_transformed(lst=[7, 4, 7, 3])\nPASS: odd_sum_validator_transformed(lst=[6, 1, 9, 2, 1, 0, 3])\nPASS: odd_sum_validator_transformed(lst=[9, 7, 3, 9, 5, 8, 6, 1, 0, 3])\nPASS: odd_sum_validator_transformed(lst=[9, 7, 3, 9, 5, 8, 9, 1, 0, 3])\nPASS: odd_sum_validator_transformed(lst=[9, 7, 9, 9, 5, 8, 9, 1, 0, 3])\nPASS: odd_sum_validator_transformed(lst=[9, 7, 9, 5, 5, 8, 9, 1, 0, 3])\nPASS: odd_sum_validator_transformed(lst=[9, 7, 8, 5, 5, 8, 9, 1, 0, 3])\nPASS: odd_sum_validator_transformed(lst=[9, 7, 8, 5, 0, 8, 9, 1, 0, 3])\nPASS: odd_sum_validator_transformed(lst=[9, 7, 8, 5])\nPASS: odd_sum_validator_transformed(lst=[6])\nPASS: odd_sum_validator_transformed(lst=[6, 6, 1, 4, 8, 9, 7, 10, 4])\nPASS: odd_sum_validator_transformed(lst=[6, 6, 1, 4, 8, 9, 1, 10, 4])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='r\u00f3)')\nPASS: string_pattern_score_transformed(s='m\u00e4m')\nPASS: string_pattern_score_transformed(s='6 \u00c3\u009e\u00dc\ud952\uddd7\u00e5\u0011\udb90\ude23\u00c8')\nPASS: string_pattern_score_transformed(s='nm\uda90\udd95')\nPASS: string_pattern_score_transformed(s='\ud806\udd21')\nPASS: string_pattern_score_transformed(s='e\u00a1@')\nPASS: string_pattern_score_transformed(s='\ud867\udd7f\ud944\udd68C\ud813\udebd\uda36\udc3b\u0089u\u00ff\u0086\u0085')\nPASS: string_pattern_score_transformed(s='X\ud85b\ude7b\u00e4\u0001b\u00a5\u00f0f\udade\uddedl')\nPASS: string_pattern_score_transformed(s='\ud963\udc74\uda68\udd53')\nPASS: string_pattern_score_transformed(s='$\uda42\udfca%\u0010\ud952\udc84#\u009e\u009c\ud900\uddb8')\nPASS: string_pattern_score_transformed(s='\t')\nPASS: string_pattern_score_transformed(s='\ud803\udd6d\u00d6')\nPASS: string_pattern_score_transformed(s='\u5ab3=\u00aa\ud9c2\udfad\u00dc\ud9bc\udd51\u00d3\u00d8\u00d6o')\nPASS: string_pattern_score_transformed(s='\uda1a\uded4~\u00af')\nPASS: string_pattern_score_transformed(s='\u0090t2\u00a9\ud890\udcfa\u00a3ue\u009b\u00d4')\nPASS: string_pattern_score_transformed(s='\u00cd')\nPASS: string_pattern_score_transformed(s='\udb44\udf95\u00cb')\nPASS: string_pattern_score_transformed(s='\ud82e\udd4eV')\nPASS: string_pattern_score_transformed(s='\uda8b\udf14\u001f\u00a3i\ud9e1\ude75\u00f6\u00af1\u0003Z')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[20])\nPASS: sum_until_limit_transformed(nums=[20, 14])\nPASS: sum_until_limit_transformed(nums=[12])\nPASS: sum_until_limit_transformed(nums=[15, 5, 11, 12, 6, 19, 4, 4, 10, 2])\nFAIL: sum_until_limit_transformed(nums=[14, 13, 19, 4, 13, 9, 17, 4, 11, 15])\nPASS: sum_until_limit_transformed(nums=[17])\nPASS: sum_until_limit_transformed(nums=[1, 10, 7, 8])\nPASS: sum_until_limit_transformed(nums=[10, 14, 11, 2])\nPASS: sum_until_limit_transformed(nums=[10])\nPASS: sum_until_limit_transformed(nums=[9, 10, 8, 20, 9, 3, 11, 2, 17, 5])\nPASS: sum_until_limit_transformed(nums=[9, 10, 8, 20, 9, 3, 11, 2, 17, 10])\nPASS: sum_until_limit_transformed(nums=[9, 10, 8, 20, 9, 3, 11, 2, 3, 10])\nPASS: sum_until_limit_transformed(nums=[9, 9, 8, 20, 9, 3, 11, 2, 3, 10])\nPASS: sum_until_limit_transformed(nums=[9, 9, 8, 20, 9, 3, 11, 2, 9, 10])\nPASS: sum_until_limit_transformed(nums=[9, 9, 8])\nPASS: sum_until_limit_transformed(nums=[9, 9, 9])\nPASS: sum_until_limit_transformed(nums=[0, 10, 19, 10, 15, 12, 10])\nPASS: sum_until_limit_transformed(nums=[0, 10, 15, 10, 15, 12, 10])\nPASS: sum_until_limit_transformed(nums=[0, 10, 12, 10, 15, 12, 10])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[14])\nPASS: count_divisibles_transformed(nums=[5])\nPASS: count_divisibles_transformed(nums=[5, 5])\nPASS: count_divisibles_transformed(nums=[5, 16, 4, 16, 2, 5, 13, 2, 20])\nPASS: count_divisibles_transformed(nums=[18])\nPASS: count_divisibles_transformed(nums=[3, 19, 19, 18, 18])\nPASS: count_divisibles_transformed(nums=[10, 5])\nPASS: count_divisibles_transformed(nums=[16, 5, 5, 6, 10, 14, 18, 0, 17, 4])\nPASS: count_divisibles_transformed(nums=[4])\nPASS: count_divisibles_transformed(nums=[11, 7])\nPASS: count_divisibles_transformed(nums=[19, 20])\nPASS: count_divisibles_transformed(nums=[19, 19])\nPASS: count_divisibles_transformed(nums=[10])\nPASS: count_divisibles_transformed(nums=[11])\nPASS: count_divisibles_transformed(nums=[5, 0, 6, 0, 16, 13, 9, 20, 19])\nPASS: count_divisibles_transformed(nums=[13, 0, 6, 0, 16, 13, 9, 20, 19])\nPASS: count_divisibles_transformed(nums=[13, 0, 6, 13, 16, 13, 9, 20, 19])\nPASS: count_divisibles_transformed(nums=[13, 0, 6, 13, 16, 13, 9, 16, 19])\nPASS: count_divisibles_transformed(nums=[13, 0, 6, 13, 16, 13, 9, 9, 19])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[6])\nPASS: index_weighted_sum_transformed(lst=[6, 7])\nPASS: index_weighted_sum_transformed(lst=[9, 4, 0, 7])\nPASS: index_weighted_sum_transformed(lst=[5, 6, 7])\nPASS: index_weighted_sum_transformed(lst=[10, 1, 5])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[3, 4, 6, 6])\nPASS: index_weighted_sum_transformed(lst=[0, 8, 3, 7, 8, 7, 9, 10, 8, 8])\nPASS: index_weighted_sum_transformed(lst=[1, 10, 4, 0])\nPASS: index_weighted_sum_transformed(lst=[1, 1, 4, 0])\nPASS: index_weighted_sum_transformed(lst=[1, 0, 4, 0])\nPASS: index_weighted_sum_transformed(lst=[1, 0])\nPASS: index_weighted_sum_transformed(lst=[1])\nPASS: index_weighted_sum_transformed(lst=[1, 3])\nPASS: index_weighted_sum_transformed(lst=[6, 8, 4, 6, 1, 1, 8, 3, 5, 7])\nPASS: index_weighted_sum_transformed(lst=[6, 8, 4, 6, 1, 1, 7, 3, 5, 7])\nPASS: index_weighted_sum_transformed(lst=[6, 4, 4, 6, 1, 1, 7, 3, 5, 7])\nPASS: index_weighted_sum_transformed(lst=[6, 4, 4, 6, 1, 1, 7, 3, 5, 1])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=5)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u0000\udaac\udf44')\nPASS: character_counter_transformed(text='\u00a0\uda62\udf24d\u00f6')\nPASS: character_counter_transformed(text='2\u0000)O\u0002\ud9c8\udcaf')\nPASS: character_counter_transformed(text='}')\nPASS: character_counter_transformed(text='\uda82\udde4v\u00e7;\u0016F\ud8ef\udf7b@LF')\nPASS: character_counter_transformed(text='/I\u0085\t\ud9c5\udfed8\u7de9}x\ud9e3\udc23')\nPASS: character_counter_transformed(text='\u00fe\u00ab')\nPASS: character_counter_transformed(text='\u00cd\u00e4\u00c8\u00d5\u00ca2\u008av'\u00ad')\nPASS: character_counter_transformed(text='\ud940\udccf\udaa0\udf00\u000e\udae3\udc6e\ua3b2\u00a3\u00ab\u87d0')\nPASS: character_counter_transformed(text='\ud9a1\udc91\u00eb\u00b6-]+\ud852\udec3\u00b7\u009a\u0090')\nPASS: character_counter_transformed(text='\u00f1')\nPASS: character_counter_transformed(text='\u00d57\u00fd5')\nPASS: character_counter_transformed(text='\udaf2\udff2\uda18\udda0')\nPASS: character_counter_transformed(text=''\ud930\udc11\u00a5\udb42\udd00')\nPASS: character_counter_transformed(text='\u0098\u0098\ud9e9\udd06l)')\nPASS: character_counter_transformed(text='INF')\nPASS: character_counter_transformed(text='\u0001m\udb20\udcd1!\u00c7R\uda48\ude44\ud8dd\uddec\u00f3\ud953\udf4a')\nPASS: character_counter_transformed(text='\uda1f\ude1e\uda99\ude60\u00f4\u0005_')\nPASS: character_counter_transformed(text='\u00b1$\ud9f6\udc0c\u0003\u5f02\b\u00f1F\udaa9\udd58\u00d2')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[51])\nPASS: rolling_maximum_transformed(values=[51, 82])\nPASS: rolling_maximum_transformed(values=[27, 1, 95, 97, 34, 26, 30, 9, 85])\nPASS: rolling_maximum_transformed(values=[1, 55, 8, 1])\nPASS: rolling_maximum_transformed(values=[54, 68, 71, 76, 0, 42, 33, 40, 57, 72])\nPASS: rolling_maximum_transformed(values=[53, 91])\nPASS: rolling_maximum_transformed(values=[42, 22])\nPASS: rolling_maximum_transformed(values=[24, 20, 35, 62, 59, 74, 34, 8])\nPASS: rolling_maximum_transformed(values=[82, 39, 92, 82, 66, 87, 28, 76, 67, 16])\nPASS: rolling_maximum_transformed(values=[96, 100, 77, 67, 46, 88, 56, 99, 50, 29])\nPASS: rolling_maximum_transformed(values=[96, 100, 77, 50, 46, 88, 56, 99, 50, 29])\nPASS: rolling_maximum_transformed(values=[96, 100, 77, 50, 50, 88, 56, 99, 50, 29])\nPASS: rolling_maximum_transformed(values=[96, 100, 77, 50, 50, 88, 56, 99, 29, 29])\nPASS: rolling_maximum_transformed(values=[96, 77, 77, 50, 50, 88, 56, 99, 29, 29])\nPASS: rolling_maximum_transformed(values=[96, 77, 29, 50, 50, 88, 56, 99, 29, 29])\nPASS: rolling_maximum_transformed(values=[96, 77, 29, 50, 50, 88, 56, 99, 50, 29])\nPASS: rolling_maximum_transformed(values=[73, 46, 68])\nPASS: rolling_maximum_transformed(values=[73, 68, 68])\nPASS: rolling_maximum_transformed(values=[68, 68, 68])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_25": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=84)\nPASS: process_data_transformed(x=74)\nPASS: process_data_transformed(x=38)\nPASS: process_data_transformed(x=95)\nPASS: process_data_transformed(x=33)\nPASS: process_data_transformed(x=28)\nPASS: process_data_transformed(x=57)\nPASS: process_data_transformed(x=89)\nPASS: process_data_transformed(x=67)\nPASS: process_data_transformed(x=1)\nPASS: process_data_transformed(x=16)\nPASS: process_data_transformed(x=97)\nPASS: process_data_transformed(x=31)\nPASS: process_data_transformed(x=5)\nPASS: process_data_transformed(x=34)\nPASS: process_data_transformed(x=59)\nPASS: process_data_transformed(x=26)\nPASS: process_data_transformed(x=6)\nPASS: process_data_transformed(x=73)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=56.92723388338129)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=0.99999)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=43.1892180543194)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=7.059700540083144e-30)\nPASS: convert_temperature_transformed(c=34.848186317553115)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=182.09893810745385, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=182.09893810745385, discount_rate=9.349366876180234e-243)\nPASS: calculate_discount_transformed(price=96.47473768369615, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=0.17236564939478208)\nPASS: calculate_discount_transformed(price=6.103515625e-05, discount_rate=0.8318330745590272)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=6.103515625e-05, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=6.103515625e-05, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=112.1800276496398, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=112.1800276496398, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=74.17277925073212, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.5)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=20.0, imag=0.0)\nPASS: process_complex_number_transformed(real=20.0, imag=-1.192092896e-07)\nPASS: process_complex_number_transformed(real=0.5, imag=-1.175494351e-38)\nPASS: process_complex_number_transformed(real=2.220446049250313e-16, imag=-2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=-5.8812353454621995, imag=2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=-3.526755341925231e-88, imag=-1.192092896e-07)\nPASS: process_complex_number_transformed(real=-1.175494351e-38, imag=20.0)\nPASS: process_complex_number_transformed(real=-2.00001, imag=18.53520680435019)\nPASS: process_complex_number_transformed(real=2.2250738585072014e-308, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=-19.0, imag=1.1028893200349804e-100)\nPASS: process_complex_number_transformed(real=1.1028893200349804e-100, imag=1.1028893200349804e-100)\nPASS: process_complex_number_transformed(real=-0.3494645546866124, imag=19.0)\nPASS: process_complex_number_transformed(real=19.0, imag=19.0)\nPASS: process_complex_number_transformed(real=1.9581212124243343, imag=-5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=-5.960464477539063e-08, imag=-5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=0.99999, imag=-1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=-1.1754943508222875e-38, imag=-1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=-17.90812597705397, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=1.1125369292536007e-308)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=74)\nPASS: transform_data_transformed(input_value=70)\nPASS: transform_data_transformed(input_value=52)\nPASS: transform_data_transformed(input_value=17)\nPASS: transform_data_transformed(input_value=93)\nPASS: transform_data_transformed(input_value=22)\nPASS: transform_data_transformed(input_value=4)\nPASS: transform_data_transformed(input_value=60)\nPASS: transform_data_transformed(input_value=43)\nPASS: transform_data_transformed(input_value=46)\nPASS: transform_data_transformed(input_value=39)\nPASS: transform_data_transformed(input_value=49)\nPASS: transform_data_transformed(input_value=26)\nPASS: transform_data_transformed(input_value=24)\nPASS: transform_data_transformed(input_value=55)\nPASS: transform_data_transformed(input_value=44)\nPASS: transform_data_transformed(input_value=9)\nPASS: transform_data_transformed(input_value=33)\nPASS: transform_data_transformed(input_value=73)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=5.885486375374423)\nPASS: circle_area_diff_transformed(r=13.010705583482595)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=1.192092896e-07)\nPASS: circle_area_diff_transformed(r=13.457827003185347)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=16.354933164682762)\nPASS: circle_area_diff_transformed(r=3.1220628662104626)\nPASS: circle_area_diff_transformed(r=2.0040162172792958e-79)\nPASS: circle_area_diff_transformed(r=17.17343950000082)\nPASS: circle_area_diff_transformed(r=10.626180605069797)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=3, b=1, c=1)\nPASS: triangle_checker_transformed(a=3, b=4, c=10)\nPASS: triangle_checker_transformed(a=8, b=9, c=7)\nPASS: triangle_checker_transformed(a=3, b=13, c=17)\nPASS: triangle_checker_transformed(a=17, b=17, c=19)\nPASS: triangle_checker_transformed(a=5, b=14, c=20)\nPASS: triangle_checker_transformed(a=4, b=8, c=11)\nPASS: triangle_checker_transformed(a=20, b=20, c=18)\nPASS: triangle_checker_transformed(a=19, b=13, c=12)\nPASS: triangle_checker_transformed(a=6, b=17, c=4)\nPASS: triangle_checker_transformed(a=6, b=17, c=6)\nPASS: triangle_checker_transformed(a=6, b=6, c=6)\nPASS: triangle_checker_transformed(a=18, b=1, c=15)\nPASS: triangle_checker_transformed(a=18, b=15, c=15)\nPASS: triangle_checker_transformed(a=18, b=18, c=15)\nPASS: triangle_checker_transformed(a=18, b=18, c=18)\nPASS: triangle_checker_transformed(a=5, b=16, c=16)\nPASS: triangle_checker_transformed(a=5, b=5, c=16)\nPASS: triangle_checker_transformed(a=5, b=5, c=5)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=70.28904279678338)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=39.05242261269627)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=49.70691027246495)\nPASS: temperature_offset_transformed(c=77.98819239141837)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=4, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=4, b=-7, c=-10)\nPASS: quadratic_discriminant_transformed(a=-5, b=-3, c=-7)\nPASS: quadratic_discriminant_transformed(a=5, b=2, c=-7)\nPASS: quadratic_discriminant_transformed(a=4, b=4, c=-9)\nPASS: quadratic_discriminant_transformed(a=-4, b=5, c=-8)\nPASS: quadratic_discriminant_transformed(a=6, b=-3, c=-6)\nPASS: quadratic_discriminant_transformed(a=3, b=-6, c=-1)\nPASS: quadratic_discriminant_transformed(a=1, b=-6, c=3)\nPASS: quadratic_discriminant_transformed(a=1, b=-10, c=5)\nPASS: quadratic_discriminant_transformed(a=1, b=-10, c=-10)\nPASS: quadratic_discriminant_transformed(a=-10, b=-10, c=-10)\nPASS: quadratic_discriminant_transformed(a=7, b=-3, c=0)\nPASS: quadratic_discriminant_transformed(a=7, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=3, b=-1, c=-6)\nPASS: quadratic_discriminant_transformed(a=3, b=-6, c=-6)\nPASS: quadratic_discriminant_transformed(a=3, b=3, c=-6)\nPASS: quadratic_discriminant_transformed(a=-6, b=3, c=-6)\nPASS: quadratic_discriminant_transformed(a=-6, b=-6, c=-6)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=1.175494351e-38, y=0.0)\nPASS: vector_norm_transformed(x=1.175494351e-38, y=7.4474445017419875)\nPASS: vector_norm_transformed(x=2.220446049250313e-16, y=0.99999)\nPASS: vector_norm_transformed(x=-9.999999999999998, y=-1.5)\nPASS: vector_norm_transformed(x=1.1125369292536007e-308, y=-6.42098755610847)\nPASS: vector_norm_transformed(x=1.235966062733359e-221, y=5e-324)\nPASS: vector_norm_transformed(x=0.44229250148500476, y=-5e-324)\nPASS: vector_norm_transformed(x=9.0, y=1.5)\nPASS: vector_norm_transformed(x=-9.0, y=-4.89817981504919)\nPASS: vector_norm_transformed(x=7.252335100453369, y=-2.415436710625489)\nPASS: vector_norm_transformed(x=7.252335100453369, y=7.252335100453369)\nPASS: vector_norm_transformed(x=-5.960464477539063e-08, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=5.960464477539063e-08, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-9.0, y=-3.220802087594982)\nPASS: vector_norm_transformed(x=-9.0, y=-9.0)\nPASS: vector_norm_transformed(x=1.1, y=-2.225073858507203e-309)\nPASS: vector_norm_transformed(x=-2.225073858507203e-309, y=-2.225073858507203e-309)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=-1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=0.0)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=1.1)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=1.1)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=1.0)\nPASS: hypotenuse_diff_transformed(a=1.7270770453662745, b=6.1541895765353996)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=1.1, b=0.5)\nPASS: hypotenuse_diff_transformed(a=0.5, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=7.645333823549008)\nPASS: hypotenuse_diff_transformed(a=7.645333823549008, b=7.645333823549008)\nPASS: hypotenuse_diff_transformed(a=0.0, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=5.371162791889589, b=1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=5.371162791889589, b=5.371162791889589)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='F\u00fe<')\nPASS: ascii_average_transformed(s='\u00c8Z\u00db\u00aa')\nPASS: ascii_average_transformed(s='+')\nPASS: ascii_average_transformed(s=' \u008d3\u001a .\u0013\u0002t\u001c')\nPASS: ascii_average_transformed(s='B\u009b\u00f8\udb92\ude82a\ud85a\udce4\ud8ea\udf02E\u008f9')\nPASS: ascii_average_transformed(s='\u0016.\u000b\udb5e\udfb5\ud866\udfb4\u0080\u00d7')\nPASS: ascii_average_transformed(s='\u0002\uda04\udee3')\nPASS: ascii_average_transformed(s='Q;\u0080b>\ud9b5\uddc8')\nPASS: ascii_average_transformed(s='9\ud813\udcaa\u00e5*\u00f9')\nPASS: ascii_average_transformed(s='\ud8fa\udf51\u00ba\u00c7\u000b\ud959\uddff\ud9ab\udf83\u00f2')\nPASS: ascii_average_transformed(s='\u00dd!\u00cd')\nPASS: ascii_average_transformed(s='\ud9d7\uddb2')\nPASS: ascii_average_transformed(s='\u0015p')\nPASS: ascii_average_transformed(s='\u00fc\u0010\u00ed\uda85\udc94\ud995\udfcd\u00b7\uda3e\udcd1_\u001bN')\nPASS: ascii_average_transformed(s='|')\nPASS: ascii_average_transformed(s='\u0005\udba8\ude5f')\nPASS: ascii_average_transformed(s='\u00d6\u00fd8%\u00cc')\nPASS: ascii_average_transformed(s='\u00c2\u00db\u00fe')\nPASS: ascii_average_transformed(s='\u00c2\ud83a\udc4c\u00cb')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[7, 0])\nPASS: list_balance_transformed(nums=[7, 9, 1])\nPASS: list_balance_transformed(nums=[6, 8, 10, 8, 1])\nPASS: list_balance_transformed(nums=[2, 5, 7])\nPASS: list_balance_transformed(nums=[5, 2, 4, 2, 5, 6, 9, 6, 8, 4])\nPASS: list_balance_transformed(nums=[9, 0, 5, 4])\nPASS: list_balance_transformed(nums=[6, 4, 2, 8, 1, 0, 0, 9, 5, 9])\nPASS: list_balance_transformed(nums=[3, 7, 3, 7, 2, 10, 7, 3, 4, 8])\nPASS: list_balance_transformed(nums=[4, 3, 9, 2])\nPASS: list_balance_transformed(nums=[10, 9, 4, 10, 4, 8, 5, 9, 9])\nPASS: list_balance_transformed(nums=[10, 9, 4, 10, 4, 8])\nPASS: list_balance_transformed(nums=[10, 9, 4, 10, 4, 10])\nPASS: list_balance_transformed(nums=[4, 9, 4, 10, 4, 10])\nPASS: list_balance_transformed(nums=[4, 9, 4, 10, 4])\nPASS: list_balance_transformed(nums=[4, 9, 4, 4, 4])\nPASS: list_balance_transformed(nums=[1, 4, 8, 7])\nPASS: list_balance_transformed(nums=[4, 4, 8, 7])\nPASS: list_balance_transformed(nums=[4, 4, 8, 8])\nPASS: list_balance_transformed(nums=[4, 0])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[10, 9, 10])\nPASS: odd_sum_validator_transformed(lst=[5, 6, 9, 8])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[1, 7, 7])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[5, 2, 10, 3])\nPASS: odd_sum_validator_transformed(lst=[0, 7, 6, 3, 3, 0, 10, 1])\nPASS: odd_sum_validator_transformed(lst=[0, 9, 9, 9, 2])\nPASS: odd_sum_validator_transformed(lst=[9, 9, 9, 9, 2])\nPASS: odd_sum_validator_transformed(lst=[9, 9, 9, 2, 2])\nPASS: odd_sum_validator_transformed(lst=[9, 9])\nPASS: odd_sum_validator_transformed(lst=[8, 0, 6, 4, 4, 2, 10, 8, 10, 10])\nPASS: odd_sum_validator_transformed(lst=[8, 0, 6, 4, 4, 2, 10, 10, 10, 10])\nPASS: odd_sum_validator_transformed(lst=[8, 0, 6, 4, 4, 6, 10, 10, 10, 10])\nPASS: odd_sum_validator_transformed(lst=[8, 0, 6, 4, 4, 6, 6, 10, 10, 10])\nPASS: odd_sum_validator_transformed(lst=[8, 10, 6, 4, 4, 6, 6, 10, 10, 10])\nPASS: odd_sum_validator_transformed(lst=[8, 10, 6, 10, 4, 6, 6, 10, 10, 10])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u0087\u00be\u00f7\u00d3t\u00f33\udb51\udff0*\u0006')\nPASS: string_pattern_score_transformed(s='\u00f9\ud890\udc2c\u001e\ud8db\udee3')\nPASS: string_pattern_score_transformed(s='\ud971\ude26')\nPASS: string_pattern_score_transformed(s='f')\nPASS: string_pattern_score_transformed(s='\udbd3\udf0e\"\uad32l\u00a2\u00feoO')\nPASS: string_pattern_score_transformed(s='v')\nPASS: string_pattern_score_transformed(s='\u00df\udbf8\udc6e\u0002PO\u00d2:\u001a\u00e5\u00ff')\nPASS: string_pattern_score_transformed(s='\udb19\udeaa\u001e\u0081$\u00ba\u00ca\uda14\ude3b\uda14\udf71T\u0082')\nPASS: string_pattern_score_transformed(s='\udb0c\udef7\u00df\u008fY\u00aa\u00d8')\nPASS: string_pattern_score_transformed(s='o')\nPASS: string_pattern_score_transformed(s='D\u008d\u00bbz?\ud9a1\ude9a\u00b5\u00cd\u000b\u001c')\nPASS: string_pattern_score_transformed(s='1\u001b\u000f\u00ec\ud9cd\udea7\u00e2\uda42\ude84\u00f7')\nPASS: string_pattern_score_transformed(s='\u00a3\u0091\u00cd\u009b\uda98\udc8e5\u008b\ud95b\udde6\udb1b\udd6a\ud99f\ude1c')\nPASS: string_pattern_score_transformed(s='\u000b6\ud8ac\udddc\u0099\u00e2Z\u00f8\u0003\udb95\ude31X')\nPASS: string_pattern_score_transformed(s='/Q9\ud8d8\ude1a')\nPASS: string_pattern_score_transformed(s='\ud820\ude9f. X')\nPASS: string_pattern_score_transformed(s='\u0080\ud8f4\udfdd\u00c1\"\u0016\u0016\u00c0\u00c3\u00a9')\nPASS: string_pattern_score_transformed(s='7\u00e6W\u0013z')\nPASS: string_pattern_score_transformed(s='A')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[2])\nPASS: sum_until_limit_transformed(nums=[2, 18])\nPASS: sum_until_limit_transformed(nums=[4, 2, 20, 17, 9, 3, 2, 8, 14, 0])\nPASS: sum_until_limit_transformed(nums=[7, 19, 15, 15, 9, 2, 5, 10])\nPASS: sum_until_limit_transformed(nums=[16, 5, 5, 6, 20, 12, 3])\nPASS: sum_until_limit_transformed(nums=[2, 13, 3, 17, 9, 18, 13, 19, 17, 19])\nPASS: sum_until_limit_transformed(nums=[4])\nPASS: sum_until_limit_transformed(nums=[4, 6])\nFAIL: sum_until_limit_transformed(nums=[11, 9, 4, 8, 2, 0, 16, 4, 14, 13])\nPASS: sum_until_limit_transformed(nums=[11])\nPASS: sum_until_limit_transformed(nums=[20, 10, 8])\nPASS: sum_until_limit_transformed(nums=[20, 10, 20])\nPASS: sum_until_limit_transformed(nums=[20, 10, 10])\nPASS: sum_until_limit_transformed(nums=[10, 10, 10])\nPASS: sum_until_limit_transformed(nums=[10, 10])\nPASS: sum_until_limit_transformed(nums=[14])\nPASS: sum_until_limit_transformed(nums=[17, 13, 17, 12, 13, 9, 2, 2])\nPASS: sum_until_limit_transformed(nums=[17, 13, 17, 12, 13, 9, 12, 2])\nPASS: sum_until_limit_transformed(nums=[17, 13, 17, 12, 13, 17, 12, 2])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[11])\nPASS: count_divisibles_transformed(nums=[16])\nPASS: count_divisibles_transformed(nums=[20, 0, 15])\nPASS: count_divisibles_transformed(nums=[14, 19, 6])\nPASS: count_divisibles_transformed(nums=[20])\nPASS: count_divisibles_transformed(nums=[15, 2, 2, 20, 18, 5, 4, 1, 6, 15])\nPASS: count_divisibles_transformed(nums=[6, 0, 1, 6, 0])\nPASS: count_divisibles_transformed(nums=[4, 3, 5])\nPASS: count_divisibles_transformed(nums=[10, 3, 12, 10, 14, 14, 2, 8, 14, 4])\nPASS: count_divisibles_transformed(nums=[9, 16, 5, 14, 2, 17, 2, 1, 19, 0])\nPASS: count_divisibles_transformed(nums=[14, 16, 5, 14, 2, 17, 2, 1, 19, 0])\nPASS: count_divisibles_transformed(nums=[19, 16, 5, 14, 2, 17, 2, 1, 19, 0])\nPASS: count_divisibles_transformed(nums=[19, 16, 5, 14, 2, 17, 19, 1, 19, 0])\nPASS: count_divisibles_transformed(nums=[19, 16, 5, 14, 16, 17, 19, 1, 19, 0])\nPASS: count_divisibles_transformed(nums=[14])\nPASS: count_divisibles_transformed(nums=[17, 4, 17])\nPASS: count_divisibles_transformed(nums=[17, 17, 17])\nPASS: count_divisibles_transformed(nums=[20, 14, 8, 5])\nPASS: count_divisibles_transformed(nums=[20, 14, 14, 5])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[0, 0])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[4, 4, 7, 7, 10, 2, 10, 8])\nPASS: index_weighted_sum_transformed(lst=[6, 5])\nPASS: index_weighted_sum_transformed(lst=[1, 4, 9, 8, 0, 3, 6])\nPASS: index_weighted_sum_transformed(lst=[4])\nPASS: index_weighted_sum_transformed(lst=[8, 3, 5, 7, 5, 3, 7, 1, 6, 3])\nPASS: index_weighted_sum_transformed(lst=[10, 8, 7, 1, 1, 0, 9])\nPASS: index_weighted_sum_transformed(lst=[2, 1, 4, 4, 6, 8, 5, 9])\nPASS: index_weighted_sum_transformed(lst=[2, 1, 9, 4, 6, 8, 5, 9])\nPASS: index_weighted_sum_transformed(lst=[9, 1, 9, 4, 6, 8, 5, 9])\nPASS: index_weighted_sum_transformed(lst=[9, 1, 9, 9, 6, 8, 5, 9])\nPASS: index_weighted_sum_transformed(lst=[1, 1, 9, 9, 6, 8, 5, 9])\nPASS: index_weighted_sum_transformed(lst=[1, 1, 9, 9, 6, 9, 5, 9])\nPASS: index_weighted_sum_transformed(lst=[1, 1, 9, 9, 6, 9, 1, 9])\nPASS: index_weighted_sum_transformed(lst=[7, 6, 2])\nPASS: index_weighted_sum_transformed(lst=[7, 7, 2])\nPASS: index_weighted_sum_transformed(lst=[7, 2, 2])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=5)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00ba=\u009f\u00d2\u00c8\udb5b\udf427\u00a3')\nPASS: character_counter_transformed(text='\ud897\udc25(2ys')\nPASS: character_counter_transformed(text='\u00e0\ud885\udee6\ud8f3\udd9c\u00c9\u00e0\u00e7\u00c1B')\nPASS: character_counter_transformed(text='\u00f5&\f\ud8f6\udef1\u00f6\u00bc')\nPASS: character_counter_transformed(text='\udbc2\udd89\u0081[')\nPASS: character_counter_transformed(text='Scunthorpe')\nPASS: character_counter_transformed(text='\uda62\udfda\u00bc\u00a4\udaa2\ude45\u00a2\u00f0\u0019\u00c7\u00b9\u00eb')\nPASS: character_counter_transformed(text='\u00d4\u00d7\u0000\u00e3\ud8b6\udf49\u00b9q\ud9ee\udccdK\udb3d\udc18')\nPASS: character_counter_transformed(text='`~\u00daa')\nPASS: character_counter_transformed(text='\udaa4\udf75E\u00cb\u00c9?\u00cf\u00a2.')\nPASS: character_counter_transformed(text='\u00a4')\nPASS: character_counter_transformed(text='\u00f2\u0087P')\nPASS: character_counter_transformed(text='\u0099u\ud98d\udcc3\uda01\udeb1')\nPASS: character_counter_transformed(text='\u00ea \uda45\udcc7\u0099\u0011')\nPASS: character_counter_transformed(text='\udbed\udc36\ud999\udf2e\u0015\u00e4')\nPASS: character_counter_transformed(text='\ud88f\udca4\ud829\udeb2*@N\\<)A0')\nPASS: character_counter_transformed(text='V\n2RPD\u00e55\u0006d')\nPASS: character_counter_transformed(text='\uda43\udc1ex\"')\nPASS: character_counter_transformed(text='\u0093\u00d7\u0012')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[65])\nPASS: rolling_maximum_transformed(values=[65, 23, 92])\nPASS: rolling_maximum_transformed(values=[7, 10, 65])\nPASS: rolling_maximum_transformed(values=[70, 29, 47, 8, 54])\nPASS: rolling_maximum_transformed(values=[38, 47, 10, 56, 5, 58, 75, 3, 19, 98])\nPASS: rolling_maximum_transformed(values=[9, 63, 47, 27, 73, 48, 3, 62, 43, 76])\nPASS: rolling_maximum_transformed(values=[29, 54])\nPASS: rolling_maximum_transformed(values=[70])\nPASS: rolling_maximum_transformed(values=[56])\nPASS: rolling_maximum_transformed(values=[98])\nPASS: rolling_maximum_transformed(values=[20, 3, 24, 50, 92, 60, 52, 2, 41, 99])\nPASS: rolling_maximum_transformed(values=[20, 3, 24, 50, 92, 3, 52, 2, 41, 99])\nPASS: rolling_maximum_transformed(values=[20, 3, 24, 50, 92, 3, 41, 2, 41, 99])\nPASS: rolling_maximum_transformed(values=[3, 3, 24, 50, 92, 3, 41, 2, 41, 99])\nPASS: rolling_maximum_transformed(values=[3, 3, 24, 50, 92, 24, 41, 2, 41, 99])\nPASS: rolling_maximum_transformed(values=[3, 3, 24, 50, 99, 24, 41, 2, 41, 99])\nPASS: rolling_maximum_transformed(values=[3, 3, 24, 50, 99, 24, 41, 2, 24, 99])\nPASS: rolling_maximum_transformed(values=[18, 79, 4, 96, 22, 57, 20, 6, 71, 13])\nPASS: rolling_maximum_transformed(values=[96, 79, 4, 96, 22, 57, 20, 6, 71, 13])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_26": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=11)\nPASS: process_data_transformed(x=83)\nPASS: process_data_transformed(x=78)\nPASS: process_data_transformed(x=10)\nPASS: process_data_transformed(x=6)\nPASS: process_data_transformed(x=96)\nPASS: process_data_transformed(x=50)\nPASS: process_data_transformed(x=100)\nPASS: process_data_transformed(x=69)\nPASS: process_data_transformed(x=70)\nPASS: process_data_transformed(x=91)\nPASS: process_data_transformed(x=77)\nPASS: process_data_transformed(x=65)\nPASS: process_data_transformed(x=60)\nPASS: process_data_transformed(x=5)\nPASS: process_data_transformed(x=92)\nPASS: process_data_transformed(x=31)\nPASS: process_data_transformed(x=22)\nPASS: process_data_transformed(x=88)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=0.7821600139217513)\nPASS: convert_temperature_transformed(c=20.5489808690897)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=31.349410569806896)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=43.37441745306371)\nPASS: convert_temperature_transformed(c=20.99807667365002)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=80.75318190749807)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=63.98185181556738)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=1.401298464324817e-45)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=2.00001, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=27.01070663065966, discount_rate=0.6611659053494497)\nPASS: calculate_discount_transformed(price=37.36784294103384, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=98.59204500064493, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=1.401298464324817e-45)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.9939903271701009)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=5.960464477539063e-08, imag=0.0)\nPASS: process_complex_number_transformed(real=5.960464477539063e-08, imag=-6.890332402660595e-260)\nPASS: process_complex_number_transformed(real=1.5, imag=2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-1.1754943508222875e-38, imag=-2.00001)\nPASS: process_complex_number_transformed(real=-1.192092896e-07, imag=1.192092896e-07)\nPASS: process_complex_number_transformed(real=1.192092896e-07, imag=1.5440300412386335e-98)\nPASS: process_complex_number_transformed(real=-1.175494351e-38, imag=2.00001)\nPASS: process_complex_number_transformed(real=1.1754943508222875e-38, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=1.192092896e-07, imag=12.130531808519933)\nPASS: process_complex_number_transformed(real=3.9790594204915095, imag=2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=3.9790594204915095, imag=3.9790594204915095)\nPASS: process_complex_number_transformed(real=-1.1754943508222875e-38, imag=1.1)\nPASS: process_complex_number_transformed(real=1.1, imag=1.1)\nPASS: process_complex_number_transformed(real=1.5, imag=2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=2.220446049250313e-16, imag=2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=2.220446049250313e-16, imag=-2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=-2.225073858507203e-309, imag=-2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=5.275587525259603, imag=-1.192092896e-07)\nPASS: process_complex_number_transformed(real=-1.192092896e-07, imag=-1.192092896e-07)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=90)\nPASS: transform_data_transformed(input_value=95)\nPASS: transform_data_transformed(input_value=20)\nPASS: transform_data_transformed(input_value=72)\nPASS: transform_data_transformed(input_value=12)\nPASS: transform_data_transformed(input_value=56)\nPASS: transform_data_transformed(input_value=55)\nPASS: transform_data_transformed(input_value=18)\nPASS: transform_data_transformed(input_value=96)\nPASS: transform_data_transformed(input_value=8)\nPASS: transform_data_transformed(input_value=7)\nPASS: transform_data_transformed(input_value=84)\nPASS: transform_data_transformed(input_value=66)\nPASS: transform_data_transformed(input_value=60)\nPASS: transform_data_transformed(input_value=71)\nPASS: transform_data_transformed(input_value=33)\nPASS: transform_data_transformed(input_value=51)\nPASS: transform_data_transformed(input_value=64)\nPASS: transform_data_transformed(input_value=28)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=1.0744872077490331e-212)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=3.0218590525214554e-66)\nPASS: circle_area_diff_transformed(r=10.97356718296149)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=5, b=1, c=1)\nPASS: triangle_checker_transformed(a=5, b=19, c=5)\nPASS: triangle_checker_transformed(a=4, b=2, c=19)\nPASS: triangle_checker_transformed(a=4, b=15, c=5)\nPASS: triangle_checker_transformed(a=4, b=7, c=5)\nPASS: triangle_checker_transformed(a=2, b=15, c=19)\nPASS: triangle_checker_transformed(a=5, b=19, c=7)\nPASS: triangle_checker_transformed(a=3, b=16, c=14)\nPASS: triangle_checker_transformed(a=7, b=3, c=15)\nPASS: triangle_checker_transformed(a=11, b=19, c=15)\nPASS: triangle_checker_transformed(a=11, b=15, c=15)\nPASS: triangle_checker_transformed(a=11, b=11, c=15)\nPASS: triangle_checker_transformed(a=11, b=15, c=11)\nPASS: triangle_checker_transformed(a=15, b=15, c=11)\nPASS: triangle_checker_transformed(a=11, b=11, c=11)\nPASS: triangle_checker_transformed(a=6, b=1, c=13)\nPASS: triangle_checker_transformed(a=6, b=1, c=1)\nPASS: triangle_checker_transformed(a=6, b=1, c=6)\nPASS: triangle_checker_transformed(a=1, b=1, c=6)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=97.42121200934979)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=86.11744400741775)\nPASS: temperature_offset_transformed(c=47.06014579955632)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=99.13057909362743)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=3.7548002025151816e-239)\nPASS: temperature_offset_transformed(c=66.58282676242534)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=10, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=10, b=3, c=-1)\nPASS: quadratic_discriminant_transformed(a=0, b=4, c=4)\nPASS: quadratic_discriminant_transformed(a=8, b=-9, c=3)\nPASS: quadratic_discriminant_transformed(a=-6, b=8, c=7)\nPASS: quadratic_discriminant_transformed(a=-6, b=0, c=-2)\nPASS: quadratic_discriminant_transformed(a=6, b=0, c=2)\nPASS: quadratic_discriminant_transformed(a=-2, b=0, c=1)\nPASS: quadratic_discriminant_transformed(a=-10, b=3, c=4)\nPASS: quadratic_discriminant_transformed(a=5, b=-3, c=-10)\nPASS: quadratic_discriminant_transformed(a=5, b=-3, c=5)\nPASS: quadratic_discriminant_transformed(a=5, b=5, c=5)\nPASS: quadratic_discriminant_transformed(a=6, b=1, c=6)\nPASS: quadratic_discriminant_transformed(a=6, b=6, c=6)\nPASS: quadratic_discriminant_transformed(a=-1, b=-1, c=-4)\nPASS: quadratic_discriminant_transformed(a=-4, b=-1, c=-4)\nPASS: quadratic_discriminant_transformed(a=-4, b=-1, c=-1)\nPASS: quadratic_discriminant_transformed(a=-1, b=-1, c=-1)\nPASS: quadratic_discriminant_transformed(a=-5, b=-1, c=-8)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-5e-324, y=0.0)\nPASS: vector_norm_transformed(x=-5e-324, y=-7.481456722489979)\nPASS: vector_norm_transformed(x=-6.103515625e-05, y=-6.567951658704846)\nPASS: vector_norm_transformed(x=-2.2250738585072014e-308, y=-2.5363996989822892)\nPASS: vector_norm_transformed(x=9.0, y=1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=7.750559943507355, y=1.175494351e-38)\nPASS: vector_norm_transformed(x=-0.99999, y=-0.3333333333333333)\nPASS: vector_norm_transformed(x=0.5, y=-0.3333333333333333)\nPASS: vector_norm_transformed(x=7.005827980133997, y=0.3333333333333333)\nPASS: vector_norm_transformed(x=1.175494351e-38, y=-9.0)\nPASS: vector_norm_transformed(x=-9.0, y=-9.0)\nPASS: vector_norm_transformed(x=2.588686656764791, y=1e-05)\nPASS: vector_norm_transformed(x=2.588686656764791, y=2.588686656764791)\nPASS: vector_norm_transformed(x=2.2250738585072014e-308, y=-1.9)\nPASS: vector_norm_transformed(x=-1.9, y=-1.9)\nPASS: vector_norm_transformed(x=-4.159089519697038, y=-2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=-2.2250738585072014e-308, y=-2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=1.1125369292536007e-308, y=-2.2250738585e-313)\nPASS: vector_norm_transformed(x=-2.2250738585e-313, y=-2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5.685136225989243, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5.685136225989243, b=1.9)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=1.192092896e-07)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=0.39587911419996186, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=7.025985282340571)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=6.226533269240842e-90)\nPASS: hypotenuse_diff_transformed(a=6.068227893149587e-243, b=1.9)\nPASS: hypotenuse_diff_transformed(a=5.847989931470448, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=6.881235181640724e-170, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=6.881235181640724e-170, b=6.881235181640724e-170)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=2.00001)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u00c2\ud818\uddf7\uda1e\udc30')\nPASS: ascii_average_transformed(s='9A67\u009c\ud889\ude9a\u00b5\u0089\ud98a\udf88]')\nPASS: ascii_average_transformed(s='\u00d6?Y\udb3f\udd9c\ud8dc\udfde')\nPASS: ascii_average_transformed(s='\u00d9\u009a\u00df\udab3\udd5a\u00f2\u0003;\n\udada\udd73')\nPASS: ascii_average_transformed(s='h\u00f1\uda7e\uddf6\"')\nPASS: ascii_average_transformed(s='\u00bc')\nPASS: ascii_average_transformed(s=')')\nPASS: ascii_average_transformed(s=''\u00a0\u00b4\udae0\udec4J')\nPASS: ascii_average_transformed(s='\udbb2\ude4ea\u00e5k')\nPASS: ascii_average_transformed(s='\u00e4\u00ee'\u0012\u00a7\ud877\uddab\u0086\u00d6>\u0092')\nPASS: ascii_average_transformed(s='\u00cf\u0097\u00c2\u00a0\u00c1\u0091')\nPASS: ascii_average_transformed(s='x\uda32\udd74\u00b0\u00a0\uda89\udede\udb55\udf86\u00e1\u00af\u00f9\u00c7')\nPASS: ascii_average_transformed(s='I\ud9d1\udd76')\nPASS: ascii_average_transformed(s='\u000b&\u008e\u0001\u00ca@')\nPASS: ascii_average_transformed(s='\u0003@n')\nPASS: ascii_average_transformed(s='\ud83d\ude0d')\nPASS: ascii_average_transformed(s='\u0014\u009en')\nPASS: ascii_average_transformed(s='E\u007f\u0091P\u0017\u00e5\u0099\ud8ff\udcd2(+')\nPASS: ascii_average_transformed(s='\nb\udb46\udcf3\ud857\ude1e(f\u0091\ud881\uddd6\u008b'')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[10, 0])\nPASS: list_balance_transformed(nums=[10, 8, 6, 10])\nPASS: list_balance_transformed(nums=[0, 2, 10, 7, 10, 8, 2, 10, 6, 8])\nPASS: list_balance_transformed(nums=[8, 9, 6, 0, 10, 2])\nPASS: list_balance_transformed(nums=[1, 5, 0, 4, 6, 6, 1, 7, 10, 7])\nPASS: list_balance_transformed(nums=[1, 8])\nPASS: list_balance_transformed(nums=[10, 5, 5, 10, 10, 5, 3, 6, 8, 10])\nPASS: list_balance_transformed(nums=[3, 0, 6])\nPASS: list_balance_transformed(nums=[7, 2])\nPASS: list_balance_transformed(nums=[0, 3])\nPASS: list_balance_transformed(nums=[5, 7, 8])\nPASS: list_balance_transformed(nums=[5, 5, 8])\nPASS: list_balance_transformed(nums=[5, 5, 5])\nPASS: list_balance_transformed(nums=[10, 6, 1, 0, 6, 6, 6, 3, 8])\nPASS: list_balance_transformed(nums=[10, 6, 1, 0, 6, 6, 6, 1, 8])\nPASS: list_balance_transformed(nums=[10, 6, 1, 0, 6, 1, 6, 1, 8])\nPASS: list_balance_transformed(nums=[10, 6, 1, 8, 6, 6, 6, 1, 8])\nPASS: list_balance_transformed(nums=[10, 6, 1, 8, 6, 6, 10, 1, 8])\nPASS: list_balance_transformed(nums=[10, 1, 1, 8, 6, 6, 10, 1, 8])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[4])\nPASS: odd_sum_validator_transformed(lst=[4, 1])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[1, 4, 10, 3, 3, 0, 6])\nPASS: odd_sum_validator_transformed(lst=[4, 8])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[5, 6, 6, 7, 1])\nPASS: odd_sum_validator_transformed(lst=[9, 3, 3, 7, 2])\nPASS: odd_sum_validator_transformed(lst=[3, 4, 10, 1, 7, 7, 10, 6, 9, 5])\nPASS: odd_sum_validator_transformed(lst=[4, 4, 5, 10, 8, 5, 0, 1, 7, 1])\nPASS: odd_sum_validator_transformed(lst=[4, 4, 5, 10, 1, 5, 0, 1, 7, 1])\nPASS: odd_sum_validator_transformed(lst=[4, 4])\nPASS: odd_sum_validator_transformed(lst=[1])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[2, 2, 7])\nPASS: odd_sum_validator_transformed(lst=[2, 2, 2])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[4, 3, 10, 10, 1, 6, 2, 3])\nPASS: odd_sum_validator_transformed(lst=[4, 3, 2, 10, 1, 6, 2, 3])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\uda90\udfbf\u00b2')\nPASS: string_pattern_score_transformed(s='\u0094\u00ff\u00cb\udb91\ude5d<]\ud825\udf6f\u00fd')\nPASS: string_pattern_score_transformed(s='\u00c0S\u00bf')\nPASS: string_pattern_score_transformed(s='$')\nPASS: string_pattern_score_transformed(s='\u000e')\nPASS: string_pattern_score_transformed(s='H')\nPASS: string_pattern_score_transformed(s='\u001f\u0003\ud93e\udf99J\u00f2\u0097\u00d8\u0004\u0097\udaac\ude83')\nPASS: string_pattern_score_transformed(s='\udab0\ude22\u00aa\u0007\u0096\u0006\u0011)\ud991\udd9c\u00c7\u0001')\nPASS: string_pattern_score_transformed(s='B\u00f7\udae8\udca3&5x\u00beS$')\nPASS: string_pattern_score_transformed(s='\u00ac\u00adt\u0098Ku')\nPASS: string_pattern_score_transformed(s='5\u00055\udae8\uddbb\ud892\udfbc')\nPASS: string_pattern_score_transformed(s='\ud917\udc6c\u00bc')\nPASS: string_pattern_score_transformed(s='\u00c88N')\nPASS: string_pattern_score_transformed(s='\u00ca\u001fb\u00dd\u00dc\u00f1\u001e\u0091\u001a')\nPASS: string_pattern_score_transformed(s='\u00e5%`\ud9e0\udd0aa\u00cdD')\nPASS: string_pattern_score_transformed(s='`\u0090\u00e3\u0093')\nPASS: string_pattern_score_transformed(s='\udbd0\udc54\u0081')\nPASS: string_pattern_score_transformed(s='\uda3d\udd84\u0002\u00c8\ud8ec\udccdI\ud86e\ude33\u0019R\ud97c\udd07\u00d7')\nPASS: string_pattern_score_transformed(s='\ud849\udd03\u00b3\u00f1A!)\u0086\udbc2\ude42\uda33\udf07\u001b')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[18])\nPASS: sum_until_limit_transformed(nums=[18, 20])\nPASS: sum_until_limit_transformed(nums=[4, 11, 17, 14, 3, 11, 12, 1, 12, 12])\nPASS: sum_until_limit_transformed(nums=[18, 20, 2, 11, 10, 11, 8, 10, 1, 9])\nPASS: sum_until_limit_transformed(nums=[10])\nPASS: sum_until_limit_transformed(nums=[17])\nPASS: sum_until_limit_transformed(nums=[4])\nPASS: sum_until_limit_transformed(nums=[17, 2, 3, 17, 15])\nPASS: sum_until_limit_transformed(nums=[18, 12, 13, 1, 8, 14, 17, 8, 16, 16])\nPASS: sum_until_limit_transformed(nums=[8])\nPASS: sum_until_limit_transformed(nums=[9, 2, 17, 17, 9])\nPASS: sum_until_limit_transformed(nums=[9, 2, 17, 17, 17])\nPASS: sum_until_limit_transformed(nums=[9, 2, 17, 17])\nPASS: sum_until_limit_transformed(nums=[17, 2, 17, 17])\nPASS: sum_until_limit_transformed(nums=[17, 2, 2, 17])\nPASS: sum_until_limit_transformed(nums=[17, 2, 17])\nPASS: sum_until_limit_transformed(nums=[17, 17, 17])\nPASS: sum_until_limit_transformed(nums=[4, 7, 19, 9])\nPASS: sum_until_limit_transformed(nums=[19, 7, 19, 9])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[19])\nPASS: count_divisibles_transformed(nums=[6])\nPASS: count_divisibles_transformed(nums=[10])\nPASS: count_divisibles_transformed(nums=[18, 17, 11, 5, 12, 9])\nPASS: count_divisibles_transformed(nums=[8, 6, 5, 1, 18, 20, 19, 5, 5, 19])\nPASS: count_divisibles_transformed(nums=[20, 7, 8, 5, 18, 19])\nPASS: count_divisibles_transformed(nums=[12, 3, 2])\nPASS: count_divisibles_transformed(nums=[15, 18])\nPASS: count_divisibles_transformed(nums=[1, 3, 17])\nPASS: count_divisibles_transformed(nums=[12])\nPASS: count_divisibles_transformed(nums=[10, 5, 17, 19])\nPASS: count_divisibles_transformed(nums=[10, 5, 19, 19])\nPASS: count_divisibles_transformed(nums=[19, 5, 19, 19])\nPASS: count_divisibles_transformed(nums=[19, 19, 19, 19])\nPASS: count_divisibles_transformed(nums=[0, 12, 1, 2, 20, 10, 8, 16, 13, 2])\nPASS: count_divisibles_transformed(nums=[0, 12, 1, 2, 20, 10, 2, 16, 13, 2])\nPASS: count_divisibles_transformed(nums=[12, 3])\nPASS: count_divisibles_transformed(nums=[1])\nPASS: count_divisibles_transformed(nums=[12, 16, 20, 11, 20, 11])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[5])\nPASS: index_weighted_sum_transformed(lst=[5, 4])\nPASS: index_weighted_sum_transformed(lst=[10, 1, 1])\nPASS: index_weighted_sum_transformed(lst=[6, 3, 7, 4])\nPASS: index_weighted_sum_transformed(lst=[1, 9, 6, 10])\nPASS: index_weighted_sum_transformed(lst=[8, 0, 0, 8, 7, 10, 9, 10, 7, 4])\nPASS: index_weighted_sum_transformed(lst=[1])\nPASS: index_weighted_sum_transformed(lst=[6])\nPASS: index_weighted_sum_transformed(lst=[3, 4])\nPASS: index_weighted_sum_transformed(lst=[3, 3])\nPASS: index_weighted_sum_transformed(lst=[0, 6, 10, 4, 10])\nPASS: index_weighted_sum_transformed(lst=[0, 0, 10, 4, 10])\nPASS: index_weighted_sum_transformed(lst=[0, 10, 10, 4, 10])\nPASS: index_weighted_sum_transformed(lst=[0, 10, 10, 10, 10])\nPASS: index_weighted_sum_transformed(lst=[10, 10, 10, 10, 10])\nPASS: index_weighted_sum_transformed(lst=[10, 10])\nPASS: index_weighted_sum_transformed(lst=[5, 7, 4, 6, 7])\nPASS: index_weighted_sum_transformed(lst=[5, 7, 4, 7, 7])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=5)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='INF')\nPASS: character_counter_transformed(text='\u00c8+n')\nPASS: character_counter_transformed(text='d\ud988\udc77\u00ad\u00b1c\uda08\udd21\u00c3\ud90e\udd80\u0005\u0083')\nPASS: character_counter_transformed(text='\udb60\ude27\u00a6q\u00d6')\nPASS: character_counter_transformed(text='nLQ,')\nPASS: character_counter_transformed(text='\u00ad\ud8ac\ude12\u0091')\nPASS: character_counter_transformed(text='>')\nPASS: character_counter_transformed(text='\udbe5\udd28\u00c0\u00fd\\-X\ud83d\udc35\u0099\ud9d4\udd69\u00ec')\nPASS: character_counter_transformed(text='\u0011\u00a0\u00b8')\nPASS: character_counter_transformed(text='\u1d96\udaf5\udf71')\nPASS: character_counter_transformed(text='\uda7d\udcfeR\u00c7\uda7f\udced\u00d3\u0005\udabd\udd46\udb51\udf0c\uda3f\udcbd#')\nPASS: character_counter_transformed(text='+\u00a0\udbad\udcc3')\nPASS: character_counter_transformed(text='\u000fn')\nPASS: character_counter_transformed(text='\u001a\u0083\udb1e\udd9b\u0015\ud805\udea8S')\nPASS: character_counter_transformed(text='\u0000\u00ad')\nPASS: character_counter_transformed(text='({\u00e8\u008f7\u009aawd\ud84b\udf32')\nPASS: character_counter_transformed(text='\u008a\n\ud977\udcb7\f\ud87f\udfea\u00dd')\nPASS: character_counter_transformed(text='\u00b02')\nPASS: character_counter_transformed(text='\u00ac\u0006\ud90e\udc00\u00fd\u00d6r\u00d5\udb94\udfda\ud8b8\uddcb2')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[75])\nPASS: rolling_maximum_transformed(values=[72])\nPASS: rolling_maximum_transformed(values=[43, 47])\nPASS: rolling_maximum_transformed(values=[36, 6, 63, 51, 53, 83, 74, 5, 43, 22])\nPASS: rolling_maximum_transformed(values=[28, 75, 82, 62, 51, 7, 25, 85, 6, 2])\nPASS: rolling_maximum_transformed(values=[8, 59, 91, 0, 29, 46, 42, 27, 86, 6])\nPASS: rolling_maximum_transformed(values=[30, 8, 0, 94, 35, 99, 49, 99, 98, 34])\nPASS: rolling_maximum_transformed(values=[4, 47])\nPASS: rolling_maximum_transformed(values=[42, 55, 97, 74, 1, 51, 6, 91, 85, 100])\nPASS: rolling_maximum_transformed(values=[79])\nPASS: rolling_maximum_transformed(values=[20])\nPASS: rolling_maximum_transformed(values=[43])\nPASS: rolling_maximum_transformed(values=[93, 51, 72])\nPASS: rolling_maximum_transformed(values=[93, 72, 72])\nPASS: rolling_maximum_transformed(values=[72, 72, 72])\nPASS: rolling_maximum_transformed(values=[72, 72])\nPASS: rolling_maximum_transformed(values=[46, 88])\nPASS: rolling_maximum_transformed(values=[88, 88])\nPASS: rolling_maximum_transformed(values=[88])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_27": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=64)\nPASS: process_data_transformed(x=97)\nPASS: process_data_transformed(x=69)\nPASS: process_data_transformed(x=74)\nPASS: process_data_transformed(x=62)\nPASS: process_data_transformed(x=29)\nPASS: process_data_transformed(x=24)\nPASS: process_data_transformed(x=49)\nPASS: process_data_transformed(x=34)\nPASS: process_data_transformed(x=96)\nPASS: process_data_transformed(x=63)\nPASS: process_data_transformed(x=77)\nPASS: process_data_transformed(x=41)\nPASS: process_data_transformed(x=59)\nPASS: process_data_transformed(x=100)\nPASS: process_data_transformed(x=86)\nPASS: process_data_transformed(x=56)\nPASS: process_data_transformed(x=99)\nPASS: process_data_transformed(x=84)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=67.07711994637503)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=83.92525960492169)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=1e-05)\nFAIL: convert_temperature_transformed(c=37.65300215529671)\nPASS: convert_temperature_transformed(c=5.472492633523552e-109)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=70.29743804948218)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=0.99999)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=0.5733300849943329)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=150.8304979890696, discount_rate=0.3333333333333333)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=121.83267548312477, discount_rate=0.8274503704197487)\nPASS: calculate_discount_transformed(price=121.83267548312477, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=14.537469945492946, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=14.537469945492946, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=1.175494351e-38)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=12.34391651184734, imag=0.0)\nPASS: process_complex_number_transformed(real=12.34391651184734, imag=-2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=-1.1, imag=-1e-05)\nPASS: process_complex_number_transformed(real=-20.0, imag=-5.351222858433696)\nPASS: process_complex_number_transformed(real=5e-324, imag=1.5)\nPASS: process_complex_number_transformed(real=0.3333333333333333, imag=-2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=1.1124913331951313e-107)\nPASS: process_complex_number_transformed(real=-2.00001, imag=15.092130288479453)\nPASS: process_complex_number_transformed(real=-3.801314651039073e-177, imag=-2.8209779378232334)\nPASS: process_complex_number_transformed(real=1.175494351e-38, imag=1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=1.175494351e-38, imag=1.175494351e-38)\nPASS: process_complex_number_transformed(real=4.709703490243377e-253, imag=-1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=-1.401298464324817e-45, imag=-1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=20.0, imag=2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=20.0, imag=20.0)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=6.103515625e-05)\nPASS: process_complex_number_transformed(real=19.0, imag=1.5)\nPASS: process_complex_number_transformed(real=1.5, imag=1.5)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=22)\nPASS: transform_data_transformed(input_value=59)\nPASS: transform_data_transformed(input_value=25)\nPASS: transform_data_transformed(input_value=64)\nPASS: transform_data_transformed(input_value=31)\nPASS: transform_data_transformed(input_value=52)\nPASS: transform_data_transformed(input_value=55)\nPASS: transform_data_transformed(input_value=32)\nPASS: transform_data_transformed(input_value=98)\nPASS: transform_data_transformed(input_value=16)\nPASS: transform_data_transformed(input_value=17)\nPASS: transform_data_transformed(input_value=82)\nPASS: transform_data_transformed(input_value=20)\nPASS: transform_data_transformed(input_value=8)\nPASS: transform_data_transformed(input_value=50)\nPASS: transform_data_transformed(input_value=83)\nPASS: transform_data_transformed(input_value=44)\nPASS: transform_data_transformed(input_value=46)\nPASS: transform_data_transformed(input_value=3)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=5.354060396431347)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=1.175494351e-38)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: circle_area_diff_transformed(r=11.780793549614346)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=11, b=1, c=1)\nPASS: triangle_checker_transformed(a=11, b=4, c=17)\nPASS: triangle_checker_transformed(a=15, b=8, c=5)\nPASS: triangle_checker_transformed(a=9, b=1, c=13)\nPASS: triangle_checker_transformed(a=5, b=19, c=6)\nPASS: triangle_checker_transformed(a=4, b=11, c=14)\nPASS: triangle_checker_transformed(a=17, b=6, c=7)\nPASS: triangle_checker_transformed(a=17, b=2, c=1)\nPASS: triangle_checker_transformed(a=1, b=4, c=7)\nPASS: triangle_checker_transformed(a=2, b=8, c=15)\nPASS: triangle_checker_transformed(a=2, b=8, c=2)\nPASS: triangle_checker_transformed(a=8, b=8, c=2)\nPASS: triangle_checker_transformed(a=8, b=2, c=2)\nPASS: triangle_checker_transformed(a=2, b=2, c=2)\nPASS: triangle_checker_transformed(a=16, b=19, c=19)\nPASS: triangle_checker_transformed(a=19, b=19, c=19)\nPASS: triangle_checker_transformed(a=8, b=13, c=8)\nPASS: triangle_checker_transformed(a=8, b=13, c=13)\nPASS: triangle_checker_transformed(a=13, b=13, c=13)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=1.192092896e-07)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=1.7796273634890674)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=54.75141343710984)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=18.251413846838997)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=61.04857490928545)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=86.29214274247774)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-3, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-3, b=-10, c=10)\nPASS: quadratic_discriminant_transformed(a=2, b=8, c=-7)\nPASS: quadratic_discriminant_transformed(a=10, b=-9, c=0)\nPASS: quadratic_discriminant_transformed(a=1, b=-10, c=-3)\nPASS: quadratic_discriminant_transformed(a=-6, b=6, c=-7)\nPASS: quadratic_discriminant_transformed(a=-6, b=-10, c=-5)\nPASS: quadratic_discriminant_transformed(a=6, b=-7, c=4)\nPASS: quadratic_discriminant_transformed(a=9, b=0, c=-4)\nPASS: quadratic_discriminant_transformed(a=7, b=3, c=7)\nPASS: quadratic_discriminant_transformed(a=7, b=7, c=7)\nPASS: quadratic_discriminant_transformed(a=-7, b=10, c=4)\nPASS: quadratic_discriminant_transformed(a=-7, b=4, c=4)\nPASS: quadratic_discriminant_transformed(a=-7, b=4, c=-7)\nPASS: quadratic_discriminant_transformed(a=-7, b=-7, c=-7)\nPASS: quadratic_discriminant_transformed(a=0, b=4, c=0)\nPASS: quadratic_discriminant_transformed(a=-3, b=3, c=4)\nPASS: quadratic_discriminant_transformed(a=-3, b=-3, c=4)\nPASS: quadratic_discriminant_transformed(a=4, b=-3, c=4)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-0.0, y=0.0)\nPASS: vector_norm_transformed(x=-0.0, y=2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=1.9, y=-1.1)\nPASS: vector_norm_transformed(x=2.1016962841087897e-169, y=2.2250738585e-313)\nPASS: vector_norm_transformed(x=-2.225073858507e-311, y=9.999999999999998)\nPASS: vector_norm_transformed(x=1.192092896e-07, y=-1.175494351e-38)\nPASS: vector_norm_transformed(x=2.2250738585072014e-308, y=0.99999)\nPASS: vector_norm_transformed(x=-1e-05, y=-2.225073858507e-311)\nPASS: vector_norm_transformed(x=5e-324, y=0.0)\nPASS: vector_norm_transformed(x=-3.047045392564682e-162, y=-1e-05)\nPASS: vector_norm_transformed(x=-3.047045392564682e-162, y=-3.047045392564682e-162)\nPASS: vector_norm_transformed(x=-0.5, y=1.3986781382230751e-38)\nPASS: vector_norm_transformed(x=-0.5, y=-0.5)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=1.1)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=-1.175494351e-38)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=-2.2724000032226666e-179)\nPASS: vector_norm_transformed(x=-2.2724000032226666e-179, y=-2.2724000032226666e-179)\nPASS: vector_norm_transformed(x=0.5, y=-8.683482208531268e-23)\nPASS: vector_norm_transformed(x=-8.683482208531268e-23, y=-8.683482208531268e-23)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=4.154988285170512, b=0.0)\nPASS: hypotenuse_diff_transformed(a=4.154988285170512, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=0.5, b=0.5)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=4.4816189062623115)\nPASS: hypotenuse_diff_transformed(a=7.866610142080132, b=0.0)\nPASS: hypotenuse_diff_transformed(a=0.8147014295139222, b=0.5)\nPASS: hypotenuse_diff_transformed(a=1.5, b=7.894603429001863)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=6.256703590852593)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=1e-05)\nPASS: hypotenuse_diff_transformed(a=1.059024514506728, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=0.5, b=1.0)\nPASS: hypotenuse_diff_transformed(a=1.0, b=1.0)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=5.55997639407661)\nPASS: hypotenuse_diff_transformed(a=0.0, b=10.0)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u00bb\u009bXa\u0018\u009a\u00eba\udac9\udfc3')\nPASS: ascii_average_transformed(s='COM1')\nPASS: ascii_average_transformed(s='\udbb1\udd26')\nPASS: ascii_average_transformed(s='\ud9b6\udddb\udad2\ude4fH')\nPASS: ascii_average_transformed(s='\udbdb\uddd3\uda06\udedf,\u0083\u00a5B\ud9cf\udfaa\u00e1\ud883\udee5Z')\nPASS: ascii_average_transformed(s='\u00bc\udb2f\udf17`\u009b\u008c')\nPASS: ascii_average_transformed(s='\u0013\ud831\ude63\uda88\ude3ef\u009e\u00e0\udb8a\udf9c ')\nPASS: ascii_average_transformed(s='p`!\ud869\ude2a\u00cc\u0099')\nPASS: ascii_average_transformed(s='\u00e0\ud823\ude0f\u00d9B:\u0089G\udb14\udc89(r')\nPASS: ascii_average_transformed(s='f\u00f1]\u00ade\u000e\u00c2\u009d\u009b\u00e1')\nPASS: ascii_average_transformed(s='\u00a6a2C(\u0096\u00ba\u009a')\nPASS: ascii_average_transformed(s='\u00e7\u00d9pB\u00c0')\nPASS: ascii_average_transformed(s='\u0080')\nPASS: ascii_average_transformed(s='\u00a1\u9b65l\ua626\ud890\udc06!\u001e\u001dyR')\nPASS: ascii_average_transformed(s='\uda8b\udf35')\nPASS: ascii_average_transformed(s='\ud916\ude9b\u0093')\nPASS: ascii_average_transformed(s='\u00c8')\nPASS: ascii_average_transformed(s='\u00df\udbb2\udf66')\nPASS: ascii_average_transformed(s='\u00b8\u00f1\u00bb}[\u0004\u00e4\u000f\ud9e4\ude25\uda84\udef9')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[5, 0])\nPASS: list_balance_transformed(nums=[9, 0])\nPASS: list_balance_transformed(nums=[9, 5, 10, 4])\nPASS: list_balance_transformed(nums=[0, 1])\nPASS: list_balance_transformed(nums=[10, 2, 5])\nPASS: list_balance_transformed(nums=[8, 6, 2])\nPASS: list_balance_transformed(nums=[10, 1, 2, 6, 8, 6, 5, 4, 7, 0])\nPASS: list_balance_transformed(nums=[2, 5, 8, 9, 10])\nPASS: list_balance_transformed(nums=[7, 8])\nPASS: list_balance_transformed(nums=[8, 7, 4, 9, 0, 0, 10])\nPASS: list_balance_transformed(nums=[8, 7, 9, 9, 0, 0, 10])\nPASS: list_balance_transformed(nums=[8, 7, 9, 9, 0, 7, 10])\nPASS: list_balance_transformed(nums=[8, 7, 9, 9, 0, 8, 10])\nPASS: list_balance_transformed(nums=[8, 7, 9, 9, 0, 8, 8])\nPASS: list_balance_transformed(nums=[8, 9, 9, 9, 0, 8, 8])\nPASS: list_balance_transformed(nums=[2, 0, 1, 0, 10, 4, 4])\nPASS: list_balance_transformed(nums=[4, 0, 1, 0, 10, 4, 4])\nPASS: list_balance_transformed(nums=[0, 0, 1, 0, 10, 4, 4])\nPASS: list_balance_transformed(nums=[0, 0, 1, 0, 10, 4, 0])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[7])\nPASS: odd_sum_validator_transformed(lst=[5, 6, 1])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[8, 0, 8, 1, 3])\nPASS: odd_sum_validator_transformed(lst=[3, 6])\nPASS: odd_sum_validator_transformed(lst=[2, 1, 7, 10, 3, 0, 0, 0, 1, 7])\nPASS: odd_sum_validator_transformed(lst=[7, 3, 5, 9, 7])\nPASS: odd_sum_validator_transformed(lst=[10, 6, 5, 9, 5, 10, 6, 7, 5, 7])\nPASS: odd_sum_validator_transformed(lst=[7, 8, 7])\nPASS: odd_sum_validator_transformed(lst=[7, 8, 8])\nPASS: odd_sum_validator_transformed(lst=[8, 8, 8])\nPASS: odd_sum_validator_transformed(lst=[0, 5, 8, 1, 3, 8, 10, 3, 5, 4])\nPASS: odd_sum_validator_transformed(lst=[0, 5, 8, 1, 3, 8, 4, 3, 5, 4])\nPASS: odd_sum_validator_transformed(lst=[0, 5, 5, 1, 3, 8, 4, 3, 5, 4])\nPASS: odd_sum_validator_transformed(lst=[8, 5, 5, 1, 3, 8, 4, 3, 5, 4])\nPASS: odd_sum_validator_transformed(lst=[8, 5, 5, 1, 3, 8, 4, 3, 5, 3])\nPASS: odd_sum_validator_transformed(lst=[8, 5, 5, 1, 4, 8, 4, 3, 5, 3])\nPASS: odd_sum_validator_transformed(lst=[8, 5, 5, 3, 4, 8, 4, 3, 5, 3])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u0083')\nPASS: string_pattern_score_transformed(s='Hu\u00df\n')\nPASS: string_pattern_score_transformed(s='3]')\nPASS: string_pattern_score_transformed(s='\udbb3\udec2\u0097')\nPASS: string_pattern_score_transformed(s='\ud924\uddd5j\udb65\udf52\u009b\u00a4,e\u00a1.\udba4\uddf2')\nPASS: string_pattern_score_transformed(s='\u00ff\u009b\udbbd\udd26\udb2c\udc95\uda43\udf55\udb0b\udc6e\u0005\u00dfl')\nPASS: string_pattern_score_transformed(s='\u00c4\udbcc\uddf8\u00d7\ud90e\ude50\u00ff\u00df^[\u00cf')\nPASS: string_pattern_score_transformed(s='J\u009f\u00b5W\u009do\u00f6')\nPASS: string_pattern_score_transformed(s='2\u00e1')\nPASS: string_pattern_score_transformed(s='\u00f1\u00d1\udb56\ude38\u00bd\udb91\udfce\u0000x\u00f4\u008bw')\nPASS: string_pattern_score_transformed(s='\u000b\u0005\udbf9\udeb1\t\u00e9z\u00a36E\ud822\udd79')\nPASS: string_pattern_score_transformed(s='1e100')\nPASS: string_pattern_score_transformed(s='Z\u00df\u00ac\udb5f\udffa|\udb27\udf39')\nPASS: string_pattern_score_transformed(s='\u023a')\nPASS: string_pattern_score_transformed(s='\u00ab\u0094h'\u00c1\u001a\u00a3')\nPASS: string_pattern_score_transformed(s='\ud965\ude40\u00d5d\udaba\udceb,\u00bf\udbf8\udefb\ud8df\udde6\u00f2^')\nPASS: string_pattern_score_transformed(s='\u0099\ud96f\udf54\u00a5\u00ae?\u00a6\u0097\u001e,\u00a0')\nPASS: string_pattern_score_transformed(s='\u00e5\udb9c\udf26')\nPASS: string_pattern_score_transformed(s='\u00cb\ud9ea\ude7f\u00b2\u00ed\udb88\udd59\u00fc$!\u00199')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[19])\nPASS: sum_until_limit_transformed(nums=[19, 0, 1])\nPASS: sum_until_limit_transformed(nums=[19, 19, 13])\nPASS: sum_until_limit_transformed(nums=[16, 4, 2])\nPASS: sum_until_limit_transformed(nums=[4])\nPASS: sum_until_limit_transformed(nums=[7, 7, 20, 16, 10, 15, 3, 3])\nPASS: sum_until_limit_transformed(nums=[0, 19])\nPASS: sum_until_limit_transformed(nums=[12, 20, 9, 7, 17, 15, 18])\nPASS: sum_until_limit_transformed(nums=[17])\nPASS: sum_until_limit_transformed(nums=[7])\nPASS: sum_until_limit_transformed(nums=[20])\nPASS: sum_until_limit_transformed(nums=[10, 10, 2, 1, 20, 19])\nPASS: sum_until_limit_transformed(nums=[10, 10, 2, 10, 20, 19])\nPASS: sum_until_limit_transformed(nums=[10, 10, 20, 10, 20, 19])\nPASS: sum_until_limit_transformed(nums=[10, 10, 20, 10, 10, 19])\nPASS: sum_until_limit_transformed(nums=[10, 10, 20, 10, 10, 10])\nPASS: sum_until_limit_transformed(nums=[10, 10, 10, 10, 10, 10])\nPASS: sum_until_limit_transformed(nums=[18, 5, 6, 20, 13, 14, 5, 4, 19, 13])\nPASS: sum_until_limit_transformed(nums=[18, 5, 6, 14, 13, 14, 5, 4, 19, 13])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[9])\nPASS: count_divisibles_transformed(nums=[8])\nPASS: count_divisibles_transformed(nums=[11, 1, 3, 10, 19, 5, 2, 13, 7, 2])\nPASS: count_divisibles_transformed(nums=[1, 17, 18, 3])\nPASS: count_divisibles_transformed(nums=[11])\nPASS: count_divisibles_transformed(nums=[5])\nPASS: count_divisibles_transformed(nums=[14, 11, 12, 13])\nPASS: count_divisibles_transformed(nums=[6])\nPASS: count_divisibles_transformed(nums=[8, 1, 3, 4, 11, 6, 3, 16, 12])\nPASS: count_divisibles_transformed(nums=[11, 19, 17])\nPASS: count_divisibles_transformed(nums=[19, 19, 17])\nPASS: count_divisibles_transformed(nums=[19, 17, 17])\nPASS: count_divisibles_transformed(nums=[17, 19, 17])\nPASS: count_divisibles_transformed(nums=[17, 17, 17])\nPASS: count_divisibles_transformed(nums=[18, 1, 13, 11, 1, 1, 10, 12])\nPASS: count_divisibles_transformed(nums=[18, 1, 13, 11, 1, 1, 11, 12])\nPASS: count_divisibles_transformed(nums=[18, 1, 18, 11, 1, 1, 11, 12])\nPASS: count_divisibles_transformed(nums=[18, 1, 18, 11, 18, 1, 11, 12])\nPASS: count_divisibles_transformed(nums=[1, 1, 18, 11, 18, 1, 11, 12])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[6])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[8, 7, 7])\nPASS: index_weighted_sum_transformed(lst=[7, 10])\nPASS: index_weighted_sum_transformed(lst=[9])\nPASS: index_weighted_sum_transformed(lst=[0, 0])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[6, 3, 4, 1, 8, 7, 0, 2, 9, 2])\nPASS: index_weighted_sum_transformed(lst=[6, 3])\nPASS: index_weighted_sum_transformed(lst=[7])\nPASS: index_weighted_sum_transformed(lst=[9, 8])\nPASS: index_weighted_sum_transformed(lst=[8, 8])\nPASS: index_weighted_sum_transformed(lst=[0, 6, 3, 4, 1, 8, 6, 9, 4])\nPASS: index_weighted_sum_transformed(lst=[0, 6, 3, 4, 1, 8, 6, 9, 9])\nPASS: index_weighted_sum_transformed(lst=[0, 6, 3, 4, 1, 8, 3, 9, 9])\nPASS: index_weighted_sum_transformed(lst=[0, 6, 3, 6, 1, 8, 3, 9, 9])\nPASS: index_weighted_sum_transformed(lst=[0, 6, 3, 6, 1, 8, 3, 3, 9])\nPASS: index_weighted_sum_transformed(lst=[0, 6, 3, 6, 1, 8, 6, 3, 9])\nPASS: index_weighted_sum_transformed(lst=[9, 6, 3, 6, 1, 8, 6, 3, 9])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=7)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='7'z')\nPASS: character_counter_transformed(text='\u0019\u00d5\udbb5\udd3f\u00ef\udb80\udd3ey\u001c')\nPASS: character_counter_transformed(text='+\u00f8ooB\uda6f\udedf\u00b5\u00b6\u0081\u0086')\nPASS: character_counter_transformed(text='\u0010\u0091\u0083\u00afu\u00d4\ud954\udcd2')\nPASS: character_counter_transformed(text='\u00d0\u00aa\u00e44ZH(\udb6f\uddcd\u00ec?')\nPASS: character_counter_transformed(text='\u00cf\u00904\ud932\udfb2')\nPASS: character_counter_transformed(text='\ud8a5\udd14 \u00fb}')\nPASS: character_counter_transformed(text='\u0090')\nPASS: character_counter_transformed(text='\u00bf\uda43\udd47X\u00bd\udabd\udd76\u00d1\udbe7\udde8\u008f\ud984\udfb6')\nPASS: character_counter_transformed(text='\u00c3\u00f4')\nPASS: character_counter_transformed(text='\u0004\u00070\udae1\udfcc\u00e5')\nPASS: character_counter_transformed(text='Vz\u00bd')\nPASS: character_counter_transformed(text='7amT>\u00c7\u0001\ud903\ude60\u12b2')\nPASS: character_counter_transformed(text='\u00e6p\u00d4')\nPASS: character_counter_transformed(text=' \u00c1')\nPASS: character_counter_transformed(text='\u00dc\"}\u00aa')\nPASS: character_counter_transformed(text='Rl')\nPASS: character_counter_transformed(text='0]m\u0084\uda58\udf3a\u001by')\nPASS: character_counter_transformed(text='\udb7d\udc91\u0003\u00d2\ud9f5\udcd1')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[81])\nPASS: rolling_maximum_transformed(values=[18])\nPASS: rolling_maximum_transformed(values=[40, 15, 55, 39, 26, 2])\nPASS: rolling_maximum_transformed(values=[35, 41, 76, 69, 8, 65, 61])\nPASS: rolling_maximum_transformed(values=[8, 37, 84, 18, 70, 99, 34, 94, 16, 77])\nPASS: rolling_maximum_transformed(values=[25, 24, 76, 37, 34, 56, 56, 92])\nPASS: rolling_maximum_transformed(values=[0, 34])\nPASS: rolling_maximum_transformed(values=[20, 64, 3])\nPASS: rolling_maximum_transformed(values=[94, 20, 35, 24, 44, 85, 69, 68, 36, 76])\nPASS: rolling_maximum_transformed(values=[36, 47, 52])\nPASS: rolling_maximum_transformed(values=[36, 36, 52])\nPASS: rolling_maximum_transformed(values=[52, 36, 52])\nPASS: rolling_maximum_transformed(values=[52, 52, 52])\nPASS: rolling_maximum_transformed(values=[42])\nPASS: rolling_maximum_transformed(values=[45, 48, 41, 62, 75, 68, 90, 38, 9, 3])\nPASS: rolling_maximum_transformed(values=[41, 48, 41, 62, 75, 68, 90, 38, 9, 3])\nPASS: rolling_maximum_transformed(values=[41, 48, 41, 62, 75, 68, 90, 48, 9, 3])\nPASS: rolling_maximum_transformed(values=[41, 48, 41, 62, 75, 41, 90, 48, 9, 3])\nPASS: rolling_maximum_transformed(values=[41, 48, 41, 62, 75, 41, 41, 48, 9, 3])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_28": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=70)\nPASS: process_data_transformed(x=96)\nPASS: process_data_transformed(x=66)\nPASS: process_data_transformed(x=16)\nPASS: process_data_transformed(x=99)\nPASS: process_data_transformed(x=100)\nPASS: process_data_transformed(x=11)\nPASS: process_data_transformed(x=58)\nPASS: process_data_transformed(x=23)\nPASS: process_data_transformed(x=54)\nPASS: process_data_transformed(x=26)\nPASS: process_data_transformed(x=36)\nPASS: process_data_transformed(x=89)\nPASS: process_data_transformed(x=29)\nPASS: process_data_transformed(x=61)\nPASS: process_data_transformed(x=17)\nPASS: process_data_transformed(x=34)\nPASS: process_data_transformed(x=62)\nPASS: process_data_transformed(x=31)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=41.73170508384542)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=49.22135799966841)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=45.321558069579126)\nPASS: convert_temperature_transformed(c=44.12035501147059)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=97.53307892292102)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=14.992578098834123, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=25.02224886866436, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=47.48735030548913, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=0.8261961268261)\nPASS: calculate_discount_transformed(price=121.97346549954837, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=1.401298464324817e-45)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=200.0, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=2.00001, discount_rate=0.3876404803516499)\nPASS: calculate_discount_transformed(price=0.3876404803516499, discount_rate=0.3876404803516499)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-0.5, imag=0.0)\nPASS: process_complex_number_transformed(real=-0.5, imag=0.3333333333333333)\nPASS: process_complex_number_transformed(real=0.0, imag=0.99999)\nPASS: process_complex_number_transformed(real=1.175494351e-38, imag=-1.9)\nPASS: process_complex_number_transformed(real=1.3592242131191803, imag=-18.90832312410339)\nPASS: process_complex_number_transformed(real=-2.225073858507e-311, imag=-19.999999999999996)\nPASS: process_complex_number_transformed(real=-19.546749059325304, imag=2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=-1.175494351e-38, imag=-1.2999564118937845e-247)\nPASS: process_complex_number_transformed(real=0.99999, imag=3.333129783561443)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=20.0)\nPASS: process_complex_number_transformed(real=20.0, imag=20.0)\nPASS: process_complex_number_transformed(real=1.9, imag=0.0)\nPASS: process_complex_number_transformed(real=0.5, imag=6.103515625e-05)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=6.103515625e-05)\nPASS: process_complex_number_transformed(real=0.99999, imag=4.328811502341971)\nPASS: process_complex_number_transformed(real=4.328811502341971, imag=4.328811502341971)\nPASS: process_complex_number_transformed(real=-1e-05, imag=-1.9)\nPASS: process_complex_number_transformed(real=-1.9, imag=-1.9)\nPASS: process_complex_number_transformed(real=20.0, imag=-19.809960511397815)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=12)\nPASS: transform_data_transformed(input_value=40)\nPASS: transform_data_transformed(input_value=91)\nPASS: transform_data_transformed(input_value=38)\nPASS: transform_data_transformed(input_value=55)\nPASS: transform_data_transformed(input_value=33)\nPASS: transform_data_transformed(input_value=16)\nPASS: transform_data_transformed(input_value=47)\nPASS: transform_data_transformed(input_value=41)\nPASS: transform_data_transformed(input_value=10)\nPASS: transform_data_transformed(input_value=85)\nPASS: transform_data_transformed(input_value=17)\nPASS: transform_data_transformed(input_value=23)\nPASS: transform_data_transformed(input_value=39)\nPASS: transform_data_transformed(input_value=90)\nPASS: transform_data_transformed(input_value=86)\nPASS: transform_data_transformed(input_value=53)\nPASS: transform_data_transformed(input_value=93)\nPASS: transform_data_transformed(input_value=29)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=1.1233019109172429)\nPASS: circle_area_diff_transformed(r=1.175494351e-38)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=3.5457746107480097)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=1.7218920588381883)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=19, b=1, c=1)\nPASS: triangle_checker_transformed(a=19, b=13, c=14)\nPASS: triangle_checker_transformed(a=16, b=11, c=9)\nPASS: triangle_checker_transformed(a=4, b=16, c=12)\nPASS: triangle_checker_transformed(a=10, b=17, c=13)\nPASS: triangle_checker_transformed(a=13, b=11, c=20)\nPASS: triangle_checker_transformed(a=13, b=5, c=7)\nPASS: triangle_checker_transformed(a=17, b=9, c=4)\nPASS: triangle_checker_transformed(a=9, b=7, c=11)\nPASS: triangle_checker_transformed(a=10, b=4, c=13)\nPASS: triangle_checker_transformed(a=10, b=10, c=13)\nPASS: triangle_checker_transformed(a=10, b=10, c=10)\nPASS: triangle_checker_transformed(a=12, b=14, c=10)\nPASS: triangle_checker_transformed(a=12, b=10, c=10)\nPASS: triangle_checker_transformed(a=18, b=7, c=10)\nPASS: triangle_checker_transformed(a=10, b=7, c=10)\nPASS: triangle_checker_transformed(a=10, b=7, c=7)\nPASS: triangle_checker_transformed(a=10, b=10, c=7)\nPASS: triangle_checker_transformed(a=17, b=11, c=19)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=36.378888369514776)\nPASS: temperature_offset_transformed(c=64.00753805007065)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=1.192092896e-07)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=78.92853858371342)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=57.20904247249504)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=24.655258699157105)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=6, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=6, b=-3, c=-5)\nPASS: quadratic_discriminant_transformed(a=-1, b=6, c=-7)\nPASS: quadratic_discriminant_transformed(a=-10, b=-9, c=4)\nPASS: quadratic_discriminant_transformed(a=10, b=3, c=-8)\nPASS: quadratic_discriminant_transformed(a=6, b=4, c=-8)\nPASS: quadratic_discriminant_transformed(a=10, b=-8, c=5)\nPASS: quadratic_discriminant_transformed(a=-3, b=-10, c=0)\nPASS: quadratic_discriminant_transformed(a=-10, b=-2, c=-6)\nPASS: quadratic_discriminant_transformed(a=-8, b=8, c=10)\nPASS: quadratic_discriminant_transformed(a=10, b=8, c=10)\nPASS: quadratic_discriminant_transformed(a=10, b=10, c=10)\nPASS: quadratic_discriminant_transformed(a=10, b=4, c=0)\nPASS: quadratic_discriminant_transformed(a=10, b=10, c=0)\nPASS: quadratic_discriminant_transformed(a=0, b=10, c=0)\nPASS: quadratic_discriminant_transformed(a=9, b=-2, c=2)\nPASS: quadratic_discriminant_transformed(a=9, b=-2, c=-2)\nPASS: quadratic_discriminant_transformed(a=-2, b=-2, c=-2)\nPASS: quadratic_discriminant_transformed(a=-10, b=-7, c=5)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=6.005532750490662, y=0.0)\nPASS: vector_norm_transformed(x=6.005532750490662, y=-2.74202280847902)\nPASS: vector_norm_transformed(x=-6.103515625e-05, y=-6.103515625e-05)\nPASS: vector_norm_transformed(x=5.612184927351706, y=-2.225073858507e-311)\nPASS: vector_norm_transformed(x=0.99999, y=1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=-1.9, y=-8.175349352961554)\nPASS: vector_norm_transformed(x=-1.9, y=-1.401298464324817e-45)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=-5.959097330091491)\nPASS: vector_norm_transformed(x=1.175494351e-38, y=-0.5)\nPASS: vector_norm_transformed(x=1.9090019145261398e-168, y=1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=1.1125369292536007e-308, y=1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=0.0, y=5.319908849609053)\nPASS: vector_norm_transformed(x=-2.225073858507203e-309, y=2.00001)\nPASS: vector_norm_transformed(x=-2.225073858507203e-309, y=-2.225073858507203e-309)\nPASS: vector_norm_transformed(x=1.7581655369874376, y=2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=2.2250738585072014e-308, y=2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=1.1, y=-2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=1.1, y=1.1)\nPASS: vector_norm_transformed(x=1.5, y=-1.9)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=1.0)\nPASS: hypotenuse_diff_transformed(a=9.0, b=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=7.7847750126741495)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=0.0)\nPASS: hypotenuse_diff_transformed(a=3.5437633387109795, b=0.5)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=0.0)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=0.4016831374380115)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=1.5)\nPASS: hypotenuse_diff_transformed(a=1.5, b=1.5)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=0.99999)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u00b9\u00e4')\nPASS: ascii_average_transformed(s='\u0094\u00be')\nPASS: ascii_average_transformed(s='\ud9ed\ude60\u001c\u00c1\u00fbr@')\nPASS: ascii_average_transformed(s='c')\nPASS: ascii_average_transformed(s='\uda7d\udd5ac\u00f7\u00b1')\nPASS: ascii_average_transformed(s='X\u00e4\u008b\ud8eb\udd11\u00d5\u001f\u00bc')\nPASS: ascii_average_transformed(s='\u0096\u0098\u00b4\u00edxK')\nPASS: ascii_average_transformed(s='\u023e')\nPASS: ascii_average_transformed(s='\u00d4\u00b8\u001c#')\nPASS: ascii_average_transformed(s='true')\nPASS: ascii_average_transformed(s='O\u00f4\u00e0U')\nPASS: ascii_average_transformed(s='\u00aa')\nPASS: ascii_average_transformed(s='D~k\ud81f\udfd9\udbe0\udeb9(^\u00ff\u00d4\u00dc')\nPASS: ascii_average_transformed(s='\u00c3\ud8eb\udf8d\uda3e\udf61\u00016\ud814\udd00@\udb32\ude6e\u00d2\u00d1')\nPASS: ascii_average_transformed(s='\u00ab\n\u0003\u00ab\u001b\udadc\udf50\u00908')\nPASS: ascii_average_transformed(s='\uda8c\uddeb\u0007\f\u0015]\u009d\u00e7\u00ada\u00a1')\nPASS: ascii_average_transformed(s='\u001dn\ud989\ude98\ud97a\udf09')\nPASS: ascii_average_transformed(s='\u00cao)d')\nPASS: ascii_average_transformed(s='S\uda70\udd74\uda77\ude28\udbcc\udc2e\u009a\u0082\ud9a3\udefbS~I')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[4, 0])\nPASS: list_balance_transformed(nums=[9, 0])\nPASS: list_balance_transformed(nums=[9, 0, 5])\nPASS: list_balance_transformed(nums=[0, 8, 2])\nPASS: list_balance_transformed(nums=[3, 9, 5])\nPASS: list_balance_transformed(nums=[2, 4, 3, 7, 0, 6])\nPASS: list_balance_transformed(nums=[4, 7, 10, 10, 1, 10, 10, 3, 4, 6])\nPASS: list_balance_transformed(nums=[10, 1])\nPASS: list_balance_transformed(nums=[6, 6])\nPASS: list_balance_transformed(nums=[1, 8, 0, 7])\nPASS: list_balance_transformed(nums=[1, 8, 8, 7])\nPASS: list_balance_transformed(nums=[1, 8, 1, 7])\nPASS: list_balance_transformed(nums=[1, 7, 1, 7])\nPASS: list_balance_transformed(nums=[1, 7, 1, 1])\nPASS: list_balance_transformed(nums=[1, 1, 1, 1])\nPASS: list_balance_transformed(nums=[9, 8])\nPASS: list_balance_transformed(nums=[8, 8])\nPASS: list_balance_transformed(nums=[0, 3, 7, 0, 2])\nPASS: list_balance_transformed(nums=[0, 0, 7, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[9, 5, 6])\nPASS: odd_sum_validator_transformed(lst=[0, 9, 1, 2, 7, 0, 7, 9, 3])\nPASS: odd_sum_validator_transformed(lst=[6, 10, 8, 0, 0, 7, 3, 2, 1, 3])\nPASS: odd_sum_validator_transformed(lst=[8, 9, 10, 5, 2])\nPASS: odd_sum_validator_transformed(lst=[5, 5, 6, 4, 6, 7, 4, 2, 2, 6])\nPASS: odd_sum_validator_transformed(lst=[2, 5, 3, 7, 8])\nPASS: odd_sum_validator_transformed(lst=[9, 3, 4, 0, 8, 0, 3, 9])\nPASS: odd_sum_validator_transformed(lst=[3, 0, 8, 8, 4])\nPASS: odd_sum_validator_transformed(lst=[0, 10])\nPASS: odd_sum_validator_transformed(lst=[0, 0])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[6])\nPASS: odd_sum_validator_transformed(lst=[0, 3, 3])\nPASS: odd_sum_validator_transformed(lst=[0, 6])\nPASS: odd_sum_validator_transformed(lst=[10, 0, 5, 2, 0, 0])\nPASS: odd_sum_validator_transformed(lst=[10, 0, 5, 2, 0, 5])\nPASS: odd_sum_validator_transformed(lst=[10, 0, 5, 5, 0, 0])\nPASS: odd_sum_validator_transformed(lst=[10, 0, 5, 5, 5, 0])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u00fd')\nPASS: string_pattern_score_transformed(s='\u00f8\u6808~Xq\u00d3')\nPASS: string_pattern_score_transformed(s='\u00f0')\nPASS: string_pattern_score_transformed(s='\u009b\u00e4\u00ee\u0018\ud857\udcf6@')\nPASS: string_pattern_score_transformed(s='\u0087')\nPASS: string_pattern_score_transformed(s='\udac2\ude17')\nPASS: string_pattern_score_transformed(s='\u009a\f\u00b55~\u0089\u2e1e')\nPASS: string_pattern_score_transformed(s='\ud8ff\udd50\udaba\ude95\u00c4\u0092\u009c\u009b@\u00bf\\')\nPASS: string_pattern_score_transformed(s='COM1')\nPASS: string_pattern_score_transformed(s='\u001f\u0090S\ud841\udecc\ud815\ude53\ud85f\udc12\ud9b3\udda2\u00c0v')\nPASS: string_pattern_score_transformed(s='\u00b5\u0097\ud807\udf46\u00b5')\nPASS: string_pattern_score_transformed(s='\u00e0\u00b3')\nPASS: string_pattern_score_transformed(s='\u009e\f,W\udad1\udcd9\u00a4\u00dc#\u0090\u00ed')\nPASS: string_pattern_score_transformed(s='\udb3a\udf5f')\nPASS: string_pattern_score_transformed(s='\u00f0\u00d6\uda5f\udf32\u00cet\u00ec\u0088\u00a6')\nPASS: string_pattern_score_transformed(s='\u001fyt\u00e4^\u0097')\nPASS: string_pattern_score_transformed(s='\u0087\u00cb')\nPASS: string_pattern_score_transformed(s='\ufc20')\nPASS: string_pattern_score_transformed(s='\udade\udc29\ud90c\udd74')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[8])\nPASS: sum_until_limit_transformed(nums=[10])\nPASS: sum_until_limit_transformed(nums=[1, 8])\nPASS: sum_until_limit_transformed(nums=[0, 2, 10, 19, 0, 16, 1, 3, 0, 1])\nPASS: sum_until_limit_transformed(nums=[4, 17, 7, 6, 1, 18, 7, 15, 4, 1])\nPASS: sum_until_limit_transformed(nums=[19, 3, 8])\nPASS: sum_until_limit_transformed(nums=[7, 12, 20])\nPASS: sum_until_limit_transformed(nums=[4])\nPASS: sum_until_limit_transformed(nums=[4, 8, 13, 10, 10, 11, 12, 13])\nPASS: sum_until_limit_transformed(nums=[3, 0, 13])\nPASS: sum_until_limit_transformed(nums=[13, 0, 13])\nPASS: sum_until_limit_transformed(nums=[13, 13, 13])\nPASS: sum_until_limit_transformed(nums=[7])\nFAIL: sum_until_limit_transformed(nums=[8, 6, 1, 11, 1, 11, 12, 5, 1, 10])\nPASS: sum_until_limit_transformed(nums=[8, 6, 12, 11, 1, 11, 12, 5, 1, 10])\nPASS: sum_until_limit_transformed(nums=[8, 6, 12, 11, 1, 11, 12, 5, 1, 6])\nPASS: sum_until_limit_transformed(nums=[8, 6, 12, 11, 1, 11, 12, 1, 1, 6])\nPASS: sum_until_limit_transformed(nums=[8, 6, 12, 11, 1, 11, 12, 1, 8, 6])\nPASS: sum_until_limit_transformed(nums=[8, 6, 12, 11, 12, 11, 12, 1, 8, 6])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[9])\nPASS: count_divisibles_transformed(nums=[9, 7])\nPASS: count_divisibles_transformed(nums=[11, 0, 15, 4, 13, 9, 6])\nPASS: count_divisibles_transformed(nums=[9, 1, 3, 19])\nPASS: count_divisibles_transformed(nums=[2, 1, 13, 13])\nPASS: count_divisibles_transformed(nums=[11])\nPASS: count_divisibles_transformed(nums=[9, 7, 1, 15, 4, 19, 19, 3, 9, 20])\nPASS: count_divisibles_transformed(nums=[17, 4, 6, 11, 10, 9, 19, 14, 7, 0])\nPASS: count_divisibles_transformed(nums=[6])\nPASS: count_divisibles_transformed(nums=[10, 20, 14, 11, 16, 3, 0, 16, 17, 14])\nPASS: count_divisibles_transformed(nums=[10, 20, 14, 11, 16, 3, 0, 16, 17, 3])\nPASS: count_divisibles_transformed(nums=[10, 16, 14, 11, 16, 3, 0, 16, 17, 3])\nPASS: count_divisibles_transformed(nums=[10, 16, 14, 11, 3, 3, 0, 16, 17, 3])\nPASS: count_divisibles_transformed(nums=[10, 16, 3, 11, 3, 3, 0, 16, 17, 3])\nPASS: count_divisibles_transformed(nums=[10, 16, 3, 11, 3, 17, 0, 16, 17, 3])\nPASS: count_divisibles_transformed(nums=[10, 16, 3, 3, 3, 17, 0, 16, 17, 3])\nPASS: count_divisibles_transformed(nums=[18, 14, 10, 15])\nPASS: count_divisibles_transformed(nums=[18, 14, 10])\nPASS: count_divisibles_transformed(nums=[18])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[6])\nPASS: index_weighted_sum_transformed(lst=[6, 7, 10])\nPASS: index_weighted_sum_transformed(lst=[3, 10, 1, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 8, 6, 2, 1, 4, 3, 10, 9, 6])\nPASS: index_weighted_sum_transformed(lst=[0, 8, 0, 5, 6, 7, 9])\nPASS: index_weighted_sum_transformed(lst=[2, 0, 3])\nPASS: index_weighted_sum_transformed(lst=[8, 5])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[1, 4, 10, 7, 2, 6, 1, 8, 7, 2])\nPASS: index_weighted_sum_transformed(lst=[4, 9, 5, 7, 1, 4, 1, 10, 1, 8])\nPASS: index_weighted_sum_transformed(lst=[4, 9, 5, 7, 1, 4, 7, 10, 1, 8])\nPASS: index_weighted_sum_transformed(lst=[5, 9, 5, 7, 1, 4, 7, 10, 1, 8])\nPASS: index_weighted_sum_transformed(lst=[5, 9, 5, 7, 7, 4, 7, 10, 1, 8])\nPASS: index_weighted_sum_transformed(lst=[5, 9, 5, 7, 7, 4, 7, 10, 10, 8])\nPASS: index_weighted_sum_transformed(lst=[5, 9, 5, 7, 7, 4, 5, 10, 10, 8])\nPASS: index_weighted_sum_transformed(lst=[5, 9, 5, 7, 7, 4, 5, 10, 5, 8])\nPASS: index_weighted_sum_transformed(lst=[10, 3, 1, 1])\nPASS: index_weighted_sum_transformed(lst=[10, 3, 3, 1])\nPASS: index_weighted_sum_transformed(lst=[10, 3, 3, 10])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=10)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00b1\u00f0\udbce\udf84\uda5f\ude00\u00f3\n\u00f3\u00ee\udadf\udf38\u00d9')\nPASS: character_counter_transformed(text='\u00d8i')\nPASS: character_counter_transformed(text='\udad1\udec5?p')\nPASS: character_counter_transformed(text='+9\u00ab')\nPASS: character_counter_transformed(text='\u00c0\u0084~c\uda82\udd74\u001a')\nPASS: character_counter_transformed(text='\u001e\uda93\udc6eP\u00ad=|\ud8c2\udfe5}\u00b9`')\nPASS: character_counter_transformed(text='\u00ab\ud930\udf5f3\u001b#')\nPASS: character_counter_transformed(text='\u00a15\ud815\udf99\u948f\u0006\uda42\udddf\u00afIO\u00f1')\nPASS: character_counter_transformed(text='\ud8e7\udeb7')\nPASS: character_counter_transformed(text='TRUE')\nPASS: character_counter_transformed(text='\u00e7\u00fc\udacd\udcff\ud8c4\uded3_6')\nPASS: character_counter_transformed(text='\udb53\uddb1\u00ach\u0007\u00dd=')\nPASS: character_counter_transformed(text='\u00c6\u00db\u001f\u00a5\u00df\u00a9\u00fc')\nPASS: character_counter_transformed(text='2')\nPASS: character_counter_transformed(text='\u0015')\nPASS: character_counter_transformed(text='\u00a0n\u008c\"\u00a3\udbd1\udfe2g\u000f')\nPASS: character_counter_transformed(text='\u0006')\nPASS: character_counter_transformed(text='[s')\nPASS: character_counter_transformed(text='\u00ca\u00a2\uda1a\udf60')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[24])\nPASS: rolling_maximum_transformed(values=[66])\nPASS: rolling_maximum_transformed(values=[64, 13])\nPASS: rolling_maximum_transformed(values=[7, 76, 74, 55, 29, 60])\nPASS: rolling_maximum_transformed(values=[82, 88, 14, 42, 65, 14, 58, 36, 11])\nPASS: rolling_maximum_transformed(values=[53, 94])\nPASS: rolling_maximum_transformed(values=[33, 77, 11, 7, 23, 31, 26])\nPASS: rolling_maximum_transformed(values=[5, 84])\nPASS: rolling_maximum_transformed(values=[88, 87])\nPASS: rolling_maximum_transformed(values=[60, 63, 85, 60, 63, 84])\nPASS: rolling_maximum_transformed(values=[60, 63, 60, 60, 63, 84])\nPASS: rolling_maximum_transformed(values=[60, 63, 60, 63, 63, 84])\nPASS: rolling_maximum_transformed(values=[60, 63, 84, 63, 63, 84])\nPASS: rolling_maximum_transformed(values=[60, 63, 84, 84, 63, 84])\nPASS: rolling_maximum_transformed(values=[63, 63, 84, 84, 63, 84])\nPASS: rolling_maximum_transformed(values=[63, 63, 84, 84, 84, 84])\nPASS: rolling_maximum_transformed(values=[32, 15, 11, 87])\nPASS: rolling_maximum_transformed(values=[32, 87, 11, 87])\nPASS: rolling_maximum_transformed(values=[11, 87, 11, 87])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_29": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=79)\nPASS: process_data_transformed(x=5)\nPASS: process_data_transformed(x=78)\nPASS: process_data_transformed(x=2)\nPASS: process_data_transformed(x=6)\nPASS: process_data_transformed(x=49)\nPASS: process_data_transformed(x=48)\nPASS: process_data_transformed(x=64)\nPASS: process_data_transformed(x=3)\nPASS: process_data_transformed(x=77)\nPASS: process_data_transformed(x=45)\nPASS: process_data_transformed(x=43)\nPASS: process_data_transformed(x=40)\nPASS: process_data_transformed(x=25)\nPASS: process_data_transformed(x=69)\nPASS: process_data_transformed(x=75)\nPASS: process_data_transformed(x=37)\nPASS: process_data_transformed(x=24)\nPASS: process_data_transformed(x=56)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=15.737244175957303)\nPASS: convert_temperature_transformed(c=2.2250738585072014e-308)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=4.4632469199115105e-297)\nPASS: convert_temperature_transformed(c=89.5877714074861)\nPASS: convert_temperature_transformed(c=64.79356047419093)\nPASS: convert_temperature_transformed(c=0.99999)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=48.22079712477877)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=169.25291599076678, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=123.60330779802051, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=3.427085723725008e-223, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=2.00001, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=3.4611378758668174e-16, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=199.99999999999997, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=96.8511325965, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=96.8511325965, discount_rate=0.0)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-2.220446049250313e-16, imag=0.0)\nPASS: process_complex_number_transformed(real=-2.220446049250313e-16, imag=-2.66458779563569)\nPASS: process_complex_number_transformed(real=1.1754943508222875e-38, imag=-2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-19.0, imag=-1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=1.1, imag=19.999999999999996)\nPASS: process_complex_number_transformed(real=-2.2250738585072014e-308, imag=2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-0.0, imag=-1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=1.401298464324817e-45, imag=-2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=20.0, imag=-5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=0.3333333333333333)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=6.103515625e-05)\nPASS: process_complex_number_transformed(real=-5.034907461799223, imag=-20.0)\nPASS: process_complex_number_transformed(real=-5.034907461799223, imag=-5.034907461799223)\nPASS: process_complex_number_transformed(real=15.86121277454388, imag=-1.7918774639119437e-55)\nPASS: process_complex_number_transformed(real=15.86121277454388, imag=15.86121277454388)\nPASS: process_complex_number_transformed(real=-1.175494351e-38, imag=2.2250738585e-313)\nPASS: process_complex_number_transformed(real=-1.175494351e-38, imag=-1.175494351e-38)\nPASS: process_complex_number_transformed(real=-1.401298464324817e-45, imag=0.3333333333333333)\nPASS: process_complex_number_transformed(real=-1.401298464324817e-45, imag=-1.401298464324817e-45)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=85)\nPASS: transform_data_transformed(input_value=17)\nPASS: transform_data_transformed(input_value=33)\nPASS: transform_data_transformed(input_value=28)\nPASS: transform_data_transformed(input_value=37)\nPASS: transform_data_transformed(input_value=93)\nPASS: transform_data_transformed(input_value=82)\nPASS: transform_data_transformed(input_value=95)\nPASS: transform_data_transformed(input_value=34)\nPASS: transform_data_transformed(input_value=44)\nPASS: transform_data_transformed(input_value=11)\nPASS: transform_data_transformed(input_value=94)\nPASS: transform_data_transformed(input_value=83)\nPASS: transform_data_transformed(input_value=55)\nPASS: transform_data_transformed(input_value=42)\nPASS: transform_data_transformed(input_value=1)\nPASS: transform_data_transformed(input_value=31)\nPASS: transform_data_transformed(input_value=79)\nPASS: transform_data_transformed(input_value=56)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=8.40766156104696)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=1.2496075376873188e-134)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=18.13097808148266)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=14.155750976174392)\nPASS: circle_area_diff_transformed(r=0.9801796700364698)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=16, b=1, c=1)\nPASS: triangle_checker_transformed(a=16, b=17, c=2)\nPASS: triangle_checker_transformed(a=19, b=20, c=12)\nPASS: triangle_checker_transformed(a=15, b=13, c=7)\nPASS: triangle_checker_transformed(a=4, b=3, c=13)\nPASS: triangle_checker_transformed(a=19, b=10, c=10)\nPASS: triangle_checker_transformed(a=17, b=20, c=1)\nPASS: triangle_checker_transformed(a=12, b=13, c=15)\nPASS: triangle_checker_transformed(a=16, b=5, c=13)\nPASS: triangle_checker_transformed(a=5, b=7, c=8)\nPASS: triangle_checker_transformed(a=5, b=5, c=8)\nPASS: triangle_checker_transformed(a=8, b=5, c=8)\nPASS: triangle_checker_transformed(a=8, b=5, c=5)\nPASS: triangle_checker_transformed(a=8, b=8, c=5)\nPASS: triangle_checker_transformed(a=5, b=8, c=5)\nPASS: triangle_checker_transformed(a=5, b=5, c=5)\nPASS: triangle_checker_transformed(a=9, b=20, c=8)\nPASS: triangle_checker_transformed(a=9, b=8, c=8)\nPASS: triangle_checker_transformed(a=9, b=8, c=9)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=10.617509418281394)\nPASS: temperature_offset_transformed(c=6.7809707163998704e-121)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=3.661821893130496e-90)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=34.26060455444682)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=55.08531041114352)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-4, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-4, b=10, c=3)\nPASS: quadratic_discriminant_transformed(a=7, b=3, c=8)\nPASS: quadratic_discriminant_transformed(a=-6, b=3, c=7)\nPASS: quadratic_discriminant_transformed(a=1, b=0, c=5)\nPASS: quadratic_discriminant_transformed(a=0, b=10, c=9)\nPASS: quadratic_discriminant_transformed(a=-7, b=-8, c=-3)\nPASS: quadratic_discriminant_transformed(a=6, b=9, c=6)\nPASS: quadratic_discriminant_transformed(a=1, b=-7, c=3)\nPASS: quadratic_discriminant_transformed(a=-7, b=-1, c=-1)\nPASS: quadratic_discriminant_transformed(a=-1, b=-1, c=-1)\nPASS: quadratic_discriminant_transformed(a=8, b=-2, c=3)\nPASS: quadratic_discriminant_transformed(a=8, b=3, c=3)\nPASS: quadratic_discriminant_transformed(a=8, b=3, c=8)\nPASS: quadratic_discriminant_transformed(a=8, b=8, c=3)\nPASS: quadratic_discriminant_transformed(a=3, b=3, c=3)\nPASS: quadratic_discriminant_transformed(a=5, b=-2, c=8)\nPASS: quadratic_discriminant_transformed(a=5, b=5, c=8)\nPASS: quadratic_discriminant_transformed(a=8, b=5, c=8)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=2.2250738585072014e-308, y=0.0)\nPASS: vector_norm_transformed(x=2.2250738585072014e-308, y=9.0)\nPASS: vector_norm_transformed(x=-6.644836579241504, y=-2.225073858507e-311)\nPASS: vector_norm_transformed(x=1e-05, y=-2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=0.99999, y=-5e-324)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=-1.175494351e-38)\nPASS: vector_norm_transformed(x=6.103515625e-05, y=-5.960464477539063e-08)\nPASS: vector_norm_transformed(x=2.225073858507e-311, y=-1.1)\nPASS: vector_norm_transformed(x=-2.00001, y=4.0039340938008845)\nPASS: vector_norm_transformed(x=9.0, y=8.061444329081858)\nPASS: vector_norm_transformed(x=8.061444329081858, y=8.061444329081858)\nPASS: vector_norm_transformed(x=5.960464477539063e-08, y=-10.0)\nPASS: vector_norm_transformed(x=-10.0, y=-10.0)\nPASS: vector_norm_transformed(x=-9.999999999999998, y=-9.0)\nPASS: vector_norm_transformed(x=-9.0, y=-9.0)\nPASS: vector_norm_transformed(x=-0.3333333333333333, y=-10.0)\nPASS: vector_norm_transformed(x=-0.3333333333333333, y=-0.3333333333333333)\nPASS: vector_norm_transformed(x=1.1, y=1e-05)\nPASS: vector_norm_transformed(x=1.1, y=1.1)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=1.5)\nPASS: hypotenuse_diff_transformed(a=4.105451251108968, b=0.5)\nPASS: hypotenuse_diff_transformed(a=10.0, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=1.1, b=9.0)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=0.5, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=0.5, b=0.5)\nPASS: hypotenuse_diff_transformed(a=2.543316604241797, b=1.9)\nPASS: hypotenuse_diff_transformed(a=1.9, b=1.9)\nPASS: hypotenuse_diff_transformed(a=1.5, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=3.297360661639637, b=0.5)\nPASS: hypotenuse_diff_transformed(a=3.297360661639637, b=3.297360661639637)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u008a\ud812\udcd5\u00bd\u00db\u0087\u0094\udb65\udfe3:\u00c5\u008b')\nPASS: ascii_average_transformed(s='\uda13\udc7a\u0019')\nPASS: ascii_average_transformed(s='\udb6a\udd11\u0087')\nPASS: ascii_average_transformed(s='^\udada\udea99NY\u00cd\u00d2')\nPASS: ascii_average_transformed(s='rs:\ud8f8\udc38\\\u00a92\u00f8\udbd7\udd8a')\nPASS: ascii_average_transformed(s='\udabb\ude5f\ud9a6\udecf;\u000e\n\u00b8\u00a2\u00c0j\u00e0')\nPASS: ascii_average_transformed(s='X\u00ec\u0092\u00f5\u00d632\u00dc')\nPASS: ascii_average_transformed(s='\u023a')\nPASS: ascii_average_transformed(s='\ud83c\uddfa\ud83c\uddf8')\nPASS: ascii_average_transformed(s='\u0081\u0010\u00e4')\nPASS: ascii_average_transformed(s='\u00bb\ud9b2\udd23\ud866\udc0c\u001a\ud9ac\udfda\u00c9$\u001a\u001a\u0097')\nPASS: ascii_average_transformed(s='\b]\u00ce\uda44\udfb8\u00bc\u00bf\u00edr\u00f5\udb65\udd89')\nPASS: ascii_average_transformed(s='FALSE')\nPASS: ascii_average_transformed(s='\uda0d\udfd50\udbb8\uded9\u00f0\udabf\ude99\u00b8-=')\nPASS: ascii_average_transformed(s='\ud9d0\udc91mC\u0096\u00fbu\udb75\udef4\u48d5\u00ad\uefec')\nPASS: ascii_average_transformed(s='\u00ee\u00b2')\nPASS: ascii_average_transformed(s='\u001f\u0083\uda49\udda7\u00d9j\ud8ff\udebe\u008b\u00c8mF')\nPASS: ascii_average_transformed(s='\uda1a\udcd0%\ud9d7\ude26\u00e0\ud963\udc54\u00f7\u0017\u008f\u001b\u00c6')\nPASS: ascii_average_transformed(s='\udb01\udc81P\u00cb\u0001\u00e7z\udb84\udd24\u0099b\u0007')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[10, 0])\nPASS: list_balance_transformed(nums=[10, 1])\nPASS: list_balance_transformed(nums=[0, 2, 2, 2, 1, 4, 0, 1, 5, 6])\nPASS: list_balance_transformed(nums=[10, 5, 9, 5, 10, 8, 5])\nPASS: list_balance_transformed(nums=[9, 7, 4, 6])\nPASS: list_balance_transformed(nums=[3, 5, 9, 10, 7])\nPASS: list_balance_transformed(nums=[6, 4, 0, 2, 8, 1, 0, 0, 6])\nPASS: list_balance_transformed(nums=[8, 5, 7, 10, 1, 0, 10, 9])\nPASS: list_balance_transformed(nums=[9, 5, 2, 6, 0, 2, 1])\nPASS: list_balance_transformed(nums=[4, 0, 9, 4, 8, 10, 5, 3, 4])\nPASS: list_balance_transformed(nums=[4, 0, 9, 4, 8, 10, 0, 3, 4])\nPASS: list_balance_transformed(nums=[4, 0, 9, 4, 8, 10, 0, 0, 4])\nPASS: list_balance_transformed(nums=[4, 0, 8, 4, 8, 10, 0, 0, 4])\nPASS: list_balance_transformed(nums=[4, 0, 8, 0, 8, 10, 0, 0, 4])\nPASS: list_balance_transformed(nums=[4, 0, 8, 0, 8, 10, 0, 0, 0])\nPASS: list_balance_transformed(nums=[0, 0, 8, 0, 8, 10, 0, 0, 0])\nPASS: list_balance_transformed(nums=[0, 9])\nPASS: list_balance_transformed(nums=[5, 3, 7, 3, 4, 8])\nPASS: list_balance_transformed(nums=[5, 3, 7, 8, 4, 8])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[6, 10, 0, 8, 2, 1, 0, 2, 0, 0])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[10, 0, 10, 10, 2, 4, 9, 1, 1, 4])\nPASS: odd_sum_validator_transformed(lst=[0, 4, 9, 0, 9])\nPASS: odd_sum_validator_transformed(lst=[3, 6, 3, 8])\nPASS: odd_sum_validator_transformed(lst=[4, 6, 3, 0, 4, 6, 5, 6, 2, 10])\nPASS: odd_sum_validator_transformed(lst=[7, 10, 9, 0, 7, 6, 7, 3, 5, 1])\nPASS: odd_sum_validator_transformed(lst=[4])\nPASS: odd_sum_validator_transformed(lst=[4, 8, 10])\nPASS: odd_sum_validator_transformed(lst=[10, 8, 10])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[1, 3])\nPASS: odd_sum_validator_transformed(lst=[1, 1])\nPASS: odd_sum_validator_transformed(lst=[1])\nPASS: odd_sum_validator_transformed(lst=[6])\nPASS: odd_sum_validator_transformed(lst=[2, 10, 6, 10])\nPASS: odd_sum_validator_transformed(lst=[2, 10, 2, 10])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u00170\u009e#\u00dc\u001c{\u0091\u00a2a')\nPASS: string_pattern_score_transformed(s='\u00e0l[\u0084\ud9e3\udc94')\nPASS: string_pattern_score_transformed(s='[\uda0a\udc82\ud9ec\udeeb\u00c8e\u00cc\u00c3\ud91e\udeff')\nPASS: string_pattern_score_transformed(s='\u00berS\u00a3')\nPASS: string_pattern_score_transformed(s='\u0017')\nPASS: string_pattern_score_transformed(s='\ud9be\udf45\u00f5fe')\nPASS: string_pattern_score_transformed(s='false')\nPASS: string_pattern_score_transformed(s='l\u00b60\u00f8\u008b\u00ec\u00a4\u001a\u00c5\u00de')\nPASS: string_pattern_score_transformed(s='\udb6d\udebb\u00dc\f\u00b3\u0011\u0012\uda6b\udffa\ud906\udea4\u00c2\u00fe')\nPASS: string_pattern_score_transformed(s='\u00a3\u00b7\u00a0')\nPASS: string_pattern_score_transformed(s='\u00b0`\u00ed\u009eD\u00c0\u00f6\ud925\udd74\t')\nPASS: string_pattern_score_transformed(s='\u0003\\\u0004\u00c2\u00a0\f')\nPASS: string_pattern_score_transformed(s='\u00b0\udbf1\udf0b\u00db\u00ab\u0002\ud890\ude58\u0000\u0019\uda7d\udc5e\u0003')\nPASS: string_pattern_score_transformed(s='\ud971\udca6J\uda5a\udf17\ud8d1\udc3b\u00e3G\ud97b\udc1f\u00ae\ud90c\udcaez')\nPASS: string_pattern_score_transformed(s='3')\nPASS: string_pattern_score_transformed(s='\u0001\udbfd\udc77'\u009f\u00aa\ud8b9\udd6c\u00f4\u00be')\nPASS: string_pattern_score_transformed(s='S\ud81a\udee3zD\u00a1\udbe2\udff1\u001c\udba6\udef0\f'')\nPASS: string_pattern_score_transformed(s='\u0013\udba8\udf2e\udb9b\udfd7\u00d3\u00aex\u00a8\u00e3')\nPASS: string_pattern_score_transformed(s='KV\u00c7\u00c2\u0004A\ud9b6\udeb1\u0003\u00e8C')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[2])\nPASS: sum_until_limit_transformed(nums=[2, 9])\nPASS: sum_until_limit_transformed(nums=[7, 10, 8, 8, 19, 5, 12])\nFAIL: sum_until_limit_transformed(nums=[18, 20, 12, 19, 15, 18, 7, 9, 8, 20])\nPASS: sum_until_limit_transformed(nums=[20])\nPASS: sum_until_limit_transformed(nums=[7])\nPASS: sum_until_limit_transformed(nums=[12, 1, 17, 14, 11, 0, 8, 1, 3, 7])\nPASS: sum_until_limit_transformed(nums=[16])\nPASS: sum_until_limit_transformed(nums=[2, 17, 2, 2, 17, 18, 5, 2, 11, 3])\nPASS: sum_until_limit_transformed(nums=[13, 9])\nPASS: sum_until_limit_transformed(nums=[9, 9])\nPASS: sum_until_limit_transformed(nums=[3, 4, 5, 11, 6, 18, 7, 0, 17, 18])\nPASS: sum_until_limit_transformed(nums=[3, 4, 5, 11, 6, 18, 7, 18, 17, 18])\nPASS: sum_until_limit_transformed(nums=[3, 4, 5, 3, 6, 18, 7, 18, 17, 18])\nPASS: sum_until_limit_transformed(nums=[3, 18, 5, 3, 6, 18, 7, 18, 17, 18])\nPASS: sum_until_limit_transformed(nums=[3, 18, 3, 3, 6, 18, 7, 18, 17, 18])\nPASS: sum_until_limit_transformed(nums=[3, 18, 3, 7, 6, 18, 7, 18, 17, 18])\nPASS: sum_until_limit_transformed(nums=[3, 18, 3, 7, 6, 7, 7, 18, 17, 18])\nPASS: sum_until_limit_transformed(nums=[15, 4, 11])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[4])\nPASS: count_divisibles_transformed(nums=[20])\nPASS: count_divisibles_transformed(nums=[12, 17, 9, 2])\nPASS: count_divisibles_transformed(nums=[4, 8, 13, 6, 12, 8, 13, 0, 9, 18])\nPASS: count_divisibles_transformed(nums=[15, 16, 6, 2, 3, 19, 10, 4, 1, 17])\nPASS: count_divisibles_transformed(nums=[8])\nPASS: count_divisibles_transformed(nums=[16])\nPASS: count_divisibles_transformed(nums=[10, 10, 6, 5, 8, 1, 9, 12, 2, 9])\nPASS: count_divisibles_transformed(nums=[8, 12, 6])\nPASS: count_divisibles_transformed(nums=[8, 20, 9, 4, 4, 4, 11, 17, 7, 19])\nPASS: count_divisibles_transformed(nums=[8, 20, 9, 4, 4, 4, 11, 17, 17, 19])\nPASS: count_divisibles_transformed(nums=[8, 20, 9, 4, 4, 4, 11, 17, 17, 11])\nPASS: count_divisibles_transformed(nums=[8, 20, 20, 4, 4, 4, 11, 17, 17, 11])\nPASS: count_divisibles_transformed(nums=[8, 20, 20, 4, 4, 17, 11, 17, 17, 11])\nPASS: count_divisibles_transformed(nums=[8, 20, 20, 4, 4, 17, 17, 17, 17, 11])\nPASS: count_divisibles_transformed(nums=[8, 20, 20, 4, 4, 20, 17, 17, 17, 11])\nPASS: count_divisibles_transformed(nums=[10])\nPASS: count_divisibles_transformed(nums=[15])\nPASS: count_divisibles_transformed(nums=[7, 2, 4, 12, 2, 3, 8, 5, 7, 4])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[2, 8])\nPASS: index_weighted_sum_transformed(lst=[2, 0, 4, 2, 10, 10, 8])\nPASS: index_weighted_sum_transformed(lst=[2, 5])\nPASS: index_weighted_sum_transformed(lst=[6, 1, 3, 4, 8])\nPASS: index_weighted_sum_transformed(lst=[6])\nPASS: index_weighted_sum_transformed(lst=[0, 9, 3, 5, 8, 6, 5])\nPASS: index_weighted_sum_transformed(lst=[0, 1])\nPASS: index_weighted_sum_transformed(lst=[2, 0])\nPASS: index_weighted_sum_transformed(lst=[2, 2])\nPASS: index_weighted_sum_transformed(lst=[1, 10, 1, 4])\nPASS: index_weighted_sum_transformed(lst=[1, 1, 1, 4])\nPASS: index_weighted_sum_transformed(lst=[5, 3, 4, 0, 0, 3, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 3, 4, 5, 0, 3, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 5, 4, 5, 0, 3, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 5, 4, 5, 0, 3, 4])\nPASS: index_weighted_sum_transformed(lst=[5, 3, 4, 5, 0, 3, 4])\nPASS: index_weighted_sum_transformed(lst=[5, 5, 0, 5, 0, 3, 4])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=4)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00e2_\u0019\u00b0\u00f5'\u00e8\u00d3\udaba\udcb2\ud845\udd3e')\nPASS: character_counter_transformed(text='\u00e0\u00c1\u00c8\ud974\udc24')\nPASS: character_counter_transformed(text='\u001cJ\u00ed\u007f\u0080\udaec\uddea>')\nPASS: character_counter_transformed(text='\u00ee')\nPASS: character_counter_transformed(text='B')\nPASS: character_counter_transformed(text='\ud898\udeaf\uf730\u00b1C\u00daB\ud87e\ude66')\nPASS: character_counter_transformed(text='\u00ce\u00f8\u00c0\u00cb?\u001cn\udab6\udd0fy\u009e')\nPASS: character_counter_transformed(text='\u009f\u00dd\u00c4')\nPASS: character_counter_transformed(text='\u00ad\u00ff')\nPASS: character_counter_transformed(text='\u00c1\u00c4')\nPASS: character_counter_transformed(text='\u00fc\u009c\u0002\u008b\u00aci\u00aa\u00efs\u001b')\nPASS: character_counter_transformed(text='\b\u00f9B\u0086R\u00b1T\u00ebl')\nPASS: character_counter_transformed(text='Ar\udb09\ude530\ud825\udd33')\nPASS: character_counter_transformed(text='Inf')\nPASS: character_counter_transformed(text='\u00ba\uda1f\udd1a\t\u0094\u0089s\u0005\udbd5\udf3c\u009e+')\nPASS: character_counter_transformed(text='\udb7f\udc64\u00ac)\u0012\uda01\ude5e\u0096\u00e4!\u0019')\nPASS: character_counter_transformed(text='\u00025\u00e1\u00f1kx\u00fc>\u0010\u00a5')\nPASS: character_counter_transformed(text='\u00f4\u00ccyV\udad5\uddd4\udb63\udeb5\uda7b\ude1a7')\nPASS: character_counter_transformed(text='3\u0017M\u00de\u000b\u00f18')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[54])\nPASS: rolling_maximum_transformed(values=[36])\nPASS: rolling_maximum_transformed(values=[84, 18, 26, 58, 96, 31, 67])\nPASS: rolling_maximum_transformed(values=[58, 100, 46, 7])\nPASS: rolling_maximum_transformed(values=[60, 28, 20])\nPASS: rolling_maximum_transformed(values=[7, 1])\nPASS: rolling_maximum_transformed(values=[51, 65, 80, 76])\nPASS: rolling_maximum_transformed(values=[37, 99, 14, 24, 17, 84, 46, 45, 21, 32])\nPASS: rolling_maximum_transformed(values=[17, 33, 80, 82])\nPASS: rolling_maximum_transformed(values=[28, 86, 46, 21, 26])\nPASS: rolling_maximum_transformed(values=[28, 86, 46, 46, 26])\nPASS: rolling_maximum_transformed(values=[28, 86, 46, 86, 26])\nPASS: rolling_maximum_transformed(values=[28, 86, 46, 46, 28])\nPASS: rolling_maximum_transformed(values=[28, 86, 46, 86, 28])\nPASS: rolling_maximum_transformed(values=[2, 100, 76, 38, 94, 49])\nPASS: rolling_maximum_transformed(values=[2, 100, 94, 38, 94, 49])\nPASS: rolling_maximum_transformed(values=[2, 100, 94, 100, 94, 49])\nPASS: rolling_maximum_transformed(values=[2, 100, 94, 100, 94, 100])\nPASS: rolling_maximum_transformed(values=[2, 100, 94, 100, 100, 100])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_30": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=80)\nPASS: process_data_transformed(x=29)\nPASS: process_data_transformed(x=12)\nPASS: process_data_transformed(x=92)\nPASS: process_data_transformed(x=19)\nPASS: process_data_transformed(x=93)\nPASS: process_data_transformed(x=50)\nPASS: process_data_transformed(x=78)\nPASS: process_data_transformed(x=61)\nPASS: process_data_transformed(x=31)\nPASS: process_data_transformed(x=77)\nPASS: process_data_transformed(x=69)\nPASS: process_data_transformed(x=63)\nPASS: process_data_transformed(x=57)\nPASS: process_data_transformed(x=38)\nPASS: process_data_transformed(x=17)\nPASS: process_data_transformed(x=81)\nPASS: process_data_transformed(x=76)\nPASS: process_data_transformed(x=48)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=36.03812786271817)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=71.52392528410073)\nPASS: convert_temperature_transformed(c=1.432877169860271e-236)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=90.84242148837313)\nPASS: convert_temperature_transformed(c=8.783417189136991e-268)\nPASS: convert_temperature_transformed(c=41.52478268746632)\nPASS: convert_temperature_transformed(c=92.42569341787068)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=1.401298464324817e-45)\nPASS: calculate_discount_transformed(price=2.00001, discount_rate=1.2498065889428986e-98)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=0.8177720968428901)\nPASS: calculate_discount_transformed(price=6.103515625e-05, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=2.00001, discount_rate=0.6143812506620977)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=28.339422672726762, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=1.401298464324817e-45)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=1.401298464324817e-45)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=0.5452590531040592)\nPASS: calculate_discount_transformed(price=200.0, discount_rate=0.9999999999999999)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=5.259454950371655, imag=0.0)\nPASS: process_complex_number_transformed(real=5.259454950371655, imag=-2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=2.220446049250313e-16, imag=-0.3333333333333333)\nPASS: process_complex_number_transformed(real=2.2250738585072014e-308, imag=-9.83899254882881)\nPASS: process_complex_number_transformed(real=1.175494351e-38, imag=1e-05)\nPASS: process_complex_number_transformed(real=2.55214512132563, imag=5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=2.00001, imag=2.2250738585e-313)\nPASS: process_complex_number_transformed(real=-0.99999, imag=-0.0)\nPASS: process_complex_number_transformed(real=14.902805426178503, imag=-1.9)\nPASS: process_complex_number_transformed(real=-2.220446049250313e-16, imag=18.383418947634745)\nPASS: process_complex_number_transformed(real=-2.220446049250313e-16, imag=-2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=-3.3010720377209476e-267)\nPASS: process_complex_number_transformed(real=-3.3010720377209476e-267, imag=-3.3010720377209476e-267)\nPASS: process_complex_number_transformed(real=2.225073858507e-311, imag=0.2872393648887481)\nPASS: process_complex_number_transformed(real=0.2872393648887481, imag=0.2872393648887481)\nPASS: process_complex_number_transformed(real=-1.192092896e-07, imag=-5e-324)\nPASS: process_complex_number_transformed(real=-1.192092896e-07, imag=-1.192092896e-07)\nPASS: process_complex_number_transformed(real=-20.0, imag=18.26694782290545)\nPASS: process_complex_number_transformed(real=18.26694782290545, imag=18.26694782290545)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=96)\nPASS: transform_data_transformed(input_value=89)\nPASS: transform_data_transformed(input_value=43)\nPASS: transform_data_transformed(input_value=84)\nPASS: transform_data_transformed(input_value=75)\nPASS: transform_data_transformed(input_value=38)\nPASS: transform_data_transformed(input_value=77)\nPASS: transform_data_transformed(input_value=6)\nPASS: transform_data_transformed(input_value=30)\nPASS: transform_data_transformed(input_value=21)\nPASS: transform_data_transformed(input_value=58)\nPASS: transform_data_transformed(input_value=73)\nPASS: transform_data_transformed(input_value=51)\nPASS: transform_data_transformed(input_value=22)\nPASS: transform_data_transformed(input_value=67)\nPASS: transform_data_transformed(input_value=29)\nPASS: transform_data_transformed(input_value=87)\nPASS: transform_data_transformed(input_value=10)\nPASS: transform_data_transformed(input_value=16)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=1.8455697701731124)\nPASS: circle_area_diff_transformed(r=3.253716355612947e-290)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=1.856597989698088)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=9.278484409331462)\nPASS: circle_area_diff_transformed(r=4.341992154196373)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=0.6140733065640093)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=6, b=1, c=1)\nPASS: triangle_checker_transformed(a=6, b=10, c=20)\nPASS: triangle_checker_transformed(a=18, b=14, c=12)\nPASS: triangle_checker_transformed(a=9, b=4, c=2)\nPASS: triangle_checker_transformed(a=7, b=7, c=10)\nPASS: triangle_checker_transformed(a=11, b=2, c=19)\nPASS: triangle_checker_transformed(a=4, b=10, c=9)\nPASS: triangle_checker_transformed(a=16, b=2, c=14)\nPASS: triangle_checker_transformed(a=17, b=3, c=4)\nPASS: triangle_checker_transformed(a=19, b=20, c=14)\nPASS: triangle_checker_transformed(a=20, b=20, c=14)\nPASS: triangle_checker_transformed(a=14, b=20, c=14)\nPASS: triangle_checker_transformed(a=14, b=14, c=14)\nPASS: triangle_checker_transformed(a=7, b=19, c=4)\nPASS: triangle_checker_transformed(a=7, b=7, c=4)\nPASS: triangle_checker_transformed(a=7, b=7, c=7)\nPASS: triangle_checker_transformed(a=8, b=16, c=17)\nPASS: triangle_checker_transformed(a=8, b=17, c=17)\nPASS: triangle_checker_transformed(a=17, b=17, c=17)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=13.658697538885182)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=81.29109459573326)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=50.01155918451764)\nPASS: temperature_offset_transformed(c=65.98510508726955)\nPASS: temperature_offset_transformed(c=96.03131738486886)\nPASS: temperature_offset_transformed(c=93.97750223129479)\nPASS: temperature_offset_transformed(c=58.64496283428709)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=1, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=1, b=5, c=0)\nPASS: quadratic_discriminant_transformed(a=-6, b=8, c=-1)\nPASS: quadratic_discriminant_transformed(a=3, b=2, c=-5)\nPASS: quadratic_discriminant_transformed(a=8, b=0, c=1)\nPASS: quadratic_discriminant_transformed(a=8, b=9, c=-2)\nPASS: quadratic_discriminant_transformed(a=2, b=7, c=4)\nPASS: quadratic_discriminant_transformed(a=-1, b=0, c=-1)\nPASS: quadratic_discriminant_transformed(a=-10, b=1, c=-3)\nPASS: quadratic_discriminant_transformed(a=-9, b=-5, c=5)\nPASS: quadratic_discriminant_transformed(a=-5, b=-5, c=5)\nPASS: quadratic_discriminant_transformed(a=-5, b=5, c=5)\nPASS: quadratic_discriminant_transformed(a=5, b=5, c=5)\nPASS: quadratic_discriminant_transformed(a=-6, b=5, c=-10)\nPASS: quadratic_discriminant_transformed(a=5, b=5, c=-10)\nPASS: quadratic_discriminant_transformed(a=5, b=-10, c=-10)\nPASS: quadratic_discriminant_transformed(a=-10, b=-10, c=-10)\nPASS: quadratic_discriminant_transformed(a=2, b=-3, c=-8)\nPASS: quadratic_discriminant_transformed(a=2, b=2, c=-8)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-9.0, y=0.0)\nPASS: vector_norm_transformed(x=-9.0, y=-6.114974017102463)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=1.9)\nPASS: vector_norm_transformed(x=-0.5, y=1.9)\nPASS: vector_norm_transformed(x=-9.0, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=2.225073858507e-311, y=2.2250738585e-313)\nPASS: vector_norm_transformed(x=1e-05, y=-9.999999999999998)\nPASS: vector_norm_transformed(x=2.00001, y=1.9)\nPASS: vector_norm_transformed(x=-1.1754943508222875e-38, y=0.5)\nPASS: vector_norm_transformed(x=0.0, y=9.0)\nPASS: vector_norm_transformed(x=9.0, y=9.0)\nPASS: vector_norm_transformed(x=-1.5, y=-1.401298464324817e-45)\nPASS: vector_norm_transformed(x=-1.5, y=-1.5)\nPASS: vector_norm_transformed(x=2.00001, y=-1.192092896e-07)\nPASS: vector_norm_transformed(x=2.00001, y=2.00001)\nPASS: vector_norm_transformed(x=10.0, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=10.0, y=10.0)\nPASS: vector_norm_transformed(x=-1.9, y=0.5)\nPASS: vector_norm_transformed(x=-1.9, y=-1.9)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=0.0)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=9.0)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=8.073442918504647)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=1.9)\nPASS: hypotenuse_diff_transformed(a=1.1, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=1.1, b=1.5)\nPASS: hypotenuse_diff_transformed(a=9.0, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=1.9, b=1.1291413909430295)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=8.614905586801921)\nPASS: hypotenuse_diff_transformed(a=0.0, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=6.646448436464566)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=5.183427578493963)\nPASS: hypotenuse_diff_transformed(a=5.183427578493963, b=5.183427578493963)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=10.0, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=2.3562078148130676, b=10.0)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u00ae\u00ed\u0007\udbad\udd98\u00df?\u0014\u00c4')\nPASS: ascii_average_transformed(s='\u0086\ud869\udf16\u00fa\u00e8%\u0010\u00c3H\u009b\ud8e3\udd67')\nPASS: ascii_average_transformed(s='\uda74\udd6b\u00a7.\u0098\u00e7\u0084')\nPASS: ascii_average_transformed(s='\b')\nPASS: ascii_average_transformed(s='\u00faE\udaf4\udf1c\u0091')\nPASS: ascii_average_transformed(s='-')\nPASS: ascii_average_transformed(s='\u009dR\u00a7\ud99f\ude28')\nPASS: ascii_average_transformed(s='\u0088\u00b6t\u000e\u00971\udb49\udfe6')\nPASS: ascii_average_transformed(s='\ud9f1\udecf\u0001\u00aa\u00ae\u00cf\u008bO\u00be\uda53\udcc2\u001b')\nPASS: ascii_average_transformed(s='\u0005Y}\u9678\ud87e\ude01\udba7\udd9b\u00939')\nPASS: ascii_average_transformed(s='l\u001a\udb28\udd52\udadc\ude37')\nPASS: ascii_average_transformed(s='\ud821\udd44;\ud925\udd03\u00a9_s5')\nPASS: ascii_average_transformed(s='\u00aaqW\ud80d\udd88\u001a\u00f4\u00eb\ud8f9\udc4d\n\ud893\udc22')\nPASS: ascii_average_transformed(s='\ud8a3\udfaa\u00fc~\u00e4QE\uda22\udd9c$')\nPASS: ascii_average_transformed(s='\u0092')\nPASS: ascii_average_transformed(s='\u00ed\\\u00f4\ud939\udd93\uda0e\udf61\ud945\udde8\u00027\u00d8\u00d6')\nPASS: ascii_average_transformed(s='\u000b\udab7\uddd6>\u00c6\u00fc\u00e8')\nPASS: ascii_average_transformed(s='\u0016Cv\u0081\u00c9\u00c5\u009e\u00c8iA')\nPASS: ascii_average_transformed(s='\u00d2\u000f\u00d2+\u0095\u0014')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[4, 0])\nPASS: list_balance_transformed(nums=[1, 0])\nPASS: list_balance_transformed(nums=[1, 6, 1, 9, 0, 0, 7, 7])\nPASS: list_balance_transformed(nums=[8, 9])\nPASS: list_balance_transformed(nums=[9, 8, 8])\nPASS: list_balance_transformed(nums=[4, 4, 8, 1])\nPASS: list_balance_transformed(nums=[7, 3])\nPASS: list_balance_transformed(nums=[6, 3, 7])\nPASS: list_balance_transformed(nums=[8, 10, 3, 5, 3, 0, 1, 3, 3, 0])\nPASS: list_balance_transformed(nums=[9, 2, 0, 8, 8, 8])\nPASS: list_balance_transformed(nums=[2, 2, 0, 8, 8, 8])\nPASS: list_balance_transformed(nums=[2, 2, 0, 8, 2, 8])\nPASS: list_balance_transformed(nums=[2, 2, 8, 8, 2, 8])\nPASS: list_balance_transformed(nums=[8, 2, 8, 8, 2, 8])\nPASS: list_balance_transformed(nums=[2, 0, 8, 8, 0, 0])\nPASS: list_balance_transformed(nums=[0, 0, 8, 8, 0, 0])\nPASS: list_balance_transformed(nums=[0, 0, 8, 8])\nPASS: list_balance_transformed(nums=[0, 0, 0, 8])\nPASS: list_balance_transformed(nums=[4, 9, 6, 9, 3])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[0, 0])\nPASS: odd_sum_validator_transformed(lst=[0, 2, 7])\nPASS: odd_sum_validator_transformed(lst=[3, 10, 4])\nPASS: odd_sum_validator_transformed(lst=[1, 3, 5, 9, 7, 3])\nPASS: odd_sum_validator_transformed(lst=[4, 3, 2, 1])\nPASS: odd_sum_validator_transformed(lst=[0, 0, 5, 9, 8, 7, 0, 7, 7, 6])\nPASS: odd_sum_validator_transformed(lst=[0, 5, 8, 5, 2])\nPASS: odd_sum_validator_transformed(lst=[5, 5, 9, 1, 1, 6, 1])\nPASS: odd_sum_validator_transformed(lst=[4])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[10, 5, 0, 8])\nPASS: odd_sum_validator_transformed(lst=[0, 5, 0, 8])\nPASS: odd_sum_validator_transformed(lst=[0, 5, 8, 8])\nPASS: odd_sum_validator_transformed(lst=[8, 5, 8, 8])\nPASS: odd_sum_validator_transformed(lst=[8, 8, 8, 8])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[7, 1, 1, 10, 5, 7, 2, 8, 3, 3])\nPASS: odd_sum_validator_transformed(lst=[7, 1, 1, 10, 5, 7, 2, 8, 3, 1])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\ud893\udfd1\u00a3\udb52\udca4\u00b7\u0093+\udbd5\udc16')\nPASS: string_pattern_score_transformed(s='\udb98\udc7b\u00b5n>\u00ae\u00a5\ud958\udf0d\ud86f\udf9a{\u00cc')\nPASS: string_pattern_score_transformed(s='\udab1\udfcd\uda03\udd64\u001b\udaba\ude79\u009f')\nPASS: string_pattern_score_transformed(s='-')\nPASS: string_pattern_score_transformed(s='\u00b5\u0087\u0017\u00a5\u00ae\u00ce\udbe6\udd80\ud857\udc7e\ud98e\udd28m')\nPASS: string_pattern_score_transformed(s='t')\nPASS: string_pattern_score_transformed(s='\udafa\udc7c\ud9da\ude78\u00c2\u00a0\ud9cf\udd79\u00a45')\nPASS: string_pattern_score_transformed(s='\u00043\u007f')\nPASS: string_pattern_score_transformed(s='A\udb83\ude38\u00e9\u00ee\ud955\ude8c\u00af\u00eb\u00a3|G')\nPASS: string_pattern_score_transformed(s='\u00b2\u0014\u00cf')\nPASS: string_pattern_score_transformed(s='k\udbad\udcf8\u00a5\ub6f70\udb3c\ude70\u008f\u00fb\uda5f\udd40j')\nPASS: string_pattern_score_transformed(s='Mr=\ud824\udddc')\nPASS: string_pattern_score_transformed(s='\u00cb09\u00ce\ubfac^\ud898\udd1a\uda84\udc0b\u00cd\u00e3')\nPASS: string_pattern_score_transformed(s='\u00d7')\nPASS: string_pattern_score_transformed(s='then')\nPASS: string_pattern_score_transformed(s='Q\u00f6\u00b1\u0098\u00a6m')\nPASS: string_pattern_score_transformed(s='INF')\nPASS: string_pattern_score_transformed(s='\u00d4')\nPASS: string_pattern_score_transformed(s='\u0084\u0092\u00a5\ud930\udca6\udb6c\udc8f\ud9a1\ude28')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[3])\nPASS: sum_until_limit_transformed(nums=[19])\nPASS: sum_until_limit_transformed(nums=[6, 20, 14, 2, 6])\nPASS: sum_until_limit_transformed(nums=[20, 4])\nFAIL: sum_until_limit_transformed(nums=[9, 19, 3, 19, 6, 12, 10, 12, 15, 19])\nPASS: sum_until_limit_transformed(nums=[9])\nPASS: sum_until_limit_transformed(nums=[6])\nPASS: sum_until_limit_transformed(nums=[0, 4, 4, 14, 8, 2, 13])\nPASS: sum_until_limit_transformed(nums=[8, 12, 14, 6, 6, 15, 14, 17, 17, 13])\nPASS: sum_until_limit_transformed(nums=[4, 19, 10, 8, 8, 8, 19])\nPASS: sum_until_limit_transformed(nums=[4, 19, 10, 8])\nPASS: sum_until_limit_transformed(nums=[4, 19, 10, 19])\nPASS: sum_until_limit_transformed(nums=[10, 19, 10, 19])\nPASS: sum_until_limit_transformed(nums=[19, 19, 10, 19])\nPASS: sum_until_limit_transformed(nums=[19, 19, 19, 19])\nPASS: sum_until_limit_transformed(nums=[7, 1, 13, 9, 13, 10])\nPASS: sum_until_limit_transformed(nums=[13, 1, 13, 9, 13, 10])\nPASS: sum_until_limit_transformed(nums=[13, 1, 13, 9, 13, 13])\nPASS: sum_until_limit_transformed(nums=[13, 13, 13, 9, 13, 13])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[7])\nPASS: count_divisibles_transformed(nums=[7, 3])\nPASS: count_divisibles_transformed(nums=[1, 14, 2, 8, 2, 17, 9, 4, 9, 9])\nPASS: count_divisibles_transformed(nums=[5, 11, 20, 18, 11, 8])\nPASS: count_divisibles_transformed(nums=[0, 2, 20])\nPASS: count_divisibles_transformed(nums=[17, 11])\nPASS: count_divisibles_transformed(nums=[2, 4, 10])\nPASS: count_divisibles_transformed(nums=[11, 7, 8, 5])\nPASS: count_divisibles_transformed(nums=[12, 14])\nPASS: count_divisibles_transformed(nums=[8, 2, 14, 8, 6, 10, 16, 4, 20])\nPASS: count_divisibles_transformed(nums=[8, 20, 14, 8, 6, 10, 16, 4, 20])\nPASS: count_divisibles_transformed(nums=[8, 4, 14, 8, 6, 10, 16, 4, 20])\nPASS: count_divisibles_transformed(nums=[8, 10, 14, 8, 6, 10, 16, 4, 20])\nPASS: count_divisibles_transformed(nums=[8, 8, 14, 8, 6, 10, 16, 4, 20])\nPASS: count_divisibles_transformed(nums=[8, 8, 14, 8, 6, 10, 16, 14, 20])\nPASS: count_divisibles_transformed(nums=[8, 8, 14, 8, 6, 10, 16, 8, 20])\nPASS: count_divisibles_transformed(nums=[3, 5, 15, 15])\nPASS: count_divisibles_transformed(nums=[3, 15, 15, 15])\nPASS: count_divisibles_transformed(nums=[3, 15, 3, 15])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[6])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[3])\nPASS: index_weighted_sum_transformed(lst=[4, 10, 7, 1])\nPASS: index_weighted_sum_transformed(lst=[3, 10, 7, 2, 2, 3])\nPASS: index_weighted_sum_transformed(lst=[7, 8, 10, 10, 1, 7, 7, 7, 7, 7])\nPASS: index_weighted_sum_transformed(lst=[7])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[3, 7, 3, 6, 0, 6])\nPASS: index_weighted_sum_transformed(lst=[1, 8, 1, 5, 5, 2])\nPASS: index_weighted_sum_transformed(lst=[5, 8, 1, 5, 5, 2])\nPASS: index_weighted_sum_transformed(lst=[5, 8, 1, 5, 2, 2])\nPASS: index_weighted_sum_transformed(lst=[5, 8, 1, 5, 2, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 8, 1, 5, 2, 8])\nPASS: index_weighted_sum_transformed(lst=[5, 5, 1, 5, 2, 8])\nPASS: index_weighted_sum_transformed(lst=[3, 6, 7])\nPASS: index_weighted_sum_transformed(lst=[3, 6, 6])\nPASS: index_weighted_sum_transformed(lst=[6, 6, 6])\nPASS: index_weighted_sum_transformed(lst=[0, 9, 4, 6, 6, 4, 1, 3, 6, 9])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=6)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u009c\u009f\u008d\udba2\udc37\ud961\udfe7\"')\nPASS: character_counter_transformed(text='\u89e4\u00d6\u00fdFs\udb31\udfb9')\nPASS: character_counter_transformed(text='\n4\u00bb\ud851\udc4f\u009a\u0080I\udb8c\udc1a\u00fc')\nPASS: character_counter_transformed(text='\u00e6Q\udb36\udf1d\udbf1\ude4a\u0082\u001d\u0082\uda02\udcac')\nPASS: character_counter_transformed(text='\u0094\u0096')\nPASS: character_counter_transformed(text='b')\nPASS: character_counter_transformed(text='\u00a0F\u008d\ud816\udec1\ud86b\udd0fQ\u00d1\u00e6')\nPASS: character_counter_transformed(text='\ud810\udf038')\nPASS: character_counter_transformed(text='\u00c2\u0091')\nPASS: character_counter_transformed(text='\ud8b3\ude9a')\nPASS: character_counter_transformed(text='\u00f2\u00c1S\udb9a\udd89\ud928\udd2b')\nPASS: character_counter_transformed(text='\u00ba\u0005aL\u000b\udbcd\udf88\u0098')\nPASS: character_counter_transformed(text='Inf')\nPASS: character_counter_transformed(text='\u00b4')\nPASS: character_counter_transformed(text='\u009b\ud9a9\udd0f\u0092f\u0019\u00dd\u008d\n')\nPASS: character_counter_transformed(text='\u00fb\"\udb8c\udecb\u0005,\u0002\u008fH\u00a1\u00be')\nPASS: character_counter_transformed(text='q\u00df\u00e0')\nPASS: character_counter_transformed(text='\ud8b0\ude0e\u00e8')\nPASS: character_counter_transformed(text='\u00bd\u00ad\u00bc\u0016\udbbf\udf74')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[11])\nPASS: rolling_maximum_transformed(values=[11, 26, 81])\nPASS: rolling_maximum_transformed(values=[48, 19, 29])\nPASS: rolling_maximum_transformed(values=[2, 39, 18, 10, 5, 6, 11, 68, 75, 13])\nPASS: rolling_maximum_transformed(values=[53, 60, 77, 85, 56])\nPASS: rolling_maximum_transformed(values=[82, 94, 28, 8])\nPASS: rolling_maximum_transformed(values=[74, 58, 66, 82])\nPASS: rolling_maximum_transformed(values=[22, 52, 29, 25, 12, 79])\nPASS: rolling_maximum_transformed(values=[34, 92])\nPASS: rolling_maximum_transformed(values=[10])\nPASS: rolling_maximum_transformed(values=[84, 68])\nPASS: rolling_maximum_transformed(values=[68, 68])\nPASS: rolling_maximum_transformed(values=[36, 87, 74, 18, 31, 36, 97, 34, 57, 21])\nPASS: rolling_maximum_transformed(values=[36, 87, 74])\nPASS: rolling_maximum_transformed(values=[87, 87, 74])\nPASS: rolling_maximum_transformed(values=[87, 74, 74])\nPASS: rolling_maximum_transformed(values=[87, 74, 87])\nPASS: rolling_maximum_transformed(values=[74, 74, 87])\nPASS: rolling_maximum_transformed(values=[74, 74, 74])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_31": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=68)\nPASS: process_data_transformed(x=70)\nPASS: process_data_transformed(x=62)\nPASS: process_data_transformed(x=13)\nPASS: process_data_transformed(x=49)\nPASS: process_data_transformed(x=66)\nPASS: process_data_transformed(x=63)\nPASS: process_data_transformed(x=10)\nPASS: process_data_transformed(x=40)\nPASS: process_data_transformed(x=45)\nPASS: process_data_transformed(x=16)\nPASS: process_data_transformed(x=3)\nPASS: process_data_transformed(x=87)\nPASS: process_data_transformed(x=37)\nPASS: process_data_transformed(x=59)\nPASS: process_data_transformed(x=69)\nPASS: process_data_transformed(x=61)\nPASS: process_data_transformed(x=29)\nPASS: process_data_transformed(x=65)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=2.8431452969941882e-109)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=35.258231354292896)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=2.2250738585072014e-308)\nPASS: convert_temperature_transformed(c=33.86656492807863)\nPASS: convert_temperature_transformed(c=58.71506102232359)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=83.72864242239595)\nPASS: convert_temperature_transformed(c=19.035780415069155)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=69.8701383436209, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=183.5299920277557, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=0.7078755011656884)\nPASS: calculate_discount_transformed(price=10.070095432685914, discount_rate=0.8525944993281616)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=178.3083067123237, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=128.72685328841948, discount_rate=0.04270484965393707)\nPASS: calculate_discount_transformed(price=128.72685328841948, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=0.0)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-2.225073858507203e-309, imag=0.0)\nPASS: process_complex_number_transformed(real=-2.225073858507203e-309, imag=-1.965747090018965e-244)\nPASS: process_complex_number_transformed(real=19.0, imag=-19.999999999999996)\nPASS: process_complex_number_transformed(real=1.5, imag=-1.9)\nPASS: process_complex_number_transformed(real=5.960464477539063e-08, imag=-19.999999999999996)\nPASS: process_complex_number_transformed(real=-19.0, imag=1.9)\nPASS: process_complex_number_transformed(real=1.192092896e-07, imag=-0.0)\nPASS: process_complex_number_transformed(real=-1.401298464324817e-45, imag=-19.999999999999996)\nPASS: process_complex_number_transformed(real=0.0, imag=0.3333333333333333)\nPASS: process_complex_number_transformed(real=-2.2250738585072014e-308, imag=20.0)\nPASS: process_complex_number_transformed(real=-2.2250738585072014e-308, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=2.2281112589001637, imag=2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=2.2250738585072014e-308, imag=2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=20.0, imag=0.5)\nPASS: process_complex_number_transformed(real=20.0, imag=20.0)\nPASS: process_complex_number_transformed(real=2.4226205859484443e-88, imag=1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=2.4226205859484443e-88, imag=2.4226205859484443e-88)\nPASS: process_complex_number_transformed(real=-1.5, imag=6.103515625e-05)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=6.103515625e-05)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=43)\nPASS: transform_data_transformed(input_value=14)\nPASS: transform_data_transformed(input_value=58)\nPASS: transform_data_transformed(input_value=100)\nPASS: transform_data_transformed(input_value=70)\nPASS: transform_data_transformed(input_value=95)\nPASS: transform_data_transformed(input_value=2)\nPASS: transform_data_transformed(input_value=50)\nPASS: transform_data_transformed(input_value=34)\nPASS: transform_data_transformed(input_value=8)\nPASS: transform_data_transformed(input_value=47)\nPASS: transform_data_transformed(input_value=48)\nPASS: transform_data_transformed(input_value=83)\nPASS: transform_data_transformed(input_value=19)\nPASS: transform_data_transformed(input_value=56)\nPASS: transform_data_transformed(input_value=67)\nPASS: transform_data_transformed(input_value=53)\nPASS: transform_data_transformed(input_value=13)\nPASS: transform_data_transformed(input_value=21)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=12.768098828757914)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=0.5712548842563915)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=10.999906640652572)\nPASS: circle_area_diff_transformed(r=14.929440428895047)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=12.485710953942146)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=6.536253569661007)\nPASS: circle_area_diff_transformed(r=1.192092896e-07)\nPASS: circle_area_diff_transformed(r=18.21526541646471)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=10, b=1, c=1)\nPASS: triangle_checker_transformed(a=10, b=15, c=2)\nPASS: triangle_checker_transformed(a=5, b=13, c=9)\nPASS: triangle_checker_transformed(a=10, b=7, c=16)\nPASS: triangle_checker_transformed(a=19, b=4, c=16)\nPASS: triangle_checker_transformed(a=12, b=2, c=16)\nPASS: triangle_checker_transformed(a=13, b=11, c=12)\nPASS: triangle_checker_transformed(a=11, b=15, c=11)\nPASS: triangle_checker_transformed(a=6, b=10, c=16)\nPASS: triangle_checker_transformed(a=16, b=2, c=2)\nPASS: triangle_checker_transformed(a=2, b=2, c=2)\nPASS: triangle_checker_transformed(a=19, b=16, c=13)\nPASS: triangle_checker_transformed(a=19, b=16, c=16)\nPASS: triangle_checker_transformed(a=16, b=16, c=16)\nPASS: triangle_checker_transformed(a=7, b=15, c=5)\nPASS: triangle_checker_transformed(a=15, b=15, c=5)\nPASS: triangle_checker_transformed(a=5, b=15, c=5)\nPASS: triangle_checker_transformed(a=5, b=5, c=5)\nPASS: triangle_checker_transformed(a=8, b=8, c=5)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=95.27995090576131)\nPASS: temperature_offset_transformed(c=7.213350571528643e-253)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=28.047375336795184)\nPASS: temperature_offset_transformed(c=3.3239745483431256e-105)\nPASS: temperature_offset_transformed(c=7.534926379983366)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=82.22558421792084)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=1.8384204094563477e-117)\nPASS: temperature_offset_transformed(c=2.7008518811701447e-142)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=86.14191939945523)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=1, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=1, b=6, c=-10)\nPASS: quadratic_discriminant_transformed(a=5, b=-5, c=-6)\nPASS: quadratic_discriminant_transformed(a=0, b=-7, c=3)\nPASS: quadratic_discriminant_transformed(a=7, b=1, c=9)\nPASS: quadratic_discriminant_transformed(a=9, b=2, c=-1)\nPASS: quadratic_discriminant_transformed(a=-10, b=8, c=-4)\nPASS: quadratic_discriminant_transformed(a=3, b=-8, c=-1)\nPASS: quadratic_discriminant_transformed(a=-5, b=9, c=-8)\nPASS: quadratic_discriminant_transformed(a=10, b=-3, c=7)\nPASS: quadratic_discriminant_transformed(a=10, b=7, c=7)\nPASS: quadratic_discriminant_transformed(a=7, b=7, c=7)\nPASS: quadratic_discriminant_transformed(a=0, b=-9, c=-6)\nPASS: quadratic_discriminant_transformed(a=-6, b=-9, c=-6)\nPASS: quadratic_discriminant_transformed(a=-6, b=-6, c=-6)\nPASS: quadratic_discriminant_transformed(a=10, b=-4, c=-4)\nPASS: quadratic_discriminant_transformed(a=-4, b=-4, c=-4)\nPASS: quadratic_discriminant_transformed(a=-10, b=2, c=-9)\nPASS: quadratic_discriminant_transformed(a=-10, b=-10, c=-9)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-0.3333333333333333, y=0.0)\nPASS: vector_norm_transformed(x=-0.3333333333333333, y=1.5)\nPASS: vector_norm_transformed(x=1.9, y=-9.688334836112799e-141)\nPASS: vector_norm_transformed(x=-6.103515625e-05, y=0.3333333333333333)\nPASS: vector_norm_transformed(x=0.3333333333333333, y=2.225073858507e-311)\nPASS: vector_norm_transformed(x=0.5123328331371741, y=9.0)\nPASS: vector_norm_transformed(x=3.750091621172295, y=6.103515625e-05)\nPASS: vector_norm_transformed(x=2.00001, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-1.9, y=-0.0)\nPASS: vector_norm_transformed(x=-5.839889992832855, y=-10.0)\nPASS: vector_norm_transformed(x=-10.0, y=-10.0)\nPASS: vector_norm_transformed(x=-5.934260981951235, y=-2.00001)\nPASS: vector_norm_transformed(x=-2.00001, y=-2.00001)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=1.192092896e-07)\nPASS: vector_norm_transformed(x=1.192092896e-07, y=1.192092896e-07)\nPASS: vector_norm_transformed(x=5.960464477539063e-08, y=-0.0)\nPASS: vector_norm_transformed(x=5.960464477539063e-08, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-1.1125369292536007e-308, y=-0.99999)\nPASS: vector_norm_transformed(x=-1.1125369292536007e-308, y=-1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.7441035579622136e-119, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.7441035579622136e-119, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=9.608275861640553, b=7.3156445685642515)\nPASS: hypotenuse_diff_transformed(a=1.9374351812366646, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=9.402288739316933, b=0.0)\nPASS: hypotenuse_diff_transformed(a=0.5, b=2.3845410489666268)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=8.465766755945022)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=4.6185903434165327e-188)\nPASS: hypotenuse_diff_transformed(a=9.906273689022596, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=9.906273689022596, b=9.906273689022596)\nPASS: hypotenuse_diff_transformed(a=9.0, b=0.19059812290318726)\nPASS: hypotenuse_diff_transformed(a=9.0, b=9.0)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=1.1)\nPASS: hypotenuse_diff_transformed(a=1.1, b=1.1)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=1.175494351e-38)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u008e\nbXX\u00a0\u00cc\u009a\udbaa\udcbf\u0089')\nPASS: ascii_average_transformed(s='\u00cc\u00b3$\u00da\u00adE\ud951\udeccS\ud834\udd93\u008c')\nPASS: ascii_average_transformed(s='\u0088[D\u00a1\u00d3\udba9\ude34\u008a\udb98\udc2a')\nPASS: ascii_average_transformed(s='\ud941\udf03')\nPASS: ascii_average_transformed(s='b\u00a1\u00bf{U\u0005\u00e0n\udb66\ude20Y')\nPASS: ascii_average_transformed(s='&\u00e0\b\udb3d\udfeaz\udb4f\ude23\u00b5')\nPASS: ascii_average_transformed(s='\uda51\udd1f\u00f2')\nPASS: ascii_average_transformed(s='\u00d5M\"\u0093\u00eb\ud97d\udc40\u00b3\u00ec\u8b4c')\nPASS: ascii_average_transformed(s='\u009e\u0095')\nPASS: ascii_average_transformed(s='\b')\nPASS: ascii_average_transformed(s='#o\u0007\uda4d\udc97S\u00bf\u001d\udb56\uddaf\ud84c\udc24\u00eb')\nPASS: ascii_average_transformed(s='\u0085')\nPASS: ascii_average_transformed(s='\u00c9')\nPASS: ascii_average_transformed(s='R\u00aa#`\u00e2')\nPASS: ascii_average_transformed(s='n\u00ad\u00d5\u00acc&`')\nPASS: ascii_average_transformed(s='iT\u001bGE\u008f\ucfd6\u00dd\u00a8\u00af')\nPASS: ascii_average_transformed(s='\uda92\udfcf\u00c46\ud961\udfc7')\nPASS: ascii_average_transformed(s='\u00de')\nPASS: ascii_average_transformed(s='\u0091\u00de\u00177\u000f\u0010\u001e\u00a3\u00fc\u00a3')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[9, 0])\nPASS: list_balance_transformed(nums=[9, 1, 0, 3, 9])\nPASS: list_balance_transformed(nums=[6, 8, 7, 0])\nPASS: list_balance_transformed(nums=[0, 1])\nPASS: list_balance_transformed(nums=[7, 6, 9, 6])\nPASS: list_balance_transformed(nums=[5, 2, 3])\nPASS: list_balance_transformed(nums=[1, 1, 1, 7, 9, 0, 9])\nPASS: list_balance_transformed(nums=[9, 10, 4, 9, 4, 5, 2, 10, 0, 10])\nPASS: list_balance_transformed(nums=[4, 4, 1, 10, 10, 5])\nPASS: list_balance_transformed(nums=[8, 1, 10, 0])\nPASS: list_balance_transformed(nums=[8, 8, 10, 0])\nPASS: list_balance_transformed(nums=[8, 8, 0, 0])\nPASS: list_balance_transformed(nums=[8, 8, 0, 8])\nPASS: list_balance_transformed(nums=[0, 8, 0, 0])\nPASS: list_balance_transformed(nums=[2, 6, 1, 4])\nPASS: list_balance_transformed(nums=[1, 6, 1, 4])\nPASS: list_balance_transformed(nums=[1, 4, 1, 4])\nPASS: list_balance_transformed(nums=[1, 4, 4, 4])\nPASS: list_balance_transformed(nums=[1, 4])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[5, 9, 6, 6, 2, 9, 8, 2, 9, 1])\nPASS: odd_sum_validator_transformed(lst=[0, 8, 9, 9, 2, 6])\nPASS: odd_sum_validator_transformed(lst=[9, 2, 1, 8, 7, 8, 10, 8])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[10, 3, 9, 7, 7, 6])\nPASS: odd_sum_validator_transformed(lst=[3, 2, 3])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[4, 3, 9, 9, 6, 10, 1, 9, 1, 6])\nPASS: odd_sum_validator_transformed(lst=[4, 3, 9, 9, 6, 10, 1, 9, 1, 4])\nPASS: odd_sum_validator_transformed(lst=[9, 3, 9, 9, 6, 10, 1, 9, 1, 4])\nPASS: odd_sum_validator_transformed(lst=[9, 3, 9, 9, 6, 10, 1, 9, 1, 10])\nPASS: odd_sum_validator_transformed(lst=[9, 3, 9, 9, 6, 1, 1, 9, 1, 10])\nPASS: odd_sum_validator_transformed(lst=[9, 3, 9, 9, 9, 1, 1, 9, 1, 10])\nPASS: odd_sum_validator_transformed(lst=[9, 3, 1, 9, 9, 1, 1, 9, 1, 10])\nPASS: odd_sum_validator_transformed(lst=[9, 7, 0, 5, 9, 9, 4, 4, 10, 7])\nPASS: odd_sum_validator_transformed(lst=[9, 7, 7, 5, 9, 9, 4, 4, 10, 7])\nPASS: odd_sum_validator_transformed(lst=[9, 7, 7, 5, 9, 4, 4, 4, 10, 7])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\uda81\ude827\u00d6\u00d8')\nPASS: string_pattern_score_transformed(s='\u000b')\nPASS: string_pattern_score_transformed(s='\udb1b\udca9\u00ce\tM\u0004V\u0091\u0085')\nPASS: string_pattern_score_transformed(s='\udaeb\udd83')\nPASS: string_pattern_score_transformed(s='\udbb5\udeaa\u00be\u0092\u00f2\u0004\u008f\u001b\u0097\u00bc\u0086')\nPASS: string_pattern_score_transformed(s='\u00cf')\nPASS: string_pattern_score_transformed(s='\u00f6')\nPASS: string_pattern_score_transformed(s='\u001b\u0097\udadc\udce2,\u00fa\uda23\udd37\u008e\u0082$\u0099')\nPASS: string_pattern_score_transformed(s='\u092e\u0928\u0940\u0937 \u0645\u0646\u0634')\nPASS: string_pattern_score_transformed(s='\u00a9\udb75\udf98\u0011?\u00ea\u00c0F\u00f9\u00d5\u0091')\nPASS: string_pattern_score_transformed(s='\ud82f\udc29H'\udb00\udd20\u001fduF\u0095\u00f1')\nPASS: string_pattern_score_transformed(s='False')\nPASS: string_pattern_score_transformed(s='S\udb20\ude4c5\udab6\udd7a6B\udb9d\udc21(O\u00e7')\nPASS: string_pattern_score_transformed(s='\u0015')\nPASS: string_pattern_score_transformed(s='\u00e8\u00b5\udb29\udd88m\ud9be\udd81\u0005\u00f6\t')\nPASS: string_pattern_score_transformed(s='1\u00aa\u00aca\u008b\ud865\udfb0\u00f0')\nPASS: string_pattern_score_transformed(s='\u0001y4\ud9bb\udc76\u0000[\ud88d\udd42\u008d\uda43\udd53\u008f')\nPASS: string_pattern_score_transformed(s='/\u0093\ud966\udd25')\nPASS: string_pattern_score_transformed(s='k')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[15])\nPASS: sum_until_limit_transformed(nums=[15, 2])\nPASS: sum_until_limit_transformed(nums=[10, 19, 4, 17, 6, 12])\nPASS: sum_until_limit_transformed(nums=[10])\nPASS: sum_until_limit_transformed(nums=[2])\nPASS: sum_until_limit_transformed(nums=[15, 7])\nPASS: sum_until_limit_transformed(nums=[14, 11, 9, 1, 12, 14, 11, 3, 2, 11])\nPASS: sum_until_limit_transformed(nums=[8, 16, 7, 6, 4, 11, 1, 19, 16, 13])\nPASS: sum_until_limit_transformed(nums=[12, 17, 6, 12, 7, 9, 5])\nPASS: sum_until_limit_transformed(nums=[19, 3, 18, 11, 1, 1, 3, 17, 12, 3])\nFAIL: sum_until_limit_transformed(nums=[19, 3, 17, 11, 1, 1, 3, 17, 12, 3])\nPASS: sum_until_limit_transformed(nums=[19, 3])\nPASS: sum_until_limit_transformed(nums=[3, 3])\nPASS: sum_until_limit_transformed(nums=[4, 2, 13])\nPASS: sum_until_limit_transformed(nums=[13, 2, 13])\nPASS: sum_until_limit_transformed(nums=[13, 13, 13])\nPASS: sum_until_limit_transformed(nums=[13, 13])\nPASS: sum_until_limit_transformed(nums=[14])\nPASS: sum_until_limit_transformed(nums=[7, 5, 14, 0, 3, 16, 12, 6])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[1])\nPASS: count_divisibles_transformed(nums=[9])\nPASS: count_divisibles_transformed(nums=[16, 19, 14, 6, 6, 17])\nPASS: count_divisibles_transformed(nums=[17, 4, 11, 13, 19, 11, 19, 1, 6, 20])\nPASS: count_divisibles_transformed(nums=[6, 15, 14, 2, 13, 20, 4, 18, 8, 11])\nPASS: count_divisibles_transformed(nums=[5, 11])\nPASS: count_divisibles_transformed(nums=[17])\nPASS: count_divisibles_transformed(nums=[8, 5, 20, 3, 19, 9, 3, 18, 17, 11])\nPASS: count_divisibles_transformed(nums=[7, 20, 6, 1, 5])\nPASS: count_divisibles_transformed(nums=[19, 1, 15, 16])\nPASS: count_divisibles_transformed(nums=[19, 16, 15, 16])\nPASS: count_divisibles_transformed(nums=[19, 15, 15, 16])\nPASS: count_divisibles_transformed(nums=[15, 15, 15, 16])\nPASS: count_divisibles_transformed(nums=[15, 15, 16, 16])\nPASS: count_divisibles_transformed(nums=[15, 15, 16, 15])\nPASS: count_divisibles_transformed(nums=[17, 20, 3, 2, 4, 18, 16, 1])\nPASS: count_divisibles_transformed(nums=[17, 1, 3, 2, 4, 18, 16, 1])\nPASS: count_divisibles_transformed(nums=[17, 1, 3, 2, 4, 16, 16, 1])\nPASS: count_divisibles_transformed(nums=[17, 1, 3, 16, 4, 16, 16, 1])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[7])\nPASS: index_weighted_sum_transformed(lst=[6])\nPASS: index_weighted_sum_transformed(lst=[10, 6, 3, 5, 1, 10, 8])\nPASS: index_weighted_sum_transformed(lst=[3, 7, 1, 6, 5, 7, 4, 1, 4, 5])\nPASS: index_weighted_sum_transformed(lst=[2, 8, 3, 10, 4])\nPASS: index_weighted_sum_transformed(lst=[6, 5, 4, 9, 6, 8, 7])\nPASS: index_weighted_sum_transformed(lst=[8, 9, 7, 6, 9, 3, 7])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[0, 8, 1])\nPASS: index_weighted_sum_transformed(lst=[2, 3, 0, 8, 6, 0, 5, 6, 3, 2])\nPASS: index_weighted_sum_transformed(lst=[2, 3, 0, 8, 6, 0, 0, 6, 3, 2])\nPASS: index_weighted_sum_transformed(lst=[2, 3, 0, 8, 6, 0, 0, 6])\nPASS: index_weighted_sum_transformed(lst=[2, 3, 0, 8, 6, 0, 6, 6])\nPASS: index_weighted_sum_transformed(lst=[2, 3, 0, 8, 6, 0, 6, 3])\nPASS: index_weighted_sum_transformed(lst=[3, 3, 0, 8, 6, 0, 6, 3])\nPASS: index_weighted_sum_transformed(lst=[3])\nPASS: index_weighted_sum_transformed(lst=[3, 3])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[0, 0, 5, 8, 2, 1])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=8)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='0/0')\nPASS: character_counter_transformed(text='\u00c09%\u00f2\u00da')\nPASS: character_counter_transformed(text='\u00ac\u009a{')\nPASS: character_counter_transformed(text='\u00be6\u00dag\u00ec\u00fe\u0004\ud92b\udc5b\u0004w')\nPASS: character_counter_transformed(text='h\uf66b'\u00cd\u00b3\ud9c1\udee3\u007f\ud8c0\udf88Y2')\nPASS: character_counter_transformed(text='0..0')\nPASS: character_counter_transformed(text='\ud956\ude77\udb23\udd64\u00cci9\u0096B<\udbce\udc53\u009e')\nPASS: character_counter_transformed(text='t\u00e8\u009e')\nPASS: character_counter_transformed(text='\ud88b\udc79\u00e9\u0090p\udb54\udd13')\nPASS: character_counter_transformed(text='\u00b6\udb85\udf21\u00b3\udb19\udddc\udba6\udce9')\nPASS: character_counter_transformed(text='\udb2d\udcfa\ud8f8\udf10T\u00a5')\nPASS: character_counter_transformed(text='\ud959\udca2\u00b7\u008e\u00ec\t)\ud93f\udec6\u001f\ud908\udf70\u001f')\nPASS: character_counter_transformed(text='\u00f6')\nPASS: character_counter_transformed(text='\ud860\uddedZVv\ud96b\ude23\u0096W\u0088\u00b6\u00db')\nPASS: character_counter_transformed(text='\u00b0\b<\udb36\udc49k\u0007r')\nPASS: character_counter_transformed(text='\udacc\udc8f\ud814\udc0e\u0084\ud974\udec3\ud8b3\udf74')\nPASS: character_counter_transformed(text='\u00efdR9\u0084\u00d0/\u00fb\u00e1')\nPASS: character_counter_transformed(text='s-')\nPASS: character_counter_transformed(text='none')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[69])\nPASS: rolling_maximum_transformed(values=[38])\nPASS: rolling_maximum_transformed(values=[92, 18, 8, 79])\nPASS: rolling_maximum_transformed(values=[58, 91, 36, 55, 71, 23, 5, 99, 85, 48])\nPASS: rolling_maximum_transformed(values=[21, 18])\nPASS: rolling_maximum_transformed(values=[70, 18, 2])\nPASS: rolling_maximum_transformed(values=[14, 51, 48, 27, 20, 78, 98, 65, 25, 8])\nPASS: rolling_maximum_transformed(values=[38, 33, 44, 56, 90, 83, 32, 99, 16, 42])\nPASS: rolling_maximum_transformed(values=[66])\nPASS: rolling_maximum_transformed(values=[74, 4, 52, 28, 53, 22, 50, 18, 74, 95])\nPASS: rolling_maximum_transformed(values=[74, 52, 52, 28, 53, 22, 50, 18, 74, 95])\nPASS: rolling_maximum_transformed(values=[28, 52, 52, 28, 53, 22, 50, 18, 74, 95])\nPASS: rolling_maximum_transformed(values=[28, 52, 52, 28, 53, 18, 50, 18, 74, 95])\nPASS: rolling_maximum_transformed(values=[28, 52, 74, 28, 53, 18, 50, 18, 74, 95])\nPASS: rolling_maximum_transformed(values=[28, 52, 74, 28, 53, 74, 50, 18, 74, 95])\nPASS: rolling_maximum_transformed(values=[28, 52, 74, 18, 53, 74, 50, 18, 74, 95])\nPASS: rolling_maximum_transformed(values=[39, 36, 59, 56, 3, 76, 76, 44])\nPASS: rolling_maximum_transformed(values=[39])\nPASS: rolling_maximum_transformed(values=[26])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_32": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=70)\nPASS: process_data_transformed(x=59)\nPASS: process_data_transformed(x=80)\nPASS: process_data_transformed(x=39)\nPASS: process_data_transformed(x=16)\nPASS: process_data_transformed(x=52)\nPASS: process_data_transformed(x=21)\nPASS: process_data_transformed(x=17)\nPASS: process_data_transformed(x=96)\nPASS: process_data_transformed(x=84)\nPASS: process_data_transformed(x=13)\nPASS: process_data_transformed(x=41)\nPASS: process_data_transformed(x=86)\nPASS: process_data_transformed(x=1)\nPASS: process_data_transformed(x=98)\nPASS: process_data_transformed(x=24)\nPASS: process_data_transformed(x=95)\nPASS: process_data_transformed(x=93)\nPASS: process_data_transformed(x=78)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=57.29128890106904)\nPASS: convert_temperature_transformed(c=2.2250738585072014e-308)\nPASS: convert_temperature_transformed(c=39.225605160751186)\nPASS: convert_temperature_transformed(c=47.77139715462376)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=5.998488018392047)\nPASS: convert_temperature_transformed(c=25.332332804973518)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=76.16022925859379)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=9.024988085103015)\nPASS: convert_temperature_transformed(c=1.1894510712386668e-156)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=14.989485339666956, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=14.989485339666956, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=6.103515625e-05, discount_rate=1.953109022721244e-276)\nPASS: calculate_discount_transformed(price=65.7248896592738, discount_rate=0.7367150542654034)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=0.443217463351928)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=182.36269135323903, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=0.019201064693813445)\nPASS: calculate_discount_transformed(price=0.019201064693813445, discount_rate=0.019201064693813445)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=0.3333333333333333)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=5e-324)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-2.225073858507e-311, imag=0.0)\nPASS: process_complex_number_transformed(real=-2.225073858507e-311, imag=-11.72138636340281)\nPASS: process_complex_number_transformed(real=19.0, imag=-2.00001)\nPASS: process_complex_number_transformed(real=2.00001, imag=6.171843306809838e-209)\nPASS: process_complex_number_transformed(real=-19.999999999999996, imag=-1.1)\nPASS: process_complex_number_transformed(real=2.225073858507e-311, imag=-7.935730662687098)\nPASS: process_complex_number_transformed(real=-1.1754943508222875e-38, imag=-19.0)\nPASS: process_complex_number_transformed(real=-2.225073858507e-311, imag=-0.3333333333333333)\nPASS: process_complex_number_transformed(real=1.401298464324817e-45, imag=-8.068599169063313)\nPASS: process_complex_number_transformed(real=11.955286205582631, imag=2.4215009968633175e-42)\nPASS: process_complex_number_transformed(real=11.955286205582631, imag=11.955286205582631)\nPASS: process_complex_number_transformed(real=-1.9, imag=-0.5)\nPASS: process_complex_number_transformed(real=-1.9, imag=-1.9)\nPASS: process_complex_number_transformed(real=-6.607385447110666, imag=-4.597435699587219)\nPASS: process_complex_number_transformed(real=-4.597435699587219, imag=-4.597435699587219)\nPASS: process_complex_number_transformed(real=-0.3333333333333333, imag=-2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-0.3333333333333333, imag=-0.3333333333333333)\nPASS: process_complex_number_transformed(real=5.960464477539063e-08, imag=2.225073858507e-311)\nPASS: process_complex_number_transformed(real=5.960464477539063e-08, imag=5.960464477539063e-08)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=51)\nPASS: transform_data_transformed(input_value=39)\nPASS: transform_data_transformed(input_value=27)\nPASS: transform_data_transformed(input_value=76)\nPASS: transform_data_transformed(input_value=57)\nPASS: transform_data_transformed(input_value=90)\nPASS: transform_data_transformed(input_value=48)\nPASS: transform_data_transformed(input_value=49)\nPASS: transform_data_transformed(input_value=7)\nPASS: transform_data_transformed(input_value=73)\nPASS: transform_data_transformed(input_value=99)\nPASS: transform_data_transformed(input_value=18)\nPASS: transform_data_transformed(input_value=58)\nPASS: transform_data_transformed(input_value=33)\nPASS: transform_data_transformed(input_value=15)\nPASS: transform_data_transformed(input_value=97)\nPASS: transform_data_transformed(input_value=75)\nPASS: transform_data_transformed(input_value=54)\nPASS: transform_data_transformed(input_value=47)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=1.175494351e-38)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=1.3914307684163332)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=13.645077372774185)\nPASS: circle_area_diff_transformed(r=13.235078104972626)\nPASS: circle_area_diff_transformed(r=15.68553924603249)\nPASS: circle_area_diff_transformed(r=18.727217909648154)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=7.390500931076295)\nPASS: circle_area_diff_transformed(r=8.288546355742923)\nPASS: circle_area_diff_transformed(r=1.192092896e-07)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=17.984976687551097)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=9, b=1, c=1)\nPASS: triangle_checker_transformed(a=9, b=14, c=12)\nPASS: triangle_checker_transformed(a=11, b=11, c=3)\nPASS: triangle_checker_transformed(a=9, b=5, c=7)\nPASS: triangle_checker_transformed(a=8, b=6, c=13)\nPASS: triangle_checker_transformed(a=7, b=20, c=19)\nPASS: triangle_checker_transformed(a=3, b=15, c=14)\nPASS: triangle_checker_transformed(a=16, b=18, c=4)\nPASS: triangle_checker_transformed(a=1, b=19, c=9)\nPASS: triangle_checker_transformed(a=4, b=15, c=3)\nPASS: triangle_checker_transformed(a=15, b=15, c=3)\nPASS: triangle_checker_transformed(a=15, b=15, c=15)\nPASS: triangle_checker_transformed(a=8, b=7, c=6)\nPASS: triangle_checker_transformed(a=6, b=7, c=6)\nPASS: triangle_checker_transformed(a=6, b=7, c=7)\nPASS: triangle_checker_transformed(a=7, b=7, c=7)\nPASS: triangle_checker_transformed(a=6, b=9, c=18)\nPASS: triangle_checker_transformed(a=9, b=9, c=18)\nPASS: triangle_checker_transformed(a=18, b=9, c=18)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=1.2508207222003747)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=76.18081011659974)\nPASS: temperature_offset_transformed(c=83.47017113729487)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=82.28443964251568)\nPASS: temperature_offset_transformed(c=21.807175365678983)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: temperature_offset_transformed(c=76.21536501383994)\nPASS: temperature_offset_transformed(c=32.7297355734531)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=88.50398935440525)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=2, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=2, b=9, c=5)\nPASS: quadratic_discriminant_transformed(a=-9, b=8, c=3)\nPASS: quadratic_discriminant_transformed(a=-3, b=-6, c=3)\nPASS: quadratic_discriminant_transformed(a=-3, b=7, c=-3)\nPASS: quadratic_discriminant_transformed(a=1, b=6, c=9)\nPASS: quadratic_discriminant_transformed(a=-3, b=-10, c=-4)\nPASS: quadratic_discriminant_transformed(a=10, b=-8, c=3)\nPASS: quadratic_discriminant_transformed(a=4, b=4, c=-10)\nPASS: quadratic_discriminant_transformed(a=0, b=10, c=-9)\nPASS: quadratic_discriminant_transformed(a=-9, b=10, c=-9)\nPASS: quadratic_discriminant_transformed(a=-9, b=-9, c=-9)\nPASS: quadratic_discriminant_transformed(a=-9, b=-9, c=0)\nPASS: quadratic_discriminant_transformed(a=3, b=-5, c=8)\nPASS: quadratic_discriminant_transformed(a=3, b=8, c=8)\nPASS: quadratic_discriminant_transformed(a=3, b=8, c=3)\nPASS: quadratic_discriminant_transformed(a=3, b=3, c=3)\nPASS: quadratic_discriminant_transformed(a=-6, b=8, c=-9)\nPASS: quadratic_discriminant_transformed(a=-6, b=8, c=8)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=1.1125369292536007e-308, y=0.0)\nPASS: vector_norm_transformed(x=1.1125369292536007e-308, y=-1.192092896e-07)\nPASS: vector_norm_transformed(x=1.1, y=-2.220446049250313e-16)\nPASS: vector_norm_transformed(x=-0.99999, y=-1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=5.960464477539063e-08, y=2.250463510514111)\nPASS: vector_norm_transformed(x=5.960464477539063e-08, y=0.0)\nPASS: vector_norm_transformed(x=3.1518723192512326, y=2.220446049250313e-16)\nPASS: vector_norm_transformed(x=-7.924954128841897, y=2.225073858507e-311)\nPASS: vector_norm_transformed(x=1.0932918119180137e-244, y=-6.911429334533249)\nPASS: vector_norm_transformed(x=-1.1, y=-5e-324)\nPASS: vector_norm_transformed(x=-1.1, y=-1.1)\nPASS: vector_norm_transformed(x=1.1, y=-0.3333333333333333)\nPASS: vector_norm_transformed(x=1.1, y=1.1)\nPASS: vector_norm_transformed(x=2.220446049250313e-16, y=-2.220446049250313e-16)\nPASS: vector_norm_transformed(x=-2.220446049250313e-16, y=-2.220446049250313e-16)\nPASS: vector_norm_transformed(x=-1.126859093567043e-148, y=1.192092896e-07)\nPASS: vector_norm_transformed(x=1.192092896e-07, y=1.192092896e-07)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=-1.452392702830359)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5.991017296384352, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5.991017296384352, b=1.0)\nPASS: hypotenuse_diff_transformed(a=4.699501592170131, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=1.1, b=1.5136191607122298)\nPASS: hypotenuse_diff_transformed(a=6.000851520693661e-152, b=1.5)\nPASS: hypotenuse_diff_transformed(a=0.0, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=0.0, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=1.1788482870341137e-70, b=1.192092896e-07)\nPASS: hypotenuse_diff_transformed(a=1.9, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=8.598399217140908)\nPASS: hypotenuse_diff_transformed(a=8.598399217140908, b=8.598399217140908)\nPASS: hypotenuse_diff_transformed(a=2.312126121509142, b=9.250306095411196)\nPASS: hypotenuse_diff_transformed(a=9.250306095411196, b=9.250306095411196)\nPASS: hypotenuse_diff_transformed(a=10.0, b=3.44672981668454)\nPASS: hypotenuse_diff_transformed(a=3.44672981668454, b=3.44672981668454)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=2.1601184172138846e-216)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=0.5)\nPASS: hypotenuse_diff_transformed(a=0.5, b=0.5)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\udbbb\udcc3\u00b7')\nPASS: ascii_average_transformed(s='\ud974\ude79')\nPASS: ascii_average_transformed(s='\u00d9;\ud97e\udc02@\u008b\udb8c\uded9\u009a')\nPASS: ascii_average_transformed(s='K')\nPASS: ascii_average_transformed(s='\u0000Ul\udb83\udc36\u00c6\u008c\u00e4\u008d\u00e4\u00a0')\nPASS: ascii_average_transformed(s='\u00b6\u00b1\u0098\u0087\u009f+\u00a7Sj\u00be')\nPASS: ascii_average_transformed(s='s')\nPASS: ascii_average_transformed(s='\u00f7\ud85b\udc8c\u0007')\nPASS: ascii_average_transformed(s='\ud9d7\udcee')\nPASS: ascii_average_transformed(s='\u00a9v\u00f9\u001f0')\nPASS: ascii_average_transformed(s='3\udba2\udf4d\udb5c\udd99\u00d4\u00cf')\nPASS: ascii_average_transformed(s='%\u00d6')\nPASS: ascii_average_transformed(s='\u0006\ud901\udfae\u00c2\u00d1\u0011\ud9f3\udd74\u00df')\nPASS: ascii_average_transformed(s='\ud9c9\ude55\u00c4\u001c')\nPASS: ascii_average_transformed(s='\u00b7KDu')\nPASS: ascii_average_transformed(s='\u00eeF\u00e9\uda11\udf5f\udaee\udd04\udb30\udd3c,\ud947\uddccD:')\nPASS: ascii_average_transformed(s='\ud8cb\udeab\u00cf\udb42\udc35\u00b0\u00a8\ud905\udc78VD\t\udad3\udeeb')\nPASS: ascii_average_transformed(s='\u0012\ud973\ude73\u0001\u000eM')\nPASS: ascii_average_transformed(s='\u00f9A\u00af')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[5, 0])\nPASS: list_balance_transformed(nums=[5, 6, 3, 6])\nPASS: list_balance_transformed(nums=[0, 3, 6, 2, 3, 0, 1, 7, 0, 0])\nPASS: list_balance_transformed(nums=[8, 2, 4, 3, 1])\nPASS: list_balance_transformed(nums=[3, 7, 2, 9, 2, 8, 5, 1, 10, 8])\nPASS: list_balance_transformed(nums=[10, 3, 4, 0, 6])\nPASS: list_balance_transformed(nums=[3, 4, 3])\nPASS: list_balance_transformed(nums=[5, 4, 9, 9, 8, 1, 3, 10, 5, 10])\nPASS: list_balance_transformed(nums=[1, 5, 2, 3, 0, 4, 9, 10])\nPASS: list_balance_transformed(nums=[10, 4, 6, 9, 1, 6, 8, 4])\nPASS: list_balance_transformed(nums=[10, 10, 6, 9, 1, 6, 8, 4])\nPASS: list_balance_transformed(nums=[10, 10, 6, 1, 1, 6, 8, 4])\nPASS: list_balance_transformed(nums=[10, 10, 6, 1, 6, 6, 8, 4])\nPASS: list_balance_transformed(nums=[10, 10, 6, 1, 1, 6, 10, 4])\nPASS: list_balance_transformed(nums=[10, 10, 6, 1, 4, 6, 10, 4])\nPASS: list_balance_transformed(nums=[10, 10, 6, 10, 4, 6, 10, 4])\nPASS: list_balance_transformed(nums=[2, 6, 0, 3, 0, 8, 4, 4, 4, 0])\nPASS: list_balance_transformed(nums=[2, 6, 2, 3, 0, 8, 4, 4, 4, 0])\nPASS: list_balance_transformed(nums=[2, 6, 2, 3, 0, 8, 4, 4, 2, 0])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[6])\nPASS: odd_sum_validator_transformed(lst=[6, 3])\nPASS: odd_sum_validator_transformed(lst=[4, 6, 0, 7, 7, 10, 9, 0, 0, 6])\nPASS: odd_sum_validator_transformed(lst=[2, 9, 4, 5, 4])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[10, 7, 5, 1, 8, 1])\nPASS: odd_sum_validator_transformed(lst=[3, 1, 6, 0, 3, 8, 8, 6, 4, 0])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[9, 4, 4, 5, 9, 4, 8, 10])\nPASS: odd_sum_validator_transformed(lst=[1, 5, 5, 8, 2])\nPASS: odd_sum_validator_transformed(lst=[1, 5, 5, 8, 5])\nPASS: odd_sum_validator_transformed(lst=[1, 5, 5, 8, 8])\nPASS: odd_sum_validator_transformed(lst=[1, 8, 5, 8, 8])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 5, 8, 8])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 1, 8, 8])\nPASS: odd_sum_validator_transformed(lst=[4])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[0, 4, 7, 4, 9, 9, 4, 3, 3, 1])\nPASS: odd_sum_validator_transformed(lst=[0, 4, 7, 4, 9, 7, 4, 3, 3, 1])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\ud9dc\uddae/\u00ef\nA\u0091')\nPASS: string_pattern_score_transformed(s='\u00b9p')\nPASS: string_pattern_score_transformed(s='\u0092')\nPASS: string_pattern_score_transformed(s='\ud87f\udef8\u00e8\u0005\u00a5g')\nPASS: string_pattern_score_transformed(s='\u0088\u00c6\u00e4\u00a3\udb77\uddfc\u0016#\u00a8\u00a3\ud94b\udf2a')\nPASS: string_pattern_score_transformed(s='\u00a1\n\u001ei_\u00c1\u00c5')\nPASS: string_pattern_score_transformed(s='\u00b1')\nPASS: string_pattern_score_transformed(s='\uda68\udf2c\u00aa\u0082\u00bf')\nPASS: string_pattern_score_transformed(s='\u0097\u00c1\ud832\ude2fl\u000e\uda41\udef9\u00a8')\nPASS: string_pattern_score_transformed(s='\udabe\udd950L\u00a6\u00b9')\nPASS: string_pattern_score_transformed(s='\u0091\ueb9955\ud82f\udcd5')\nPASS: string_pattern_score_transformed(s='\u00d9\ud82c\udff1\u00a4[\u00f7\u0092')\nPASS: string_pattern_score_transformed(s='2)\u00d6\u00d7\u00a2\u00fb')\nPASS: string_pattern_score_transformed(s='\ud958\udcf6')\nPASS: string_pattern_score_transformed(s='\u001e\u00abm\u00e0j\u008b+\f+t')\nPASS: string_pattern_score_transformed(s='\uda6b\udf28\u0000\u0082\u00c8E\u008am\ud9aa\ude8co\u00d5')\nPASS: string_pattern_score_transformed(s='\u00ddV\u00cc\u00ef\u00cdK\ud950\udce2\uda13\udd2b\u00d1\u00bf')\nPASS: string_pattern_score_transformed(s='+\uda01\udeb5\u008e\u0092')\nPASS: string_pattern_score_transformed(s='\u00bf\u00d1\u0084 bX\b\u00cc\u00c8p')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[3])\nPASS: sum_until_limit_transformed(nums=[17])\nPASS: sum_until_limit_transformed(nums=[3, 12, 5, 8, 2, 11, 20, 4, 4, 11])\nPASS: sum_until_limit_transformed(nums=[8, 19, 4, 4, 8, 6, 20, 2, 4, 14])\nPASS: sum_until_limit_transformed(nums=[2, 1, 9, 1, 7, 19, 7])\nPASS: sum_until_limit_transformed(nums=[4, 2, 20, 8])\nPASS: sum_until_limit_transformed(nums=[3, 2, 1, 2, 12])\nPASS: sum_until_limit_transformed(nums=[8])\nPASS: sum_until_limit_transformed(nums=[3, 2])\nPASS: sum_until_limit_transformed(nums=[4])\nPASS: sum_until_limit_transformed(nums=[2])\nPASS: sum_until_limit_transformed(nums=[7, 17, 20])\nPASS: sum_until_limit_transformed(nums=[7, 20, 20])\nPASS: sum_until_limit_transformed(nums=[7, 20, 7])\nPASS: sum_until_limit_transformed(nums=[7])\nPASS: sum_until_limit_transformed(nums=[19, 20, 0])\nPASS: sum_until_limit_transformed(nums=[19, 19, 0])\nPASS: sum_until_limit_transformed(nums=[0, 19, 0])\nPASS: sum_until_limit_transformed(nums=[0, 0, 0])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[2])\nPASS: count_divisibles_transformed(nums=[2, 11])\nPASS: count_divisibles_transformed(nums=[15, 3, 15, 6, 12, 7, 16, 13, 11, 0])\nPASS: count_divisibles_transformed(nums=[9, 10, 8, 3, 5, 9, 16, 7, 6, 11])\nPASS: count_divisibles_transformed(nums=[9])\nPASS: count_divisibles_transformed(nums=[15])\nPASS: count_divisibles_transformed(nums=[17, 3, 19, 13, 12, 18, 8, 5, 0, 9])\nPASS: count_divisibles_transformed(nums=[7, 17])\nPASS: count_divisibles_transformed(nums=[3, 16, 18, 17])\nPASS: count_divisibles_transformed(nums=[13, 5, 3, 2, 20, 0, 9, 14, 2, 11])\nPASS: count_divisibles_transformed(nums=[13, 5, 3, 2, 5, 0, 9, 14, 2, 11])\nPASS: count_divisibles_transformed(nums=[13, 5, 3, 2, 5, 0, 2, 14, 2, 11])\nPASS: count_divisibles_transformed(nums=[13, 5, 3, 5, 5, 0, 2, 14, 2, 11])\nPASS: count_divisibles_transformed(nums=[13, 5, 14, 5, 5, 0, 2, 14, 2, 11])\nPASS: count_divisibles_transformed(nums=[13, 5, 14, 5, 5, 0, 2, 11, 2, 11])\nPASS: count_divisibles_transformed(nums=[0, 5, 14, 5, 5, 0, 2, 11, 2, 11])\nPASS: count_divisibles_transformed(nums=[18, 17, 20, 9])\nPASS: count_divisibles_transformed(nums=[18, 17, 20, 18])\nPASS: count_divisibles_transformed(nums=[17, 17, 20, 18])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[9])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[6, 9, 4, 9])\nPASS: index_weighted_sum_transformed(lst=[4, 1, 4, 2, 6, 8, 1, 9, 8, 0])\nPASS: index_weighted_sum_transformed(lst=[10, 4, 8, 9, 6, 2])\nPASS: index_weighted_sum_transformed(lst=[9, 9, 8, 9, 3, 10, 8, 0, 5, 7])\nPASS: index_weighted_sum_transformed(lst=[7, 1, 5, 1, 4, 7, 0, 4, 5, 7])\nPASS: index_weighted_sum_transformed(lst=[9, 5, 5])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[10, 0, 3, 3, 6])\nPASS: index_weighted_sum_transformed(lst=[10, 0, 3])\nPASS: index_weighted_sum_transformed(lst=[10, 0, 0])\nPASS: index_weighted_sum_transformed(lst=[0, 0, 0])\nPASS: index_weighted_sum_transformed(lst=[0, 8, 10, 6, 1, 8])\nPASS: index_weighted_sum_transformed(lst=[0, 8, 10, 6, 0, 8])\nPASS: index_weighted_sum_transformed(lst=[6, 8, 10, 6, 0, 8])\nPASS: index_weighted_sum_transformed(lst=[6, 8, 10, 6, 0])\nPASS: index_weighted_sum_transformed(lst=[6, 8, 10, 0, 0])\nPASS: index_weighted_sum_transformed(lst=[6, 10, 10, 0, 0])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=4)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\ud83a\udc34Zs\u0098\ud82e\udc8b')\nPASS: character_counter_transformed(text='\u00cd\u00ca\u00f7')\nPASS: character_counter_transformed(text='\u0015\udb56\udf5e\u00c5\udb0b\ude58')\nPASS: character_counter_transformed(text='\u0016t')\nPASS: character_counter_transformed(text='\u00f7p)i2\u008b')\nPASS: character_counter_transformed(text='NIL')\nPASS: character_counter_transformed(text='w\\Od\u000b\u0016\u0085{\u0086\ud868\udff0')\nPASS: character_counter_transformed(text='\u009eE\u00b32\ud98b\udcf6\ud884\udd48\u0000\ud8a7\udecdG\u0096')\nPASS: character_counter_transformed(text='\u009f\u00d9\u0011\u0095\u008f')\nPASS: character_counter_transformed(text='\udba7\ude65)\u0018\u00d5')\nPASS: character_counter_transformed(text='\udb6c\uddaer[\uda2d\udfac\ud874\ude3a\u00c7Y')\nPASS: character_counter_transformed(text='\u00e1\ud809\uddf8\uda4e\udf45\u00b0IS\udafa\ude77\ud8ca\udfd9')\nPASS: character_counter_transformed(text='\u00f7\u00b2\u00df\u009f2')\nPASS: character_counter_transformed(text='\uda51\udc1b\udabf\uddef\u0000')\nPASS: character_counter_transformed(text='\u00be'\u00des0\u0015\u00d9\ud8c8\udda2\u00c6\udb7e\udcc4')\nPASS: character_counter_transformed(text='\u00fawr+\u00fd\ud864\uded0A\u0096')\nPASS: character_counter_transformed(text='\ud85b\udc86\ud9d1\udf99\ud8fb\udc19\ud9a4\udfae\u00e6')\nPASS: character_counter_transformed(text='\u0017y')\nPASS: character_counter_transformed(text='\u00ae\u0094\u00ff')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[71])\nPASS: rolling_maximum_transformed(values=[71, 41])\nPASS: rolling_maximum_transformed(values=[64, 95, 87])\nPASS: rolling_maximum_transformed(values=[80, 42, 53, 58, 59, 8, 40])\nPASS: rolling_maximum_transformed(values=[15, 39, 75, 25, 70])\nPASS: rolling_maximum_transformed(values=[10, 80, 96, 82, 67, 97, 74, 46, 24])\nPASS: rolling_maximum_transformed(values=[2, 82, 38, 36, 8, 97])\nPASS: rolling_maximum_transformed(values=[66, 44, 14, 76])\nPASS: rolling_maximum_transformed(values=[96, 39, 90, 11, 84, 61, 50, 91, 69, 65])\nPASS: rolling_maximum_transformed(values=[81, 90, 46, 31, 70, 9, 64])\nPASS: rolling_maximum_transformed(values=[81, 90, 90, 31, 70, 9, 64])\nPASS: rolling_maximum_transformed(values=[81, 90, 90, 31, 70, 90, 64])\nPASS: rolling_maximum_transformed(values=[81, 90, 90, 90, 70, 90, 64])\nPASS: rolling_maximum_transformed(values=[90, 90, 90, 90, 70, 90, 64])\nPASS: rolling_maximum_transformed(values=[90, 90, 90, 90, 64, 90, 64])\nPASS: rolling_maximum_transformed(values=[18, 36, 32, 28, 95, 33, 26, 44])\nPASS: rolling_maximum_transformed(values=[18, 36, 32, 28, 95, 33, 26, 32])\nPASS: rolling_maximum_transformed(values=[18, 36])\nPASS: rolling_maximum_transformed(values=[36, 36])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_33": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=77)\nPASS: process_data_transformed(x=34)\nPASS: process_data_transformed(x=3)\nPASS: process_data_transformed(x=92)\nPASS: process_data_transformed(x=98)\nPASS: process_data_transformed(x=13)\nPASS: process_data_transformed(x=24)\nPASS: process_data_transformed(x=60)\nPASS: process_data_transformed(x=42)\nPASS: process_data_transformed(x=78)\nPASS: process_data_transformed(x=97)\nPASS: process_data_transformed(x=82)\nPASS: process_data_transformed(x=6)\nPASS: process_data_transformed(x=88)\nPASS: process_data_transformed(x=50)\nPASS: process_data_transformed(x=26)\nPASS: process_data_transformed(x=59)\nPASS: process_data_transformed(x=85)\nPASS: process_data_transformed(x=15)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=13.375878387971543)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=75.86449139669841)\nPASS: convert_temperature_transformed(c=48.404523424853366)\nPASS: convert_temperature_transformed(c=61.634756849547166)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=0.99999)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.7450808192734627)\nPASS: calculate_discount_transformed(price=186.45000702423937, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=2.00001, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=8.799177793016604e-259, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=6.103515625e-05, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=0.9999999999999999, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=199.99999999999997, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=199.99999999999997, discount_rate=0.0)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-5e-324, imag=0.0)\nPASS: process_complex_number_transformed(real=-5e-324, imag=-1.192092896e-07)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=0.0, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=1.175494351e-38, imag=-1.1)\nPASS: process_complex_number_transformed(real=-12.736378081242812, imag=-0.5)\nPASS: process_complex_number_transformed(real=19.999999999999996, imag=0.5)\nPASS: process_complex_number_transformed(real=-7.677688863679089, imag=-1.175494351e-38)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-19.999999999999996, imag=1.175494351e-38)\nPASS: process_complex_number_transformed(real=-19.999999999999996, imag=-19.999999999999996)\nPASS: process_complex_number_transformed(real=-0.99999, imag=17.505372664638344)\nPASS: process_complex_number_transformed(real=17.505372664638344, imag=17.505372664638344)\nPASS: process_complex_number_transformed(real=2.220446049250313e-16, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-2.2250738585072014e-308, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-10.384984169693306, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-1.5, imag=2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=2.225073858507203e-309, imag=2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=1.1754943508222875e-38, imag=20.0)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=32)\nPASS: transform_data_transformed(input_value=78)\nPASS: transform_data_transformed(input_value=82)\nPASS: transform_data_transformed(input_value=19)\nPASS: transform_data_transformed(input_value=11)\nPASS: transform_data_transformed(input_value=68)\nPASS: transform_data_transformed(input_value=60)\nPASS: transform_data_transformed(input_value=84)\nPASS: transform_data_transformed(input_value=81)\nPASS: transform_data_transformed(input_value=91)\nPASS: transform_data_transformed(input_value=42)\nPASS: transform_data_transformed(input_value=72)\nPASS: transform_data_transformed(input_value=10)\nPASS: transform_data_transformed(input_value=95)\nPASS: transform_data_transformed(input_value=15)\nPASS: transform_data_transformed(input_value=75)\nPASS: transform_data_transformed(input_value=97)\nPASS: transform_data_transformed(input_value=65)\nPASS: transform_data_transformed(input_value=51)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=7.585587410226735)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=1.1234564833108705e-108)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=1.175494351e-38)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=17.929860229881424)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=12.415581228408083)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=8, b=1, c=1)\nPASS: triangle_checker_transformed(a=8, b=20, c=2)\nPASS: triangle_checker_transformed(a=11, b=5, c=11)\nPASS: triangle_checker_transformed(a=2, b=19, c=1)\nPASS: triangle_checker_transformed(a=4, b=2, c=18)\nPASS: triangle_checker_transformed(a=5, b=3, c=16)\nPASS: triangle_checker_transformed(a=8, b=14, c=5)\nPASS: triangle_checker_transformed(a=15, b=1, c=13)\nPASS: triangle_checker_transformed(a=15, b=18, c=1)\nPASS: triangle_checker_transformed(a=14, b=17, c=10)\nPASS: triangle_checker_transformed(a=14, b=17, c=14)\nPASS: triangle_checker_transformed(a=14, b=14, c=14)\nPASS: triangle_checker_transformed(a=15, b=1, c=17)\nPASS: triangle_checker_transformed(a=15, b=15, c=17)\nPASS: triangle_checker_transformed(a=17, b=15, c=17)\nPASS: triangle_checker_transformed(a=17, b=15, c=15)\nPASS: triangle_checker_transformed(a=15, b=15, c=15)\nPASS: triangle_checker_transformed(a=10, b=3, c=5)\nPASS: triangle_checker_transformed(a=10, b=3, c=3)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=72.63328747637264)\nPASS: temperature_offset_transformed(c=52.49408237259016)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=1.192092896e-07)\nPASS: temperature_offset_transformed(c=76.9374943780067)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=33.84768802392817)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=18.672453114530054)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-10, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-10, b=-10, c=10)\nPASS: quadratic_discriminant_transformed(a=2, b=-6, c=8)\nPASS: quadratic_discriminant_transformed(a=-3, b=7, c=9)\nPASS: quadratic_discriminant_transformed(a=1, b=-3, c=-1)\nPASS: quadratic_discriminant_transformed(a=-3, b=-7, c=4)\nPASS: quadratic_discriminant_transformed(a=2, b=-4, c=-5)\nPASS: quadratic_discriminant_transformed(a=-4, b=5, c=8)\nPASS: quadratic_discriminant_transformed(a=1, b=8, c=0)\nPASS: quadratic_discriminant_transformed(a=7, b=-5, c=-5)\nPASS: quadratic_discriminant_transformed(a=7, b=7, c=-5)\nPASS: quadratic_discriminant_transformed(a=7, b=7, c=7)\nPASS: quadratic_discriminant_transformed(a=2, b=9, c=8)\nPASS: quadratic_discriminant_transformed(a=2, b=9, c=9)\nPASS: quadratic_discriminant_transformed(a=9, b=9, c=9)\nPASS: quadratic_discriminant_transformed(a=-2, b=-1, c=5)\nPASS: quadratic_discriminant_transformed(a=-2, b=-2, c=5)\nPASS: quadratic_discriminant_transformed(a=-2, b=5, c=5)\nPASS: quadratic_discriminant_transformed(a=-2, b=5, c=-2)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=0.5, y=0.0)\nPASS: vector_norm_transformed(x=0.5, y=1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=-2.0556717073620163, y=0.3333333333333333)\nPASS: vector_norm_transformed(x=5e-324, y=-0.3333333333333333)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=-0.5, y=-1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=-0.3333333333333333, y=-1.2336586988986975e-300)\nPASS: vector_norm_transformed(x=-1.0681878803415952, y=-7.35052795059841e-293)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=-6.103515625e-05)\nPASS: vector_norm_transformed(x=-5.960464477539063e-08, y=-2.225073858507203e-309)\nPASS: vector_norm_transformed(x=-5.960464477539063e-08, y=-5.960464477539063e-08)\nPASS: vector_norm_transformed(x=1.5, y=0.0)\nPASS: vector_norm_transformed(x=1.5, y=1.5)\nPASS: vector_norm_transformed(x=-0.3333333333333333, y=-5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-0.3333333333333333, y=-0.3333333333333333)\nPASS: vector_norm_transformed(x=-2.4636732933124676, y=-2.225073858507e-311)\nPASS: vector_norm_transformed(x=-2.225073858507e-311, y=-2.225073858507e-311)\nPASS: vector_norm_transformed(x=1.1125369292536007e-308, y=-5.791277051335658)\nPASS: vector_norm_transformed(x=-5.791277051335658, y=-5.791277051335658)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=3.3328542468284077, b=0.0)\nPASS: hypotenuse_diff_transformed(a=3.3328542468284077, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=2.2498093446139427, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=8.349617117758513, b=6.252045948660382)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=1.0)\nPASS: hypotenuse_diff_transformed(a=3.472154499530549, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=5.840701155773123)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=8.541351789999485, b=10.0)\nPASS: hypotenuse_diff_transformed(a=8.541351789999485, b=8.541351789999485)\nPASS: hypotenuse_diff_transformed(a=1.0, b=8.904508980188625)\nPASS: hypotenuse_diff_transformed(a=1.0, b=1.0)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=1.0)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=8.149015326137741, b=6.103515625e-05)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u00a6\n')\nPASS: ascii_average_transformed(s='\u0019')\nPASS: ascii_average_transformed(s='D\u0004\u00c3y\u00a0\u008e')\nPASS: ascii_average_transformed(s='\u0099\u00ae\u00a2\u00b9\u00d0I\ud895\udd4b\u00c6\u0086\u00a4')\nPASS: ascii_average_transformed(s='e\n\u0088\u00ed')\nPASS: ascii_average_transformed(s='56')\nPASS: ascii_average_transformed(s='\u00f9\ud9ad\udceam\u00c1\u0000\udb2d\uddd4')\nPASS: ascii_average_transformed(s='\u0082(\ud9d0\udd76\u0001}\u00f7\u0012')\nPASS: ascii_average_transformed(s='\ud9e2\udeed\u00b9\u008f')\nPASS: ascii_average_transformed(s='\ud87d\uded9?\u00a6t')\nPASS: ascii_average_transformed(s='\u00ab')\nPASS: ascii_average_transformed(s='\u00ae')\nPASS: ascii_average_transformed(s='\u00c0\u0092\u00e6\u00d6a\u00e2\ud9ec\udd7f\u0092-\ud95a\udffd')\nPASS: ascii_average_transformed(s='\u0013\u0014K\u00eb\u00eb\u00e9S')\nPASS: ascii_average_transformed(s='\u00d2\\\udb41\udc12K\ud933\udc51:R*-\ufcb2')\nPASS: ascii_average_transformed(s='\ud8c0\udc23\u0006a\u0091\u00fcwW')\nPASS: ascii_average_transformed(s='\u00a2\u00dd')\nPASS: ascii_average_transformed(s='\u00845\u0015\u00d8@\u00cd\u0011\u0087\u350d')\nPASS: ascii_average_transformed(s='s\uda7b\udc2dc\u00b9\u00e6\u00c2&\u00b5L;')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[3, 0])\nPASS: list_balance_transformed(nums=[1, 0])\nPASS: list_balance_transformed(nums=[1, 5, 7, 5])\nPASS: list_balance_transformed(nums=[0, 5, 8, 9, 9, 1, 10, 2])\nPASS: list_balance_transformed(nums=[3, 9, 2, 10, 8, 5, 1, 7, 8, 4])\nPASS: list_balance_transformed(nums=[3, 7])\nPASS: list_balance_transformed(nums=[5, 6, 10, 0, 8, 9])\nPASS: list_balance_transformed(nums=[9, 1, 6, 9, 10, 10, 9, 1, 8, 10])\nPASS: list_balance_transformed(nums=[5, 1, 9, 4, 7])\nPASS: list_balance_transformed(nums=[3, 2, 2, 3, 8, 0, 2, 4, 9, 5])\nPASS: list_balance_transformed(nums=[8, 2, 2, 3, 8, 0, 2, 4, 9, 5])\nPASS: list_balance_transformed(nums=[8, 2, 2, 3, 8, 2, 2, 4, 9, 5])\nPASS: list_balance_transformed(nums=[8, 2, 2, 3, 8, 2, 2, 2, 9, 5])\nPASS: list_balance_transformed(nums=[8, 2, 5, 3, 8, 2, 2, 2, 9, 5])\nPASS: list_balance_transformed(nums=[8, 2, 5, 8, 8, 2, 2, 2, 9, 5])\nPASS: list_balance_transformed(nums=[8, 2, 5, 8, 8, 2, 2, 8, 9, 5])\nPASS: list_balance_transformed(nums=[3, 3])\nPASS: list_balance_transformed(nums=[7, 6, 1, 5, 10])\nPASS: list_balance_transformed(nums=[7, 6, 1])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[4])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[8, 2])\nPASS: odd_sum_validator_transformed(lst=[10, 10, 3, 9])\nPASS: odd_sum_validator_transformed(lst=[9, 8])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[10, 4, 10, 10, 3, 8, 5, 7, 10, 6])\nPASS: odd_sum_validator_transformed(lst=[10, 4, 10, 10, 5, 8, 5, 7, 10, 6])\nPASS: odd_sum_validator_transformed(lst=[10, 4, 10, 10, 5, 8, 5, 10, 10, 6])\nPASS: odd_sum_validator_transformed(lst=[10, 4, 10, 10, 5, 8, 10, 10, 10, 6])\nPASS: odd_sum_validator_transformed(lst=[10, 4, 10, 10, 5, 8, 6, 10, 10, 6])\nPASS: odd_sum_validator_transformed(lst=[10, 4, 10, 10, 5, 6, 6, 10, 10, 6])\nPASS: odd_sum_validator_transformed(lst=[10, 4, 10, 10, 5, 6, 6])\nPASS: odd_sum_validator_transformed(lst=[5, 9, 4, 2, 6, 9, 2, 5, 8, 4])\nPASS: odd_sum_validator_transformed(lst=[5, 9, 4, 2, 6, 9, 6, 5, 8, 4])\nPASS: odd_sum_validator_transformed(lst=[6, 9, 4, 2, 6, 9, 6, 5, 8, 4])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u00a4\u00e1\u0019\u00a3\u001c\u00fc<\u00f7\u00a2\u00d8')\nPASS: string_pattern_score_transformed(s='a')\nPASS: string_pattern_score_transformed(s='\u00a0\u00fb\ud8ba\udd5c\ue24d\u00fa\u000e\u00b4\u00ee\u009d\"')\nPASS: string_pattern_score_transformed(s='Infinity')\nPASS: string_pattern_score_transformed(s='\u0004\ud9f8\udfca\u00d5:\u0083\f\ud876\udf4d\u00a91\ud8d4\ude51')\nPASS: string_pattern_score_transformed(s='\u9323')\nPASS: string_pattern_score_transformed(s='\"\u00baOi\u00cf\u000e\u000e')\nPASS: string_pattern_score_transformed(s='.\ud980\udccdy\u00dd\u0095')\nPASS: string_pattern_score_transformed(s='\u001f\u0081\u00fc')\nPASS: string_pattern_score_transformed(s='\u00a8\u00db')\nPASS: string_pattern_score_transformed(s='\u00e6\u00cdL')\nPASS: string_pattern_score_transformed(s='undefined')\nPASS: string_pattern_score_transformed(s='\u00bc\ud81e\ude22F\u00b7\n\u0089\udb2c\udd39\t')\nPASS: string_pattern_score_transformed(s='\u00e3\u0016/6e\\,')\nPASS: string_pattern_score_transformed(s='#\u007f0')\nPASS: string_pattern_score_transformed(s='Q\udbbd\ude4c\u00a9\u0080\uda8e\udebb\u00fb\u00df\u00b2')\nPASS: string_pattern_score_transformed(s='\u0098HFw\u00b3m[\uda14\udda2\u0001~')\nPASS: string_pattern_score_transformed(s='\u00b0\u00cd\u00df\u0097')\nPASS: string_pattern_score_transformed(s='/\u00c5')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[4])\nPASS: sum_until_limit_transformed(nums=[13])\nPASS: sum_until_limit_transformed(nums=[8])\nPASS: sum_until_limit_transformed(nums=[16, 20, 3, 9, 19, 8, 7, 0, 17, 16])\nPASS: sum_until_limit_transformed(nums=[2, 11, 2, 18, 12, 4, 5, 7, 17, 0])\nPASS: sum_until_limit_transformed(nums=[7])\nPASS: sum_until_limit_transformed(nums=[7, 7, 3, 12, 14, 0, 2, 9, 18])\nPASS: sum_until_limit_transformed(nums=[3, 11])\nPASS: sum_until_limit_transformed(nums=[8, 11, 6, 5, 18, 17, 11])\nPASS: sum_until_limit_transformed(nums=[2])\nPASS: sum_until_limit_transformed(nums=[10])\nPASS: sum_until_limit_transformed(nums=[6, 4, 0, 14, 15, 10, 9, 14, 4])\nPASS: sum_until_limit_transformed(nums=[6, 4, 4, 14, 15, 10, 9, 14, 4])\nPASS: sum_until_limit_transformed(nums=[6, 4, 4, 14, 15, 4, 9, 14, 4])\nPASS: sum_until_limit_transformed(nums=[6, 4, 4, 14, 15, 4, 9, 14, 15])\nPASS: sum_until_limit_transformed(nums=[6, 4, 4, 14, 15, 4, 9, 4, 15])\nPASS: sum_until_limit_transformed(nums=[6, 15, 4, 14, 15, 4, 9, 4, 15])\nPASS: sum_until_limit_transformed(nums=[6, 15, 4, 4, 15, 4, 9, 4, 15])\nPASS: sum_until_limit_transformed(nums=[8, 8, 11, 4, 2, 11, 9, 15, 12])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[8])\nPASS: count_divisibles_transformed(nums=[1])\nPASS: count_divisibles_transformed(nums=[2, 4, 10, 9, 19, 10, 12, 20, 11, 12])\nPASS: count_divisibles_transformed(nums=[20, 17, 11, 11, 6, 20, 2, 4, 7, 19])\nPASS: count_divisibles_transformed(nums=[15, 18, 8])\nPASS: count_divisibles_transformed(nums=[8, 13, 17, 12, 3, 20, 5, 0, 9, 18])\nPASS: count_divisibles_transformed(nums=[19, 10, 10, 4, 11, 5, 7, 16, 4, 4])\nPASS: count_divisibles_transformed(nums=[1, 4, 18, 11, 14, 0, 12, 7])\nPASS: count_divisibles_transformed(nums=[15])\nPASS: count_divisibles_transformed(nums=[18, 20, 3, 17, 10, 19])\nPASS: count_divisibles_transformed(nums=[18, 20, 18, 17, 10, 19])\nPASS: count_divisibles_transformed(nums=[18, 20, 18, 17, 18, 19])\nPASS: count_divisibles_transformed(nums=[18, 20, 18, 17])\nPASS: count_divisibles_transformed(nums=[18, 20, 20, 17])\nPASS: count_divisibles_transformed(nums=[18, 20, 20, 20])\nPASS: count_divisibles_transformed(nums=[2])\nPASS: count_divisibles_transformed(nums=[19])\nPASS: count_divisibles_transformed(nums=[20])\nPASS: count_divisibles_transformed(nums=[3, 9])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[3])\nPASS: index_weighted_sum_transformed(lst=[9])\nPASS: index_weighted_sum_transformed(lst=[1, 0, 6, 8, 2, 1, 1, 2, 10, 4])\nPASS: index_weighted_sum_transformed(lst=[9, 2, 6, 6, 7, 0, 4, 0, 9, 8])\nPASS: index_weighted_sum_transformed(lst=[3, 6, 10, 4])\nPASS: index_weighted_sum_transformed(lst=[3, 8, 1, 9, 2, 0])\nPASS: index_weighted_sum_transformed(lst=[5, 2, 9, 5, 3, 4, 3, 8, 10, 8])\nPASS: index_weighted_sum_transformed(lst=[10, 0, 0, 5, 8])\nPASS: index_weighted_sum_transformed(lst=[8, 6, 0, 0, 8, 0, 5, 2])\nPASS: index_weighted_sum_transformed(lst=[1])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[0, 8, 6, 2, 5, 0, 10, 2, 3, 6])\nPASS: index_weighted_sum_transformed(lst=[0, 8, 3, 2, 5, 0, 10, 2, 3, 6])\nPASS: index_weighted_sum_transformed(lst=[0, 8, 3, 2, 5, 0, 10, 2, 3, 3])\nPASS: index_weighted_sum_transformed(lst=[0, 8, 3, 2, 5, 0, 10, 2, 10, 3])\nPASS: index_weighted_sum_transformed(lst=[0, 8, 3, 2, 8, 0, 10, 2, 10, 3])\nPASS: index_weighted_sum_transformed(lst=[0, 8, 3, 2, 8, 8, 10, 2, 10, 3])\nPASS: index_weighted_sum_transformed(lst=[0, 8, 3, 2, 8, 2, 10, 2, 10, 3])\nPASS: index_weighted_sum_transformed(lst=[1, 5, 8])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=1)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00e1lg[\u00b3_^\u0003\u00cfH')\nPASS: character_counter_transformed(text='\u00d9')\nPASS: character_counter_transformed(text='\u00e3')\nPASS: character_counter_transformed(text='Z\uda58\udede@\u0099\u00ba\ud87b\udef1\u00fa<')\nPASS: character_counter_transformed(text='\udaa2\udcae\u00b8\u00d8s1\u0087n\u009a\u00e2')\nPASS: character_counter_transformed(text='yL\u009f\ud9d3\ude93\u0087\ud80f\udd5f\uda2f\udffe\udba2\udca2\u0018')\nPASS: character_counter_transformed(text='\u0096\u00a6\u00dc\u0010\ud824\ude7d\u00bc\u0085\u009b\u00c6\u00a2')\nPASS: character_counter_transformed(text='\ud83c\udffb\ud83d\udc4d\ud83c\udffb')\nPASS: character_counter_transformed(text='\u00d6S2\u00e5\udaa2\udd93\u0019')\nPASS: character_counter_transformed(text='\ud83c\uddfa\ud83c\uddf8')\nPASS: character_counter_transformed(text='\udb2a\udd4a')\nPASS: character_counter_transformed(text='H\u0014\u00161')\nPASS: character_counter_transformed(text='XmL\u0092')\nPASS: character_counter_transformed(text='xF@\u00e5\udab2\ude7c\u00a4\u0099$\u00a8\ud9bd\udfbb')\nPASS: character_counter_transformed(text=''\u009d\u00f4S+')\nPASS: character_counter_transformed(text='d!\udabe\udd97\u0088\ud866\udf5f6\ud876\udf09\u0016$\u0096')\nPASS: character_counter_transformed(text='\u00f8\"w*')\nPASS: character_counter_transformed(text='\u0093v\udb7a\udf7cA\u001d\u00a9\uda0e\udfb4\u0011\u00fd\u001f')\nPASS: character_counter_transformed(text='AU\ud9af\udf0cG\u00ab\uda6a\udd44\u0083=\ud95a\udc51\udbcc\ude34')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[30])\nPASS: rolling_maximum_transformed(values=[53])\nPASS: rolling_maximum_transformed(values=[64, 58, 15, 34, 64, 35, 55, 70, 72, 63])\nPASS: rolling_maximum_transformed(values=[83, 23, 84])\nPASS: rolling_maximum_transformed(values=[12, 85])\nPASS: rolling_maximum_transformed(values=[23, 96, 13, 63, 10, 76, 95, 5, 75, 42])\nPASS: rolling_maximum_transformed(values=[99, 73, 33])\nPASS: rolling_maximum_transformed(values=[83])\nPASS: rolling_maximum_transformed(values=[70, 61, 25, 39, 76, 98, 24, 24, 21, 36])\nPASS: rolling_maximum_transformed(values=[17, 79, 12, 90, 65, 47, 72, 96, 16, 70])\nPASS: rolling_maximum_transformed(values=[17, 79, 12, 90, 65, 47, 72, 96, 90, 70])\nPASS: rolling_maximum_transformed(values=[17, 79, 12, 90, 65, 47, 72, 90, 90, 70])\nPASS: rolling_maximum_transformed(values=[79, 79, 12, 90, 65, 47, 72, 90, 90, 70])\nPASS: rolling_maximum_transformed(values=[79, 90, 12, 90, 65, 47, 72, 90, 90, 70])\nPASS: rolling_maximum_transformed(values=[79, 90, 12, 90, 90, 47, 72, 90, 90, 70])\nPASS: rolling_maximum_transformed(values=[79, 90, 12, 90, 90, 47, 72, 90, 90, 90])\nPASS: rolling_maximum_transformed(values=[43, 98, 52, 36, 89])\nPASS: rolling_maximum_transformed(values=[43, 98])\nPASS: rolling_maximum_transformed(values=[43, 43])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_34": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=17)\nPASS: process_data_transformed(x=86)\nPASS: process_data_transformed(x=92)\nPASS: process_data_transformed(x=72)\nPASS: process_data_transformed(x=42)\nPASS: process_data_transformed(x=32)\nPASS: process_data_transformed(x=58)\nPASS: process_data_transformed(x=12)\nPASS: process_data_transformed(x=1)\nPASS: process_data_transformed(x=31)\nPASS: process_data_transformed(x=18)\nPASS: process_data_transformed(x=39)\nPASS: process_data_transformed(x=99)\nPASS: process_data_transformed(x=98)\nPASS: process_data_transformed(x=35)\nPASS: process_data_transformed(x=54)\nPASS: process_data_transformed(x=57)\nPASS: process_data_transformed(x=7)\nPASS: process_data_transformed(x=19)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=27.47385886865233)\nPASS: convert_temperature_transformed(c=66.61903437386711)\nPASS: convert_temperature_transformed(c=83.39662906926584)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=47.84501900842707)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=0.17104027293851545)\nPASS: calculate_discount_transformed(price=38.250879656164614, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=199.99999999999997, discount_rate=1.6200062640234475e-293)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=200.0, discount_rate=0.9748956490699241)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.4023036425440901)\nPASS: calculate_discount_transformed(price=61.043347645407586, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=1.5, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=1.5, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=37.706974651331095, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=37.706974651331095, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=5e-324)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-17.958889282694795, imag=0.0)\nPASS: process_complex_number_transformed(real=-17.958889282694795, imag=18.956136837935816)\nPASS: process_complex_number_transformed(real=-0.99999, imag=20.0)\nPASS: process_complex_number_transformed(real=0.3333333333333333, imag=-1.5)\nPASS: process_complex_number_transformed(real=-2.00001, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=-5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=-6.103515625e-05, imag=2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-2.225073858507e-311, imag=19.0)\nPASS: process_complex_number_transformed(real=-2.00001, imag=-5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=1.1, imag=1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=1.401298464324817e-45, imag=1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=-0.5, imag=2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=2.2250738585072014e-308, imag=2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-2.2250738585e-313, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-2.2250738585072014e-308, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-0.3333333333333333, imag=-2.3584339391887745)\nPASS: process_complex_number_transformed(real=-2.3584339391887745, imag=-2.3584339391887745)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=-2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=2.2250738585e-313)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=8)\nPASS: transform_data_transformed(input_value=51)\nPASS: transform_data_transformed(input_value=54)\nPASS: transform_data_transformed(input_value=34)\nPASS: transform_data_transformed(input_value=55)\nPASS: transform_data_transformed(input_value=84)\nPASS: transform_data_transformed(input_value=18)\nPASS: transform_data_transformed(input_value=98)\nPASS: transform_data_transformed(input_value=21)\nPASS: transform_data_transformed(input_value=48)\nPASS: transform_data_transformed(input_value=42)\nPASS: transform_data_transformed(input_value=23)\nPASS: transform_data_transformed(input_value=17)\nPASS: transform_data_transformed(input_value=32)\nPASS: transform_data_transformed(input_value=24)\nPASS: transform_data_transformed(input_value=82)\nPASS: transform_data_transformed(input_value=9)\nPASS: transform_data_transformed(input_value=88)\nPASS: transform_data_transformed(input_value=90)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=1.192092896e-07)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=18.577172270088962)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=7.95573810277798)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=14.67366766657076)\nPASS: circle_area_diff_transformed(r=16.391758150897697)\nPASS: circle_area_diff_transformed(r=1.175494351e-38)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=17, b=1, c=1)\nPASS: triangle_checker_transformed(a=17, b=6, c=10)\nPASS: triangle_checker_transformed(a=15, b=5, c=5)\nPASS: triangle_checker_transformed(a=9, b=20, c=2)\nPASS: triangle_checker_transformed(a=1, b=7, c=7)\nPASS: triangle_checker_transformed(a=9, b=10, c=11)\nPASS: triangle_checker_transformed(a=7, b=7, c=1)\nPASS: triangle_checker_transformed(a=20, b=1, c=4)\nPASS: triangle_checker_transformed(a=5, b=15, c=12)\nPASS: triangle_checker_transformed(a=7, b=18, c=4)\nPASS: triangle_checker_transformed(a=7, b=4, c=4)\nPASS: triangle_checker_transformed(a=4, b=4, c=4)\nPASS: triangle_checker_transformed(a=7, b=3, c=18)\nPASS: triangle_checker_transformed(a=18, b=3, c=18)\nPASS: triangle_checker_transformed(a=18, b=3, c=3)\nPASS: triangle_checker_transformed(a=3, b=3, c=3)\nPASS: triangle_checker_transformed(a=1, b=8, c=17)\nPASS: triangle_checker_transformed(a=8, b=8, c=17)\nPASS: triangle_checker_transformed(a=8, b=8, c=8)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=2.1468686427357704e-240)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=72.40692642480032)\nPASS: temperature_offset_transformed(c=83.40494252740159)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=18.87013923910886)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=4.473198524576589e-145)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=3.3627525651294042e-217)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=20.880891563950748)\nPASS: temperature_offset_transformed(c=79.75022357987214)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-8, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-8, b=5, c=9)\nPASS: quadratic_discriminant_transformed(a=-6, b=8, c=-5)\nPASS: quadratic_discriminant_transformed(a=-4, b=2, c=0)\nPASS: quadratic_discriminant_transformed(a=2, b=-9, c=9)\nPASS: quadratic_discriminant_transformed(a=-7, b=5, c=0)\nPASS: quadratic_discriminant_transformed(a=7, b=-8, c=-1)\nPASS: quadratic_discriminant_transformed(a=-10, b=7, c=-7)\nPASS: quadratic_discriminant_transformed(a=2, b=0, c=-3)\nPASS: quadratic_discriminant_transformed(a=-2, b=5, c=-6)\nPASS: quadratic_discriminant_transformed(a=-6, b=5, c=-6)\nPASS: quadratic_discriminant_transformed(a=-6, b=-6, c=-6)\nPASS: quadratic_discriminant_transformed(a=9, b=1, c=-5)\nPASS: quadratic_discriminant_transformed(a=1, b=1, c=-5)\nPASS: quadratic_discriminant_transformed(a=1, b=1, c=1)\nPASS: quadratic_discriminant_transformed(a=-8, b=-10, c=7)\nPASS: quadratic_discriminant_transformed(a=-8, b=7, c=7)\nPASS: quadratic_discriminant_transformed(a=-8, b=7, c=-8)\nPASS: quadratic_discriminant_transformed(a=-8, b=-8, c=-8)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=0.0)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=1.401298464324817e-45)\nPASS: vector_norm_transformed(x=1e-05, y=6.103515625e-05)\nPASS: vector_norm_transformed(x=-0.7907992131565482, y=-9.999999999999998)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=0.99999)\nPASS: vector_norm_transformed(x=1.1798660183281346e-275, y=-2.220446049250313e-16)\nPASS: vector_norm_transformed(x=-9.078725338039675, y=-1.9)\nPASS: vector_norm_transformed(x=4.4286308511530965, y=-2.225073858507203e-309)\nPASS: vector_norm_transformed(x=-10.0, y=-0.5)\nPASS: vector_norm_transformed(x=-1.9, y=5e-324)\nPASS: vector_norm_transformed(x=-1.9, y=-1.9)\nPASS: vector_norm_transformed(x=-2.2250738585072014e-308, y=1.401298464324817e-45)\nPASS: vector_norm_transformed(x=-2.2250738585072014e-308, y=-2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=5.960464477539063e-08, y=6.813944348873257)\nPASS: vector_norm_transformed(x=6.813944348873257, y=6.813944348873257)\nPASS: vector_norm_transformed(x=-1.2357085246647615e-95, y=-2.2250738585e-313)\nPASS: vector_norm_transformed(x=-1.2357085246647615e-95, y=-1.2357085246647615e-95)\nPASS: vector_norm_transformed(x=6.103515625e-05, y=-0.99999)\nPASS: vector_norm_transformed(x=-0.99999, y=-0.99999)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=4.830020024527216, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=7.668558068889962e-26, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=1e-05)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=7.19376514455749, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=1.9)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=2.2250738585e-313)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u008b5\u00b1\ud87c\udd7bh\u00fa')\nPASS: ascii_average_transformed(s='G')\nPASS: ascii_average_transformed(s='\u00fdK')\nPASS: ascii_average_transformed(s='\u00be\u0000\u0086\udb8c\ude18\u00ba\u00d9\u00fa\u00a4\udac1\udf1b\u00f5')\nPASS: ascii_average_transformed(s='\u00b2')\nPASS: ascii_average_transformed(s='+0.0')\nPASS: ascii_average_transformed(s='\u00e6\u00ea\u00c3T\u009f\u0000\uda71\udf34\t\ud87c\udebd?')\nPASS: ascii_average_transformed(s='\ud90f\udc57!d')\nPASS: ascii_average_transformed(s='^\u0001L\ud8d3\ude3ec\u00aa\uda25\udf47\uda71\udd11*\u00b6')\nPASS: ascii_average_transformed(s='\u00b1\ud906\ude6d\u0006y\ud80d\udc249\ud89c\udc15|\u008b\u00f7')\nPASS: ascii_average_transformed(s='(\u00e0')\nPASS: ascii_average_transformed(s='z\udb42\udfa2\u0093v')\nPASS: ascii_average_transformed(s='\u009e')\nPASS: ascii_average_transformed(s='*\u00ce\udaf3\udc88')\nPASS: ascii_average_transformed(s='\u00cf\n?-')\nPASS: ascii_average_transformed(s='then')\nPASS: ascii_average_transformed(s='W\ud84c\udda9\u00a8\u00a1\u009f\uda9d\ude96')\nPASS: ascii_average_transformed(s='\u00a07\u00bc\u7f81\u00d6\u00e7\u0016\"\ud9f0\udc62\udbc8\ude3a')\nPASS: ascii_average_transformed(s='q\u008b6\u00e8\u001c\u00ffb\ud961\udc1a')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[3, 0])\nPASS: list_balance_transformed(nums=[2, 0])\nPASS: list_balance_transformed(nums=[2, 1])\nPASS: list_balance_transformed(nums=[9, 2, 0, 7, 1, 9, 10, 9, 9, 2])\nPASS: list_balance_transformed(nums=[2, 1, 7, 0])\nPASS: list_balance_transformed(nums=[10, 4, 1, 6, 5, 5, 3, 1, 6, 4])\nPASS: list_balance_transformed(nums=[10, 6, 2, 4])\nPASS: list_balance_transformed(nums=[6, 2, 9, 8, 8, 7, 9, 10, 8, 1])\nPASS: list_balance_transformed(nums=[7, 3, 5, 8, 5])\nPASS: list_balance_transformed(nums=[5, 4, 6, 5, 1, 0, 7, 9, 9, 6])\nPASS: list_balance_transformed(nums=[5, 4, 6, 5, 1, 7, 7, 9, 9, 6])\nPASS: list_balance_transformed(nums=[9, 4, 6, 5, 1, 7, 7, 9, 9, 6])\nPASS: list_balance_transformed(nums=[9, 4, 6, 5, 1, 7, 7, 9, 6, 6])\nPASS: list_balance_transformed(nums=[9, 4, 6, 5, 1, 7, 9, 9, 6, 6])\nPASS: list_balance_transformed(nums=[9, 4, 6, 5, 1, 7, 9, 6, 6, 6])\nPASS: list_balance_transformed(nums=[9, 4, 6, 5, 9, 7, 9, 6, 6, 6])\nPASS: list_balance_transformed(nums=[2, 5, 5])\nPASS: list_balance_transformed(nums=[5, 5, 5])\nPASS: list_balance_transformed(nums=[3, 5, 1, 4, 8, 1, 4, 1, 3, 9])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[7])\nPASS: odd_sum_validator_transformed(lst=[6])\nPASS: odd_sum_validator_transformed(lst=[9, 6, 2, 5, 9, 2])\nPASS: odd_sum_validator_transformed(lst=[8, 0])\nPASS: odd_sum_validator_transformed(lst=[2, 0, 3, 3, 5, 7, 7, 2, 9, 10])\nPASS: odd_sum_validator_transformed(lst=[6, 0, 8, 2, 4, 3, 9, 9, 4, 2])\nPASS: odd_sum_validator_transformed(lst=[8, 9, 8, 7])\nPASS: odd_sum_validator_transformed(lst=[4, 8, 7, 3, 8, 7, 5, 10, 10, 4])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[6, 5, 6, 1, 7, 4])\nPASS: odd_sum_validator_transformed(lst=[6, 5, 6, 1, 5, 4])\nPASS: odd_sum_validator_transformed(lst=[6, 5, 5, 1, 5, 4])\nPASS: odd_sum_validator_transformed(lst=[6, 5, 5, 1, 5, 5])\nPASS: odd_sum_validator_transformed(lst=[6, 5, 5, 1, 5, 6])\nPASS: odd_sum_validator_transformed(lst=[5, 5, 5, 1, 5, 5])\nPASS: odd_sum_validator_transformed(lst=[5, 5])\nPASS: odd_sum_validator_transformed(lst=[10, 3, 0, 10])\nPASS: odd_sum_validator_transformed(lst=[10, 3, 3, 10])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='s\u00f3\u00cd\ud84f\udec9')\nPASS: string_pattern_score_transformed(s='\u001eA')\nPASS: string_pattern_score_transformed(s='\u00e4M\u00b1')\nPASS: string_pattern_score_transformed(s='1\u1900{\u0016L\ud8d8\udec3T\u00c7\u00a6\u00a7')\nPASS: string_pattern_score_transformed(s='\u00f5\u00f7\u00a1/\u00b1\ud98c\udd63\n\u0087\u00df\u007f')\nPASS: string_pattern_score_transformed(s='NULL')\nPASS: string_pattern_score_transformed(s='\udbb8\udd46')\nPASS: string_pattern_score_transformed(s='\ud894\udc29\udb06\udf6d\u00e2~\u0088\u00a1\u001b3-\u00dc')\nPASS: string_pattern_score_transformed(s='\u00a7\u0004')\nPASS: string_pattern_score_transformed(s='\u0019\u0094\u00e7\u007f\u0017;')\nPASS: string_pattern_score_transformed(s='\u00a2m\ud940\udcc3]\u00dfc1\u00d6')\nPASS: string_pattern_score_transformed(s='l\u00fa\ud95b\ude90\u00fb\udbfa\ude38\udbdc\udf01\ud932\udd91\ud801\udcd0\u00ae\u001d')\nPASS: string_pattern_score_transformed(s='\u0006\udbb5\uddd8\u00c0\udbb2\udd75\f\t\u00f8!')\nPASS: string_pattern_score_transformed(s='\uda61\ude94\u0015\u00d0\u00d7\u0087')\nPASS: string_pattern_score_transformed(s='\u008b')\nPASS: string_pattern_score_transformed(s='\u00bdd=\u00c0\u0015\u00fb\udb39\uded5\u0012\u00d4\ud86e\udebc')\nPASS: string_pattern_score_transformed(s='U')\nPASS: string_pattern_score_transformed(s='\uda4f\udda7\u00b5\u00d9\u00e5\u00b67\u0012')\nPASS: string_pattern_score_transformed(s='M\u5643H\u00d6\udbd5\udc65\u00bd*\u0004g\u00af')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[10])\nPASS: sum_until_limit_transformed(nums=[7])\nPASS: sum_until_limit_transformed(nums=[1])\nPASS: sum_until_limit_transformed(nums=[11, 13, 18, 12, 16, 1, 0, 10, 7, 17])\nPASS: sum_until_limit_transformed(nums=[17, 20, 18, 15])\nPASS: sum_until_limit_transformed(nums=[0, 4, 14, 1, 9, 18, 16])\nPASS: sum_until_limit_transformed(nums=[17])\nPASS: sum_until_limit_transformed(nums=[20, 8, 13, 0, 15, 4, 4])\nPASS: sum_until_limit_transformed(nums=[4, 17, 9, 2, 15, 1, 5, 7])\nPASS: sum_until_limit_transformed(nums=[4])\nPASS: sum_until_limit_transformed(nums=[20])\nPASS: sum_until_limit_transformed(nums=[3, 10, 17, 15, 13])\nPASS: sum_until_limit_transformed(nums=[15, 10, 17, 15, 13])\nPASS: sum_until_limit_transformed(nums=[15, 13, 17, 15, 13])\nPASS: sum_until_limit_transformed(nums=[13, 13, 17, 15, 13])\nPASS: sum_until_limit_transformed(nums=[15, 13, 13, 15, 13])\nPASS: sum_until_limit_transformed(nums=[15, 15, 13, 15, 13])\nPASS: sum_until_limit_transformed(nums=[14, 19, 12, 19, 1, 0, 9, 11, 5, 0])\nPASS: sum_until_limit_transformed(nums=[14, 19, 12, 19, 1, 14, 9, 11, 5, 0])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[8])\nPASS: count_divisibles_transformed(nums=[16])\nPASS: count_divisibles_transformed(nums=[16, 13, 0])\nPASS: count_divisibles_transformed(nums=[6, 7, 6])\nPASS: count_divisibles_transformed(nums=[13, 0, 18, 12, 0])\nPASS: count_divisibles_transformed(nums=[3, 4, 4, 1, 16, 15, 2, 17, 13, 11])\nPASS: count_divisibles_transformed(nums=[7, 16, 13, 0, 12, 8, 9, 0, 4, 7])\nPASS: count_divisibles_transformed(nums=[16, 6, 15])\nPASS: count_divisibles_transformed(nums=[8, 7])\nPASS: count_divisibles_transformed(nums=[0, 19, 15, 7, 12, 3, 10, 18, 9, 7])\nPASS: count_divisibles_transformed(nums=[0, 19, 15, 7, 12, 3, 10, 3, 9, 7])\nPASS: count_divisibles_transformed(nums=[0, 19, 15, 7, 12, 3, 7, 3, 9, 7])\nPASS: count_divisibles_transformed(nums=[0, 15, 15, 7, 12, 3, 7, 3, 9, 7])\nPASS: count_divisibles_transformed(nums=[0, 15, 15, 0, 12, 3, 7, 3, 9, 7])\nPASS: count_divisibles_transformed(nums=[0, 15, 12, 0, 12, 3, 7, 3, 9, 7])\nPASS: count_divisibles_transformed(nums=[0, 15, 7, 0, 12, 3, 7, 3, 9, 7])\nPASS: count_divisibles_transformed(nums=[20, 0, 17, 19, 20, 3, 3, 20, 3, 4])\nPASS: count_divisibles_transformed(nums=[20, 0, 17, 19, 3, 3, 3, 20, 3, 4])\nPASS: count_divisibles_transformed(nums=[20, 0, 19, 19, 3, 3, 3, 20, 3, 4])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[2, 3])\nPASS: index_weighted_sum_transformed(lst=[5, 7, 10, 7])\nPASS: index_weighted_sum_transformed(lst=[4, 6, 6])\nPASS: index_weighted_sum_transformed(lst=[5])\nPASS: index_weighted_sum_transformed(lst=[5, 0, 7, 6, 6])\nPASS: index_weighted_sum_transformed(lst=[6, 6, 9, 9, 10, 0, 5, 3, 0, 2])\nPASS: index_weighted_sum_transformed(lst=[10, 7, 8, 9, 8, 3, 9, 2, 4])\nPASS: index_weighted_sum_transformed(lst=[5, 1, 3, 8, 5, 2, 3, 6, 8, 3])\nPASS: index_weighted_sum_transformed(lst=[5, 4, 1, 10, 0, 5, 6, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 1, 1, 10, 0, 5, 6, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 1, 1, 10, 6, 5, 6, 5])\nPASS: index_weighted_sum_transformed(lst=[1, 1, 1, 10, 6, 5, 6, 5])\nPASS: index_weighted_sum_transformed(lst=[1, 10, 1, 10, 6, 5, 6, 5])\nPASS: index_weighted_sum_transformed(lst=[1, 10, 1, 10, 6, 10, 6, 5])\nPASS: index_weighted_sum_transformed(lst=[1, 10, 1, 10, 6, 1, 6, 5])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[3, 3, 3, 5, 1, 5, 2, 4])\nPASS: index_weighted_sum_transformed(lst=[3, 3, 3, 5, 1, 5, 2, 5])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=3)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00bc\u00a3)\u0097\u0016\ud90e\udff3\u00ba\udb74\udeec%\u00eb')\nPASS: character_counter_transformed(text='undefined')\nPASS: character_counter_transformed(text='\ud86b\udef7`\uda45\udd9c')\nPASS: character_counter_transformed(text=']')\nPASS: character_counter_transformed(text='\udab9\udfad\u00c3')\nPASS: character_counter_transformed(text='U\ud82b\udc36\u00b2\u00ed\ud8c5\udc82\u00d3\u00db')\nPASS: character_counter_transformed(text='\u0016$w')\nPASS: character_counter_transformed(text='\u00cf/]\u00fcj*')\nPASS: character_counter_transformed(text='\u0015 [^\u00ed\u7f13\u000f\u00f8\u00dbu')\nPASS: character_counter_transformed(text='Q\u00ed\u00b1\u00d2\u00d3')\nPASS: character_counter_transformed(text='\u0092\ud931\udd11\u001c\u00c9`D\u0082k\u00e7\u00f4')\nPASS: character_counter_transformed(text='Infinity')\nPASS: character_counter_transformed(text='\ud920\udd5b\u950ae\u00d1\u0016\u00ef2\u00eeS\udbf0\udf21')\nPASS: character_counter_transformed(text='wX2')\nPASS: character_counter_transformed(text='W\u009a\u00c4\udb93\udea1\udb35\udd25')\nPASS: character_counter_transformed(text='\u00c1\u00ddU/\u00fc\u00fe')\nPASS: character_counter_transformed(text='\ud8f6\udc48RhA\u0095\u00ed\u00fc\udbda\uded3\u00d9')\nPASS: character_counter_transformed(text='\ud82e\uddff\u00fe\u00c3\ud873\udc2a')\nPASS: character_counter_transformed(text='\u00d5\ud94f\udc38')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[88])\nPASS: rolling_maximum_transformed(values=[89])\nPASS: rolling_maximum_transformed(values=[40, 71, 30, 71, 100, 1, 24])\nPASS: rolling_maximum_transformed(values=[43, 24, 62, 100, 26, 60, 55, 32, 96])\nPASS: rolling_maximum_transformed(values=[57, 8, 33, 6, 25, 72, 63, 23, 7, 69])\nPASS: rolling_maximum_transformed(values=[93, 77])\nPASS: rolling_maximum_transformed(values=[15, 21])\nPASS: rolling_maximum_transformed(values=[37, 46, 48, 63, 57, 58, 79, 64, 5, 94])\nPASS: rolling_maximum_transformed(values=[25])\nPASS: rolling_maximum_transformed(values=[31, 24, 69, 85, 60, 72, 15, 43, 44])\nPASS: rolling_maximum_transformed(values=[31, 24, 69, 85, 24, 72, 15, 43, 44])\nPASS: rolling_maximum_transformed(values=[31, 24, 69, 44, 24, 72, 15, 43, 44])\nPASS: rolling_maximum_transformed(values=[31, 24, 69, 44, 24, 44, 15, 43, 44])\nPASS: rolling_maximum_transformed(values=[31, 69, 69, 44, 24, 44, 15, 43, 44])\nPASS: rolling_maximum_transformed(values=[31, 69, 69, 44, 24, 44, 15, 43, 43])\nPASS: rolling_maximum_transformed(values=[31, 69, 69, 44, 24, 44, 44, 43, 43])\nPASS: rolling_maximum_transformed(values=[88, 44, 33, 93, 35, 61, 73, 29, 61, 62])\nPASS: rolling_maximum_transformed(values=[88, 44, 33, 93, 35, 62, 73, 29, 61, 62])\nPASS: rolling_maximum_transformed(values=[88, 62, 33, 93, 35, 62, 73, 29, 61, 62])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "function_35": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=77)\nPASS: process_data_transformed(x=95)\nPASS: process_data_transformed(x=2)\nPASS: process_data_transformed(x=80)\nPASS: process_data_transformed(x=93)\nPASS: process_data_transformed(x=86)\nPASS: process_data_transformed(x=59)\nPASS: process_data_transformed(x=27)\nPASS: process_data_transformed(x=23)\nPASS: process_data_transformed(x=37)\nPASS: process_data_transformed(x=55)\nPASS: process_data_transformed(x=76)\nPASS: process_data_transformed(x=69)\nPASS: process_data_transformed(x=24)\nPASS: process_data_transformed(x=19)\nPASS: process_data_transformed(x=51)\nPASS: process_data_transformed(x=79)\nPASS: process_data_transformed(x=81)\nPASS: process_data_transformed(x=26)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=7.031741326120465e-98)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=46.53213577801824)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=16.24252267976545)\nPASS: convert_temperature_transformed(c=68.5285131309195)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=61.67769497450496)\nPASS: convert_temperature_transformed(c=2.2250738585072014e-308)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=0.3333333333333333)\nPASS: calculate_discount_transformed(price=200.0, discount_rate=0.04308130131227373)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=200.0, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=9.510330312899989e-229)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=199.99999999999997, discount_rate=0.9651663548273519)\nPASS: calculate_discount_transformed(price=199.99999999999997, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.1878641545363886e-235, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=197.20676645480754, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=197.20676645480754, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=2.2250738585e-313)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=9.026508632053496e-289, imag=0.0)\nPASS: process_complex_number_transformed(real=9.026508632053496e-289, imag=-1.9)\nPASS: process_complex_number_transformed(real=1.5, imag=0.0)\nPASS: process_complex_number_transformed(real=-1.1754943508222875e-38, imag=-2.00001)\nPASS: process_complex_number_transformed(real=19.999999999999996, imag=-0.3333333333333333)\nPASS: process_complex_number_transformed(real=-1.1125369292536007e-308, imag=-1e-05)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=-6.103515625e-05)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-1.175494351e-38, imag=-2.2250738585e-313)\nPASS: process_complex_number_transformed(real=-5e-324, imag=-2.00001)\nPASS: process_complex_number_transformed(real=-5e-324, imag=-5e-324)\nPASS: process_complex_number_transformed(real=-19.717033784105595, imag=0.99999)\nPASS: process_complex_number_transformed(real=-19.717033784105595, imag=-19.717033784105595)\nPASS: process_complex_number_transformed(real=-1.175494351e-38, imag=8.574389034205997e-231)\nPASS: process_complex_number_transformed(real=8.574389034205997e-231, imag=8.574389034205997e-231)\nPASS: process_complex_number_transformed(real=0.3333333333333333, imag=2.2250738585e-313)\nPASS: process_complex_number_transformed(real=0.3333333333333333, imag=0.3333333333333333)\nPASS: process_complex_number_transformed(real=0.3027338906893853, imag=-0.5)\nPASS: process_complex_number_transformed(real=0.3027338906893853, imag=0.3027338906893853)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=44)\nPASS: transform_data_transformed(input_value=32)\nPASS: transform_data_transformed(input_value=51)\nPASS: transform_data_transformed(input_value=42)\nPASS: transform_data_transformed(input_value=72)\nPASS: transform_data_transformed(input_value=9)\nPASS: transform_data_transformed(input_value=68)\nPASS: transform_data_transformed(input_value=15)\nPASS: transform_data_transformed(input_value=93)\nPASS: transform_data_transformed(input_value=95)\nPASS: transform_data_transformed(input_value=67)\nPASS: transform_data_transformed(input_value=52)\nPASS: transform_data_transformed(input_value=23)\nPASS: transform_data_transformed(input_value=39)\nPASS: transform_data_transformed(input_value=63)\nPASS: transform_data_transformed(input_value=89)\nPASS: transform_data_transformed(input_value=99)\nPASS: transform_data_transformed(input_value=26)\nPASS: transform_data_transformed(input_value=98)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=2.0925282785451017e-275)\nPASS: circle_area_diff_transformed(r=2.332365519326505)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=14.147175063117691)\nPASS: circle_area_diff_transformed(r=1.192092896e-07)\nPASS: circle_area_diff_transformed(r=11.699692810150692)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=1.175494351e-38)\nPASS: circle_area_diff_transformed(r=5.6364431695662315e-171)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=8, b=1, c=1)\nPASS: triangle_checker_transformed(a=8, b=8, c=15)\nPASS: triangle_checker_transformed(a=15, b=10, c=3)\nPASS: triangle_checker_transformed(a=2, b=8, c=5)\nPASS: triangle_checker_transformed(a=5, b=1, c=19)\nPASS: triangle_checker_transformed(a=12, b=8, c=19)\nPASS: triangle_checker_transformed(a=10, b=13, c=3)\nPASS: triangle_checker_transformed(a=9, b=11, c=10)\nPASS: triangle_checker_transformed(a=16, b=15, c=5)\nPASS: triangle_checker_transformed(a=14, b=4, c=18)\nPASS: triangle_checker_transformed(a=14, b=4, c=14)\nPASS: triangle_checker_transformed(a=14, b=14, c=14)\nPASS: triangle_checker_transformed(a=13, b=10, c=16)\nPASS: triangle_checker_transformed(a=16, b=10, c=16)\nPASS: triangle_checker_transformed(a=16, b=10, c=10)\nPASS: triangle_checker_transformed(a=10, b=10, c=10)\nPASS: triangle_checker_transformed(a=14, b=17, c=5)\nPASS: triangle_checker_transformed(a=14, b=17, c=17)\nPASS: triangle_checker_transformed(a=14, b=14, c=17)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=7.637949605617391)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=44.27229114012007)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=80.07766031553906)\nPASS: temperature_offset_transformed(c=90.23676999532258)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=10, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=10, b=-8, c=-3)\nPASS: quadratic_discriminant_transformed(a=9, b=-10, c=2)\nPASS: quadratic_discriminant_transformed(a=10, b=-2, c=1)\nPASS: quadratic_discriminant_transformed(a=-2, b=3, c=6)\nPASS: quadratic_discriminant_transformed(a=-7, b=2, c=-3)\nPASS: quadratic_discriminant_transformed(a=3, b=4, c=1)\nPASS: quadratic_discriminant_transformed(a=9, b=-3, c=6)\nPASS: quadratic_discriminant_transformed(a=-10, b=-5, c=-3)\nPASS: quadratic_discriminant_transformed(a=-8, b=-1, c=1)\nPASS: quadratic_discriminant_transformed(a=-8, b=-1, c=-1)\nPASS: quadratic_discriminant_transformed(a=-1, b=-1, c=-1)\nPASS: quadratic_discriminant_transformed(a=-9, b=10, c=-8)\nPASS: quadratic_discriminant_transformed(a=-9, b=10, c=10)\nPASS: quadratic_discriminant_transformed(a=-9, b=10, c=-9)\nPASS: quadratic_discriminant_transformed(a=-9, b=-9, c=-9)\nPASS: quadratic_discriminant_transformed(a=-4, b=-1, c=-7)\nPASS: quadratic_discriminant_transformed(a=-7, b=-1, c=-7)\nPASS: quadratic_discriminant_transformed(a=-7, b=-1, c=-1)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-9.573718743972197, y=0.0)\nPASS: vector_norm_transformed(x=-9.573718743972197, y=-6.703885144758356)\nPASS: vector_norm_transformed(x=1.192092896e-07, y=1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=2.220446049250313e-16, y=0.5)\nPASS: vector_norm_transformed(x=-9.0, y=4.538091247640768)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=2.225073858507203e-309)\nPASS: vector_norm_transformed(x=-4.592377705535905, y=1.1)\nPASS: vector_norm_transformed(x=2.2250738585072014e-308, y=-4.0797322761845043e-283)\nPASS: vector_norm_transformed(x=0.5, y=1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=2.225073858507e-311)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=-1.175494351e-38)\nPASS: vector_norm_transformed(x=-6.064942724842383, y=5.833905289002971)\nPASS: vector_norm_transformed(x=-6.064942724842383, y=-6.064942724842383)\nPASS: vector_norm_transformed(x=1.192092896e-07, y=1.192092896e-07)\nPASS: vector_norm_transformed(x=2.2250738585072014e-308, y=1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=1.1754943508222875e-38, y=1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=1.8778774062044707)\nPASS: vector_norm_transformed(x=1.8778774062044707, y=1.8778774062044707)\nPASS: vector_norm_transformed(x=-7.297388511057109, y=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=1.9, b=2.7986176794943097e-307)\nPASS: hypotenuse_diff_transformed(a=1.0, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=1.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=4.272460909483145)\nPASS: hypotenuse_diff_transformed(a=0.6302428648403159, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=3.063844450914959)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=1.5)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=8.285607708096594)\nPASS: hypotenuse_diff_transformed(a=8.285607708096594, b=8.285607708096594)\nPASS: hypotenuse_diff_transformed(a=8.784970590064606e-74, b=1e-05)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=1e-05)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u0013'\u00bd_xO\u0017#\udbb2\udd4d\u00dc')\nPASS: ascii_average_transformed(s='\"\u00df')\nPASS: ascii_average_transformed(s='\u00c3\udb19\ude07\u00f8\u00ce\udab4\ude2a')\nPASS: ascii_average_transformed(s='\u00e9\u000eX\u000e\ud8ee\udfc5')\nPASS: ascii_average_transformed(s='\u00cd\u0085\u0004[`\u0088')\nPASS: ascii_average_transformed(s='Y\u00cd\ud845\udd76o5\u00ad')\nPASS: ascii_average_transformed(s='\ud934\udd31\u00c15\u66c7\u0000')\nPASS: ascii_average_transformed(s='*')\nPASS: ascii_average_transformed(s='\u00fbW\udbc2\udc9b\u00d0\u00d1\udae2\udefe\udbd8\udde5|\u00b5X')\nPASS: ascii_average_transformed(s='\u00be\u00822\u00fd\ud906\ude95')\nPASS: ascii_average_transformed(s='False')\nPASS: ascii_average_transformed(s='\u00ce')\nPASS: ascii_average_transformed(s='\u008e\u001a\u0095B>\u0011D'')\nPASS: ascii_average_transformed(s='9\u00f2\u001b\u00ea\u009c\udaed\udfbf\ud8ce\udc24\u001c\u00ac\u00d4')\nPASS: ascii_average_transformed(s='\udacb\udf90k\u0089')\nPASS: ascii_average_transformed(s='\u000fq')\nPASS: ascii_average_transformed(s='L@>\u00db\u00b1')\nPASS: ascii_average_transformed(s='\u0089\u00cf\\&?\u00b9\ud855\uded0)\u00cb\u0006')\nPASS: ascii_average_transformed(s='\u00e1\ud970\udc12I\ud87a\uddf9\u001c\u0000\u008e')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[9, 0])\nPASS: list_balance_transformed(nums=[2, 0])\nPASS: list_balance_transformed(nums=[2, 3])\nPASS: list_balance_transformed(nums=[0, 3, 8, 5, 0, 7, 6])\nPASS: list_balance_transformed(nums=[7, 9, 0, 6, 7, 5, 8, 5, 0, 1])\nPASS: list_balance_transformed(nums=[6, 7, 3])\nPASS: list_balance_transformed(nums=[4, 4, 3, 0, 1, 0, 1, 4])\nPASS: list_balance_transformed(nums=[1, 0, 1, 8, 7, 9, 1, 8])\nPASS: list_balance_transformed(nums=[3, 0, 3, 10, 10, 6, 6, 6, 4, 4])\nPASS: list_balance_transformed(nums=[3, 9, 1])\nPASS: list_balance_transformed(nums=[3, 3, 1])\nPASS: list_balance_transformed(nums=[3, 1, 1])\nPASS: list_balance_transformed(nums=[7, 6, 0, 7, 1, 1, 7, 10, 8])\nPASS: list_balance_transformed(nums=[7, 1, 0, 7, 1, 1, 7, 10, 8])\nPASS: list_balance_transformed(nums=[7, 7, 0, 7, 1, 1, 7, 10, 8])\nPASS: list_balance_transformed(nums=[7, 7, 0, 7, 1, 1, 7, 1, 8])\nPASS: list_balance_transformed(nums=[7, 7, 0, 7, 1, 1, 7, 1, 7])\nPASS: list_balance_transformed(nums=[7, 7, 0, 7, 1, 1, 7, 7, 7])\nPASS: list_balance_transformed(nums=[7, 7, 0, 7, 1, 7, 7, 7, 7])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[3, 4])\nPASS: odd_sum_validator_transformed(lst=[0, 5, 3])\nPASS: odd_sum_validator_transformed(lst=[1, 9, 1, 9, 6, 7, 5, 2, 8, 1])\nPASS: odd_sum_validator_transformed(lst=[6, 6, 2, 9])\nPASS: odd_sum_validator_transformed(lst=[7, 9, 7])\nPASS: odd_sum_validator_transformed(lst=[10, 4, 6, 4, 1, 8, 6])\nPASS: odd_sum_validator_transformed(lst=[6])\nPASS: odd_sum_validator_transformed(lst=[1])\nPASS: odd_sum_validator_transformed(lst=[5, 0, 7, 0, 7, 8])\nPASS: odd_sum_validator_transformed(lst=[5, 0, 7, 0, 7, 5])\nPASS: odd_sum_validator_transformed(lst=[5, 7, 7, 0, 7, 5])\nPASS: odd_sum_validator_transformed(lst=[5, 7, 5, 0, 7, 5])\nPASS: odd_sum_validator_transformed(lst=[5, 7, 5, 0, 5, 5])\nPASS: odd_sum_validator_transformed(lst=[5, 7, 5, 0, 0, 5])\nPASS: odd_sum_validator_transformed(lst=[1, 10, 9])\nPASS: odd_sum_validator_transformed(lst=[4, 1, 6])\nPASS: odd_sum_validator_transformed(lst=[4, 6, 6])\nPASS: odd_sum_validator_transformed(lst=[4, 4, 6])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\ud983\udd2d')\nPASS: string_pattern_score_transformed(s='\u0083\u00bc\u00f5Y\u0019v\u0014\u00a3')\nPASS: string_pattern_score_transformed(s='4')\nPASS: string_pattern_score_transformed(s='\u0014\u00ad\u00cf\uda85\udc6d\u0019\u0015\u00ac3')\nPASS: string_pattern_score_transformed(s='\b\ud910\udc31')\nPASS: string_pattern_score_transformed(s='\ud912\udffd\ud90b\udc35o')\nPASS: string_pattern_score_transformed(s='$5v')\nPASS: string_pattern_score_transformed(s='\udb8c\udeb0\u00b5*\u00b6[\u0097i~\u00bd\uda58\udf1f')\nPASS: string_pattern_score_transformed(s='\u00d8lL')\nPASS: string_pattern_score_transformed(s='_P\u00e3\u00d4\u00b1\ud9a9\udcb4')\nPASS: string_pattern_score_transformed(s='\u00d7{\u0006\ud9f9\ude1c\u008a\u00fc\udbd9\udc5fD\udafd\udf73\u0015')\nPASS: string_pattern_score_transformed(s='\ud8f8\udfef\ud87f\uddba\ud9c0\udde8\u00dd\ud99f\udc05\u001b')\nPASS: string_pattern_score_transformed(s='\udb17\uddeb')\nPASS: string_pattern_score_transformed(s='\u007f\ud8de\uddf5\u00ba\u00cf\"\u0082\u000e\u00e5\u0016\u0095')\nPASS: string_pattern_score_transformed(s='\u00e7\u00b6\ud9bf\ude3e\ud97d\udfe9\ud826\udfde\u00eb\u00a9\uda40\udf8b\u00f6a')\nPASS: string_pattern_score_transformed(s='\u00832\u00a9\u009f\u009c\u0091l\u00d8\u0099s')\nPASS: string_pattern_score_transformed(s='\u00b9\udaaa\udcbb.}\ud8a5\udf4ea\u00d2\u00c1\u00f0\u0080')\nPASS: string_pattern_score_transformed(s='\ud8f6\udf93\u00d0\t\u0083\u00d7')\nPASS: string_pattern_score_transformed(s='\b\uda49\udff0')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[16])\nPASS: sum_until_limit_transformed(nums=[16, 20, 2])\nPASS: sum_until_limit_transformed(nums=[4, 15, 16, 17, 7, 13, 1, 16, 7, 16])\nPASS: sum_until_limit_transformed(nums=[14, 8, 14, 6, 4, 3, 8, 9, 11, 17])\nPASS: sum_until_limit_transformed(nums=[10])\nPASS: sum_until_limit_transformed(nums=[13, 19, 6])\nPASS: sum_until_limit_transformed(nums=[7, 2, 14, 8, 11, 6, 19])\nPASS: sum_until_limit_transformed(nums=[11, 12, 7, 14, 2, 19, 18, 11])\nPASS: sum_until_limit_transformed(nums=[15, 2, 3])\nPASS: sum_until_limit_transformed(nums=[18, 9, 10, 12, 15, 8])\nPASS: sum_until_limit_transformed(nums=[18, 9, 10, 9, 15, 8])\nPASS: sum_until_limit_transformed(nums=[18, 9, 10, 9, 15, 9])\nPASS: sum_until_limit_transformed(nums=[18, 9, 10, 9, 9, 9])\nPASS: sum_until_limit_transformed(nums=[9, 9, 10, 9, 9, 9])\nPASS: sum_until_limit_transformed(nums=[9, 9, 9, 9, 9, 9])\nPASS: sum_until_limit_transformed(nums=[3, 7])\nPASS: sum_until_limit_transformed(nums=[3, 3])\nPASS: sum_until_limit_transformed(nums=[3])\nPASS: sum_until_limit_transformed(nums=[9])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[11])\nPASS: count_divisibles_transformed(nums=[6])\nPASS: count_divisibles_transformed(nums=[9, 2])\nPASS: count_divisibles_transformed(nums=[19, 3, 8, 1, 0])\nPASS: count_divisibles_transformed(nums=[7])\nPASS: count_divisibles_transformed(nums=[2, 1, 2, 13, 3, 1, 18, 3, 2, 5])\nPASS: count_divisibles_transformed(nums=[0, 11, 13, 4, 4, 20])\nPASS: count_divisibles_transformed(nums=[7, 5, 4])\nPASS: count_divisibles_transformed(nums=[4, 11, 8, 15, 13, 12, 3, 1, 15, 1])\nPASS: count_divisibles_transformed(nums=[17])\nPASS: count_divisibles_transformed(nums=[1, 5, 2, 19, 11, 14, 0, 10, 2, 12])\nPASS: count_divisibles_transformed(nums=[0, 5, 2, 19, 11, 14, 0, 10, 2, 12])\nPASS: count_divisibles_transformed(nums=[0, 5, 2, 19, 12, 14, 0, 10, 2, 12])\nPASS: count_divisibles_transformed(nums=[0, 5, 2, 12, 12, 14, 0, 10, 2, 12])\nPASS: count_divisibles_transformed(nums=[0, 14, 2, 12, 12, 14, 0, 10, 2, 12])\nPASS: count_divisibles_transformed(nums=[0, 14, 2, 12, 12, 14, 0, 12, 2, 12])\nPASS: count_divisibles_transformed(nums=[0, 14, 2, 0, 12, 14, 0, 12, 2, 12])\nPASS: count_divisibles_transformed(nums=[11, 1, 13, 17, 0, 16, 17, 19, 9, 7])\nPASS: count_divisibles_transformed(nums=[11, 7, 13, 17, 0, 16, 17, 19, 9, 7])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[9])\nPASS: index_weighted_sum_transformed(lst=[4])\nPASS: index_weighted_sum_transformed(lst=[9, 4, 1])\nPASS: index_weighted_sum_transformed(lst=[2, 5, 1, 8, 9, 0, 6, 4])\nPASS: index_weighted_sum_transformed(lst=[4, 6, 2, 10, 8, 9, 4])\nPASS: index_weighted_sum_transformed(lst=[1, 4, 0])\nPASS: index_weighted_sum_transformed(lst=[6])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[1])\nPASS: index_weighted_sum_transformed(lst=[5, 1, 1, 6, 0, 0, 0, 4, 6, 7])\nPASS: index_weighted_sum_transformed(lst=[5, 1, 1, 6, 6, 0, 0, 4, 6, 7])\nPASS: index_weighted_sum_transformed(lst=[5, 6, 1, 6, 6, 0, 0, 4, 6, 7])\nPASS: index_weighted_sum_transformed(lst=[5, 6, 1, 6, 6, 0, 0, 0, 6, 7])\nPASS: index_weighted_sum_transformed(lst=[5, 6, 1, 6, 6, 6, 0, 0, 6, 7])\nPASS: index_weighted_sum_transformed(lst=[5, 6, 1, 0, 6, 6, 0, 0, 6, 7])\nPASS: index_weighted_sum_transformed(lst=[6, 6, 1, 0, 6, 6, 0, 0, 6, 7])\nPASS: index_weighted_sum_transformed(lst=[9, 8, 4, 6, 10])\nPASS: index_weighted_sum_transformed(lst=[9, 8, 4, 6, 9])\nPASS: index_weighted_sum_transformed(lst=[2, 3])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=10)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='undefined')\nPASS: character_counter_transformed(text='\u0080\u0017\u00a6\u009bH\u00baj\u0080:\u00e3')\nPASS: character_counter_transformed(text='\ud88a\udea6,7\u00b3z\u0084/\u00d9~\u00d0')\nPASS: character_counter_transformed(text=',\u0014')\nPASS: character_counter_transformed(text='\u00f7\u00f1')\nPASS: character_counter_transformed(text='.[\u00a9\u009c\ud8ae\udea8\u00c7A\u00cb\u00b5\u00cb')\nPASS: character_counter_transformed(text='XA\uda37\udcc3v\ud953\ude88\u0082r.\udb86\udf93\u00c3')\nPASS: character_counter_transformed(text='W$\u00bd\u00a3<E\u00cf\ud91b\udd42\u0012&')\nPASS: character_counter_transformed(text='!\u0096\u008d\u00ce\u008f\u00d0@\u0011 P')\nPASS: character_counter_transformed(text='nil')\nPASS: character_counter_transformed(text='z\ud83f\udc08a#\u00bbx\u00ee')\nPASS: character_counter_transformed(text='\u00ab\u00ee\uda07\ude30\u00e3I\u008e:\u00dd\"\u00d4')\nPASS: character_counter_transformed(text='\u00c2]\u00a2uV^\ud9b5\ude8aw\ud90e\ude1a\u009b')\nPASS: character_counter_transformed(text='C\u001c\ud90f\udd6a0\u00d2')\nPASS: character_counter_transformed(text='E\udae4\udf5cW\u0084T\udb7a\udc9d\ud806\udc2c\u0016U\u0019')\nPASS: character_counter_transformed(text='\u00bf\u00eb\u0014\udbde\udea9\u0080B\ud8ee\udd54=\u00eb\ud93d\ude0f')\nPASS: character_counter_transformed(text='5~\u00c8\u0083\u00c4')\nPASS: character_counter_transformed(text='\uda33\udd43')\nPASS: character_counter_transformed(text='\u0088\ud996\udefd\udb2b\udec03:')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[52])\nPASS: rolling_maximum_transformed(values=[52, 24])\nPASS: rolling_maximum_transformed(values=[35])\nPASS: rolling_maximum_transformed(values=[43, 31, 75])\nPASS: rolling_maximum_transformed(values=[21, 26, 24, 20, 38, 76])\nPASS: rolling_maximum_transformed(values=[31, 15, 32, 51, 33, 26, 91, 58, 61])\nPASS: rolling_maximum_transformed(values=[22, 32, 36, 99, 85, 47, 90, 49, 67])\nPASS: rolling_maximum_transformed(values=[65, 84])\nPASS: rolling_maximum_transformed(values=[95])\nPASS: rolling_maximum_transformed(values=[25, 42, 52, 24, 92, 60, 99, 82, 85, 22])\nPASS: rolling_maximum_transformed(values=[25, 85, 52, 24, 92, 60, 99, 82, 85, 22])\nPASS: rolling_maximum_transformed(values=[25, 85, 52, 24, 24, 60, 99, 82, 85, 22])\nPASS: rolling_maximum_transformed(values=[85, 85, 52, 24, 24, 60, 99, 82, 85, 22])\nPASS: rolling_maximum_transformed(values=[85, 85, 52, 22, 24, 60, 99, 82, 85, 22])\nPASS: rolling_maximum_transformed(values=[85, 85, 52, 22, 24, 60, 85, 82, 85, 22])\nPASS: rolling_maximum_transformed(values=[85, 85, 52, 22, 24, 60, 24, 82, 85, 22])\nPASS: rolling_maximum_transformed(values=[9])\nPASS: rolling_maximum_transformed(values=[25])\nPASS: rolling_maximum_transformed(values=[9, 52, 52, 66, 40])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "sum_until_limit": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=35)\nPASS: process_data_transformed(x=38)\nPASS: process_data_transformed(x=54)\nPASS: process_data_transformed(x=85)\nPASS: process_data_transformed(x=4)\nPASS: process_data_transformed(x=26)\nPASS: process_data_transformed(x=50)\nPASS: process_data_transformed(x=15)\nPASS: process_data_transformed(x=48)\nPASS: process_data_transformed(x=88)\nPASS: process_data_transformed(x=71)\nPASS: process_data_transformed(x=72)\nPASS: process_data_transformed(x=20)\nPASS: process_data_transformed(x=63)\nPASS: process_data_transformed(x=19)\nPASS: process_data_transformed(x=9)\nPASS: process_data_transformed(x=11)\nPASS: process_data_transformed(x=59)\nPASS: process_data_transformed(x=2)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=0.99999)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=2.7887849330968393e-36)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=95.67723253947027)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=89.29771165843081)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.9735497697973639)\nPASS: calculate_discount_transformed(price=136.53199675437511, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=1.401298464324817e-45)\nPASS: calculate_discount_transformed(price=9.398535543437307, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=0.6795751215743323)\nPASS: calculate_discount_transformed(price=0.6795751215743323, discount_rate=0.6795751215743323)\nPASS: calculate_discount_transformed(price=97.40241476653802, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=156.3415674587261, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=156.3415674587261, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=0.872212272529236)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-1.1754943508222875e-38, imag=0.0)\nPASS: process_complex_number_transformed(real=-1.1754943508222875e-38, imag=-1.192092896e-07)\nPASS: process_complex_number_transformed(real=1.5, imag=-5.586465498335958)\nPASS: process_complex_number_transformed(real=-1.175494351e-38, imag=2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-6.061278822725916, imag=-17.01447506251253)\nPASS: process_complex_number_transformed(real=-19.0, imag=8.814539300978087)\nPASS: process_complex_number_transformed(real=1e-05, imag=18.60829987856274)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=-6.103515625e-05)\nPASS: process_complex_number_transformed(real=5.960464477539063e-08, imag=19.0)\nPASS: process_complex_number_transformed(real=0.18715140593741708, imag=20.0)\nPASS: process_complex_number_transformed(real=0.18715140593741708, imag=0.18715140593741708)\nPASS: process_complex_number_transformed(real=-1e-05, imag=-5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=-1e-05, imag=-1e-05)\nPASS: process_complex_number_transformed(real=-6.71927032691564e-262, imag=-20.0)\nPASS: process_complex_number_transformed(real=-6.71927032691564e-262, imag=-6.71927032691564e-262)\nPASS: process_complex_number_transformed(real=1.192092896e-07, imag=1.192092896e-07)\nPASS: process_complex_number_transformed(real=-1.1, imag=-1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=-1.1125369292536007e-308, imag=-1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=2.71361715931998e-287, imag=1.1130805739324164e-159)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=100)\nPASS: transform_data_transformed(input_value=14)\nPASS: transform_data_transformed(input_value=13)\nPASS: transform_data_transformed(input_value=47)\nPASS: transform_data_transformed(input_value=12)\nPASS: transform_data_transformed(input_value=90)\nPASS: transform_data_transformed(input_value=71)\nPASS: transform_data_transformed(input_value=22)\nPASS: transform_data_transformed(input_value=1)\nPASS: transform_data_transformed(input_value=73)\nPASS: transform_data_transformed(input_value=37)\nPASS: transform_data_transformed(input_value=66)\nPASS: transform_data_transformed(input_value=62)\nPASS: transform_data_transformed(input_value=35)\nPASS: transform_data_transformed(input_value=31)\nPASS: transform_data_transformed(input_value=30)\nPASS: transform_data_transformed(input_value=77)\nPASS: transform_data_transformed(input_value=27)\nPASS: transform_data_transformed(input_value=9)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: circle_area_diff_transformed(r=14.473106415082732)\nPASS: circle_area_diff_transformed(r=17.715703702449964)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=12.163856339998153)\nPASS: circle_area_diff_transformed(r=1.9148798126699672e-295)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=4.42188099559187)\nPASS: circle_area_diff_transformed(r=3.632999692524224)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=7.846821048614937e-259)\nPASS: circle_area_diff_transformed(r=16.615638542136058)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=13, b=1, c=1)\nPASS: triangle_checker_transformed(a=13, b=4, c=19)\nPASS: triangle_checker_transformed(a=15, b=9, c=12)\nPASS: triangle_checker_transformed(a=5, b=5, c=10)\nPASS: triangle_checker_transformed(a=16, b=8, c=13)\nPASS: triangle_checker_transformed(a=11, b=2, c=9)\nPASS: triangle_checker_transformed(a=9, b=10, c=11)\nPASS: triangle_checker_transformed(a=3, b=9, c=5)\nPASS: triangle_checker_transformed(a=6, b=10, c=2)\nPASS: triangle_checker_transformed(a=10, b=18, c=11)\nPASS: triangle_checker_transformed(a=11, b=18, c=11)\nPASS: triangle_checker_transformed(a=11, b=11, c=11)\nPASS: triangle_checker_transformed(a=3, b=16, c=14)\nPASS: triangle_checker_transformed(a=16, b=16, c=14)\nPASS: triangle_checker_transformed(a=16, b=16, c=16)\nPASS: triangle_checker_transformed(a=10, b=13, c=4)\nPASS: triangle_checker_transformed(a=13, b=13, c=4)\nPASS: triangle_checker_transformed(a=13, b=13, c=13)\nPASS: triangle_checker_transformed(a=10, b=12, c=15)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=1.4271034459657065e-39)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=91.14523297155519)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=8.16590716503709)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=3.076845847242074e-250)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=2, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=2, b=7, c=-1)\nPASS: quadratic_discriminant_transformed(a=8, b=-1, c=2)\nPASS: quadratic_discriminant_transformed(a=7, b=0, c=-6)\nPASS: quadratic_discriminant_transformed(a=-1, b=-2, c=-10)\nPASS: quadratic_discriminant_transformed(a=8, b=3, c=0)\nPASS: quadratic_discriminant_transformed(a=3, b=-1, c=-7)\nPASS: quadratic_discriminant_transformed(a=6, b=3, c=5)\nPASS: quadratic_discriminant_transformed(a=10, b=-8, c=3)\nPASS: quadratic_discriminant_transformed(a=-9, b=3, c=-10)\nPASS: quadratic_discriminant_transformed(a=-9, b=-9, c=-10)\nPASS: quadratic_discriminant_transformed(a=-9, b=-9, c=-9)\nPASS: quadratic_discriminant_transformed(a=7, b=7, c=1)\nPASS: quadratic_discriminant_transformed(a=7, b=1, c=1)\nPASS: quadratic_discriminant_transformed(a=1, b=1, c=1)\nPASS: quadratic_discriminant_transformed(a=2, b=-4, c=7)\nPASS: quadratic_discriminant_transformed(a=2, b=7, c=7)\nPASS: quadratic_discriminant_transformed(a=7, b=7, c=7)\nPASS: quadratic_discriminant_transformed(a=9, b=-6, c=3)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-3.805916325581337, y=0.0)\nPASS: vector_norm_transformed(x=-3.805916325581337, y=1.192092896e-07)\nPASS: vector_norm_transformed(x=6.824948975594527, y=-0.5)\nPASS: vector_norm_transformed(x=-7.778214476403127, y=1.192092896e-07)\nPASS: vector_norm_transformed(x=-0.99999, y=-2.2250738585e-313)\nPASS: vector_norm_transformed(x=-1.1125369292536007e-308, y=-1.9)\nPASS: vector_norm_transformed(x=5.847758959554072, y=-9.999999999999998)\nPASS: vector_norm_transformed(x=-9.0, y=9.999999999999998)\nPASS: vector_norm_transformed(x=-8.912215367351551e-72, y=1.9)\nPASS: vector_norm_transformed(x=2.2250738585072014e-308, y=1e-05)\nPASS: vector_norm_transformed(x=1e-05, y=1e-05)\nPASS: vector_norm_transformed(x=9.0, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=5.960464477539063e-08, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=3.8350803538866103, y=1.175494351e-38)\nPASS: vector_norm_transformed(x=3.8350803538866103, y=3.8350803538866103)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=-10.0)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=2.225073858507203e-309)\nPASS: vector_norm_transformed(x=-1.5360345034814298, y=-2.3708414920597214)\nPASS: vector_norm_transformed(x=-1.5360345034814298, y=-1.5360345034814298)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=10.0)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=1e-05)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=1.9)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=1.021357641128673)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=2.3506609108407658e-32, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=2.3506609108407658e-32, b=2.3506609108407658e-32)\nPASS: hypotenuse_diff_transformed(a=9.0, b=1.9)\nPASS: hypotenuse_diff_transformed(a=9.0, b=9.0)\nPASS: hypotenuse_diff_transformed(a=10.0, b=1.0)\nPASS: hypotenuse_diff_transformed(a=10.0, b=10.0)\nPASS: hypotenuse_diff_transformed(a=1.5, b=1.0285378778816592)\nPASS: hypotenuse_diff_transformed(a=1.5, b=1.5)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=1.0)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=1.401298464324817e-45)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u00f2m')\nPASS: ascii_average_transformed(s='\u001f\u00f1\udb7d\uddd9\u0016M\u0019\u001a:\\')\nPASS: ascii_average_transformed(s='\u0094T\n\u00d9')\nPASS: ascii_average_transformed(s='\u00e3\udbd2\udcd0')\nPASS: ascii_average_transformed(s=':')\nPASS: ascii_average_transformed(s='\u00ceX')\nPASS: ascii_average_transformed(s='\u00f8\u00f8\u00da-\ud900\ude06d\uda98\udd47\u00a5')\nPASS: ascii_average_transformed(s='@\u00c0\uda25\udd6bJH\udb84\uddc8\u00ea\u00af/\u00b9')\nPASS: ascii_average_transformed(s='\u00b6L')\nPASS: ascii_average_transformed(s='FALSE')\nPASS: ascii_average_transformed(s='\udb9a\udc32\ud987\udea6')\nPASS: ascii_average_transformed(s='Z\ud9c0\ude98\u009f\udb66\udf1e\u0095r\u00a90Kt')\nPASS: ascii_average_transformed(s='EL\ud885\udecc\u0007T\u00a8\uda4f\ude1e\ud84d\udcf8\udbdb\uded4\u009e')\nPASS: ascii_average_transformed(s='\udb63\udd67d\u0015\ud851\uddbd\ud866\udc7e\u00e1\u00d7\u00ce')\nPASS: ascii_average_transformed(s='=\u00a5\udb70\uddee\u00b2E\u631f\u00b5')\nPASS: ascii_average_transformed(s='g\ud921\uddda\u00c1\u00b7\u00ba\udbaf\udc0b')\nPASS: ascii_average_transformed(s='\udacc\udd63')\nPASS: ascii_average_transformed(s='c\ud80c\udeba\u0083\u00b2\u00f0#+\u00bf')\nPASS: ascii_average_transformed(s='\ud94a\udda0\u001c+\u0000\u00a3\u00ad\u00f9\u0082')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[9, 0])\nPASS: list_balance_transformed(nums=[3, 0])\nPASS: list_balance_transformed(nums=[3, 9, 3])\nPASS: list_balance_transformed(nums=[3, 8, 3, 3, 10, 3, 2, 1, 2, 10])\nPASS: list_balance_transformed(nums=[10, 8])\nPASS: list_balance_transformed(nums=[9, 0, 2, 9])\nPASS: list_balance_transformed(nums=[0, 1, 10, 8, 10, 7, 8, 3, 1, 1])\nPASS: list_balance_transformed(nums=[9, 9, 5, 1, 4, 2, 0, 1, 1, 7])\nPASS: list_balance_transformed(nums=[1, 4, 4])\nPASS: list_balance_transformed(nums=[4, 8, 5, 5, 4])\nPASS: list_balance_transformed(nums=[8, 8, 5, 5, 4])\nPASS: list_balance_transformed(nums=[8, 8, 5, 5])\nPASS: list_balance_transformed(nums=[8, 0])\nPASS: list_balance_transformed(nums=[8, 8])\nPASS: list_balance_transformed(nums=[2, 10, 4])\nPASS: list_balance_transformed(nums=[2, 10, 2])\nPASS: list_balance_transformed(nums=[2, 2, 2])\nPASS: list_balance_transformed(nums=[2, 2])\nPASS: list_balance_transformed(nums=[3, 3, 10, 8, 8, 6, 5, 6, 10, 5])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[4])\nPASS: odd_sum_validator_transformed(lst=[4, 10])\nPASS: odd_sum_validator_transformed(lst=[3, 7, 10, 1, 0])\nPASS: odd_sum_validator_transformed(lst=[2, 3, 3, 4, 2, 7, 7, 4, 1, 0])\nPASS: odd_sum_validator_transformed(lst=[5, 4, 10, 5, 3, 0, 8, 6, 3])\nPASS: odd_sum_validator_transformed(lst=[4, 2, 3, 0, 0, 0, 6, 5])\nPASS: odd_sum_validator_transformed(lst=[1, 4, 8, 4, 0, 2, 3, 2, 7, 1])\nPASS: odd_sum_validator_transformed(lst=[1])\nPASS: odd_sum_validator_transformed(lst=[7, 4, 3, 8, 1, 6, 5, 1, 10, 0])\nPASS: odd_sum_validator_transformed(lst=[10, 1, 5, 4, 7, 1, 1, 1, 1, 4])\nPASS: odd_sum_validator_transformed(lst=[4, 1, 5, 4, 7, 1, 1, 1, 1, 4])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 5, 4, 7, 1, 1, 1, 1, 4])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 5, 4, 7, 1, 4, 1, 1, 4])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 4, 4, 7, 1, 4, 1, 1, 4])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 4, 1, 7, 1, 4, 1, 1, 4])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 4, 1, 7, 1, 1, 1, 1, 4])\nPASS: odd_sum_validator_transformed(lst=[4, 5, 7, 9, 5, 9, 4, 6, 3, 2])\nPASS: odd_sum_validator_transformed(lst=[4, 5, 7, 9, 5, 9, 4, 6, 3, 7])\nPASS: odd_sum_validator_transformed(lst=[9, 5, 7, 9, 5, 9, 4, 6, 3, 7])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='?\u0095v')\nPASS: string_pattern_score_transformed(s='\ud85f\udf65\u00d1\u0093S\uda2b\udc9d\udb7a\ude9d>\u00c4\u00fa(')\nPASS: string_pattern_score_transformed(s='\u00e1i\u00f0\uea70Y@\u0090\u009dbf')\nPASS: string_pattern_score_transformed(s='\b4')\nPASS: string_pattern_score_transformed(s='0d\u008a\u00a1\u00bf')\nPASS: string_pattern_score_transformed(s='\u0012E')\nPASS: string_pattern_score_transformed(s='\udbe1\udccb\u008d\u0012O\udb84\udd64\ud8d1\ude27')\nPASS: string_pattern_score_transformed(s='\u00cdn\ud9ed\udda7\u0002\ud836\udecc\ud8d4\udd9a\u00f6\u00b5')\nPASS: string_pattern_score_transformed(s='\"\u0019\u00c8n\u0096{\u00dc=\udab0\udd89|')\nPASS: string_pattern_score_transformed(s='\uda54\udef6')\nPASS: string_pattern_score_transformed(s='\u00d8|\u0017\ud9c6\udfbe@\b\u00aa\u00a5')\nPASS: string_pattern_score_transformed(s='\b+\uda2a\udea8\u0083\u0083\u00cc\u00b1\ud8df\udca5\u001a\u000b')\nPASS: string_pattern_score_transformed(s='4'\u00b9\ud90d\ude8c\ud975\udc49#;m\ud84c\udd50\u00df')\nPASS: string_pattern_score_transformed(s='\u00de\udbaf\udeec#\udb87\ude46')\nPASS: string_pattern_score_transformed(s='h\udb6f\uded9rx\ud864\udfedr\udb07\udd22n\u00b2')\nPASS: string_pattern_score_transformed(s='\ud82b\uddea\u008a\u00a9\udb68\udc4a\u00eb')\nPASS: string_pattern_score_transformed(s='\\r\u009d\u00d9\ud9e4\udecd\u00ecU\u00cc\ud974\udc05\u00bf')\nPASS: string_pattern_score_transformed(s=''')\nPASS: string_pattern_score_transformed(s='\u00da=\udb1b\ude72\udad1\udf2f\u0086')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[2])\nPASS: sum_until_limit_transformed(nums=[5])\nPASS: sum_until_limit_transformed(nums=[5, 5, 10])\nPASS: sum_until_limit_transformed(nums=[13, 14, 14, 0, 3, 17, 4, 6, 0, 3])\nPASS: sum_until_limit_transformed(nums=[10, 15])\nPASS: sum_until_limit_transformed(nums=[2, 18, 8, 18, 10, 11, 1, 11, 9, 6])\nPASS: sum_until_limit_transformed(nums=[4, 15, 8, 0, 11, 8, 20, 19, 2, 18])\nPASS: sum_until_limit_transformed(nums=[14, 7, 7])\nPASS: sum_until_limit_transformed(nums=[16, 10, 11, 7])\nPASS: sum_until_limit_transformed(nums=[16])\nPASS: sum_until_limit_transformed(nums=[8, 20, 5, 8, 15, 10, 1, 15, 10, 12])\nPASS: sum_until_limit_transformed(nums=[8, 20, 8, 8, 15, 10, 1, 15, 10, 12])\nPASS: sum_until_limit_transformed(nums=[8, 20, 8, 8, 10, 10, 1, 15, 10, 12])\nPASS: sum_until_limit_transformed(nums=[8, 20, 10, 8, 10, 10, 1, 15, 10, 12])\nPASS: sum_until_limit_transformed(nums=[8, 20, 20, 8, 10, 10, 1, 15, 10, 12])\nPASS: sum_until_limit_transformed(nums=[8, 20, 20, 8, 10, 12, 1, 15, 10, 12])\nPASS: sum_until_limit_transformed(nums=[8, 20, 20, 8, 10, 12, 12, 15, 10, 12])\nPASS: sum_until_limit_transformed(nums=[5, 16])\nPASS: sum_until_limit_transformed(nums=[1, 2])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[9])\nPASS: count_divisibles_transformed(nums=[9, 4, 20])\nPASS: count_divisibles_transformed(nums=[13, 9, 7, 1, 0, 0, 3, 12, 16, 6])\nPASS: count_divisibles_transformed(nums=[2])\nPASS: count_divisibles_transformed(nums=[6, 4, 20, 11, 9, 2, 19, 12, 8])\nPASS: count_divisibles_transformed(nums=[1, 8, 5, 8, 11, 6, 18, 3, 16, 9])\nPASS: count_divisibles_transformed(nums=[19, 11])\nPASS: count_divisibles_transformed(nums=[4, 5, 10, 17, 13, 6, 4])\nPASS: count_divisibles_transformed(nums=[9, 14, 11])\nPASS: count_divisibles_transformed(nums=[8, 0, 14, 17, 14, 13, 5, 10, 12, 10])\nPASS: count_divisibles_transformed(nums=[8, 0, 14, 17, 14, 13, 5, 17, 12, 10])\nPASS: count_divisibles_transformed(nums=[8, 0, 14, 17, 14, 13, 5, 17])\nPASS: count_divisibles_transformed(nums=[17, 0, 14, 17, 14, 13, 5, 17])\nPASS: count_divisibles_transformed(nums=[14, 0, 14, 17, 14, 13, 5, 17])\nPASS: count_divisibles_transformed(nums=[5, 0, 14, 17, 14, 13, 5, 17])\nPASS: count_divisibles_transformed(nums=[5, 0, 14, 17, 5, 13, 5, 17])\nPASS: count_divisibles_transformed(nums=[10])\nPASS: count_divisibles_transformed(nums=[1])\nPASS: count_divisibles_transformed(nums=[13])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[9])\nPASS: index_weighted_sum_transformed(lst=[3])\nPASS: index_weighted_sum_transformed(lst=[1, 2, 5, 3])\nPASS: index_weighted_sum_transformed(lst=[9, 1, 6, 4, 4, 2, 10, 0, 8])\nPASS: index_weighted_sum_transformed(lst=[6, 9, 2])\nPASS: index_weighted_sum_transformed(lst=[8, 10, 7, 7, 8])\nPASS: index_weighted_sum_transformed(lst=[0, 3, 8, 8, 3, 1, 4, 6, 9])\nPASS: index_weighted_sum_transformed(lst=[10, 8, 0, 1])\nPASS: index_weighted_sum_transformed(lst=[7, 7, 5, 4, 3])\nPASS: index_weighted_sum_transformed(lst=[0, 2, 0])\nPASS: index_weighted_sum_transformed(lst=[0, 0, 0])\nPASS: index_weighted_sum_transformed(lst=[7])\nPASS: index_weighted_sum_transformed(lst=[3, 5, 10, 1, 6, 10, 10, 1, 0])\nPASS: index_weighted_sum_transformed(lst=[3, 5, 10, 10, 6, 10, 10, 1, 0])\nPASS: index_weighted_sum_transformed(lst=[3, 5, 10, 10, 6, 10, 10, 5, 0])\nPASS: index_weighted_sum_transformed(lst=[3, 5, 10, 10, 6, 10, 10, 3, 0])\nPASS: index_weighted_sum_transformed(lst=[3, 5, 10, 3, 6, 10, 10, 3, 0])\nPASS: index_weighted_sum_transformed(lst=[3, 5, 10, 3, 6, 10, 10, 10, 0])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=10)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='z')\nPASS: character_counter_transformed(text='\u000e\u009c\udb32\udc52\u00b5R\u009f\udb26\udf43\u00d7G\udb64\udfd2')\nPASS: character_counter_transformed(text='\u0012\u00f3')\nPASS: character_counter_transformed(text='0\ud8a9\udd9ai=\u00f0\u00f53-')\nPASS: character_counter_transformed(text='\ud94c\ude2a')\nPASS: character_counter_transformed(text='\u0089\u00dcA')\nPASS: character_counter_transformed(text='\u00e3')\nPASS: character_counter_transformed(text='\u00b5\u00c2\ud9ae\udc1e\u0013')\nPASS: character_counter_transformed(text='6US')\nPASS: character_counter_transformed(text='\ud846\ude51\u001c\u00960|')\nPASS: character_counter_transformed(text='\u00f5\u009d')\nPASS: character_counter_transformed(text='6\u00c7\u00d1l2\ud95d\uddf8\uda3b\udd9ax\u00b8U')\nPASS: character_counter_transformed(text='N\u0012\ud824\udef8\u00b5\udbfd\udfa4\u008at3)\udb00\ude24')\nPASS: character_counter_transformed(text='\u008d\ud854\udfd7')\nPASS: character_counter_transformed(text='\u00e3\u00b5:\u00ca\u00de_')\nPASS: character_counter_transformed(text='\u00b7\u0090')\nPASS: character_counter_transformed(text='\u008c\u00bc\u001f\u00ed')\nPASS: character_counter_transformed(text='\u00b8\u00df\u001d\udb83\uddb2\ud9a1\udd67')\nPASS: character_counter_transformed(text='\u00b1\ud86f\udd06\u0084[^8\udbf6\ude8c\u00d8,\u00d1')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[53])\nPASS: rolling_maximum_transformed(values=[53, 31, 65])\nPASS: rolling_maximum_transformed(values=[6, 32, 57, 76, 30, 11, 71, 99])\nPASS: rolling_maximum_transformed(values=[94, 86, 44, 49, 34])\nPASS: rolling_maximum_transformed(values=[54, 44])\nPASS: rolling_maximum_transformed(values=[67])\nPASS: rolling_maximum_transformed(values=[14, 0])\nPASS: rolling_maximum_transformed(values=[69, 47, 10, 22, 14])\nPASS: rolling_maximum_transformed(values=[21, 49, 18, 53, 69, 79])\nPASS: rolling_maximum_transformed(values=[82, 56, 52, 59, 25, 31])\nPASS: rolling_maximum_transformed(values=[82, 56, 52, 59])\nPASS: rolling_maximum_transformed(values=[52, 56, 52, 59])\nPASS: rolling_maximum_transformed(values=[52, 52, 52, 59])\nPASS: rolling_maximum_transformed(values=[52, 52, 52])\nPASS: rolling_maximum_transformed(values=[81, 19, 70, 90, 10, 83, 22])\nPASS: rolling_maximum_transformed(values=[83, 19, 70, 90, 10, 83, 22])\nPASS: rolling_maximum_transformed(values=[83, 19, 70, 90, 10, 22, 22])\nPASS: rolling_maximum_transformed(values=[83, 19, 70, 90, 10, 10, 22])\nPASS: rolling_maximum_transformed(values=[83])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "count_divisibles": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=15)\nPASS: process_data_transformed(x=39)\nPASS: process_data_transformed(x=38)\nPASS: process_data_transformed(x=20)\nPASS: process_data_transformed(x=23)\nPASS: process_data_transformed(x=7)\nPASS: process_data_transformed(x=3)\nPASS: process_data_transformed(x=63)\nPASS: process_data_transformed(x=61)\nPASS: process_data_transformed(x=1)\nPASS: process_data_transformed(x=49)\nPASS: process_data_transformed(x=100)\nPASS: process_data_transformed(x=48)\nPASS: process_data_transformed(x=70)\nPASS: process_data_transformed(x=71)\nPASS: process_data_transformed(x=79)\nPASS: process_data_transformed(x=91)\nPASS: process_data_transformed(x=69)\nPASS: process_data_transformed(x=22)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=10.177369339746292)\nPASS: convert_temperature_transformed(c=0.99999)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=26.533407202324383)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=2.2250738585072014e-308)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=86.22998030903959)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=199.99999999999997, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=147.19817971015706, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=1.192092896e-07, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=114.91966717827992, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=0.09993603990422709)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=127.61115362372892, discount_rate=1e-05)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-0.5, imag=0.0)\nPASS: process_complex_number_transformed(real=-0.5, imag=-9.742174537801718)\nPASS: process_complex_number_transformed(real=8.070749301490723e-258, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=0.99999, imag=2.225073858507e-311)\nPASS: process_complex_number_transformed(real=2.2250738585072014e-308, imag=2.00001)\nPASS: process_complex_number_transformed(real=1.5, imag=-2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=1.1754943508222875e-38, imag=1.175494351e-38)\nPASS: process_complex_number_transformed(real=-2.220446049250313e-16, imag=1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=2.00001, imag=-1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=20.0, imag=-2.2250738585e-313)\nPASS: process_complex_number_transformed(real=20.0, imag=20.0)\nPASS: process_complex_number_transformed(real=-1.5, imag=2.7273541163385676e-299)\nPASS: process_complex_number_transformed(real=-1.5, imag=-1.5)\nPASS: process_complex_number_transformed(real=5e-324, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=5e-324, imag=5e-324)\nPASS: process_complex_number_transformed(real=-1.9, imag=1.175494351e-38)\nPASS: process_complex_number_transformed(real=1.175494351e-38, imag=1.175494351e-38)\nPASS: process_complex_number_transformed(real=-18.927180518780666, imag=19.999999999999996)\nPASS: process_complex_number_transformed(real=-18.927180518780666, imag=-18.927180518780666)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=84)\nPASS: transform_data_transformed(input_value=34)\nPASS: transform_data_transformed(input_value=83)\nPASS: transform_data_transformed(input_value=38)\nPASS: transform_data_transformed(input_value=33)\nPASS: transform_data_transformed(input_value=62)\nPASS: transform_data_transformed(input_value=90)\nPASS: transform_data_transformed(input_value=43)\nPASS: transform_data_transformed(input_value=51)\nPASS: transform_data_transformed(input_value=71)\nPASS: transform_data_transformed(input_value=54)\nPASS: transform_data_transformed(input_value=11)\nPASS: transform_data_transformed(input_value=28)\nPASS: transform_data_transformed(input_value=68)\nPASS: transform_data_transformed(input_value=92)\nPASS: transform_data_transformed(input_value=25)\nPASS: transform_data_transformed(input_value=44)\nPASS: transform_data_transformed(input_value=57)\nPASS: transform_data_transformed(input_value=18)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=0.2519435163607931)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=7.394382589760858)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=7.121312259309792)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=6, b=1, c=1)\nPASS: triangle_checker_transformed(a=6, b=5, c=17)\nPASS: triangle_checker_transformed(a=19, b=5, c=14)\nPASS: triangle_checker_transformed(a=20, b=2, c=14)\nPASS: triangle_checker_transformed(a=7, b=7, c=13)\nPASS: triangle_checker_transformed(a=3, b=20, c=6)\nPASS: triangle_checker_transformed(a=17, b=15, c=11)\nPASS: triangle_checker_transformed(a=10, b=18, c=2)\nPASS: triangle_checker_transformed(a=4, b=4, c=18)\nPASS: triangle_checker_transformed(a=14, b=17, c=20)\nPASS: triangle_checker_transformed(a=17, b=17, c=20)\nPASS: triangle_checker_transformed(a=17, b=17, c=17)\nPASS: triangle_checker_transformed(a=17, b=20, c=8)\nPASS: triangle_checker_transformed(a=17, b=20, c=20)\nPASS: triangle_checker_transformed(a=17, b=20, c=17)\nPASS: triangle_checker_transformed(a=20, b=20, c=17)\nPASS: triangle_checker_transformed(a=20, b=17, c=17)\nPASS: triangle_checker_transformed(a=20, b=20, c=20)\nPASS: triangle_checker_transformed(a=18, b=19, c=2)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=1.192092896e-07)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=1.8732604696330294e-153)\nPASS: temperature_offset_transformed(c=6.554823505712219e-08)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=55.340723884652775)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-6, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-6, b=7, c=5)\nPASS: quadratic_discriminant_transformed(a=6, b=-9, c=2)\nPASS: quadratic_discriminant_transformed(a=2, b=10, c=6)\nPASS: quadratic_discriminant_transformed(a=5, b=-5, c=6)\nPASS: quadratic_discriminant_transformed(a=-10, b=8, c=-3)\nPASS: quadratic_discriminant_transformed(a=3, b=3, c=2)\nPASS: quadratic_discriminant_transformed(a=10, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=0, b=-10, c=9)\nPASS: quadratic_discriminant_transformed(a=-4, b=9, c=8)\nPASS: quadratic_discriminant_transformed(a=-4, b=8, c=8)\nPASS: quadratic_discriminant_transformed(a=8, b=8, c=8)\nPASS: quadratic_discriminant_transformed(a=-10, b=4, c=8)\nPASS: quadratic_discriminant_transformed(a=4, b=4, c=8)\nPASS: quadratic_discriminant_transformed(a=8, b=4, c=8)\nPASS: quadratic_discriminant_transformed(a=-3, b=2, c=-6)\nPASS: quadratic_discriminant_transformed(a=-3, b=2, c=-3)\nPASS: quadratic_discriminant_transformed(a=-3, b=-3, c=-3)\nPASS: quadratic_discriminant_transformed(a=9, b=-4, c=-10)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=0.0)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=1.5758049779379473)\nPASS: vector_norm_transformed(x=-1.1, y=-1.401298464324817e-45)\nPASS: vector_norm_transformed(x=2.2250738585e-313, y=0.3333333333333333)\nPASS: vector_norm_transformed(x=-0.5, y=9.999999999999998)\nPASS: vector_norm_transformed(x=2.2250738585072014e-308, y=1.192092896e-07)\nPASS: vector_norm_transformed(x=2.2250738585072014e-308, y=7.120306020030704)\nPASS: vector_norm_transformed(x=-6.281719365650762, y=0.9606864331528193)\nPASS: vector_norm_transformed(x=1.1754943508222875e-38, y=-2.220446049250313e-16)\nPASS: vector_norm_transformed(x=-10.0, y=-1e-05)\nPASS: vector_norm_transformed(x=-1e-05, y=-1e-05)\nPASS: vector_norm_transformed(x=2.225073858507e-311, y=0.3333333333333333)\nPASS: vector_norm_transformed(x=2.225073858507e-311, y=2.225073858507e-311)\nPASS: vector_norm_transformed(x=10.0, y=-6.889740835135697)\nPASS: vector_norm_transformed(x=-6.889740835135697, y=-6.889740835135697)\nPASS: vector_norm_transformed(x=-2.00001, y=-1.192092896e-07)\nPASS: vector_norm_transformed(x=-2.00001, y=-2.00001)\nPASS: vector_norm_transformed(x=1.1754943508222875e-38, y=-1.192092896e-07)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=-1.192092896e-07)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.1, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.1, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=1.9)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=9.0)\nPASS: hypotenuse_diff_transformed(a=9.0, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=0.0022153521072976194, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=2.9547872476415953)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=9.96360840470216)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=6.096993871082833)\nPASS: hypotenuse_diff_transformed(a=6.096993871082833, b=6.096993871082833)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=1.0677977899898901e-141)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=8.667566630695571, b=2.5285642487789755)\nPASS: hypotenuse_diff_transformed(a=8.667566630695571, b=8.667566630695571)\nPASS: hypotenuse_diff_transformed(a=9.0, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=2.2250738585e-313)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u00adn\u00b9\udb28\udef2\u0002u\uda86\udf1a\udb34\udced6\u009d')\nPASS: ascii_average_transformed(s='\u00cc')\nPASS: ascii_average_transformed(s='\u00faP\udbb5\udf4b\"\u00bc\u00b2\u00be\u00ac\u0080d')\nPASS: ascii_average_transformed(s='\u000f\u008ao\u0089\uda46\udc72A')\nPASS: ascii_average_transformed(s='K')\nPASS: ascii_average_transformed(s='6\u008b[\ud9b4\ude1f\u00ec\udaf0\uddfc2\u00c9\u0092\u009d')\nPASS: ascii_average_transformed(s='\u0093')\nPASS: ascii_average_transformed(s='r\u00b4\u009cR\u00f1\u0001\u00cc\u00cf\u0015')\nPASS: ascii_average_transformed(s='\u00a2I\ud8f1\udf41\u00bc\u007fnI\u0012\udb26\uddff\u00e8')\nPASS: ascii_average_transformed(s='\u00a9\u00eawt\u00f1pB\u00a3\u00f1\u0081')\nPASS: ascii_average_transformed(s='\u0019q\u0013\u00b3')\nPASS: ascii_average_transformed(s='\uda8a\udcf9=u\ud9a8\uddacQ\u009d?f\u007f\u00fc')\nPASS: ascii_average_transformed(s='\u0087\u0098\udb0e\ude84\ud907\udd71 \udb0b\udc37qS\uda09\uddbc\udbe8\udc63')\nPASS: ascii_average_transformed(s='\u00e5\u00a6')\nPASS: ascii_average_transformed(s='\ud9f7\udd0c\u00c3R&I\u009db\u00ca\u0015\u0017')\nPASS: ascii_average_transformed(s='\u0013cx\u0082')\nPASS: ascii_average_transformed(s='LPT1')\nPASS: ascii_average_transformed(s='\u00ae\u0019\ud845\udeafV\u00be')\nPASS: ascii_average_transformed(s='\u00c0\u35d8m\u0002x\uda10\udf8a\udb36\udfa4')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[3, 0])\nPASS: list_balance_transformed(nums=[3, 9, 8, 2, 8, 3, 10])\nPASS: list_balance_transformed(nums=[2, 9])\nPASS: list_balance_transformed(nums=[8, 7])\nPASS: list_balance_transformed(nums=[2, 1, 6])\nPASS: list_balance_transformed(nums=[8, 6])\nPASS: list_balance_transformed(nums=[1, 7, 1, 1, 0])\nPASS: list_balance_transformed(nums=[3, 6, 10, 4, 9, 2, 0, 8, 5, 6])\nPASS: list_balance_transformed(nums=[2, 0, 2, 0])\nPASS: list_balance_transformed(nums=[10, 1, 8, 2, 7, 5])\nPASS: list_balance_transformed(nums=[10, 1, 8, 5, 7, 5])\nPASS: list_balance_transformed(nums=[10, 1, 8, 5])\nPASS: list_balance_transformed(nums=[10, 1, 8, 1])\nPASS: list_balance_transformed(nums=[10, 10, 8, 1])\nPASS: list_balance_transformed(nums=[10, 10, 1, 1])\nPASS: list_balance_transformed(nums=[3, 10, 10, 7, 6, 10])\nPASS: list_balance_transformed(nums=[3, 10, 10, 7, 6, 7])\nPASS: list_balance_transformed(nums=[3, 10, 10, 3, 6, 7])\nPASS: list_balance_transformed(nums=[3, 10, 3, 3, 6, 7])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[7])\nPASS: odd_sum_validator_transformed(lst=[7, 4])\nPASS: odd_sum_validator_transformed(lst=[7, 9])\nPASS: odd_sum_validator_transformed(lst=[0, 7, 4])\nPASS: odd_sum_validator_transformed(lst=[6, 5])\nPASS: odd_sum_validator_transformed(lst=[0, 5])\nPASS: odd_sum_validator_transformed(lst=[6])\nPASS: odd_sum_validator_transformed(lst=[10, 4, 0, 5, 7, 4, 5, 8, 10])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[4, 7, 2, 9, 6, 9, 5, 1, 4, 6])\nPASS: odd_sum_validator_transformed(lst=[4, 7, 2, 7, 6, 9, 5, 1, 4, 6])\nPASS: odd_sum_validator_transformed(lst=[4, 7, 2, 7, 9, 9, 5, 1, 4, 6])\nPASS: odd_sum_validator_transformed(lst=[4, 7, 2, 7, 4, 9, 5, 1, 4, 6])\nPASS: odd_sum_validator_transformed(lst=[4, 7, 2, 7, 4, 9, 5, 4, 4, 6])\nPASS: odd_sum_validator_transformed(lst=[4, 7, 2, 7, 4, 2, 5, 4, 4, 6])\nPASS: odd_sum_validator_transformed(lst=[4, 7, 2, 7, 4, 2])\nPASS: odd_sum_validator_transformed(lst=[2, 6, 3, 4, 3, 4, 0, 7, 0])\nPASS: odd_sum_validator_transformed(lst=[2, 6, 3, 4, 3, 4, 0, 7, 7])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\udab4\udfb6\udb7f\udc33U')\nPASS: string_pattern_score_transformed(s='5\u0004\u00db\u00a9Z\u00db\u00f1\udb08\udf26\uda80\udfae\ud8bf\uded8')\nPASS: string_pattern_score_transformed(s='\u0005\udbcb\udf03\u00dc9\u0010\ud976\udf6f+&\u00ca\u0090')\nPASS: string_pattern_score_transformed(s='*\u000b\u0011!\udb75\udde9r\u00a4\udb4f\udf53\u0000\ud982\udd2f')\nPASS: string_pattern_score_transformed(s='!\udb66\udced\uda63\udc2f\u00c8&\u00b4\udbc9\udfdb\u00ef\u00e3\udb37\udfe1')\nPASS: string_pattern_score_transformed(s='N\u4923\u0098\u00a4\udba5\ude32\u00b0\u00d2R6=')\nPASS: string_pattern_score_transformed(s='\u001b\u0087\u00c74')\nPASS: string_pattern_score_transformed(s='\u001a\u0001 L{\ud90d\udd9a\udb34\udf8bs;')\nPASS: string_pattern_score_transformed(s='m\udbb4\udfbd\u00a1:')\nPASS: string_pattern_score_transformed(s='Z\udbac\udd9bN%\f')\nPASS: string_pattern_score_transformed(s='\u00e8\u00de\u0006\udbec\udcdd\u0088'\uda60\uddc1\u0015\ud899\udc69m')\nPASS: string_pattern_score_transformed(s='\udaf9\ude83\u00f1h')\nPASS: string_pattern_score_transformed(s='none')\nPASS: string_pattern_score_transformed(s='-')\nPASS: string_pattern_score_transformed(s='$\ud857\udca8')\nPASS: string_pattern_score_transformed(s='w\u000b\u0015P\ud89b\udc69\u0093\u00d4\uda0e\udc8cOY')\nPASS: string_pattern_score_transformed(s='\u00da')\nPASS: string_pattern_score_transformed(s='i\u000b\u00cfvv')\nPASS: string_pattern_score_transformed(s='Z\u0018\ud86c\udfe5\u00a6\u00ce5')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[11])\nPASS: sum_until_limit_transformed(nums=[14])\nPASS: sum_until_limit_transformed(nums=[17, 19, 13, 2])\nPASS: sum_until_limit_transformed(nums=[8])\nPASS: sum_until_limit_transformed(nums=[8, 7, 2, 19, 3])\nPASS: sum_until_limit_transformed(nums=[15, 17, 14, 9])\nPASS: sum_until_limit_transformed(nums=[9])\nPASS: sum_until_limit_transformed(nums=[7, 2, 5, 0, 12, 11, 2])\nPASS: sum_until_limit_transformed(nums=[6, 1])\nPASS: sum_until_limit_transformed(nums=[13, 7, 20, 13, 17])\nPASS: sum_until_limit_transformed(nums=[13, 13, 20, 13, 17])\nPASS: sum_until_limit_transformed(nums=[13, 17, 20, 13, 17])\nPASS: sum_until_limit_transformed(nums=[13])\nPASS: sum_until_limit_transformed(nums=[10, 1, 11, 17, 7, 0])\nPASS: sum_until_limit_transformed(nums=[10, 1, 7, 17, 7, 0])\nPASS: sum_until_limit_transformed(nums=[10, 1, 7, 17, 1, 0])\nPASS: sum_until_limit_transformed(nums=[10, 1, 7, 0, 1, 0])\nPASS: sum_until_limit_transformed(nums=[0, 1, 7, 0, 1, 0])\nPASS: sum_until_limit_transformed(nums=[0, 1, 7, 0, 1, 7])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[8])\nPASS: count_divisibles_transformed(nums=[14])\nPASS: count_divisibles_transformed(nums=[14, 1, 19])\nPASS: count_divisibles_transformed(nums=[14, 17, 14, 12, 17, 2, 14, 19, 1, 15])\nPASS: count_divisibles_transformed(nums=[17, 4, 7, 4, 0, 15, 14, 1, 13, 6])\nPASS: count_divisibles_transformed(nums=[0, 8, 12, 5])\nPASS: count_divisibles_transformed(nums=[4])\nPASS: count_divisibles_transformed(nums=[19, 6, 2, 4, 17, 9, 12])\nPASS: count_divisibles_transformed(nums=[15, 20, 0, 4, 2])\nPASS: count_divisibles_transformed(nums=[5, 0, 12])\nPASS: count_divisibles_transformed(nums=[0, 0, 12])\nPASS: count_divisibles_transformed(nums=[0, 0, 0])\nPASS: count_divisibles_transformed(nums=[0, 0])\nPASS: count_divisibles_transformed(nums=[2, 7])\nPASS: count_divisibles_transformed(nums=[2])\nPASS: count_divisibles_transformed(nums=[14, 10, 8, 17])\nPASS: count_divisibles_transformed(nums=[10, 10, 8, 17])\nPASS: count_divisibles_transformed(nums=[10, 10, 8, 10])\nPASS: count_divisibles_transformed(nums=[10])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[7])\nPASS: index_weighted_sum_transformed(lst=[6])\nPASS: index_weighted_sum_transformed(lst=[10, 2, 9, 9, 3, 10, 4, 10, 7, 8])\nPASS: index_weighted_sum_transformed(lst=[7, 0, 7, 10, 0, 6, 1, 4, 8, 9])\nPASS: index_weighted_sum_transformed(lst=[2, 2, 1, 10, 2, 7, 2])\nPASS: index_weighted_sum_transformed(lst=[0, 4, 10, 10, 2, 9, 8, 8, 10, 7])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[8, 9, 8, 0, 1, 9, 4, 8, 0, 8])\nPASS: index_weighted_sum_transformed(lst=[10, 6, 9])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[0, 1, 10, 8, 1, 7, 6, 0, 5, 0])\nPASS: index_weighted_sum_transformed(lst=[0, 1, 10, 8, 1, 7, 6, 1, 5, 0])\nPASS: index_weighted_sum_transformed(lst=[0, 1, 10, 8])\nPASS: index_weighted_sum_transformed(lst=[1, 1, 10, 8])\nPASS: index_weighted_sum_transformed(lst=[1, 1, 1, 8])\nPASS: index_weighted_sum_transformed(lst=[1, 1, 1])\nPASS: index_weighted_sum_transformed(lst=[1])\nPASS: index_weighted_sum_transformed(lst=[1, 10, 2, 9, 9, 4, 1, 9])\nPASS: index_weighted_sum_transformed(lst=[4, 10, 2, 9, 9, 4, 1, 9])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=10)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\ud8ee\ude8d')\nPASS: character_counter_transformed(text='\udaa7\udf42[\u00c9U8\ud890\udd7b')\nPASS: character_counter_transformed(text='\ubb28\u00bb&\u00ef\uda59\udf8b')\nPASS: character_counter_transformed(text='f\u00f2\u0000\u00bbw\u00ba\u00b4\u0006')\nPASS: character_counter_transformed(text='\ud86e\udedcl\ud9af\udef5\u00e2\u00d4\ud9e7\udd5a\u00d5')\nPASS: character_counter_transformed(text='\u00a6\u0081;\u00dc\u00e7J\ud835\ude0d\uda7b\udff2GI')\nPASS: character_counter_transformed(text='\u0010\ud9f5\udd57\u00bf:\uda47\udcdf')\nPASS: character_counter_transformed(text='<\u0092\u00ea\udb19\udceb\u00fai\udb6d\udcb8\u0091\uda32\udee9')\nPASS: character_counter_transformed(text='Xn')\nPASS: character_counter_transformed(text='\u00e8\u0013\u00cd\u0017\u0081\u00e1\u00adq')\nPASS: character_counter_transformed(text='\udacd\udeb6\ud8e7\udf27k\uda97\udda0')\nPASS: character_counter_transformed(text='?c')\nPASS: character_counter_transformed(text='\u00c9\ud916\udffdG\u00d2\ud812\udf2a\u00aa\ud940\uded8\u00ff\u00ec\u009b')\nPASS: character_counter_transformed(text='\udab1\udd47')\nPASS: character_counter_transformed(text='\u00d6\u0095\u0015\u00ef\u0081x\"\n2\u00aa')\nPASS: character_counter_transformed(text='\\')\nPASS: character_counter_transformed(text='\ud966\udee3\u0090\u008a\u00b3\u001d')\nPASS: character_counter_transformed(text='\udb2c\udc00\u0010\ud857\udfcc7')\nPASS: character_counter_transformed(text='\ud84c\ude0b\udbda\udea5h\u00d2\u00bbp')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[27])\nPASS: rolling_maximum_transformed(values=[27, 21, 96])\nPASS: rolling_maximum_transformed(values=[69])\nPASS: rolling_maximum_transformed(values=[94, 54, 45, 84])\nPASS: rolling_maximum_transformed(values=[47, 88, 85, 91])\nPASS: rolling_maximum_transformed(values=[30, 37, 83, 0, 50, 46, 8, 14, 36, 82])\nPASS: rolling_maximum_transformed(values=[26, 20, 14, 76, 8, 79, 58, 47, 13, 13])\nPASS: rolling_maximum_transformed(values=[35])\nPASS: rolling_maximum_transformed(values=[22, 43, 29, 73, 18, 100, 2, 13, 12, 62])\nPASS: rolling_maximum_transformed(values=[2, 74, 40])\nPASS: rolling_maximum_transformed(values=[2])\nPASS: rolling_maximum_transformed(values=[76, 88])\nPASS: rolling_maximum_transformed(values=[76, 76])\nPASS: rolling_maximum_transformed(values=[38, 74, 70, 16, 52])\nPASS: rolling_maximum_transformed(values=[74, 74, 70, 16, 52])\nPASS: rolling_maximum_transformed(values=[70, 74, 70, 16, 52])\nPASS: rolling_maximum_transformed(values=[70, 74, 70, 16, 74])\nPASS: rolling_maximum_transformed(values=[74, 74, 70, 16, 74])\nPASS: rolling_maximum_transformed(values=[74, 74, 70, 74, 74])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "index_weighted_sum": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=78)\nPASS: process_data_transformed(x=53)\nPASS: process_data_transformed(x=39)\nPASS: process_data_transformed(x=62)\nPASS: process_data_transformed(x=36)\nPASS: process_data_transformed(x=58)\nPASS: process_data_transformed(x=76)\nPASS: process_data_transformed(x=11)\nPASS: process_data_transformed(x=82)\nPASS: process_data_transformed(x=4)\nPASS: process_data_transformed(x=13)\nPASS: process_data_transformed(x=6)\nPASS: process_data_transformed(x=56)\nPASS: process_data_transformed(x=33)\nPASS: process_data_transformed(x=3)\nPASS: process_data_transformed(x=12)\nPASS: process_data_transformed(x=51)\nPASS: process_data_transformed(x=74)\nPASS: process_data_transformed(x=91)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=25.657920103212977)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=75.38870625381055)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=1.1754943508222875e-38)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=35.76577700198756)\nPASS: convert_temperature_transformed(c=48.32939155890891)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=44.58867914365615, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=44.58867914365615, discount_rate=0.8675720572255887)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=199.99999999999997, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=199.99999999999997, discount_rate=0.3599578994231612)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.6963285153973303)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=2.00001, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=0.3333333333333333)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=0.3333333333333333)\nPASS: calculate_discount_transformed(price=2.00001, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=0.5, imag=0.0)\nPASS: process_complex_number_transformed(real=0.5, imag=-1.9)\nPASS: process_complex_number_transformed(real=-2.6874705572166682e-132, imag=16.96841994549895)\nPASS: process_complex_number_transformed(real=-2.225073858507203e-309, imag=1.5)\nPASS: process_complex_number_transformed(real=-0.3333333333333333, imag=-0.0)\nPASS: process_complex_number_transformed(real=-1.9, imag=2.2250738585e-313)\nPASS: process_complex_number_transformed(real=2.00001, imag=-20.0)\nPASS: process_complex_number_transformed(real=-19.999999999999996, imag=19.0)\nPASS: process_complex_number_transformed(real=-11.704662295860444, imag=-5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=-6.103515625e-05, imag=-2.00001)\nPASS: process_complex_number_transformed(real=-6.103515625e-05, imag=-6.103515625e-05)\nPASS: process_complex_number_transformed(real=5.960464477539063e-08, imag=2.124826526521332)\nPASS: process_complex_number_transformed(real=2.124826526521332, imag=2.124826526521332)\nPASS: process_complex_number_transformed(real=7.131897894271976, imag=-1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=-1.401298464324817e-45, imag=-1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=-0.3333333333333333, imag=9.398735391925533e-151)\nPASS: process_complex_number_transformed(real=-0.3333333333333333, imag=-0.3333333333333333)\nPASS: process_complex_number_transformed(real=2.220446049250313e-16, imag=12.667044971511288)\nPASS: process_complex_number_transformed(real=12.667044971511288, imag=12.667044971511288)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=95)\nPASS: transform_data_transformed(input_value=81)\nPASS: transform_data_transformed(input_value=82)\nPASS: transform_data_transformed(input_value=24)\nPASS: transform_data_transformed(input_value=5)\nPASS: transform_data_transformed(input_value=80)\nPASS: transform_data_transformed(input_value=10)\nPASS: transform_data_transformed(input_value=59)\nPASS: transform_data_transformed(input_value=70)\nPASS: transform_data_transformed(input_value=53)\nPASS: transform_data_transformed(input_value=44)\nPASS: transform_data_transformed(input_value=88)\nPASS: transform_data_transformed(input_value=73)\nPASS: transform_data_transformed(input_value=54)\nPASS: transform_data_transformed(input_value=39)\nPASS: transform_data_transformed(input_value=99)\nPASS: transform_data_transformed(input_value=90)\nPASS: transform_data_transformed(input_value=85)\nPASS: transform_data_transformed(input_value=100)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=5.492525281823727e-43)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=1.694787885662604e-243)\nPASS: circle_area_diff_transformed(r=4.0397970684223246e-117)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=11.067664541974398)\nPASS: circle_area_diff_transformed(r=13.165792289544031)\nPASS: circle_area_diff_transformed(r=14.90154081597012)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=15, b=1, c=1)\nPASS: triangle_checker_transformed(a=15, b=6, c=7)\nPASS: triangle_checker_transformed(a=2, b=8, c=19)\nPASS: triangle_checker_transformed(a=19, b=5, c=15)\nPASS: triangle_checker_transformed(a=10, b=7, c=8)\nPASS: triangle_checker_transformed(a=5, b=16, c=3)\nPASS: triangle_checker_transformed(a=12, b=1, c=8)\nPASS: triangle_checker_transformed(a=4, b=16, c=9)\nPASS: triangle_checker_transformed(a=18, b=15, c=11)\nPASS: triangle_checker_transformed(a=8, b=10, c=13)\nPASS: triangle_checker_transformed(a=13, b=10, c=13)\nPASS: triangle_checker_transformed(a=13, b=10, c=10)\nPASS: triangle_checker_transformed(a=10, b=10, c=10)\nPASS: triangle_checker_transformed(a=14, b=5, c=16)\nPASS: triangle_checker_transformed(a=14, b=5, c=5)\nPASS: triangle_checker_transformed(a=5, b=5, c=5)\nPASS: triangle_checker_transformed(a=5, b=4, c=7)\nPASS: triangle_checker_transformed(a=5, b=7, c=7)\nPASS: triangle_checker_transformed(a=5, b=7, c=5)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=17.984743291368126)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=35.99872562456037)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=21.890946398100326)\nPASS: temperature_offset_transformed(c=1.192092896e-07)\nPASS: temperature_offset_transformed(c=45.70358311722694)\nPASS: temperature_offset_transformed(c=3.7869237505997697)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=46.687528906610595)\nPASS: temperature_offset_transformed(c=4.2207953949654495)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=7, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=7, b=8, c=1)\nPASS: quadratic_discriminant_transformed(a=-9, b=8, c=-7)\nPASS: quadratic_discriminant_transformed(a=3, b=-1, c=-5)\nPASS: quadratic_discriminant_transformed(a=0, b=4, c=-5)\nPASS: quadratic_discriminant_transformed(a=9, b=6, c=3)\nPASS: quadratic_discriminant_transformed(a=10, b=-9, c=-2)\nPASS: quadratic_discriminant_transformed(a=-6, b=6, c=7)\nPASS: quadratic_discriminant_transformed(a=-1, b=8, c=-9)\nPASS: quadratic_discriminant_transformed(a=-9, b=-9, c=2)\nPASS: quadratic_discriminant_transformed(a=-9, b=2, c=2)\nPASS: quadratic_discriminant_transformed(a=-9, b=2, c=-9)\nPASS: quadratic_discriminant_transformed(a=-9, b=-9, c=-9)\nPASS: quadratic_discriminant_transformed(a=10, b=-1, c=-7)\nPASS: quadratic_discriminant_transformed(a=10, b=10, c=-7)\nPASS: quadratic_discriminant_transformed(a=-7, b=10, c=-7)\nPASS: quadratic_discriminant_transformed(a=10, b=10, c=10)\nPASS: quadratic_discriminant_transformed(a=4, b=-10, c=-10)\nPASS: quadratic_discriminant_transformed(a=-10, b=-10, c=-10)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-1.5, y=0.0)\nPASS: vector_norm_transformed(x=-1.5, y=1.401298464324817e-45)\nPASS: vector_norm_transformed(x=-1.1754943508222875e-38, y=0.99999)\nPASS: vector_norm_transformed(x=-2.225073858507203e-309, y=0.5)\nPASS: vector_norm_transformed(x=1.1, y=1e-05)\nPASS: vector_norm_transformed(x=5.7583425042522585, y=-0.99999)\nPASS: vector_norm_transformed(x=1.175494351e-38, y=1.5)\nPASS: vector_norm_transformed(x=6.4507491778801125, y=0.0)\nPASS: vector_norm_transformed(x=-1.1, y=-2.00001)\nPASS: vector_norm_transformed(x=1.401298464324817e-45, y=-5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-5.960464477539063e-08, y=-5.960464477539063e-08)\nPASS: vector_norm_transformed(x=2.2250738585e-313, y=-2.00001)\nPASS: vector_norm_transformed(x=-2.00001, y=-2.00001)\nPASS: vector_norm_transformed(x=0.0, y=-1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=-1.1125369292536007e-308, y=-1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=-5e-324, y=9.458818369992269)\nPASS: vector_norm_transformed(x=9.458818369992269, y=9.458818369992269)\nPASS: vector_norm_transformed(x=1.192092896e-07, y=-5.960464477539063e-08)\nPASS: vector_norm_transformed(x=9.999999999999998, y=-5e-324)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=9.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=9.0, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=6.117466472223011, b=2.200474041947427)\nPASS: hypotenuse_diff_transformed(a=5.221599431528442, b=1.1)\nPASS: hypotenuse_diff_transformed(a=7.264276645788125, b=1.0)\nPASS: hypotenuse_diff_transformed(a=2.4207960907204122, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=1.9024247195813472e-32)\nPASS: hypotenuse_diff_transformed(a=0.0, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=0.8528925213389128, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=9.0, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=1.5)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=2.339730567846628, b=1.0)\nPASS: hypotenuse_diff_transformed(a=1.0, b=1.0)\nPASS: hypotenuse_diff_transformed(a=0.0, b=9.420559900933425)\nPASS: hypotenuse_diff_transformed(a=9.420559900933425, b=9.420559900933425)\nPASS: hypotenuse_diff_transformed(a=10.0, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=10.0, b=10.0)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='0/0')\nPASS: ascii_average_transformed(s='b\u0099\u0001U')\nPASS: ascii_average_transformed(s='J\udad6\udc4dx')\nPASS: ascii_average_transformed(s='\uda4c\uddcb')\nPASS: ascii_average_transformed(s='\u00c9e\ud914\udc95\ud9bf\udf6c4')\nPASS: ascii_average_transformed(s=')e\u0091')\nPASS: ascii_average_transformed(s='\u0012')\nPASS: ascii_average_transformed(s='\u009f\u00dc%R\u0017\u00e4v\u0096\udbf7\ude46\f')\nPASS: ascii_average_transformed(s='\u0004')\nPASS: ascii_average_transformed(s='\u001b~')\nPASS: ascii_average_transformed(s='\uda2e\udf97Z\u0088\u0090\u00d2\u0137\uda2f\udca2u\uda27\udd1b\udb65\udd9a')\nPASS: ascii_average_transformed(s='\u009a')\nPASS: ascii_average_transformed(s='}\ud810\udeffN\u0017')\nPASS: ascii_average_transformed(s='[\u00bb}\u00b7\ud9af\udc19\u34af\bJ\u009f\udab2\uddfc')\nPASS: ascii_average_transformed(s='\ud9b2\udda8\u00c9\u0089]\udaed\uddc9')\nPASS: ascii_average_transformed(s='\u00b5')\nPASS: ascii_average_transformed(s='\u0018\u00b8w\u0005')\nPASS: ascii_average_transformed(s='c\udb14\udf08\u00d2C\u00a9|U\u00b9\udac1\udf11')\nPASS: ascii_average_transformed(s='NULL')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[5, 0])\nPASS: list_balance_transformed(nums=[7, 0])\nPASS: list_balance_transformed(nums=[7, 8, 4, 7])\nPASS: list_balance_transformed(nums=[1, 7, 9, 8])\nPASS: list_balance_transformed(nums=[7, 1, 7])\nPASS: list_balance_transformed(nums=[6, 8])\nPASS: list_balance_transformed(nums=[0, 9, 1, 5, 3, 7, 2, 6, 0, 3])\nPASS: list_balance_transformed(nums=[8, 2])\nPASS: list_balance_transformed(nums=[9, 5, 6, 2, 6, 4])\nPASS: list_balance_transformed(nums=[3, 9, 6, 8, 1, 5])\nPASS: list_balance_transformed(nums=[3, 9, 1, 8, 1, 5])\nPASS: list_balance_transformed(nums=[3, 9, 1, 1, 1, 5])\nPASS: list_balance_transformed(nums=[3, 1, 1, 1, 1, 5])\nPASS: list_balance_transformed(nums=[5, 1, 1, 1, 1, 5])\nPASS: list_balance_transformed(nums=[1, 1, 1, 1, 1, 5])\nPASS: list_balance_transformed(nums=[1, 5, 1, 1, 1, 5])\nPASS: list_balance_transformed(nums=[3, 5])\nPASS: list_balance_transformed(nums=[3, 3])\nPASS: list_balance_transformed(nums=[2, 2, 5, 10, 6, 1, 5, 2, 10, 2])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[7])\nPASS: odd_sum_validator_transformed(lst=[8, 10])\nPASS: odd_sum_validator_transformed(lst=[9, 8, 6, 5, 1, 8, 6])\nPASS: odd_sum_validator_transformed(lst=[5, 10, 0, 9, 7, 3, 4])\nPASS: odd_sum_validator_transformed(lst=[10, 9, 8, 2])\nPASS: odd_sum_validator_transformed(lst=[0, 6, 4, 0, 6, 8, 8, 9, 1, 3])\nPASS: odd_sum_validator_transformed(lst=[0, 2, 3, 1, 7, 4, 3])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[8, 8, 2])\nPASS: odd_sum_validator_transformed(lst=[8, 8, 8])\nPASS: odd_sum_validator_transformed(lst=[8, 8])\nPASS: odd_sum_validator_transformed(lst=[0, 5, 7, 0, 2, 3, 8, 3, 7, 7])\nPASS: odd_sum_validator_transformed(lst=[5, 5, 7, 0, 2, 3, 8, 3, 7, 7])\nPASS: odd_sum_validator_transformed(lst=[5, 5, 7, 7, 2, 3, 8, 3, 7, 7])\nPASS: odd_sum_validator_transformed(lst=[5, 5, 7, 7, 2, 3, 8, 8, 7, 7])\nPASS: odd_sum_validator_transformed(lst=[5, 5, 8, 7, 2, 3, 8, 8, 7, 7])\nPASS: odd_sum_validator_transformed(lst=[5, 3, 7, 7, 2, 3, 8, 8, 7, 7])\nPASS: odd_sum_validator_transformed(lst=[7, 3, 7, 7, 2, 3, 8, 8, 7, 7])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u0096\u0019\u00bafr\u00a9')\nPASS: string_pattern_score_transformed(s='\uda1c\udd83\ud882\udda8\u0017')\nPASS: string_pattern_score_transformed(s='h\u00cd\udb10\udfbd')\nPASS: string_pattern_score_transformed(s='\u17dc\u00b4\u000e')\nPASS: string_pattern_score_transformed(s='\u74d3\u00ae')\nPASS: string_pattern_score_transformed(s='\u00d6\u00b1\u00af\ud838\udd56\ud86e\udf42')\nPASS: string_pattern_score_transformed(s='\u00d5\\\u0019\u00b2i\u00c7\uda47\udc8b')\nPASS: string_pattern_score_transformed(s='x\u00ee$\ud95f\udd5ey\u00a3\u001e8\u0006i')\nPASS: string_pattern_score_transformed(s='\u0090~\u00b4\u00c51\n\udb3c\udc40\udaf0\udd5eK\u00d0')\nPASS: string_pattern_score_transformed(s='\udb03\udcfb&\u00d4\ud8eb\ude10\ud965\ude89\u00c0%\u00baM#')\nPASS: string_pattern_score_transformed(s='j\ud97e\udc92B@\udb83\udf1c\u00f3p\uda22\udcf7')\nPASS: string_pattern_score_transformed(s='\udb0e\udcd0')\nPASS: string_pattern_score_transformed(s='\u00c4\u00dc\udab8\udcd8w\uda99\udd9d\u00ebTg\u00b3I')\nPASS: string_pattern_score_transformed(s='\udb77\ude86\u0018\u0006U\u4a4e\ud95f\udd32\udbf2\udc22\u0083\ud844\udd3fE')\nPASS: string_pattern_score_transformed(s='\u00c1R\u000e\udaed\udfe3\u00b1\udb3e\udc2c')\nPASS: string_pattern_score_transformed(s='\udb56\udc65]\u0093')\nPASS: string_pattern_score_transformed(s='NULL')\nPASS: string_pattern_score_transformed(s='$\u00ecu[\ud9bb\udf8f\u008c?\uda30\udf7b\u00a3\u0099')\nPASS: string_pattern_score_transformed(s='\u0010\u00b7\uc2ac\u00ac\u00cf\u00ee\u0089\u00fa\u00e2')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[2])\nPASS: sum_until_limit_transformed(nums=[20])\nPASS: sum_until_limit_transformed(nums=[19])\nPASS: sum_until_limit_transformed(nums=[14])\nPASS: sum_until_limit_transformed(nums=[5, 11, 16, 12, 20])\nPASS: sum_until_limit_transformed(nums=[1])\nPASS: sum_until_limit_transformed(nums=[18, 8, 14, 5, 11, 20, 8, 17, 9, 6])\nPASS: sum_until_limit_transformed(nums=[3, 2, 15, 0, 2, 2, 9, 19, 15, 14])\nPASS: sum_until_limit_transformed(nums=[16, 16, 13, 8, 19, 19, 4, 5, 19])\nPASS: sum_until_limit_transformed(nums=[3])\nPASS: sum_until_limit_transformed(nums=[12, 12, 6, 19, 17, 14, 9, 8, 17, 0])\nPASS: sum_until_limit_transformed(nums=[12, 12, 6, 19, 17, 8, 9, 8, 17, 0])\nPASS: sum_until_limit_transformed(nums=[17, 12, 6, 19, 17, 8, 9, 8, 17, 0])\nPASS: sum_until_limit_transformed(nums=[17, 12, 6, 19, 8, 8, 9, 8, 17, 0])\nPASS: sum_until_limit_transformed(nums=[12, 12, 6, 19, 8, 8, 9, 8, 17, 0])\nPASS: sum_until_limit_transformed(nums=[12, 12, 6, 19, 8, 8, 9, 8])\nPASS: sum_until_limit_transformed(nums=[12, 12, 6, 19, 8, 8, 9, 6])\nPASS: sum_until_limit_transformed(nums=[1, 1])\nPASS: sum_until_limit_transformed(nums=[16])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[3])\nPASS: count_divisibles_transformed(nums=[1])\nPASS: count_divisibles_transformed(nums=[4, 7, 0, 10, 7])\nPASS: count_divisibles_transformed(nums=[13, 14, 13, 16, 2, 2, 4, 15])\nPASS: count_divisibles_transformed(nums=[0, 6, 13, 15, 3, 2, 10, 1, 2, 18])\nPASS: count_divisibles_transformed(nums=[10, 4, 1, 11, 2, 1, 5])\nPASS: count_divisibles_transformed(nums=[13])\nPASS: count_divisibles_transformed(nums=[11, 15, 11, 15])\nPASS: count_divisibles_transformed(nums=[7, 4, 10, 14])\nPASS: count_divisibles_transformed(nums=[5, 15])\nPASS: count_divisibles_transformed(nums=[15, 15])\nPASS: count_divisibles_transformed(nums=[15])\nPASS: count_divisibles_transformed(nums=[4])\nPASS: count_divisibles_transformed(nums=[6, 16, 13, 7, 17, 5])\nPASS: count_divisibles_transformed(nums=[6, 16, 13, 7, 17, 6])\nPASS: count_divisibles_transformed(nums=[6, 16, 13, 16, 17, 6])\nPASS: count_divisibles_transformed(nums=[6, 17, 13, 16, 17, 6])\nPASS: count_divisibles_transformed(nums=[6, 17, 13, 16, 6, 6])\nPASS: count_divisibles_transformed(nums=[16, 17, 13, 16, 17, 6])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[9])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[10, 6])\nPASS: index_weighted_sum_transformed(lst=[1, 4, 3])\nPASS: index_weighted_sum_transformed(lst=[10, 0, 9, 5, 10, 9, 6, 6, 1, 9])\nPASS: index_weighted_sum_transformed(lst=[9, 7, 10, 3, 7, 10, 9, 2, 5, 5])\nPASS: index_weighted_sum_transformed(lst=[7, 8, 6, 5, 4, 3, 0, 5, 7, 4])\nPASS: index_weighted_sum_transformed(lst=[4, 5, 9, 5, 2, 5, 2])\nPASS: index_weighted_sum_transformed(lst=[2, 9, 4, 10, 10, 3])\nPASS: index_weighted_sum_transformed(lst=[4])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[10, 6, 4, 10, 8, 7])\nPASS: index_weighted_sum_transformed(lst=[10, 4, 4, 10, 8, 7])\nPASS: index_weighted_sum_transformed(lst=[10, 10, 4, 10, 8, 7])\nPASS: index_weighted_sum_transformed(lst=[4, 10, 4, 10, 8, 7])\nPASS: index_weighted_sum_transformed(lst=[4, 4, 4, 10, 8, 7])\nPASS: index_weighted_sum_transformed(lst=[4, 4, 4, 4, 8, 7])\nPASS: index_weighted_sum_transformed(lst=[4, 7, 4, 4, 8, 7])\nPASS: index_weighted_sum_transformed(lst=[1])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=4)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00da\udbec\udf18P-h\ud848\udecd\u00a8\u008a6')\nPASS: character_counter_transformed(text='\u00ba\u000b')\nPASS: character_counter_transformed(text='\udb73\udddf\u0003')\nPASS: character_counter_transformed(text='\u00cf')\nPASS: character_counter_transformed(text='\u0085\u0000\u0011\udbb9\udc3c\u00f3\ud8bb\udf657\ud8e1\udcdd\udae7\udf93\udbb9\udcdb')\nPASS: character_counter_transformed(text='\u0007\u00f5\u00d7`\u00d0\ud96f\udce1\u001e\ufa8c\ud940\udc6e\udb2f\udcbd')\nPASS: character_counter_transformed(text='\u00b6\u008e\u00ee@')\nPASS: character_counter_transformed(text='False')\nPASS: character_counter_transformed(text='\u0011v\ud8e0\ude9f\ud9d1\udd61\u00f4!')\nPASS: character_counter_transformed(text='PuY\u007f')\nPASS: character_counter_transformed(text='\u00ea')\nPASS: character_counter_transformed(text='\uda73\uddf9\u001f')\nPASS: character_counter_transformed(text='True')\nPASS: character_counter_transformed(text='\u00c8')\nPASS: character_counter_transformed(text='\u00b0')\nPASS: character_counter_transformed(text='\u0005\u00d1\udb49\ude0a\u0010{\u009a\ud986\udcb7{\u0016\u00bb')\nPASS: character_counter_transformed(text='\b\u001f%\u00af\u00f6M\u0083\ud8b7\udd9a2\u00cb')\nPASS: character_counter_transformed(text='\u008bs\u00d6')\nPASS: character_counter_transformed(text='A')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[45])\nPASS: rolling_maximum_transformed(values=[60])\nPASS: rolling_maximum_transformed(values=[60, 62, 15])\nPASS: rolling_maximum_transformed(values=[69])\nPASS: rolling_maximum_transformed(values=[95, 70, 22, 25, 8, 51, 48])\nPASS: rolling_maximum_transformed(values=[42, 3, 93, 92, 40, 46, 9, 11, 86, 49])\nPASS: rolling_maximum_transformed(values=[5, 40])\nPASS: rolling_maximum_transformed(values=[61, 65, 78, 77, 36, 18, 87])\nPASS: rolling_maximum_transformed(values=[56, 92, 61, 63])\nPASS: rolling_maximum_transformed(values=[50, 17, 47, 32, 42, 44, 20, 44, 46, 88])\nPASS: rolling_maximum_transformed(values=[50, 17, 47, 32, 42, 44, 20, 50, 46, 88])\nPASS: rolling_maximum_transformed(values=[50, 17, 47, 32, 42, 44, 20, 47, 46, 88])\nPASS: rolling_maximum_transformed(values=[50, 17, 47, 32, 42, 44, 20, 47, 46, 46])\nPASS: rolling_maximum_transformed(values=[50, 17, 47, 47, 42, 44, 20, 47, 46, 46])\nPASS: rolling_maximum_transformed(values=[50, 17, 47, 47, 42, 44, 20, 47, 47, 46])\nPASS: rolling_maximum_transformed(values=[50, 17, 47, 47, 42, 44, 42, 47, 47, 46])\nPASS: rolling_maximum_transformed(values=[28])\nPASS: rolling_maximum_transformed(values=[52])\nPASS: rolling_maximum_transformed(values=[22, 6, 97, 57, 43, 95, 100, 73, 78, 15])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "square_accumulator": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=44)\nPASS: process_data_transformed(x=52)\nPASS: process_data_transformed(x=67)\nPASS: process_data_transformed(x=56)\nPASS: process_data_transformed(x=40)\nPASS: process_data_transformed(x=38)\nPASS: process_data_transformed(x=91)\nPASS: process_data_transformed(x=72)\nPASS: process_data_transformed(x=58)\nPASS: process_data_transformed(x=3)\nPASS: process_data_transformed(x=54)\nPASS: process_data_transformed(x=15)\nPASS: process_data_transformed(x=95)\nPASS: process_data_transformed(x=73)\nPASS: process_data_transformed(x=23)\nPASS: process_data_transformed(x=8)\nPASS: process_data_transformed(x=88)\nPASS: process_data_transformed(x=34)\nPASS: process_data_transformed(x=68)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=72.82149872251752)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=91.07226785014981)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=51.4233372053856)\nPASS: convert_temperature_transformed(c=57.847493583455126)\nPASS: convert_temperature_transformed(c=65.36979219196391)\nPASS: convert_temperature_transformed(c=97.41171117674668)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=1.2747819769811562e-179)\nPASS: convert_temperature_transformed(c=28.842423485535367)\nPASS: convert_temperature_transformed(c=31.141817028456735)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=6.103515625e-05, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=15.738647821489552, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=1.4163152096632616e-103)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-1.401298464324817e-45, imag=0.0)\nPASS: process_complex_number_transformed(real=2.225073858507203e-309, imag=0.0)\nPASS: process_complex_number_transformed(real=2.225073858507203e-309, imag=2.00001)\nPASS: process_complex_number_transformed(real=2.225073858507203e-309, imag=-19.0)\nPASS: process_complex_number_transformed(real=0.3333333333333333, imag=19.574395034434787)\nPASS: process_complex_number_transformed(real=-1.1, imag=-15.881556998636118)\nPASS: process_complex_number_transformed(real=2.2250738585072014e-308, imag=1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=-1e-05, imag=-1.175494351e-38)\nPASS: process_complex_number_transformed(real=0.99999, imag=1.175494351e-38)\nPASS: process_complex_number_transformed(real=-19.999999999999996, imag=1e-05)\nPASS: process_complex_number_transformed(real=-19.999999999999996, imag=-19.999999999999996)\nPASS: process_complex_number_transformed(real=2.2250738585072014e-308, imag=-2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-2.225073858507e-311, imag=-2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-4.041216154788337, imag=2.00001)\nPASS: process_complex_number_transformed(real=2.00001, imag=2.00001)\nPASS: process_complex_number_transformed(real=-0.5, imag=-5e-324)\nPASS: process_complex_number_transformed(real=-5e-324, imag=-5e-324)\nPASS: process_complex_number_transformed(real=2.2250738585072014e-308, imag=-16.7356817701076)\nPASS: process_complex_number_transformed(real=-16.7356817701076, imag=-16.7356817701076)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=62)\nPASS: transform_data_transformed(input_value=51)\nPASS: transform_data_transformed(input_value=28)\nPASS: transform_data_transformed(input_value=79)\nPASS: transform_data_transformed(input_value=9)\nPASS: transform_data_transformed(input_value=52)\nPASS: transform_data_transformed(input_value=56)\nPASS: transform_data_transformed(input_value=1)\nPASS: transform_data_transformed(input_value=31)\nPASS: transform_data_transformed(input_value=96)\nPASS: transform_data_transformed(input_value=49)\nPASS: transform_data_transformed(input_value=11)\nPASS: transform_data_transformed(input_value=90)\nPASS: transform_data_transformed(input_value=89)\nPASS: transform_data_transformed(input_value=85)\nPASS: transform_data_transformed(input_value=41)\nPASS: transform_data_transformed(input_value=53)\nPASS: transform_data_transformed(input_value=5)\nPASS: transform_data_transformed(input_value=71)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=4.625945155354679)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=8.770058151702075)\nPASS: circle_area_diff_transformed(r=11.026127867046743)\nPASS: circle_area_diff_transformed(r=18.000982438442307)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=0.9742978878629673)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=15.226667618976006)\nPASS: circle_area_diff_transformed(r=7.239059889629017)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=14, b=1, c=1)\nPASS: triangle_checker_transformed(a=14, b=13, c=1)\nPASS: triangle_checker_transformed(a=19, b=12, c=20)\nPASS: triangle_checker_transformed(a=1, b=3, c=5)\nPASS: triangle_checker_transformed(a=16, b=11, c=20)\nPASS: triangle_checker_transformed(a=6, b=7, c=20)\nPASS: triangle_checker_transformed(a=13, b=9, c=15)\nPASS: triangle_checker_transformed(a=4, b=15, c=16)\nPASS: triangle_checker_transformed(a=18, b=15, c=11)\nPASS: triangle_checker_transformed(a=3, b=8, c=1)\nPASS: triangle_checker_transformed(a=3, b=8, c=3)\nPASS: triangle_checker_transformed(a=3, b=8, c=8)\nPASS: triangle_checker_transformed(a=8, b=8, c=8)\nPASS: triangle_checker_transformed(a=18, b=6, c=7)\nPASS: triangle_checker_transformed(a=18, b=7, c=7)\nPASS: triangle_checker_transformed(a=18, b=7, c=18)\nPASS: triangle_checker_transformed(a=18, b=18, c=7)\nPASS: triangle_checker_transformed(a=18, b=18, c=18)\nPASS: triangle_checker_transformed(a=9, b=6, c=6)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=36.57214412053507)\nPASS: temperature_offset_transformed(c=50.681636970214385)\nPASS: temperature_offset_transformed(c=91.57613285226233)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=39.139201240742274)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=67.34585240468215)\nPASS: temperature_offset_transformed(c=20.23839825226424)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-6, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-6, b=-9, c=1)\nPASS: quadratic_discriminant_transformed(a=-8, b=7, c=-7)\nPASS: quadratic_discriminant_transformed(a=3, b=-3, c=0)\nPASS: quadratic_discriminant_transformed(a=-4, b=3, c=-9)\nPASS: quadratic_discriminant_transformed(a=-4, b=9, c=1)\nPASS: quadratic_discriminant_transformed(a=-7, b=6, c=-9)\nPASS: quadratic_discriminant_transformed(a=0, b=-5, c=5)\nPASS: quadratic_discriminant_transformed(a=10, b=-7, c=9)\nPASS: quadratic_discriminant_transformed(a=4, b=-8, c=-2)\nPASS: quadratic_discriminant_transformed(a=4, b=-8, c=4)\nPASS: quadratic_discriminant_transformed(a=-8, b=-8, c=4)\nPASS: quadratic_discriminant_transformed(a=-8, b=-8, c=-8)\nPASS: quadratic_discriminant_transformed(a=3, b=9, c=9)\nPASS: quadratic_discriminant_transformed(a=9, b=9, c=9)\nPASS: quadratic_discriminant_transformed(a=8, b=5, c=10)\nPASS: quadratic_discriminant_transformed(a=8, b=8, c=10)\nPASS: quadratic_discriminant_transformed(a=8, b=10, c=10)\nPASS: quadratic_discriminant_transformed(a=8, b=10, c=8)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-2.2250738585072014e-308, y=0.0)\nPASS: vector_norm_transformed(x=-2.2250738585072014e-308, y=9.0)\nPASS: vector_norm_transformed(x=1e-05, y=2.225073858507203e-309)\nPASS: vector_norm_transformed(x=-1.1125369292536007e-308, y=-0.3333333333333333)\nPASS: vector_norm_transformed(x=-5.960464477539063e-08, y=1.1)\nPASS: vector_norm_transformed(x=-4.944814980764002e-299, y=0.99999)\nPASS: vector_norm_transformed(x=9.190051487176476, y=-0.0)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=-2.00001)\nPASS: vector_norm_transformed(x=4.1939733233903915, y=6.682603825466514e-101)\nPASS: vector_norm_transformed(x=-4.034288588273215, y=2.00001)\nPASS: vector_norm_transformed(x=2.00001, y=2.00001)\nPASS: vector_norm_transformed(x=-1.1754943508222875e-38, y=2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=2.2250738585072014e-308, y=2.2250738585072014e-308)\nPASS: vector_norm_transformed(x=-1.9, y=0.99999)\nPASS: vector_norm_transformed(x=0.99999, y=0.99999)\nPASS: vector_norm_transformed(x=2.225073858507e-311, y=1.9)\nPASS: vector_norm_transformed(x=2.225073858507e-311, y=2.225073858507e-311)\nPASS: vector_norm_transformed(x=-2.2250738585e-313, y=2.4655519065882388)\nPASS: vector_norm_transformed(x=2.4655519065882388, y=2.4655519065882388)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=0.0, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=1.0, b=10.0)\nPASS: hypotenuse_diff_transformed(a=1.969674535592008, b=0.5)\nPASS: hypotenuse_diff_transformed(a=0.0, b=10.0)\nPASS: hypotenuse_diff_transformed(a=1.0, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=2.2250738585e-313)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=4.251716583266284)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=1.9, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=3.495298986135085, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=9.0, b=5e-324)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u00f3\ud834\udd9b]f\ud8d9\ude2e\u00c1\u0096\ud981\udebdF\n')\nPASS: ascii_average_transformed(s='\u000f')\nPASS: ascii_average_transformed(s='\u0000$')\nPASS: ascii_average_transformed(s='\u00c6k')\nPASS: ascii_average_transformed(s='\udb27\ude0e\u00be\u007f\ud9e5\udc52\udbc2\udcf7')\nPASS: ascii_average_transformed(s='\u0012\u00c2n')\nPASS: ascii_average_transformed(s='je\u00af\ud9da\udc17\u00a4')\nPASS: ascii_average_transformed(s='\u008f\u00aa\u00da\u001e\u00a4\udbfa\uddf5\uda84\udd81\ud86c\uded9\u00cd\u00ca')\nPASS: ascii_average_transformed(s='l4+T\u009f\u0085\u00eb\u00ee;\u008b')\nPASS: ascii_average_transformed(s='45\u00e3&\ud976\ude5e\u00b5\u00b7\u00a7')\nPASS: ascii_average_transformed(s='\t\u00f02n\ud88c\ude19\u00ba_s]\ud8e2\udf78')\nPASS: ascii_average_transformed(s='\ud89a\ude30\u0096\udbbe\udd27\u17f6\u008a\ud973\udee2\u00c1\u00e3\u001d\u00e9')\nPASS: ascii_average_transformed(s='\ud89c\udecd=')\nPASS: ascii_average_transformed(s='\u6d80')\nPASS: ascii_average_transformed(s='\udb50\udfad\u00fc\uda79\udfaf')\nPASS: ascii_average_transformed(s='\u0097')\nPASS: ascii_average_transformed(s='\n\\\u00a5\ud824\uddd1`^\u00c9\uda21\uddec\u00cc\u0094')\nPASS: ascii_average_transformed(s='\u00e7_(\u0091\u00e2\ud9d4\udc09<\udb33\udf26\u0003')\nPASS: ascii_average_transformed(s='\udb25\udf30\udbc9\udd87LI\u00f2\u00a7')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[4, 0])\nPASS: list_balance_transformed(nums=[4, 4, 8, 10, 9])\nPASS: list_balance_transformed(nums=[9, 2, 10, 10, 6])\nPASS: list_balance_transformed(nums=[6, 4, 10, 3, 3, 5, 2])\nPASS: list_balance_transformed(nums=[0, 6, 1, 10, 1, 10, 1])\nPASS: list_balance_transformed(nums=[4, 3, 5, 5, 8, 10, 4, 9, 0, 2])\nPASS: list_balance_transformed(nums=[2, 2, 4, 5, 8, 0])\nPASS: list_balance_transformed(nums=[9, 10, 10, 3, 8, 7, 1, 3])\nPASS: list_balance_transformed(nums=[9, 3])\nPASS: list_balance_transformed(nums=[10, 4, 1, 9, 0, 9, 2, 8, 8, 10])\nPASS: list_balance_transformed(nums=[10, 4, 1, 9, 0, 9, 10, 8, 8, 10])\nPASS: list_balance_transformed(nums=[10, 4, 10, 9, 0, 9, 10, 8, 8, 10])\nPASS: list_balance_transformed(nums=[10, 4, 10, 9, 0, 9, 8, 8, 8, 10])\nPASS: list_balance_transformed(nums=[4, 4, 10, 9, 0, 9, 8, 8, 8, 10])\nPASS: list_balance_transformed(nums=[4, 4, 10, 8, 0, 9, 8, 8, 8, 10])\nPASS: list_balance_transformed(nums=[4, 4, 10, 8, 0, 8, 8, 8, 8, 10])\nPASS: list_balance_transformed(nums=[3, 2, 2, 5, 1, 5, 2, 4, 7])\nPASS: list_balance_transformed(nums=[3, 2, 5, 5, 1, 5, 2, 4, 7])\nPASS: list_balance_transformed(nums=[3, 2, 5, 5, 1, 5, 2, 4, 5])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[5, 0])\nPASS: odd_sum_validator_transformed(lst=[2, 1])\nPASS: odd_sum_validator_transformed(lst=[8, 2, 9, 4])\nPASS: odd_sum_validator_transformed(lst=[1, 3, 1, 9, 6, 3, 0, 0, 0, 0])\nPASS: odd_sum_validator_transformed(lst=[10, 5, 0])\nPASS: odd_sum_validator_transformed(lst=[5, 6, 0, 9, 5])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[3, 7, 6, 6, 10, 4, 5])\nPASS: odd_sum_validator_transformed(lst=[0, 5, 1, 2, 2, 1, 2])\nPASS: odd_sum_validator_transformed(lst=[0, 5, 1, 2, 2, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[0, 0, 1, 2, 2, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[1, 0, 1, 2, 2, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[1, 0, 2, 2, 2, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[2, 0, 2, 2, 2, 0, 2])\nPASS: odd_sum_validator_transformed(lst=[2, 0])\nPASS: odd_sum_validator_transformed(lst=[1])\nPASS: odd_sum_validator_transformed(lst=[5, 0, 6, 1, 5, 6, 2, 8, 7, 7])\nPASS: odd_sum_validator_transformed(lst=[5, 0, 6, 2, 5, 6, 2, 8, 7, 7])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u00b8\u00ce\u0017f')\nPASS: string_pattern_score_transformed(s='\u0089\u0005>\u0097\u00f6')\nPASS: string_pattern_score_transformed(s='\u00a5\udb76\ude23\u00c8\u0082\ud9df\udcf5,\u00f1\u0089nb')\nPASS: string_pattern_score_transformed(s='False')\nPASS: string_pattern_score_transformed(s='\ud885\ude78')\nPASS: string_pattern_score_transformed(s='NULL')\nPASS: string_pattern_score_transformed(s='\u00c0\u00c0\u00e9\u00a4;')\nPASS: string_pattern_score_transformed(s='\ud9e9\udca7\u0017')\nPASS: string_pattern_score_transformed(s='|\u00a7')\nPASS: string_pattern_score_transformed(s='\ud9a5\udcf3\u0010c')\nPASS: string_pattern_score_transformed(s='\u0013\u008f\u00b2\u00ec\u0004\u00f0|\u0013qy')\nPASS: string_pattern_score_transformed(s='\u0096\ud8fc\udda7\u0010\u00129?\u008a')\nPASS: string_pattern_score_transformed(s='~\ud8b9\udcb2\u00cbPZ\ud9f6\udf77\udbe8\udfb7\udbdf\ude10\u00e3\n')\nPASS: string_pattern_score_transformed(s='else')\nPASS: string_pattern_score_transformed(s='\u4dae\u00f1')\nPASS: string_pattern_score_transformed(s='\u009f4\u009d@O\udaf6\uddae\\\u00c9\u0089')\nPASS: string_pattern_score_transformed(s='\u0080_\u00cf')\nPASS: string_pattern_score_transformed(s='\ud95c\udca4\f\uda34\uddb9\u64a8\u00a3')\nPASS: string_pattern_score_transformed(s='\u000f\u00c5\udbb5\udc357')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[1])\nPASS: sum_until_limit_transformed(nums=[10])\nPASS: sum_until_limit_transformed(nums=[15, 4])\nFAIL: sum_until_limit_transformed(nums=[3, 15, 11, 8, 14, 7, 20, 17, 17])\nPASS: sum_until_limit_transformed(nums=[18, 5, 15])\nPASS: sum_until_limit_transformed(nums=[10, 5, 14, 11, 18, 6, 7])\nPASS: sum_until_limit_transformed(nums=[8, 14, 2, 13, 6, 17, 4, 10, 7, 6])\nPASS: sum_until_limit_transformed(nums=[6])\nPASS: sum_until_limit_transformed(nums=[16, 2, 19, 11, 12, 6, 13, 12, 13, 17])\nPASS: sum_until_limit_transformed(nums=[20, 2, 9, 4, 5, 6, 0, 17])\nPASS: sum_until_limit_transformed(nums=[20, 2, 6, 4, 5, 6, 0, 17])\nPASS: sum_until_limit_transformed(nums=[20, 2, 6, 20, 5, 6, 0, 17])\nPASS: sum_until_limit_transformed(nums=[20, 17, 6, 20, 5, 6, 0, 17])\nPASS: sum_until_limit_transformed(nums=[20, 17, 6, 20, 5, 6, 17, 17])\nPASS: sum_until_limit_transformed(nums=[3])\nPASS: sum_until_limit_transformed(nums=[8])\nPASS: sum_until_limit_transformed(nums=[6, 11, 20, 7])\nPASS: sum_until_limit_transformed(nums=[11, 11, 20, 7])\nPASS: sum_until_limit_transformed(nums=[7, 11, 20, 7])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[7])\nPASS: count_divisibles_transformed(nums=[7, 13])\nPASS: count_divisibles_transformed(nums=[17, 18, 16, 17, 18, 3, 2, 17, 2, 8])\nPASS: count_divisibles_transformed(nums=[17])\nPASS: count_divisibles_transformed(nums=[11, 14, 2, 15, 20, 19, 2, 13, 14, 15])\nPASS: count_divisibles_transformed(nums=[5, 12, 17, 17, 5, 3, 7, 10, 13, 6])\nPASS: count_divisibles_transformed(nums=[19, 12, 10, 20, 5, 20])\nPASS: count_divisibles_transformed(nums=[12, 9, 20, 2, 9])\nPASS: count_divisibles_transformed(nums=[17, 9, 15, 6])\nPASS: count_divisibles_transformed(nums=[2, 14, 17, 20, 5])\nPASS: count_divisibles_transformed(nums=[2, 17, 17, 20, 5])\nPASS: count_divisibles_transformed(nums=[20, 17, 17, 20, 5])\nPASS: count_divisibles_transformed(nums=[20, 17])\nPASS: count_divisibles_transformed(nums=[20, 20])\nPASS: count_divisibles_transformed(nums=[20])\nPASS: count_divisibles_transformed(nums=[19])\nPASS: count_divisibles_transformed(nums=[1])\nPASS: count_divisibles_transformed(nums=[12])\nPASS: count_divisibles_transformed(nums=[17, 13, 1, 17, 11, 2, 17, 4, 12, 14])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[4])\nPASS: index_weighted_sum_transformed(lst=[3])\nPASS: index_weighted_sum_transformed(lst=[2, 9, 8, 6])\nPASS: index_weighted_sum_transformed(lst=[8, 9, 2, 5, 4, 4])\nPASS: index_weighted_sum_transformed(lst=[3, 7, 0, 0, 7, 5, 9, 1])\nPASS: index_weighted_sum_transformed(lst=[8])\nPASS: index_weighted_sum_transformed(lst=[4, 7, 6, 7, 3, 8, 7, 1, 2, 0])\nPASS: index_weighted_sum_transformed(lst=[3, 0, 2])\nPASS: index_weighted_sum_transformed(lst=[8, 6, 2])\nPASS: index_weighted_sum_transformed(lst=[7, 2])\nPASS: index_weighted_sum_transformed(lst=[2, 2])\nPASS: index_weighted_sum_transformed(lst=[6, 1, 5, 10, 4, 5, 8, 3, 8, 7])\nPASS: index_weighted_sum_transformed(lst=[5, 1, 5, 10, 4, 5, 8, 3, 8, 7])\nPASS: index_weighted_sum_transformed(lst=[5, 5, 5, 10, 4, 5, 8, 3, 8, 7])\nPASS: index_weighted_sum_transformed(lst=[5, 5, 5, 10, 8, 5, 8, 3, 8, 7])\nPASS: index_weighted_sum_transformed(lst=[5, 5, 3, 10, 8, 5, 8, 3, 8, 7])\nPASS: index_weighted_sum_transformed(lst=[5, 5, 3, 10, 8, 5, 8, 3, 8, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 5, 3, 10, 5, 5, 8, 3, 8, 5])\nPASS: index_weighted_sum_transformed(lst=[0, 1, 8])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=4)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00a2\u0089!Y\u009aa\udac3\ude54\u00f8\u00c9')\nPASS: character_counter_transformed(text='\u00ca\udbcc\udf27!')\nPASS: character_counter_transformed(text='Y^\ud821\udcf2]g\u0019')\nPASS: character_counter_transformed(text='\u0087\n\u0087\u00d4')\nPASS: character_counter_transformed(text=':\u0005\u00ff\u00d9y\f\u00f7\u00a9\u000br')\nPASS: character_counter_transformed(text='\u00d3\n-L\u00f7\ud823\udc80\uda45\udc2c3\ud8ab\udf71\u00cd')\nPASS: character_counter_transformed(text='INF')\nPASS: character_counter_transformed(text='j\u00fc')\nPASS: character_counter_transformed(text='=')\nPASS: character_counter_transformed(text='I')\nPASS: character_counter_transformed(text='X\t\u0013ezU{\ud947\udeb3kh')\nPASS: character_counter_transformed(text='\u00c02')\nPASS: character_counter_transformed(text='\u00a5A\uda50\udfdf\ud979\uddf3\u0091\ud822\udd4f\u00bb')\nPASS: character_counter_transformed(text='f\u0094\u00f4\udb8f\udd4e')\nPASS: character_counter_transformed(text='\u000f\ud88e\uddd3y\u0006\udbc8\udcd9n\u009c\ud825\ude57Z')\nPASS: character_counter_transformed(text='^e&\u00d8\u00f7\u00b0\u0098\u0017\u00d5-')\nPASS: character_counter_transformed(text='\u008d\u009a')\nPASS: character_counter_transformed(text='}\ud9e2\udd1aQ\u00a6\u00beE\u00c2')\nPASS: character_counter_transformed(text='\u0099\u000f')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[67])\nPASS: rolling_maximum_transformed(values=[3])\nPASS: rolling_maximum_transformed(values=[45, 80, 41, 73])\nPASS: rolling_maximum_transformed(values=[42, 64, 87, 86])\nPASS: rolling_maximum_transformed(values=[73, 24])\nPASS: rolling_maximum_transformed(values=[38])\nPASS: rolling_maximum_transformed(values=[40, 19, 73, 80, 77, 90, 89, 1, 65, 87])\nPASS: rolling_maximum_transformed(values=[51, 88, 52, 77, 8])\nPASS: rolling_maximum_transformed(values=[20, 49, 72, 61, 96, 87, 45, 58, 43])\nPASS: rolling_maximum_transformed(values=[44, 3, 18, 24, 22, 14, 56, 20, 41, 62])\nPASS: rolling_maximum_transformed(values=[44, 3, 18, 24, 22, 22, 56, 20, 41, 62])\nPASS: rolling_maximum_transformed(values=[44, 22, 18, 24, 22, 22, 56, 20, 41, 62])\nPASS: rolling_maximum_transformed(values=[44, 22, 18, 24, 22, 22, 56, 22, 41, 62])\nPASS: rolling_maximum_transformed(values=[44, 22, 18, 24, 22, 22, 22, 22, 41, 62])\nPASS: rolling_maximum_transformed(values=[44, 22, 18, 24, 22])\nPASS: rolling_maximum_transformed(values=[44, 22, 18, 24, 44])\nPASS: rolling_maximum_transformed(values=[2, 72, 61, 79, 23, 1])\nPASS: rolling_maximum_transformed(values=[2, 23, 61, 79, 23, 1])\nPASS: rolling_maximum_transformed(values=[2, 23, 61, 1, 23, 1])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "nested_loop_checker": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=25)\nPASS: process_data_transformed(x=45)\nPASS: process_data_transformed(x=33)\nPASS: process_data_transformed(x=42)\nPASS: process_data_transformed(x=6)\nPASS: process_data_transformed(x=51)\nPASS: process_data_transformed(x=70)\nPASS: process_data_transformed(x=66)\nPASS: process_data_transformed(x=69)\nPASS: process_data_transformed(x=34)\nPASS: process_data_transformed(x=26)\nPASS: process_data_transformed(x=98)\nPASS: process_data_transformed(x=21)\nPASS: process_data_transformed(x=18)\nPASS: process_data_transformed(x=62)\nPASS: process_data_transformed(x=84)\nPASS: process_data_transformed(x=24)\nPASS: process_data_transformed(x=82)\nPASS: process_data_transformed(x=99)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=50.95777930601012)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=59.65132165337833)\nPASS: convert_temperature_transformed(c=39.701553700720694)\nPASS: convert_temperature_transformed(c=65.90465025839453)\nPASS: convert_temperature_transformed(c=36.96386408501682)\nPASS: convert_temperature_transformed(c=0.99999)\nPASS: convert_temperature_transformed(c=32.61182527344245)\nPASS: convert_temperature_transformed(c=63.296625570028006)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=100.0)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=44.476018504302196)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1e-05, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=2.2250738585e-313)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=0.3333333333333333)\nPASS: calculate_discount_transformed(price=1.5, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=0.7142498572425747)\nPASS: calculate_discount_transformed(price=1.5, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=199.99999999999997, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=200.0, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=200.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=174.6165005427956, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=1.401298464324817e-45)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=6.103515625e-05, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=2.2250738585e-313)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-2.225073858507203e-309, imag=0.0)\nPASS: process_complex_number_transformed(real=-2.225073858507203e-309, imag=-0.99999)\nPASS: process_complex_number_transformed(real=-0.99999, imag=5e-324)\nPASS: process_complex_number_transformed(real=-7.594953869530306, imag=1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=-5.960464477539063e-08, imag=2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-2.2250738585072014e-308, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-2.225073858507203e-309, imag=-1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=-5.877589259490186, imag=-19.999999999999996)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=-2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=1.192092896e-07, imag=-0.3333333333333333)\nPASS: process_complex_number_transformed(real=-0.3333333333333333, imag=-0.3333333333333333)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=1.9)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=6.103515625e-05)\nPASS: process_complex_number_transformed(real=-1.1, imag=19.999999999999996)\nPASS: process_complex_number_transformed(real=19.999999999999996, imag=19.999999999999996)\nPASS: process_complex_number_transformed(real=-5.960464477539063e-08, imag=1.9)\nPASS: process_complex_number_transformed(real=1.9, imag=1.9)\nPASS: process_complex_number_transformed(real=1.401298464324817e-45, imag=19.0)\nPASS: process_complex_number_transformed(real=19.0, imag=19.0)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=96)\nPASS: transform_data_transformed(input_value=38)\nPASS: transform_data_transformed(input_value=73)\nPASS: transform_data_transformed(input_value=77)\nPASS: transform_data_transformed(input_value=90)\nPASS: transform_data_transformed(input_value=40)\nPASS: transform_data_transformed(input_value=91)\nPASS: transform_data_transformed(input_value=65)\nPASS: transform_data_transformed(input_value=44)\nPASS: transform_data_transformed(input_value=25)\nPASS: transform_data_transformed(input_value=61)\nPASS: transform_data_transformed(input_value=88)\nPASS: transform_data_transformed(input_value=28)\nPASS: transform_data_transformed(input_value=35)\nPASS: transform_data_transformed(input_value=29)\nPASS: transform_data_transformed(input_value=47)\nPASS: transform_data_transformed(input_value=15)\nPASS: transform_data_transformed(input_value=79)\nPASS: transform_data_transformed(input_value=14)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=13.388709045806204)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: circle_area_diff_transformed(r=1.964722326183962e-155)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=16.323857741701737)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=5.752173328872217)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=14.794971239359722)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=18.898320482234578)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=12.430666313904537)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=7, b=1, c=1)\nPASS: triangle_checker_transformed(a=7, b=10, c=16)\nPASS: triangle_checker_transformed(a=1, b=8, c=6)\nPASS: triangle_checker_transformed(a=15, b=13, c=2)\nPASS: triangle_checker_transformed(a=19, b=1, c=4)\nPASS: triangle_checker_transformed(a=3, b=9, c=1)\nPASS: triangle_checker_transformed(a=5, b=6, c=9)\nPASS: triangle_checker_transformed(a=2, b=16, c=3)\nPASS: triangle_checker_transformed(a=8, b=3, c=16)\nPASS: triangle_checker_transformed(a=17, b=19, c=2)\nPASS: triangle_checker_transformed(a=2, b=19, c=2)\nPASS: triangle_checker_transformed(a=2, b=2, c=2)\nPASS: triangle_checker_transformed(a=10, b=13, c=12)\nPASS: triangle_checker_transformed(a=10, b=13, c=13)\nPASS: triangle_checker_transformed(a=13, b=13, c=13)\nPASS: triangle_checker_transformed(a=15, b=15, c=12)\nPASS: triangle_checker_transformed(a=15, b=15, c=15)\nPASS: triangle_checker_transformed(a=5, b=12, c=20)\nPASS: triangle_checker_transformed(a=20, b=12, c=20)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=59.83271991771987)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=74.14124373402916)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=61.50650390970321)\nPASS: temperature_offset_transformed(c=54.937909035685664)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=48.52966983788621)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=19.57316623437247)\nPASS: temperature_offset_transformed(c=93.19365124058506)\nPASS: temperature_offset_transformed(c=1.0225321167246913e-61)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-9, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-9, b=-6, c=6)\nPASS: quadratic_discriminant_transformed(a=9, b=0, c=-1)\nPASS: quadratic_discriminant_transformed(a=5, b=0, c=9)\nPASS: quadratic_discriminant_transformed(a=9, b=1, c=-6)\nPASS: quadratic_discriminant_transformed(a=10, b=1, c=4)\nPASS: quadratic_discriminant_transformed(a=-9, b=-8, c=-4)\nPASS: quadratic_discriminant_transformed(a=-7, b=-1, c=-5)\nPASS: quadratic_discriminant_transformed(a=8, b=-2, c=-5)\nPASS: quadratic_discriminant_transformed(a=1, b=9, c=-8)\nPASS: quadratic_discriminant_transformed(a=-8, b=9, c=-8)\nPASS: quadratic_discriminant_transformed(a=-8, b=9, c=9)\nPASS: quadratic_discriminant_transformed(a=-8, b=-8, c=9)\nPASS: quadratic_discriminant_transformed(a=-8, b=-8, c=-8)\nPASS: quadratic_discriminant_transformed(a=-10, b=7, c=8)\nPASS: quadratic_discriminant_transformed(a=-10, b=8, c=8)\nPASS: quadratic_discriminant_transformed(a=8, b=8, c=8)\nPASS: quadratic_discriminant_transformed(a=-4, b=-3, c=8)\nPASS: quadratic_discriminant_transformed(a=-4, b=-4, c=8)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-0.40530823417926065, y=0.0)\nPASS: vector_norm_transformed(x=-0.40530823417926065, y=0.99999)\nPASS: vector_norm_transformed(x=5e-324, y=2.3398397870074223)\nPASS: vector_norm_transformed(x=-5e-324, y=1.5)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=-1.5)\nPASS: vector_norm_transformed(x=1.1125369292536007e-308, y=2.225073858507e-311)\nPASS: vector_norm_transformed(x=1e-05, y=0.3333333333333333)\nPASS: vector_norm_transformed(x=5e-324, y=0.3333333333333333)\nPASS: vector_norm_transformed(x=-1.401298464324817e-45, y=1.6942679705485837)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=-2.00001)\nPASS: vector_norm_transformed(x=2.225073858507203e-309, y=2.225073858507203e-309)\nPASS: vector_norm_transformed(x=9.0, y=10.0)\nPASS: vector_norm_transformed(x=9.0, y=9.0)\nPASS: vector_norm_transformed(x=-2.225073858507e-311, y=-1.2548936724047337)\nPASS: vector_norm_transformed(x=-1.2548936724047337, y=-1.2548936724047337)\nPASS: vector_norm_transformed(x=2.225073858507e-311, y=-1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=2.225073858507e-311, y=2.225073858507e-311)\nPASS: vector_norm_transformed(x=1.175494351e-38, y=1.175494351e-38)\nPASS: vector_norm_transformed(x=-2.220446049250313e-16, y=-1.1)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=3.6902605768497247, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=1.2070321712712808, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=1.9)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=2.7816672369854327)\nPASS: hypotenuse_diff_transformed(a=2.2250738585e-313, b=5.353543426880184)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=1.0)\nPASS: hypotenuse_diff_transformed(a=7.7030283454115445, b=5.782200599935688)\nPASS: hypotenuse_diff_transformed(a=5.782200599935688, b=5.782200599935688)\nPASS: hypotenuse_diff_transformed(a=6.3170055767159585, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=6.3170055767159585, b=6.3170055767159585)\nPASS: hypotenuse_diff_transformed(a=1.0, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=1.0)\nPASS: hypotenuse_diff_transformed(a=1.0, b=1.0)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=9.0)\nPASS: hypotenuse_diff_transformed(a=9.0, b=9.0)\nPASS: hypotenuse_diff_transformed(a=0.5, b=2.2250738585e-313)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u008e')\nPASS: ascii_average_transformed(s='Y\u0085O*\ud9b0\udf56\u00f9')\nPASS: ascii_average_transformed(s='\bL')\nPASS: ascii_average_transformed(s='\u00ab\u00bf\ud9aa\ude03\u00d2\u001b)G\u0088\u00f1\u0085')\nPASS: ascii_average_transformed(s='\u0007')\nPASS: ascii_average_transformed(s='y\udadb\udcb5S\u00c0\u008d#a#\udb97\udc81d')\nPASS: ascii_average_transformed(s='\u00eb\udb58\udea4\udbff\udc26')\nPASS: ascii_average_transformed(s='\u008fm\u0088_t\u00d4')\nPASS: ascii_average_transformed(s='\u001b\ud959\udea3!')\nPASS: ascii_average_transformed(s='\u00ed\ud8cb\udc94\u5e25\u009f')\nPASS: ascii_average_transformed(s='\u00f75\ud9ed\uddc7yv\u00d0\ud97d\udf61\udaaa\udfa1')\nPASS: ascii_average_transformed(s='\udb46\ude14\u00cb\u009d\ud97a\udfcc\u00fdO\u00c5\u000e\u00fa')\nPASS: ascii_average_transformed(s='\u00e6')\nPASS: ascii_average_transformed(s='\udbec\udd8b\u008b\udb2b\udc98C\ud8cc\udd5f')\nPASS: ascii_average_transformed(s='d\u00c2<')\nPASS: ascii_average_transformed(s='\ud867\udf80\ud990\udd80\uda3c\udfb8\u00e5')\nPASS: ascii_average_transformed(s='\u0003\u00a1S\u00ec\u00cf')\nPASS: ascii_average_transformed(s='\u001b\u001e\u009e{\u00a4\u00ed\u00fa\ud8f1\uddf7\u00fe\u00f7')\nPASS: ascii_average_transformed(s='\u00e9?\u00f9\u00fd\ud9fa\udf52\u0014\u0098\u0013')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[7, 0])\nPASS: list_balance_transformed(nums=[7, 8, 9, 5, 8, 6, 9])\nPASS: list_balance_transformed(nums=[7, 3, 6, 10, 4, 8, 6, 9])\nPASS: list_balance_transformed(nums=[8, 2, 1, 1])\nPASS: list_balance_transformed(nums=[10, 10, 1, 0, 9, 1])\nPASS: list_balance_transformed(nums=[2, 6, 9, 6, 7, 0, 9, 10, 9])\nPASS: list_balance_transformed(nums=[2, 8, 3, 2, 7, 8, 3])\nPASS: list_balance_transformed(nums=[1, 4, 1, 8, 9, 1, 1, 9, 4, 4])\nPASS: list_balance_transformed(nums=[9, 5, 0, 9])\nPASS: list_balance_transformed(nums=[3, 6, 9, 2, 0, 2, 0, 1, 1, 0])\nPASS: list_balance_transformed(nums=[3, 6, 9, 2, 0, 2, 0, 1, 1, 2])\nPASS: list_balance_transformed(nums=[3, 6, 9, 2, 0, 0, 0, 1, 1, 2])\nPASS: list_balance_transformed(nums=[0, 6, 9, 2, 0, 0, 0, 1, 1, 2])\nPASS: list_balance_transformed(nums=[0, 6, 9, 1, 0, 0, 0, 1, 1, 2])\nPASS: list_balance_transformed(nums=[0, 6, 9, 1, 0, 0, 0, 0, 1, 2])\nPASS: list_balance_transformed(nums=[0, 0, 9, 1, 0, 0, 0, 0, 1, 2])\nPASS: list_balance_transformed(nums=[0, 1, 0, 0, 10, 4, 7, 10, 0, 5])\nPASS: list_balance_transformed(nums=[0, 1, 0, 0, 10, 4, 7])\nPASS: list_balance_transformed(nums=[0, 1, 0, 4, 10, 4, 7])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[10, 4, 3])\nPASS: odd_sum_validator_transformed(lst=[6, 9, 6, 9, 9, 5, 4, 4, 4, 5])\nPASS: odd_sum_validator_transformed(lst=[0, 4, 5, 8, 8, 5, 6, 5, 4, 7])\nPASS: odd_sum_validator_transformed(lst=[1, 0])\nPASS: odd_sum_validator_transformed(lst=[8, 8])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[10, 1, 5])\nPASS: odd_sum_validator_transformed(lst=[10, 4])\nPASS: odd_sum_validator_transformed(lst=[9, 3])\nPASS: odd_sum_validator_transformed(lst=[9, 9])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[0, 0, 5, 10, 5, 2])\nPASS: odd_sum_validator_transformed(lst=[0, 0, 5, 10, 10, 2])\nPASS: odd_sum_validator_transformed(lst=[0, 0, 5, 10, 10, 0])\nPASS: odd_sum_validator_transformed(lst=[0, 0, 5, 10, 10])\nPASS: odd_sum_validator_transformed(lst=[0, 0, 0, 10, 10])\nPASS: odd_sum_validator_transformed(lst=[0, 0, 0, 0, 10])\nPASS: odd_sum_validator_transformed(lst=[10, 5, 6, 10])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u001e')\nPASS: string_pattern_score_transformed(s='\u001a\udba6\udf75')\nPASS: string_pattern_score_transformed(s='\uda4a\udc93a:\ud924\udf4e')\nPASS: string_pattern_score_transformed(s='\u009b!')\nPASS: string_pattern_score_transformed(s='\u00d6\ud8e7\udd3e/#\u0013\u00cau\udaad\udebd')\nPASS: string_pattern_score_transformed(s='q\u000bMr\u00af\udb76\udc09\udaac\udef4')\nPASS: string_pattern_score_transformed(s='\u00a9\u009c\u00af\udba5\udfe2,\u00a9X\u0007')\nPASS: string_pattern_score_transformed(s='\ud95b\ude56\u00b3\udb6a\udd67G\u008f')\nPASS: string_pattern_score_transformed(s='\u0081\ud8e5\udf31\u00c7\uda88\udf08\u0011\u00fc|\u001a\u00b4\u0090')\nPASS: string_pattern_score_transformed(s='Gn\u00cd')\nPASS: string_pattern_score_transformed(s='t\uc58a7\u00fe\udaf5\uddc1=\u00ef\u00ce\u00c2')\nPASS: string_pattern_score_transformed(s='x\u00d8\udbdf\uddff\u0013\u0001\u00be')\nPASS: string_pattern_score_transformed(s='\u00fe\ud9e4\udf44\u00a0\ud81b\udfd2,\u00ec\u00dd9\u00ad')\nPASS: string_pattern_score_transformed(s='&\u0089 ')\nPASS: string_pattern_score_transformed(s='\u001aG\u00f6')\nPASS: string_pattern_score_transformed(s='T\u008b')\nPASS: string_pattern_score_transformed(s='q\ud8ab\ude5e\ud9d0\udfc8\u00e7\u00e7\uda0d\udecb:D')\nPASS: string_pattern_score_transformed(s='|\u00c1\u00f7\uda57\udc43\u0099\u00e5')\nPASS: string_pattern_score_transformed(s='LPT1')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[6])\nPASS: sum_until_limit_transformed(nums=[7])\nPASS: sum_until_limit_transformed(nums=[13, 13])\nPASS: sum_until_limit_transformed(nums=[12, 20, 9, 3, 5, 9, 18, 17, 12])\nPASS: sum_until_limit_transformed(nums=[1, 3, 2, 9, 6, 17, 15, 3, 2, 13])\nPASS: sum_until_limit_transformed(nums=[16, 19, 12, 0, 16, 4, 1, 19, 3, 5])\nPASS: sum_until_limit_transformed(nums=[9, 10, 3, 11, 15, 5, 4, 11, 11, 3])\nPASS: sum_until_limit_transformed(nums=[7, 20, 7, 7, 17, 14])\nPASS: sum_until_limit_transformed(nums=[8, 14, 5, 11, 2, 18, 17, 15, 20, 3])\nPASS: sum_until_limit_transformed(nums=[17, 18, 0, 0, 0, 16, 10, 12, 7, 5])\nPASS: sum_until_limit_transformed(nums=[17, 18, 0, 0, 0, 16, 10, 12, 7, 12])\nFAIL: sum_until_limit_transformed(nums=[17, 7, 0, 0, 0, 16, 10, 12, 7, 12])\nPASS: sum_until_limit_transformed(nums=[17, 7, 0, 0, 0, 16])\nPASS: sum_until_limit_transformed(nums=[17, 7, 0, 0, 17, 16])\nPASS: sum_until_limit_transformed(nums=[16, 7, 0, 0, 17, 16])\nPASS: sum_until_limit_transformed(nums=[16, 7, 7, 0, 17, 16])\nPASS: sum_until_limit_transformed(nums=[20, 9])\nPASS: sum_until_limit_transformed(nums=[20])\nPASS: sum_until_limit_transformed(nums=[17])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[14])\nPASS: count_divisibles_transformed(nums=[5])\nPASS: count_divisibles_transformed(nums=[14, 15, 11, 10])\nPASS: count_divisibles_transformed(nums=[12, 1])\nPASS: count_divisibles_transformed(nums=[12])\nPASS: count_divisibles_transformed(nums=[4, 7, 17])\nPASS: count_divisibles_transformed(nums=[17, 4, 12, 7, 10, 15, 18, 8, 3, 14])\nPASS: count_divisibles_transformed(nums=[15, 5, 1, 11])\nPASS: count_divisibles_transformed(nums=[5, 14, 14, 16, 20, 0, 6])\nPASS: count_divisibles_transformed(nums=[9])\nPASS: count_divisibles_transformed(nums=[2, 15, 20, 14, 11, 8, 20, 4, 14, 15])\nPASS: count_divisibles_transformed(nums=[16])\nPASS: count_divisibles_transformed(nums=[14, 10, 16, 8, 8, 0])\nPASS: count_divisibles_transformed(nums=[14, 16, 16, 8, 8, 0])\nPASS: count_divisibles_transformed(nums=[8, 16, 16, 8, 8, 0])\nPASS: count_divisibles_transformed(nums=[8, 16, 16, 8, 8, 16])\nPASS: count_divisibles_transformed(nums=[8, 16, 16, 8, 8])\nPASS: count_divisibles_transformed(nums=[8, 16, 16, 8, 16])\nPASS: count_divisibles_transformed(nums=[20, 14, 5, 15, 18, 3, 12, 17, 16, 4])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[3])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[0, 3, 6, 5, 2, 3, 2, 6, 6, 2])\nPASS: index_weighted_sum_transformed(lst=[2, 10, 3])\nPASS: index_weighted_sum_transformed(lst=[7, 2, 8, 10, 5])\nPASS: index_weighted_sum_transformed(lst=[3, 5, 9, 8, 4, 10, 4, 0, 9])\nPASS: index_weighted_sum_transformed(lst=[10, 5, 0, 3, 10, 10, 4, 3])\nPASS: index_weighted_sum_transformed(lst=[3, 3, 7, 4, 9, 3, 4, 1, 7, 2])\nPASS: index_weighted_sum_transformed(lst=[7])\nPASS: index_weighted_sum_transformed(lst=[5, 7, 2, 5, 1, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 7, 2, 5, 7, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 7, 2, 5, 7, 7])\nPASS: index_weighted_sum_transformed(lst=[5, 7, 2, 7, 7, 7])\nPASS: index_weighted_sum_transformed(lst=[5, 7, 2, 7, 5, 7])\nPASS: index_weighted_sum_transformed(lst=[5, 7, 2, 2, 7, 7])\nPASS: index_weighted_sum_transformed(lst=[5, 7, 2])\nPASS: index_weighted_sum_transformed(lst=[0, 0, 6, 9])\nPASS: index_weighted_sum_transformed(lst=[0, 0, 9, 9])\nPASS: index_weighted_sum_transformed(lst=[0, 0, 9])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=3)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00d9\udabb\udc15l\u00d6')\nPASS: character_counter_transformed(text='\u00abS\u00b9')\nPASS: character_counter_transformed(text='m\udb8b\udf72O\u00c3\u00f8')\nPASS: character_counter_transformed(text='\uda49\udeb9\ud942\udecd')\nPASS: character_counter_transformed(text='\ud80c\ude26\udb5a\udd13\u00e8\u00faq')\nPASS: character_counter_transformed(text='\ud894\udd45\udb43\udcde\uda73\udfb9\u009f\u007fpM')\nPASS: character_counter_transformed(text='.7]\\x8\u00a8\u00cd\udb03\udf12\u0016')\nPASS: character_counter_transformed(text='\u00e4\u00d5D\u00a3N\ud81a\ude88')\nPASS: character_counter_transformed(text='\u009f\u0006m\u00f4\u00d5\u00d1\u0098O\u0006\ud87e\udc9b')\nPASS: character_counter_transformed(text='\udbf9\udc80u!\uda9a\udc89\u0011\u00d3MG\udb38\udf9eZ')\nPASS: character_counter_transformed(text='\u00a0\u00df@\f\u00b6\"\ud8fa\ude28a\udbb8\udf03\u001a')\nPASS: character_counter_transformed(text='Cg\u008e\b\u00ae\u00fc6\ud91a\udefd\u00a7Q')\nPASS: character_counter_transformed(text='\u00f8\ud856\udd27\u00ae')\nPASS: character_counter_transformed(text='\ud9aa\udc17\u001bs\uda99\udf97\u00b4\ud9e2\udcff\u00dd\ud97e\udc45\u0081\n')\nPASS: character_counter_transformed(text='\udaeb\udfb2\udb1b\uddc3\u0084\u00d9\ud95a\udd688m\uda8b\udca0\u00b9\u0001')\nPASS: character_counter_transformed(text='H')\nPASS: character_counter_transformed(text='\u0012t\u00b4\u00ea\ud824\ude09\u00a9\u00e6A\u00fd\u0098')\nPASS: character_counter_transformed(text='w\u009d\u0080$')\nPASS: character_counter_transformed(text='\u00e0l\u0096\u0000\u009a\u00ef(&\u0092')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[57])\nPASS: rolling_maximum_transformed(values=[21])\nPASS: rolling_maximum_transformed(values=[47, 97, 43, 1, 98, 38, 33, 28, 37, 84])\nPASS: rolling_maximum_transformed(values=[57, 65, 41, 65, 65, 30, 97, 92, 1, 92])\nPASS: rolling_maximum_transformed(values=[0, 58])\nPASS: rolling_maximum_transformed(values=[18])\nPASS: rolling_maximum_transformed(values=[50])\nPASS: rolling_maximum_transformed(values=[68, 39, 20, 90, 63, 30, 80, 29, 42, 5])\nPASS: rolling_maximum_transformed(values=[45, 56, 27])\nPASS: rolling_maximum_transformed(values=[55, 36, 44, 28, 73, 29, 63, 66, 94, 37])\nPASS: rolling_maximum_transformed(values=[55, 36, 44, 28, 73, 29, 63, 66, 94, 63])\nPASS: rolling_maximum_transformed(values=[28, 36, 44, 28, 73, 29, 63, 66, 94, 63])\nPASS: rolling_maximum_transformed(values=[28, 73, 44, 28, 73, 29, 63, 66, 94, 63])\nPASS: rolling_maximum_transformed(values=[28, 28, 44, 28, 73, 29, 63, 66, 94, 63])\nPASS: rolling_maximum_transformed(values=[28, 28, 44, 28, 73, 29, 63, 66, 28, 63])\nPASS: rolling_maximum_transformed(values=[28, 28, 44, 28, 73, 29, 63, 66, 63, 63])\nPASS: rolling_maximum_transformed(values=[15, 76, 74, 88, 42])\nPASS: rolling_maximum_transformed(values=[15, 76, 74, 15, 42])\nPASS: rolling_maximum_transformed(values=[15, 76, 74, 42, 42])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "character_counter": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=21)\nPASS: process_data_transformed(x=67)\nPASS: process_data_transformed(x=29)\nPASS: process_data_transformed(x=51)\nPASS: process_data_transformed(x=75)\nPASS: process_data_transformed(x=83)\nPASS: process_data_transformed(x=65)\nPASS: process_data_transformed(x=59)\nPASS: process_data_transformed(x=33)\nPASS: process_data_transformed(x=19)\nPASS: process_data_transformed(x=93)\nPASS: process_data_transformed(x=9)\nPASS: process_data_transformed(x=48)\nPASS: process_data_transformed(x=5)\nPASS: process_data_transformed(x=49)\nPASS: process_data_transformed(x=38)\nPASS: process_data_transformed(x=45)\nPASS: process_data_transformed(x=40)\nPASS: process_data_transformed(x=1)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=0.99999)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=85.71765831523624)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=5.0087214750789336e-244)\nPASS: convert_temperature_transformed(c=15.056546681034492)\nPASS: convert_temperature_transformed(c=74.17156203386796)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.5, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.5, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=56.181852616912145, discount_rate=0.24481636061205486)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=6.103515625e-05, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=119.69543868188828, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=1.213312692932655e-50, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=1.213312692932655e-50, discount_rate=1.213312692932655e-50)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.03680772421324852)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=1.401298464324817e-45)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=0.0)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=20.0)\nPASS: process_complex_number_transformed(real=-19.818689854835956, imag=1.1)\nPASS: process_complex_number_transformed(real=0.0, imag=-2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=1e-05, imag=-1.9)\nPASS: process_complex_number_transformed(real=2.00001, imag=2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-0.3333333333333333, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=5.372095117652819, imag=-1.192092896e-07)\nPASS: process_complex_number_transformed(real=-2.225073858507203e-309, imag=-19.999999999999996)\nPASS: process_complex_number_transformed(real=5e-324, imag=-1.175494351e-38)\nPASS: process_complex_number_transformed(real=-1.175494351e-38, imag=-1.175494351e-38)\nPASS: process_complex_number_transformed(real=6.384794140641873, imag=1.9)\nPASS: process_complex_number_transformed(real=6.384794140641873, imag=6.384794140641873)\nPASS: process_complex_number_transformed(real=-7.347741614413677e-89, imag=2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=-7.347741614413677e-89, imag=-7.347741614413677e-89)\nPASS: process_complex_number_transformed(real=-0.10844123558414154, imag=13.720476702805357)\nPASS: process_complex_number_transformed(real=13.720476702805357, imag=13.720476702805357)\nPASS: process_complex_number_transformed(real=4.332750230426022e-79, imag=12.0978767296534)\nPASS: process_complex_number_transformed(real=4.332750230426022e-79, imag=4.332750230426022e-79)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=59)\nPASS: transform_data_transformed(input_value=18)\nPASS: transform_data_transformed(input_value=49)\nPASS: transform_data_transformed(input_value=77)\nPASS: transform_data_transformed(input_value=27)\nPASS: transform_data_transformed(input_value=84)\nPASS: transform_data_transformed(input_value=4)\nPASS: transform_data_transformed(input_value=79)\nPASS: transform_data_transformed(input_value=58)\nPASS: transform_data_transformed(input_value=71)\nPASS: transform_data_transformed(input_value=99)\nPASS: transform_data_transformed(input_value=72)\nPASS: transform_data_transformed(input_value=93)\nPASS: transform_data_transformed(input_value=17)\nPASS: transform_data_transformed(input_value=54)\nPASS: transform_data_transformed(input_value=69)\nPASS: transform_data_transformed(input_value=8)\nPASS: transform_data_transformed(input_value=35)\nPASS: transform_data_transformed(input_value=28)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=2.6238261300495407)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=11.710198432780984)\nPASS: circle_area_diff_transformed(r=18.992732556272486)\nPASS: circle_area_diff_transformed(r=1.192092896e-07)\nPASS: circle_area_diff_transformed(r=1.235930283692657)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=0.3333333333333333)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: circle_area_diff_transformed(r=3.2114153635773817)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=12.878481982531616)\nPASS: circle_area_diff_transformed(r=1.175494351e-38)\nPASS: circle_area_diff_transformed(r=4.987884017192169)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=4, b=1, c=1)\nPASS: triangle_checker_transformed(a=4, b=12, c=20)\nPASS: triangle_checker_transformed(a=18, b=8, c=15)\nPASS: triangle_checker_transformed(a=3, b=5, c=17)\nPASS: triangle_checker_transformed(a=2, b=18, c=4)\nPASS: triangle_checker_transformed(a=14, b=17, c=10)\nPASS: triangle_checker_transformed(a=4, b=19, c=1)\nPASS: triangle_checker_transformed(a=16, b=7, c=1)\nPASS: triangle_checker_transformed(a=15, b=14, c=18)\nPASS: triangle_checker_transformed(a=6, b=4, c=5)\nPASS: triangle_checker_transformed(a=6, b=5, c=5)\nPASS: triangle_checker_transformed(a=5, b=5, c=5)\nPASS: triangle_checker_transformed(a=15, b=16, c=14)\nPASS: triangle_checker_transformed(a=15, b=16, c=15)\nPASS: triangle_checker_transformed(a=16, b=16, c=15)\nPASS: triangle_checker_transformed(a=16, b=16, c=16)\nPASS: triangle_checker_transformed(a=3, b=20, c=19)\nPASS: triangle_checker_transformed(a=3, b=20, c=3)\nPASS: triangle_checker_transformed(a=3, b=3, c=3)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=2.6836963424153657)\nPASS: temperature_offset_transformed(c=2.767194406057457e-170)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=79.9691704988675)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-1, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-1, b=10, c=10)\nPASS: quadratic_discriminant_transformed(a=7, b=-4, c=-1)\nPASS: quadratic_discriminant_transformed(a=-6, b=-9, c=9)\nPASS: quadratic_discriminant_transformed(a=6, b=-2, c=5)\nPASS: quadratic_discriminant_transformed(a=0, b=-9, c=10)\nPASS: quadratic_discriminant_transformed(a=-10, b=8, c=6)\nPASS: quadratic_discriminant_transformed(a=5, b=5, c=9)\nPASS: quadratic_discriminant_transformed(a=7, b=4, c=-5)\nPASS: quadratic_discriminant_transformed(a=-5, b=8, c=5)\nPASS: quadratic_discriminant_transformed(a=-5, b=8, c=8)\nPASS: quadratic_discriminant_transformed(a=8, b=8, c=8)\nPASS: quadratic_discriminant_transformed(a=1, b=2, c=2)\nPASS: quadratic_discriminant_transformed(a=1, b=1, c=2)\nPASS: quadratic_discriminant_transformed(a=1, b=1, c=1)\nPASS: quadratic_discriminant_transformed(a=-4, b=7, c=3)\nPASS: quadratic_discriminant_transformed(a=-4, b=-4, c=3)\nPASS: quadratic_discriminant_transformed(a=3, b=-4, c=3)\nPASS: quadratic_discriminant_transformed(a=3, b=-4, c=-4)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-1.1754943508222875e-38, y=0.0)\nPASS: vector_norm_transformed(x=-1.1754943508222875e-38, y=-0.99999)\nPASS: vector_norm_transformed(x=-1e-05, y=-0.08185185232169978)\nPASS: vector_norm_transformed(x=-2.225073858507e-311, y=-1.175494351e-38)\nPASS: vector_norm_transformed(x=-0.6201235948158317, y=6.972448340167709)\nPASS: vector_norm_transformed(x=-0.907949851674779, y=1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=-10.0, y=-2.3853518850972175e-216)\nPASS: vector_norm_transformed(x=-2.220446049250313e-16, y=-1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=-1.401298464324817e-45, y=-6.103515625e-05)\nPASS: vector_norm_transformed(x=-6.506457338618667, y=9.0)\nPASS: vector_norm_transformed(x=9.0, y=9.0)\nPASS: vector_norm_transformed(x=-9.999999999999998, y=1.401298464324817e-45)\nPASS: vector_norm_transformed(x=-9.999999999999998, y=-9.999999999999998)\nPASS: vector_norm_transformed(x=0.5, y=-5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-5.960464477539063e-08, y=-5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-0.0, y=-1.5)\nPASS: vector_norm_transformed(x=-0.0, y=-0.0)\nPASS: vector_norm_transformed(x=-9.992609258079742, y=-1.175494351e-38)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=-1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=1.0)\nPASS: hypotenuse_diff_transformed(a=0.5, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=3.645239388908335)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=1.3894695717507435, b=1.40310481107655)\nPASS: hypotenuse_diff_transformed(a=5.960464477539063e-08, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=1.5, b=9.999999999999998)\nPASS: hypotenuse_diff_transformed(a=1.5, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=1.1)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=4.938115084973417e-288, b=1.0)\nPASS: hypotenuse_diff_transformed(a=4.938115084973417e-288, b=4.938115084973417e-288)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=1.83406914608919e-291)\nPASS: hypotenuse_diff_transformed(a=1.83406914608919e-291, b=1.83406914608919e-291)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=2.2250738585072014e-308)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=1.192092896e-07)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=1.192092896e-07)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='0\u00b6;\u00a4\u00b2\u00feA\u0093')\nPASS: ascii_average_transformed(s='\uda74\ude0b\u00fa\u009b\u009f_\u00d9d\u00b2\u0090k')\nPASS: ascii_average_transformed(s='\f')\nPASS: ascii_average_transformed(s='\udb6a\ude83\u00c5\u00d8')\nPASS: ascii_average_transformed(s='\u00c4\ud9d8\udeab\u00b8\u00a4\ud839\ude69\u00fd\u009dq\u00d2\ud899\udfa5')\nPASS: ascii_average_transformed(s='\u0000;\u0018\u00cd\"\u00ad7\u0001\u00cf\u00dc')\nPASS: ascii_average_transformed(s='\u000e6\u0017\u00e8\u0012')\nPASS: ascii_average_transformed(s='W\u00f3\u00c63\u00a8\u00cc\u00f1\u00cf\ud837\uddb6B')\nPASS: ascii_average_transformed(s='\udb7b\udf94\u00bf\u00c9x\u0002\u00b2m\udb48\udd52F\uda8d\ude79')\nPASS: ascii_average_transformed(s='\u00b3p\u00045\u0083\u00b9\ud829\udfa0\u00a7\udb06\udd6c\u0085')\nPASS: ascii_average_transformed(s='a\ud872\udf66')\nPASS: ascii_average_transformed(s='\u00fb\f\u00f8\udbd0\udf85\u00e6')\nPASS: ascii_average_transformed(s='u')\nPASS: ascii_average_transformed(s='i')\nPASS: ascii_average_transformed(s='\ud81b\udfac\ud915\udec4')\nPASS: ascii_average_transformed(s='True')\nPASS: ascii_average_transformed(s='\ud8c2\udc86\u00af\u00ffb\u00d3\ud907\udc1c\u00e3\u00a2\u0083U')\nPASS: ascii_average_transformed(s='\u00eb\u009f\u00f9\u0005\udb8b\udec6\u00bf\u00fd\u001f')\nPASS: ascii_average_transformed(s='k\u00f8')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[1, 0])\nPASS: list_balance_transformed(nums=[1, 3])\nPASS: list_balance_transformed(nums=[4, 3, 2])\nPASS: list_balance_transformed(nums=[6, 6, 5, 8, 5])\nPASS: list_balance_transformed(nums=[2, 8, 1, 1, 7, 0, 9])\nPASS: list_balance_transformed(nums=[1, 10, 8])\nPASS: list_balance_transformed(nums=[4, 1, 8, 4, 1, 8])\nPASS: list_balance_transformed(nums=[7, 9, 8])\nPASS: list_balance_transformed(nums=[8, 4, 1, 7, 1, 0, 10, 4])\nPASS: list_balance_transformed(nums=[7, 8, 10, 10, 7, 1, 4, 4, 3, 3])\nPASS: list_balance_transformed(nums=[7, 3, 10, 10, 7, 1, 4, 4, 3, 3])\nPASS: list_balance_transformed(nums=[7, 3, 10, 10, 7, 1, 1, 4, 3, 3])\nPASS: list_balance_transformed(nums=[7, 3, 10, 10, 7, 1, 1, 3, 3, 3])\nPASS: list_balance_transformed(nums=[7, 3, 10, 10, 7, 3, 1, 3, 3, 3])\nPASS: list_balance_transformed(nums=[7, 3, 10])\nPASS: list_balance_transformed(nums=[7, 3, 7])\nPASS: list_balance_transformed(nums=[2, 3])\nPASS: list_balance_transformed(nums=[3, 3])\nPASS: list_balance_transformed(nums=[0, 6])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[4])\nPASS: odd_sum_validator_transformed(lst=[1])\nPASS: odd_sum_validator_transformed(lst=[9, 10, 1, 6, 8, 1, 7, 8, 2, 0])\nPASS: odd_sum_validator_transformed(lst=[6, 8, 2, 7])\nPASS: odd_sum_validator_transformed(lst=[7, 5])\nPASS: odd_sum_validator_transformed(lst=[5, 5, 6, 3, 9, 3, 9, 9, 2])\nPASS: odd_sum_validator_transformed(lst=[0, 7, 8])\nPASS: odd_sum_validator_transformed(lst=[3, 2, 10, 4, 0, 9, 0, 8, 9, 1])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[5, 8, 6])\nPASS: odd_sum_validator_transformed(lst=[6, 8, 6])\nPASS: odd_sum_validator_transformed(lst=[6, 8, 8])\nPASS: odd_sum_validator_transformed(lst=[6, 6, 6])\nPASS: odd_sum_validator_transformed(lst=[6])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[0, 5, 5, 1, 0, 1, 3])\nPASS: odd_sum_validator_transformed(lst=[0, 5, 5, 5, 0, 1, 3])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='}\u000f\u0019')\nPASS: string_pattern_score_transformed(s='\uda6c\udf15\u0081\u001d\u00c0\u00b2\u00df\u00f1\ud96c\udc80d\udb47\ude3d')\nPASS: string_pattern_score_transformed(s='true')\nPASS: string_pattern_score_transformed(s='\u7512')\nPASS: string_pattern_score_transformed(s='\ud968\udd75\u009a\u00f9\u00f3\u00d5v-\u00eb')\nPASS: string_pattern_score_transformed(s='\u00c6\\I\u00cb\udb7b\udf9b{\u00d0wv\ud85d\ude69')\nPASS: string_pattern_score_transformed(s=';\u00f3Z\u00fc\u00ea\u00a9\u0096\u0003b\u00af')\nPASS: string_pattern_score_transformed(s='^0')\nPASS: string_pattern_score_transformed(s='\u00f3\ud9bc\ude47\u00bc\uda01\udfe2x\u00a5\u00f0\ud8a4\udcfc\u00a0\uda2f\udd2c')\nPASS: string_pattern_score_transformed(s='\u00af[%^')\nPASS: string_pattern_score_transformed(s='Ap\udb92\ude7d\b\udb04\udfec\u00e8\"F\u00ea\u0094')\nPASS: string_pattern_score_transformed(s='COM1')\nPASS: string_pattern_score_transformed(s='\u00b3\u00adxt\u00fd\u00a9\u008a\u00a5e\u00ba')\nPASS: string_pattern_score_transformed(s='\u00b1\u00ff\u000b')\nPASS: string_pattern_score_transformed(s='_\u00ca')\nPASS: string_pattern_score_transformed(s=',j\udb99\uddf3\u00bc\u007f\udb44\udcbdP\u00b4~\u00d1')\nPASS: string_pattern_score_transformed(s='\u0092')\nPASS: string_pattern_score_transformed(s='W]{')\nPASS: string_pattern_score_transformed(s='\uda5c\udd1f\u00b0Z\u00a3\u00c3\u00e8\u008f)')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[3])\nPASS: sum_until_limit_transformed(nums=[0, 0])\nPASS: sum_until_limit_transformed(nums=[0, 12])\nPASS: sum_until_limit_transformed(nums=[3, 8, 17, 13, 4, 10])\nPASS: sum_until_limit_transformed(nums=[11, 10, 10, 9])\nPASS: sum_until_limit_transformed(nums=[9, 2, 13, 19, 18, 19, 18, 13, 16, 16])\nPASS: sum_until_limit_transformed(nums=[14])\nPASS: sum_until_limit_transformed(nums=[17, 10, 2, 14, 16, 11, 16, 14])\nPASS: sum_until_limit_transformed(nums=[12, 18, 1, 7, 20, 10, 20])\nPASS: sum_until_limit_transformed(nums=[4, 14, 19, 3, 6, 20, 0])\nPASS: sum_until_limit_transformed(nums=[4, 14, 19, 20, 6, 20, 0])\nPASS: sum_until_limit_transformed(nums=[4, 14, 4, 20, 6, 20, 0])\nPASS: sum_until_limit_transformed(nums=[4, 6, 4, 20, 6, 20, 0])\nPASS: sum_until_limit_transformed(nums=[4, 6, 4, 20, 6, 6, 0])\nPASS: sum_until_limit_transformed(nums=[20, 6, 4, 20, 6, 6, 0])\nPASS: sum_until_limit_transformed(nums=[20, 6, 4, 20, 6, 6, 20])\nPASS: sum_until_limit_transformed(nums=[14, 19, 19, 5, 13, 13, 1, 6, 13, 8])\nPASS: sum_until_limit_transformed(nums=[14, 19, 19, 5, 13, 13, 6, 6, 13, 8])\nPASS: sum_until_limit_transformed(nums=[14, 19, 19, 19, 13, 13, 6, 6, 13, 8])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[15])\nPASS: count_divisibles_transformed(nums=[15, 19])\nPASS: count_divisibles_transformed(nums=[14])\nPASS: count_divisibles_transformed(nums=[3, 4, 8, 20, 3, 6, 17, 17, 3])\nPASS: count_divisibles_transformed(nums=[12, 8, 7, 6, 12, 18, 10, 11])\nPASS: count_divisibles_transformed(nums=[9, 10, 19, 20, 20, 9, 13, 13, 20])\nPASS: count_divisibles_transformed(nums=[10, 10, 4, 9, 2, 8, 6, 4, 16])\nPASS: count_divisibles_transformed(nums=[12])\nPASS: count_divisibles_transformed(nums=[0, 15])\nPASS: count_divisibles_transformed(nums=[10])\nPASS: count_divisibles_transformed(nums=[8, 18])\nPASS: count_divisibles_transformed(nums=[8, 8])\nPASS: count_divisibles_transformed(nums=[19, 14, 19, 0, 6, 5, 12, 14, 4])\nPASS: count_divisibles_transformed(nums=[19, 14, 5, 0, 6, 5, 12, 14, 4])\nPASS: count_divisibles_transformed(nums=[19, 14, 5, 0, 6, 5, 12, 0, 4])\nPASS: count_divisibles_transformed(nums=[19, 14, 5, 0, 6, 5, 12, 0, 0])\nPASS: count_divisibles_transformed(nums=[19, 5, 5, 0, 6, 5, 12, 0, 0])\nPASS: count_divisibles_transformed(nums=[19, 5, 5, 0, 19, 5, 12, 0, 0])\nPASS: count_divisibles_transformed(nums=[15, 1, 17, 18, 16, 20, 12, 19, 7, 15])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[6])\nPASS: index_weighted_sum_transformed(lst=[6, 10])\nPASS: index_weighted_sum_transformed(lst=[5, 3, 7, 6])\nPASS: index_weighted_sum_transformed(lst=[3])\nPASS: index_weighted_sum_transformed(lst=[3, 5, 5, 4, 5, 1, 8, 5, 8])\nPASS: index_weighted_sum_transformed(lst=[3, 2, 2, 4, 1, 9, 3, 4, 10, 7])\nPASS: index_weighted_sum_transformed(lst=[9, 1, 1, 7, 1, 3, 8, 6])\nPASS: index_weighted_sum_transformed(lst=[0, 1, 2, 7, 6, 4])\nPASS: index_weighted_sum_transformed(lst=[1, 7, 0, 10, 7, 2, 6, 4, 6, 7])\nPASS: index_weighted_sum_transformed(lst=[3, 6, 8, 3, 10, 3])\nPASS: index_weighted_sum_transformed(lst=[3, 6, 8, 3, 6, 3])\nPASS: index_weighted_sum_transformed(lst=[3, 6, 8, 3, 3, 3])\nPASS: index_weighted_sum_transformed(lst=[3, 3, 8, 3, 3, 3])\nPASS: index_weighted_sum_transformed(lst=[3, 3, 3, 3, 3, 3])\nPASS: index_weighted_sum_transformed(lst=[8, 5])\nPASS: index_weighted_sum_transformed(lst=[5, 5])\nPASS: index_weighted_sum_transformed(lst=[5])\nPASS: index_weighted_sum_transformed(lst=[2, 1, 7, 0])\nPASS: index_weighted_sum_transformed(lst=[2, 1, 7, 2])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=8)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u0004\udb09\udfc7\u00dd\ud83a\udc3e\u00cdH')\nPASS: character_counter_transformed(text='\udb60\udf098')\nPASS: character_counter_transformed(text='\u000e\u0086\u0005\ud9d8\ude15')\nPASS: character_counter_transformed(text='\ud95c\udcff\u00b7\ud873\udca7\u009f\u000f\b\u0011\u009f')\nPASS: character_counter_transformed(text='\udb56\udddcv1\udadd\ude98\u009aW\u0002\u008a\u00fa\u00a1')\nPASS: character_counter_transformed(text='\ud8a6\udf03jj\u00f5\u00b9\udafc\ude2d')\nPASS: character_counter_transformed(text='\u001c\u00ecL\u00bf\ud891\udcf4\u00f9D.\"\u0014')\nPASS: character_counter_transformed(text='}S7')\nPASS: character_counter_transformed(text='\u00a1')\nPASS: character_counter_transformed(text='\u00c8\u0012')\nPASS: character_counter_transformed(text='\u0081\ud8bd\udcf3\ua58fa\u001a,\u00da0\u00de\u00f7')\nPASS: character_counter_transformed(text='\u00de\udbdb\udf19')\nPASS: character_counter_transformed(text='\u009f\u00ef\u00f8\uda16\ude89\u008f\u0083\u00cc')\nPASS: character_counter_transformed(text='t\ud8bb\udecc')\nPASS: character_counter_transformed(text='\u00a2')\nPASS: character_counter_transformed(text='.\u00ab\u00b6E\ud8f7\udc22')\nPASS: character_counter_transformed(text='Infinity')\nPASS: character_counter_transformed(text='\ud9ea\udee3\u0018\u0084\u00b3\u00ba\u00e7\u00b6g')\nPASS: character_counter_transformed(text='\u00e1\u00e1\u009c\ud839\udd61\ud9e4\uded1')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[41])\nPASS: rolling_maximum_transformed(values=[50])\nPASS: rolling_maximum_transformed(values=[50, 37])\nPASS: rolling_maximum_transformed(values=[21, 3, 82, 51])\nPASS: rolling_maximum_transformed(values=[78, 48])\nPASS: rolling_maximum_transformed(values=[89])\nPASS: rolling_maximum_transformed(values=[72])\nPASS: rolling_maximum_transformed(values=[75, 6, 11, 91, 50, 57])\nPASS: rolling_maximum_transformed(values=[4, 42, 28, 87, 77, 90, 30, 100, 52, 42])\nPASS: rolling_maximum_transformed(values=[54, 7, 67, 42, 70])\nPASS: rolling_maximum_transformed(values=[54, 7, 67, 7, 70])\nPASS: rolling_maximum_transformed(values=[54, 7, 70, 7, 70])\nPASS: rolling_maximum_transformed(values=[54, 54, 70, 7, 70])\nPASS: rolling_maximum_transformed(values=[73, 53, 39, 57, 94, 72, 31, 71])\nPASS: rolling_maximum_transformed(values=[73, 53, 39, 57, 71, 72, 31, 71])\nPASS: rolling_maximum_transformed(values=[73, 53, 72, 57, 71, 72, 31, 71])\nPASS: rolling_maximum_transformed(values=[73, 71, 72, 57, 71, 72, 31, 71])\nPASS: rolling_maximum_transformed(values=[73, 71, 72, 57, 71, 72, 72, 71])\nPASS: rolling_maximum_transformed(values=[73, 71, 72, 57, 71, 72, 72, 73])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "rolling_maximum": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=51)\nPASS: process_data_transformed(x=47)\nPASS: process_data_transformed(x=26)\nPASS: process_data_transformed(x=43)\nPASS: process_data_transformed(x=91)\nPASS: process_data_transformed(x=29)\nPASS: process_data_transformed(x=40)\nPASS: process_data_transformed(x=31)\nPASS: process_data_transformed(x=94)\nPASS: process_data_transformed(x=95)\nPASS: process_data_transformed(x=57)\nPASS: process_data_transformed(x=66)\nPASS: process_data_transformed(x=27)\nPASS: process_data_transformed(x=60)\nPASS: process_data_transformed(x=90)\nPASS: process_data_transformed(x=17)\nPASS: process_data_transformed(x=35)\nPASS: process_data_transformed(x=36)\nPASS: process_data_transformed(x=42)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=90.9541326852948)\nPASS: convert_temperature_transformed(c=3.733048373462174e-300)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=17.39233287521103)\nPASS: convert_temperature_transformed(c=29.280078589867635)\nPASS: convert_temperature_transformed(c=57.86215861191787)\nPASS: convert_temperature_transformed(c=17.247106191214126)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=113.98793334511474, discount_rate=1.175494351e-38)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=8.534251099684333, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=2.5353360127675895e-138)\nPASS: calculate_discount_transformed(price=7.395188980478153, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=7.395188980478153, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.225073858507203e-309, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=0.9999999999999999)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=0.506749765146505)\nPASS: calculate_discount_transformed(price=1.1125369292536007e-308, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=1.1754943508222875e-38)\nPASS: calculate_discount_transformed(price=1.1754943508222875e-38, discount_rate=1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=0.99999, imag=0.0)\nPASS: process_complex_number_transformed(real=0.99999, imag=-19.999999999999996)\nPASS: process_complex_number_transformed(real=-6.103515625e-05, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=-0.0)\nPASS: process_complex_number_transformed(real=-20.0, imag=-20.0)\nPASS: process_complex_number_transformed(real=-2.2250738585072014e-308, imag=-4.154725863225245)\nPASS: process_complex_number_transformed(real=11.394497783485285, imag=0.3333333333333333)\nPASS: process_complex_number_transformed(real=19.999999999999996, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-5e-324, imag=1.1)\nPASS: process_complex_number_transformed(real=1.5, imag=-19.999999999999996)\nPASS: process_complex_number_transformed(real=1.5, imag=1.5)\nPASS: process_complex_number_transformed(real=1e-05, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=2.225073858507e-311)\nPASS: process_complex_number_transformed(real=2.225073858507e-311, imag=2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-1.192092896e-07, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-2.2250738585072014e-308, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=1.1754943508222875e-38, imag=-1.401298464324817e-45)\nPASS: process_complex_number_transformed(real=1.1754943508222875e-38, imag=1.1754943508222875e-38)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=76)\nPASS: transform_data_transformed(input_value=96)\nPASS: transform_data_transformed(input_value=16)\nPASS: transform_data_transformed(input_value=32)\nPASS: transform_data_transformed(input_value=100)\nPASS: transform_data_transformed(input_value=80)\nPASS: transform_data_transformed(input_value=27)\nPASS: transform_data_transformed(input_value=35)\nPASS: transform_data_transformed(input_value=36)\nPASS: transform_data_transformed(input_value=89)\nPASS: transform_data_transformed(input_value=24)\nPASS: transform_data_transformed(input_value=58)\nPASS: transform_data_transformed(input_value=55)\nPASS: transform_data_transformed(input_value=1)\nPASS: transform_data_transformed(input_value=73)\nPASS: transform_data_transformed(input_value=3)\nPASS: transform_data_transformed(input_value=6)\nPASS: transform_data_transformed(input_value=95)\nPASS: transform_data_transformed(input_value=79)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=16.73349396719779)\nPASS: circle_area_diff_transformed(r=12.632205274233696)\nPASS: circle_area_diff_transformed(r=5e-324)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=13.928071802606715)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=1.6142470768721535e-178)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=7.468599913916033)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=8, b=1, c=1)\nPASS: triangle_checker_transformed(a=8, b=2, c=15)\nPASS: triangle_checker_transformed(a=10, b=2, c=15)\nPASS: triangle_checker_transformed(a=1, b=3, c=17)\nPASS: triangle_checker_transformed(a=4, b=19, c=17)\nPASS: triangle_checker_transformed(a=16, b=16, c=2)\nPASS: triangle_checker_transformed(a=10, b=13, c=11)\nPASS: triangle_checker_transformed(a=1, b=7, c=10)\nPASS: triangle_checker_transformed(a=7, b=20, c=18)\nPASS: triangle_checker_transformed(a=5, b=6, c=19)\nPASS: triangle_checker_transformed(a=5, b=5, c=19)\nPASS: triangle_checker_transformed(a=5, b=19, c=19)\nPASS: triangle_checker_transformed(a=19, b=19, c=19)\nPASS: triangle_checker_transformed(a=20, b=4, c=17)\nPASS: triangle_checker_transformed(a=20, b=17, c=17)\nPASS: triangle_checker_transformed(a=17, b=17, c=17)\nPASS: triangle_checker_transformed(a=11, b=15, c=18)\nPASS: triangle_checker_transformed(a=11, b=11, c=18)\nPASS: triangle_checker_transformed(a=11, b=11, c=11)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: temperature_offset_transformed(c=1.1)\nPASS: temperature_offset_transformed(c=5.960464477539063e-08)\nPASS: temperature_offset_transformed(c=2.2414035196261177)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: temperature_offset_transformed(c=8.674326564786931e-77)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=5.754673026705545e-290)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=1.192092896e-07)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=7.596362423905231e-99)\nPASS: temperature_offset_transformed(c=1e-05)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-2, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=-2, b=-7, c=-3)\nPASS: quadratic_discriminant_transformed(a=-3, b=-4, c=-1)\nPASS: quadratic_discriminant_transformed(a=-8, b=-3, c=9)\nPASS: quadratic_discriminant_transformed(a=4, b=-2, c=7)\nPASS: quadratic_discriminant_transformed(a=-5, b=-4, c=-1)\nPASS: quadratic_discriminant_transformed(a=-10, b=6, c=0)\nPASS: quadratic_discriminant_transformed(a=1, b=0, c=-10)\nPASS: quadratic_discriminant_transformed(a=2, b=-2, c=-3)\nPASS: quadratic_discriminant_transformed(a=3, b=4, c=-4)\nPASS: quadratic_discriminant_transformed(a=3, b=4, c=3)\nPASS: quadratic_discriminant_transformed(a=3, b=3, c=3)\nPASS: quadratic_discriminant_transformed(a=8, b=5, c=-3)\nPASS: quadratic_discriminant_transformed(a=8, b=8, c=-3)\nPASS: quadratic_discriminant_transformed(a=8, b=-3, c=-3)\nPASS: quadratic_discriminant_transformed(a=-3, b=-3, c=-3)\nPASS: quadratic_discriminant_transformed(a=-3, b=-4, c=7)\nPASS: quadratic_discriminant_transformed(a=7, b=-4, c=7)\nPASS: quadratic_discriminant_transformed(a=7, b=-4, c=-4)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-0.99999, y=0.0)\nPASS: vector_norm_transformed(x=-0.99999, y=-6.147449928112082)\nPASS: vector_norm_transformed(x=-2.220446049250313e-16, y=9.0)\nPASS: vector_norm_transformed(x=9.0, y=1.175494351e-38)\nPASS: vector_norm_transformed(x=1e-05, y=0.0)\nPASS: vector_norm_transformed(x=1.9, y=-1.5)\nPASS: vector_norm_transformed(x=0.5, y=-0.99999)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=-10.0)\nPASS: vector_norm_transformed(x=1.1, y=0.99999)\nPASS: vector_norm_transformed(x=-2.2250738585072014e-308, y=2.5059382761842733e-261)\nPASS: vector_norm_transformed(x=2.5059382761842733e-261, y=2.5059382761842733e-261)\nPASS: vector_norm_transformed(x=-1.9, y=-1.5252083358713086e-197)\nPASS: vector_norm_transformed(x=-1.9, y=-1.9)\nPASS: vector_norm_transformed(x=3.3955913933310296, y=10.0)\nPASS: vector_norm_transformed(x=10.0, y=10.0)\nPASS: vector_norm_transformed(x=1.1754943508222875e-38, y=2.225073858507e-311)\nPASS: vector_norm_transformed(x=2.225073858507e-311, y=2.225073858507e-311)\nPASS: vector_norm_transformed(x=9.999999999999998, y=-5.92652911049873)\nPASS: vector_norm_transformed(x=-5.92652911049873, y=-5.92652911049873)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.6284109634473778, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.6284109634473778, b=9.0)\nPASS: hypotenuse_diff_transformed(a=1.9951636987637582, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1e-05, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=2.220446049250313e-16)\nPASS: hypotenuse_diff_transformed(a=1.5, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=9.0)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=1.3349691878255945)\nPASS: hypotenuse_diff_transformed(a=2.225073858507203e-309, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=4.070365756884967, b=9.305821651000151)\nPASS: hypotenuse_diff_transformed(a=9.305821651000151, b=9.305821651000151)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=1.1125369292536007e-308)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=9.020612298098026, b=0.0)\nPASS: hypotenuse_diff_transformed(a=0.0, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=10.0, b=5.960464477539063e-08)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u0016')\nPASS: ascii_average_transformed(s='\u00d2\u00e6')\nPASS: ascii_average_transformed(s='\uda13\udf9f\uda3b\uddcb\ud990\uddf3?\u00ffWO')\nPASS: ascii_average_transformed(s='\u009dF\ud9b9\udc5c')\nPASS: ascii_average_transformed(s='\u008c\u00ef')\nPASS: ascii_average_transformed(s='1\u00c3\u009f\u00fb\u00b4\u00f0\u00d6\u00e4@$')\nPASS: ascii_average_transformed(s='\u009ed\u00de\u0096\ud9c1\ude39\ud8fc\udd4dE\u00efu\u00ba')\nPASS: ascii_average_transformed(s='\u0002')\nPASS: ascii_average_transformed(s='\udb05\uddb3\f^\u00f2\u0090\u00ea\u001b')\nPASS: ascii_average_transformed(s='ee\udae1\udf45\u00a4\ud825\udd92\t\u0012a\ud849\ude43;')\nPASS: ascii_average_transformed(s='\u00e0S\u00bc\u0013??Dy\u00d9\u00f9')\nPASS: ascii_average_transformed(s='\ud822\udfc0\u00ee\u00ce\\\udb04\udfab\ud907\udc62\u00aa')\nPASS: ascii_average_transformed(s='\u00c1\u000b')\nPASS: ascii_average_transformed(s='9')\nPASS: ascii_average_transformed(s='\udbfa\udd4c\u00f7\u009a\u00df\u68dei\ud8ec\udc2e8')\nPASS: ascii_average_transformed(s='\u00ee\u0013')\nPASS: ascii_average_transformed(s='\u00f7\u0019.\u2ab1F\u00e9\u00dd\u00b3rY')\nPASS: ascii_average_transformed(s='\u007f\u008b')\nPASS: ascii_average_transformed(s='\u007f')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[4, 0])\nPASS: list_balance_transformed(nums=[4, 9])\nPASS: list_balance_transformed(nums=[9, 8, 2, 0, 5, 1, 1])\nPASS: list_balance_transformed(nums=[9, 2])\nPASS: list_balance_transformed(nums=[5, 7, 1, 7, 2, 9, 4, 1, 0])\nPASS: list_balance_transformed(nums=[8, 7, 10, 10, 5, 0, 6, 7, 7, 7])\nPASS: list_balance_transformed(nums=[3, 10, 9, 3, 8])\nPASS: list_balance_transformed(nums=[6, 6, 8])\nPASS: list_balance_transformed(nums=[1, 3, 0, 3, 2, 5])\nPASS: list_balance_transformed(nums=[3, 1, 7, 0, 3, 8, 0, 6, 5, 3])\nPASS: list_balance_transformed(nums=[3, 1, 7, 0, 3, 8, 0, 0, 5, 3])\nPASS: list_balance_transformed(nums=[3, 1, 7, 0, 3, 8, 0, 0, 0, 3])\nPASS: list_balance_transformed(nums=[3, 1, 7, 0, 3, 8, 8, 0, 0, 3])\nPASS: list_balance_transformed(nums=[3, 1, 0, 0, 3, 8, 8, 0, 0, 3])\nPASS: list_balance_transformed(nums=[3, 1, 0, 0, 3, 8, 8, 0, 8, 3])\nPASS: list_balance_transformed(nums=[3, 8, 0, 0, 3, 8, 8, 0, 8, 3])\nPASS: list_balance_transformed(nums=[1, 8, 9, 5, 3, 0, 9, 6, 8, 10])\nPASS: list_balance_transformed(nums=[1, 8, 9, 5, 3, 8, 9, 6, 8, 10])\nPASS: list_balance_transformed(nums=[1, 8, 9, 5, 3, 8, 9, 6, 9, 10])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[10, 9, 7])\nPASS: odd_sum_validator_transformed(lst=[1])\nPASS: odd_sum_validator_transformed(lst=[9, 2])\nPASS: odd_sum_validator_transformed(lst=[0, 6])\nPASS: odd_sum_validator_transformed(lst=[2, 2, 5])\nPASS: odd_sum_validator_transformed(lst=[6, 5, 10])\nPASS: odd_sum_validator_transformed(lst=[5, 4, 2, 5, 9, 2, 1])\nPASS: odd_sum_validator_transformed(lst=[1, 9, 4, 0, 7, 0])\nPASS: odd_sum_validator_transformed(lst=[1, 9, 1, 0, 7, 0])\nPASS: odd_sum_validator_transformed(lst=[0, 9, 1, 0, 7, 0])\nPASS: odd_sum_validator_transformed(lst=[9, 9, 1, 0, 7, 0])\nPASS: odd_sum_validator_transformed(lst=[9, 9, 1, 0, 7, 1])\nPASS: odd_sum_validator_transformed(lst=[9, 9, 1, 1, 7, 1])\nPASS: odd_sum_validator_transformed(lst=[9, 9, 1, 9, 7, 1])\nPASS: odd_sum_validator_transformed(lst=[6])\nPASS: odd_sum_validator_transformed(lst=[7, 4, 0, 10, 9, 9])\nPASS: odd_sum_validator_transformed(lst=[7, 4])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='\u0001\u00d2\u0007&')\nPASS: string_pattern_score_transformed(s='\ud805\udc7f\u0002\u00de')\nPASS: string_pattern_score_transformed(s='\udb36\udc6e\u0097\u001b\u00ff')\nPASS: string_pattern_score_transformed(s='\u0019\u0014\u00e0\u00e4')\nPASS: string_pattern_score_transformed(s='\u001d\ud817\udc2e\u00beM')\nPASS: string_pattern_score_transformed(s='\u00b9\u00f5')\nPASS: string_pattern_score_transformed(s='1V')\nPASS: string_pattern_score_transformed(s='kz\u00f6')\nPASS: string_pattern_score_transformed(s='\u00ef\udafa\udf2e\u1031&2]\u00adtN')\nPASS: string_pattern_score_transformed(s='\u0089')\nPASS: string_pattern_score_transformed(s='\u00ef\u00b4\u00d6;0')\nPASS: string_pattern_score_transformed(s='\u000f\ud94c\udf29\ud8a8\udc32\u00ef')\nPASS: string_pattern_score_transformed(s='\u001c0\u0005\u00ec')\nPASS: string_pattern_score_transformed(s=';\udb3a\udebd\u00aa\udb97\udf84P\b\u00d2:\u356d|')\nPASS: string_pattern_score_transformed(s='\u00ce')\nPASS: string_pattern_score_transformed(s='@\u00ff')\nPASS: string_pattern_score_transformed(s='\ud817\udf75')\nPASS: string_pattern_score_transformed(s='\u00b7\u00c6\u00c9\ud850\udce3')\nPASS: string_pattern_score_transformed(s='_\u00dc^n!')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[11])\nPASS: sum_until_limit_transformed(nums=[9])\nPASS: sum_until_limit_transformed(nums=[6, 20])\nFAIL: sum_until_limit_transformed(nums=[15, 17, 18, 9, 20, 2, 8, 17, 11, 18])\nPASS: sum_until_limit_transformed(nums=[0, 14, 12, 5, 20, 18])\nFAIL: sum_until_limit_transformed(nums=[10, 1, 19, 8, 7, 6, 4, 7, 1])\nPASS: sum_until_limit_transformed(nums=[7, 12, 7, 10])\nPASS: sum_until_limit_transformed(nums=[9, 2])\nPASS: sum_until_limit_transformed(nums=[19, 11, 9, 7, 15, 11, 14, 0, 13, 15])\nPASS: sum_until_limit_transformed(nums=[3, 0, 16, 6, 11, 17, 15, 0])\nPASS: sum_until_limit_transformed(nums=[3, 0, 16, 11, 11, 17, 15, 0])\nPASS: sum_until_limit_transformed(nums=[3, 11, 16, 11, 11, 17, 15, 0])\nPASS: sum_until_limit_transformed(nums=[3, 17, 16, 11, 11, 17, 15, 0])\nPASS: sum_until_limit_transformed(nums=[3, 17, 17, 11, 11, 17, 15, 0])\nPASS: sum_until_limit_transformed(nums=[3, 17, 17, 11, 11, 17, 15, 17])\nPASS: sum_until_limit_transformed(nums=[3, 17, 17, 17, 11, 17, 15, 17])\nPASS: sum_until_limit_transformed(nums=[12, 11, 8, 7, 19, 4, 14])\nPASS: sum_until_limit_transformed(nums=[7, 11, 8, 7, 19, 4, 14])\nPASS: sum_until_limit_transformed(nums=[14, 11, 8, 7, 19, 4, 14])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[14])\nPASS: count_divisibles_transformed(nums=[10])\nPASS: count_divisibles_transformed(nums=[19, 5, 8, 5, 7, 20, 19, 12, 4, 14])\nPASS: count_divisibles_transformed(nums=[14, 3, 11, 3, 7, 17, 7, 1, 19, 10])\nPASS: count_divisibles_transformed(nums=[8, 12, 20, 10])\nPASS: count_divisibles_transformed(nums=[12, 19, 6])\nPASS: count_divisibles_transformed(nums=[18, 13, 14, 20, 4, 3, 15, 16])\nPASS: count_divisibles_transformed(nums=[15, 4])\nPASS: count_divisibles_transformed(nums=[5])\nPASS: count_divisibles_transformed(nums=[20, 5, 6, 17, 6, 13, 15, 4, 7, 13])\nPASS: count_divisibles_transformed(nums=[20, 5, 6, 17, 6, 13, 15, 15, 7, 13])\nPASS: count_divisibles_transformed(nums=[20, 5, 6, 17, 6, 13, 5, 15, 7, 13])\nPASS: count_divisibles_transformed(nums=[20, 5, 6, 17, 6, 13, 5, 15, 13, 13])\nPASS: count_divisibles_transformed(nums=[20, 5, 6, 6, 6, 13, 5, 15, 13, 13])\nPASS: count_divisibles_transformed(nums=[20, 5, 13, 6, 6, 13, 5, 15, 13, 13])\nPASS: count_divisibles_transformed(nums=[20, 5, 13, 13, 6, 13, 5, 15, 13, 13])\nPASS: count_divisibles_transformed(nums=[18])\nPASS: count_divisibles_transformed(nums=[10, 6, 5, 3, 1, 19])\nPASS: count_divisibles_transformed(nums=[10, 6, 5])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[3])\nPASS: index_weighted_sum_transformed(lst=[1])\nPASS: index_weighted_sum_transformed(lst=[1, 2])\nPASS: index_weighted_sum_transformed(lst=[4])\nPASS: index_weighted_sum_transformed(lst=[2, 8, 3, 7, 0, 5, 6, 10, 0, 10])\nPASS: index_weighted_sum_transformed(lst=[4, 8, 10, 2, 3])\nPASS: index_weighted_sum_transformed(lst=[3, 6, 6, 9, 7, 2, 10, 5, 3, 9])\nPASS: index_weighted_sum_transformed(lst=[10, 5, 10, 5, 3])\nPASS: index_weighted_sum_transformed(lst=[5, 10, 0, 4, 8])\nPASS: index_weighted_sum_transformed(lst=[1, 1, 3, 3, 0, 8])\nPASS: index_weighted_sum_transformed(lst=[1, 1, 3])\nPASS: index_weighted_sum_transformed(lst=[1, 3, 3])\nPASS: index_weighted_sum_transformed(lst=[3, 1, 3])\nPASS: index_weighted_sum_transformed(lst=[3, 1, 1])\nPASS: index_weighted_sum_transformed(lst=[4, 0, 1, 6, 1, 2, 6, 3, 0, 1])\nPASS: index_weighted_sum_transformed(lst=[4, 0, 1, 6, 1, 2, 6, 0, 0, 1])\nPASS: index_weighted_sum_transformed(lst=[4, 0, 1, 6, 1, 2, 6, 4, 0, 1])\nPASS: index_weighted_sum_transformed(lst=[4, 0, 1, 6, 1, 6, 6, 4, 0, 1])\nPASS: index_weighted_sum_transformed(lst=[4, 0, 1, 1, 1, 6, 6, 4, 0, 1])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=8)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00c2\u00daW*')\nPASS: character_counter_transformed(text='\u8ebe\bM\ud836\uddb6\u0003\ud9d3\udcde')\nPASS: character_counter_transformed(text='\u0014\udbd2\ude1e')\nPASS: character_counter_transformed(text='\u00ea\u00a2\u00c6>;')\nPASS: character_counter_transformed(text='B\n!\udb7d\udcf8\u00a3\ud9ea\udfd6\u00bb\u0089')\nPASS: character_counter_transformed(text='}\u00a8\udace\uded6\u00e8\u00b2\u00e4mN')\nPASS: character_counter_transformed(text=' \n<5')\nPASS: character_counter_transformed(text='~\uda7c\udeb2\u009e\u00df')\nPASS: character_counter_transformed(text='\ud9fa\ude89')\nPASS: character_counter_transformed(text='\u00b4S\b\u0084#\u00d3q\u00b3')\nPASS: character_counter_transformed(text='Y')\nPASS: character_counter_transformed(text='\u00d9%X')\nPASS: character_counter_transformed(text='\ud86a\udca2$\u008b\udab3\udcc6i\u0012\u0018')\nPASS: character_counter_transformed(text='\ud9ac\udced{5')\nPASS: character_counter_transformed(text='\u008e\ud959\udf66\u0097')\nPASS: character_counter_transformed(text='\u00aa\u008a')\nPASS: character_counter_transformed(text='%\ud826\udd69a\udb0c\ude8c\u0089\u00d7')\nPASS: character_counter_transformed(text='\u00e3')\nPASS: character_counter_transformed(text='\udb35\udc04')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[27])\nPASS: rolling_maximum_transformed(values=[22])\nPASS: rolling_maximum_transformed(values=[22, 10, 88])\nPASS: rolling_maximum_transformed(values=[4, 60, 31, 27, 51, 33, 57, 16, 57, 75])\nPASS: rolling_maximum_transformed(values=[55])\nPASS: rolling_maximum_transformed(values=[27, 92])\nPASS: rolling_maximum_transformed(values=[49, 29])\nPASS: rolling_maximum_transformed(values=[44, 95, 98, 13])\nPASS: rolling_maximum_transformed(values=[6, 57, 77, 66, 22])\nPASS: rolling_maximum_transformed(values=[82, 17, 28])\nPASS: rolling_maximum_transformed(values=[82, 82, 28])\nPASS: rolling_maximum_transformed(values=[28, 82, 28])\nPASS: rolling_maximum_transformed(values=[29, 43])\nPASS: rolling_maximum_transformed(values=[29, 29])\nPASS: rolling_maximum_transformed(values=[51, 32, 58, 63, 74])\nPASS: rolling_maximum_transformed(values=[51, 32, 58, 58, 74])\nPASS: rolling_maximum_transformed(values=[32, 32, 58, 58, 74])\nPASS: rolling_maximum_transformed(values=[32, 32, 58, 32, 74])\nPASS: rolling_maximum_transformed(values=[32, 32, 58, 32, 32])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "fibonacci_counter": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=55)\nPASS: process_data_transformed(x=11)\nPASS: process_data_transformed(x=90)\nPASS: process_data_transformed(x=69)\nPASS: process_data_transformed(x=4)\nPASS: process_data_transformed(x=34)\nPASS: process_data_transformed(x=17)\nPASS: process_data_transformed(x=24)\nPASS: process_data_transformed(x=41)\nPASS: process_data_transformed(x=100)\nPASS: process_data_transformed(x=49)\nPASS: process_data_transformed(x=47)\nPASS: process_data_transformed(x=44)\nPASS: process_data_transformed(x=73)\nPASS: process_data_transformed(x=96)\nPASS: process_data_transformed(x=63)\nPASS: process_data_transformed(x=67)\nPASS: process_data_transformed(x=3)\nPASS: process_data_transformed(x=68)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=2.6684835363008985e-27)\nPASS: convert_temperature_transformed(c=2.2250738585072014e-308)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=83.87154268423902)\nPASS: convert_temperature_transformed(c=99.0)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=0.99999)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=69.176700874987)\nPASS: convert_temperature_transformed(c=2.318955803208669e-168)\nPASS: convert_temperature_transformed(c=74.95534276358508)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=1.0)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=87.22548383357524)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=16.041708686450054)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=0.99999)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.8988441051874227)\nPASS: calculate_discount_transformed(price=1.1, discount_rate=2.220446049250313e-16)\nPASS: calculate_discount_transformed(price=8.603178319551617e-234, discount_rate=1e-05)\nPASS: calculate_discount_transformed(price=2.00001, discount_rate=0.45237088964832795)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=1.1125369292536007e-308)\nPASS: calculate_discount_transformed(price=1.5, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=0.3333333333333333, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=1.0, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=118.51528357730704, discount_rate=0.5448063940736311)\nPASS: calculate_discount_transformed(price=118.51528357730704, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=0.24133484234128094)\nPASS: calculate_discount_transformed(price=0.24133484234128094, discount_rate=0.24133484234128094)\nPASS: calculate_discount_transformed(price=44.86221247785359, discount_rate=1.0)\nPASS: calculate_discount_transformed(price=44.86221247785359, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=1.175494351e-38, discount_rate=1.175494351e-38)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=0.0)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=-20.0)\nPASS: process_complex_number_transformed(real=1.192092896e-07, imag=0.0)\nPASS: process_complex_number_transformed(real=-2.00001, imag=-19.568594189974622)\nPASS: process_complex_number_transformed(real=20.0, imag=-2.14916984565685)\nPASS: process_complex_number_transformed(real=-1.192092896e-07, imag=1.175494351e-38)\nPASS: process_complex_number_transformed(real=1.401298464324817e-45, imag=-1.1)\nPASS: process_complex_number_transformed(real=-1.192092896e-07, imag=-5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=1.1125369292536007e-308, imag=-5e-324)\nPASS: process_complex_number_transformed(real=2.00001, imag=-1.192092896e-07)\nPASS: process_complex_number_transformed(real=2.00001, imag=2.00001)\nPASS: process_complex_number_transformed(real=19.999999999999996, imag=18.25082915110393)\nPASS: process_complex_number_transformed(real=18.25082915110393, imag=18.25082915110393)\nPASS: process_complex_number_transformed(real=-1.1125369292536007e-308, imag=-1.9)\nPASS: process_complex_number_transformed(real=-1.1125369292536007e-308, imag=-1.1125369292536007e-308)\nPASS: process_complex_number_transformed(real=2.2250738585072014e-308, imag=-1.175494351e-38)\nPASS: process_complex_number_transformed(real=-1.175494351e-38, imag=-1.175494351e-38)\nPASS: process_complex_number_transformed(real=-2.225073858507e-311, imag=11.825981176351554)\nPASS: process_complex_number_transformed(real=11.825981176351554, imag=11.825981176351554)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=15)\nPASS: transform_data_transformed(input_value=25)\nPASS: transform_data_transformed(input_value=14)\nPASS: transform_data_transformed(input_value=48)\nPASS: transform_data_transformed(input_value=21)\nPASS: transform_data_transformed(input_value=89)\nPASS: transform_data_transformed(input_value=56)\nPASS: transform_data_transformed(input_value=37)\nPASS: transform_data_transformed(input_value=28)\nPASS: transform_data_transformed(input_value=73)\nPASS: transform_data_transformed(input_value=46)\nPASS: transform_data_transformed(input_value=20)\nPASS: transform_data_transformed(input_value=93)\nPASS: transform_data_transformed(input_value=75)\nPASS: transform_data_transformed(input_value=77)\nPASS: transform_data_transformed(input_value=32)\nPASS: transform_data_transformed(input_value=1)\nPASS: transform_data_transformed(input_value=92)\nPASS: transform_data_transformed(input_value=74)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: circle_area_diff_transformed(r=1.683618793170978)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=1.192092896e-07)\nPASS: circle_area_diff_transformed(r=13.504901110348618)\nPASS: circle_area_diff_transformed(r=1.175494351e-38)\nPASS: circle_area_diff_transformed(r=6.103515625e-05)\nPASS: circle_area_diff_transformed(r=10.49063008611691)\nPASS: circle_area_diff_transformed(r=5.960464477539063e-08)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=15.660040322723647)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=16.0448358674606)\nPASS: circle_area_diff_transformed(r=2.5148551395632883)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=16.19517619234631)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=16, b=1, c=1)\nPASS: triangle_checker_transformed(a=16, b=5, c=3)\nPASS: triangle_checker_transformed(a=14, b=16, c=13)\nPASS: triangle_checker_transformed(a=18, b=14, c=6)\nPASS: triangle_checker_transformed(a=20, b=1, c=3)\nPASS: triangle_checker_transformed(a=11, b=12, c=10)\nPASS: triangle_checker_transformed(a=13, b=18, c=3)\nPASS: triangle_checker_transformed(a=19, b=17, c=9)\nPASS: triangle_checker_transformed(a=11, b=2, c=7)\nPASS: triangle_checker_transformed(a=17, b=17, c=3)\nPASS: triangle_checker_transformed(a=3, b=17, c=3)\nPASS: triangle_checker_transformed(a=3, b=3, c=3)\nPASS: triangle_checker_transformed(a=16, b=5, c=10)\nPASS: triangle_checker_transformed(a=16, b=5, c=5)\nPASS: triangle_checker_transformed(a=5, b=5, c=5)\nPASS: triangle_checker_transformed(a=8, b=8, c=3)\nPASS: triangle_checker_transformed(a=8, b=3, c=3)\nPASS: triangle_checker_transformed(a=8, b=3, c=8)\nPASS: triangle_checker_transformed(a=8, b=8, c=8)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=33.50761271364023)\nPASS: temperature_offset_transformed(c=48.396712804856946)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=58.40844048900983)\nPASS: temperature_offset_transformed(c=27.588880943194567)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=31.036848419711177)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=81.26050017990974)\nPASS: temperature_offset_transformed(c=61.842453544455864)\nPASS: temperature_offset_transformed(c=98.6780141669432)\nPASS: temperature_offset_transformed(c=0.3333333333333333)\nPASS: temperature_offset_transformed(c=21.023594899501013)\nPASS: temperature_offset_transformed(c=2.225073858507e-311)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=1, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=1, b=-1, c=-3)\nPASS: quadratic_discriminant_transformed(a=3, b=3, c=-8)\nPASS: quadratic_discriminant_transformed(a=3, b=-4, c=0)\nPASS: quadratic_discriminant_transformed(a=7, b=1, c=-8)\nPASS: quadratic_discriminant_transformed(a=5, b=2, c=-3)\nPASS: quadratic_discriminant_transformed(a=-8, b=7, c=7)\nPASS: quadratic_discriminant_transformed(a=6, b=-4, c=-6)\nPASS: quadratic_discriminant_transformed(a=-1, b=4, c=3)\nPASS: quadratic_discriminant_transformed(a=-7, b=2, c=-9)\nPASS: quadratic_discriminant_transformed(a=2, b=2, c=-9)\nPASS: quadratic_discriminant_transformed(a=-9, b=2, c=-9)\nPASS: quadratic_discriminant_transformed(a=2, b=2, c=2)\nPASS: quadratic_discriminant_transformed(a=3, b=8, c=-4)\nPASS: quadratic_discriminant_transformed(a=3, b=3, c=-4)\nPASS: quadratic_discriminant_transformed(a=-4, b=3, c=-4)\nPASS: quadratic_discriminant_transformed(a=-4, b=-4, c=-4)\nPASS: quadratic_discriminant_transformed(a=5, b=1, c=-2)\nPASS: quadratic_discriminant_transformed(a=-2, b=1, c=-2)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=-2.00001, y=0.0)\nPASS: vector_norm_transformed(x=-2.00001, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-0.0, y=-1.175494351e-38)\nPASS: vector_norm_transformed(x=9.999999999999998, y=-1.5)\nPASS: vector_norm_transformed(x=-1.1125369292536007e-308, y=-1e-05)\nPASS: vector_norm_transformed(x=1.192092896e-07, y=5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-2.220446049250313e-16, y=-9.999999999999998)\nPASS: vector_norm_transformed(x=-5.960464477539063e-08, y=-5.960464477539063e-08)\nPASS: vector_norm_transformed(x=-0.5, y=-0.3333333333333333)\nPASS: vector_norm_transformed(x=1.2942629347318947e-52, y=6.575703213058624)\nPASS: vector_norm_transformed(x=6.575703213058624, y=6.575703213058624)\nPASS: vector_norm_transformed(x=-1.9, y=-5.373911528082592)\nPASS: vector_norm_transformed(x=-1.9, y=-1.9)\nPASS: vector_norm_transformed(x=1.2197225276376604e-20, y=-5e-324)\nPASS: vector_norm_transformed(x=-5e-324, y=-5e-324)\nPASS: vector_norm_transformed(x=-1.1754943508222875e-38, y=-1.175494351e-38)\nPASS: vector_norm_transformed(x=-1.175494351e-38, y=-1.175494351e-38)\nPASS: vector_norm_transformed(x=-10.0, y=-2.6027148043823483e-95)\nPASS: vector_norm_transformed(x=-2.6027148043823483e-95, y=-2.6027148043823483e-95)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.3274997657788857e-52, b=0.0)\nPASS: hypotenuse_diff_transformed(a=1.3274997657788857e-52, b=1e-05)\nPASS: hypotenuse_diff_transformed(a=9.999999999999998, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=2.225073858507e-311, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=9.0)\nPASS: hypotenuse_diff_transformed(a=0.0, b=1.5)\nPASS: hypotenuse_diff_transformed(a=1.572094885145994, b=0.6629405174305504)\nPASS: hypotenuse_diff_transformed(a=5.655335923473653, b=1e-05)\nPASS: hypotenuse_diff_transformed(a=5.655335923473653, b=5.655335923473653)\nPASS: hypotenuse_diff_transformed(a=1.9, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=2.118452121051009)\nPASS: hypotenuse_diff_transformed(a=2.118452121051009, b=2.118452121051009)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=9.0)\nPASS: hypotenuse_diff_transformed(a=1.192092896e-07, b=1.192092896e-07)\nPASS: hypotenuse_diff_transformed(a=1.0, b=10.0)\nPASS: hypotenuse_diff_transformed(a=1.0, b=1.0)\nPASS: hypotenuse_diff_transformed(a=0.5, b=1.401298464324817e-45)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u0099\ud826\udc7a\u00b6b\u00bf\u00d1V^\u008b')\nPASS: ascii_average_transformed(s='0L')\nPASS: ascii_average_transformed(s=' ')\nPASS: ascii_average_transformed(s='\u0083')\nPASS: ascii_average_transformed(s='\u0094\u0006')\nPASS: ascii_average_transformed(s='COM1')\nPASS: ascii_average_transformed(s='uH\udbd2\udf91nl\ud83b\ude51\udbe6\uddcd\u0011')\nPASS: ascii_average_transformed(s='\u001c\u00eb^F:\udbcc\udf90\ud95b\udd5bv\u00f3G')\nPASS: ascii_average_transformed(s='\u0083\u0000\u00a2\udaa8\udc7a\ud913\udde1 ')\nPASS: ascii_average_transformed(s='\u0089r\u00f4')\nPASS: ascii_average_transformed(s='\u00f4')\nPASS: ascii_average_transformed(s='X!\u00bc\u0097\u001e\uda25\udf00')\nPASS: ascii_average_transformed(s='\ud97a\udc02\u0014\u00a8\u00a8\ud913\udc90\u00ec\udbdf\udca3U\u00b0\u00cb')\nPASS: ascii_average_transformed(s='\u008c\u00e6')\nPASS: ascii_average_transformed(s='\u00bam\u000f\ud84b\udcc5')\nPASS: ascii_average_transformed(s=':J')\nPASS: ascii_average_transformed(s='\u00ae\u0013\u00db\u00b4\ud902\ude1c\u00aa\udb69\ude99s]#')\nPASS: ascii_average_transformed(s='d')\nPASS: ascii_average_transformed(s='\u008b\uda01\udde1\u0017k\u00b7GC\ud938\udc78>\u00cb')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[5, 0])\nPASS: list_balance_transformed(nums=[7, 0])\nPASS: list_balance_transformed(nums=[7, 5, 8, 7, 8, 3, 10])\nPASS: list_balance_transformed(nums=[2, 5, 1, 0, 8, 0, 5, 10, 6])\nPASS: list_balance_transformed(nums=[1, 2, 0, 0, 9, 9, 7, 10, 3, 9])\nPASS: list_balance_transformed(nums=[7, 7, 6])\nPASS: list_balance_transformed(nums=[5, 10, 4, 9, 5, 9])\nPASS: list_balance_transformed(nums=[7, 10, 7, 5, 3, 6, 3, 6, 7, 4])\nPASS: list_balance_transformed(nums=[8, 3, 4, 7, 7, 8])\nPASS: list_balance_transformed(nums=[4, 4, 6, 5, 4, 1, 8, 6, 8])\nPASS: list_balance_transformed(nums=[4, 4, 6, 6, 4, 1, 8, 6, 8])\nPASS: list_balance_transformed(nums=[4, 4, 4, 6, 4, 1, 8, 6, 8])\nPASS: list_balance_transformed(nums=[4, 4, 4, 6, 4, 6, 8, 6, 8])\nPASS: list_balance_transformed(nums=[4, 4, 4, 4, 4, 6, 8, 6, 8])\nPASS: list_balance_transformed(nums=[4, 6, 4, 4, 4, 6, 8, 6, 8])\nPASS: list_balance_transformed(nums=[7, 1, 9, 8, 6])\nPASS: list_balance_transformed(nums=[7, 6, 9, 8, 6])\nPASS: list_balance_transformed(nums=[7, 6, 8, 8, 6])\nPASS: list_balance_transformed(nums=[7, 8, 8, 8, 6])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[2])\nPASS: odd_sum_validator_transformed(lst=[7])\nPASS: odd_sum_validator_transformed(lst=[7, 7])\nPASS: odd_sum_validator_transformed(lst=[3, 1, 1, 10, 8, 2])\nPASS: odd_sum_validator_transformed(lst=[8, 4, 7])\nPASS: odd_sum_validator_transformed(lst=[6, 7, 0, 3, 4, 0, 10, 6, 1, 0])\nPASS: odd_sum_validator_transformed(lst=[8])\nPASS: odd_sum_validator_transformed(lst=[9])\nPASS: odd_sum_validator_transformed(lst=[6])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[1])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[1, 0, 4, 2, 3, 1, 9])\nPASS: odd_sum_validator_transformed(lst=[1, 0, 4, 2, 3, 1, 0])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 4, 2, 3, 1, 0])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 4, 2, 3, 0, 0])\nPASS: odd_sum_validator_transformed(lst=[1, 1, 4, 1, 3, 0, 0])\nPASS: odd_sum_validator_transformed(lst=[4, 1, 4, 1, 3, 0, 0])\nPASS: odd_sum_validator_transformed(lst=[1, 0])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='M\u00e8\u00ad't')\nPASS: string_pattern_score_transformed(s='\b\u00d5\u00c1')\nPASS: string_pattern_score_transformed(s='\u00c2\ua908JQ')\nPASS: string_pattern_score_transformed(s='true')\nPASS: string_pattern_score_transformed(s='\u0090-\udb0a\udf74\u00f1\u001a\u009a')\nPASS: string_pattern_score_transformed(s='R\udaff\udea1\u00823')\nPASS: string_pattern_score_transformed(s='\u0093\udab8\udd9f\ud8c7\udeab\udb57\udf70')\nPASS: string_pattern_score_transformed(s='\ud833\udea2\u00c6\uda93\udf5f\u00e3~\u00ebM\u00b4\u00c1')\nPASS: string_pattern_score_transformed(s='\u0005T%')\nPASS: string_pattern_score_transformed(s=''\u0013b')\nPASS: string_pattern_score_transformed(s='\ud9a5\udfca')\nPASS: string_pattern_score_transformed(s='\u008aRLT~\u00f9')\nPASS: string_pattern_score_transformed(s='\u00c7 \uda31\ude3a\ud8a3\udec8o\udbce\udda2\udbff\udcbf\uda49\udde6\u00cd')\nPASS: string_pattern_score_transformed(s='W\u00b0\u00f9\u00c6G')\nPASS: string_pattern_score_transformed(s='\\\u0001\u0006\u00f0\u00a1\u00bd')\nPASS: string_pattern_score_transformed(s='l\u009d\u00d8\ud997\udd5c\u0018\u00d57\u00f8\u00db\u00e5')\nPASS: string_pattern_score_transformed(s='\u001d\u00c2\u00e2')\nPASS: string_pattern_score_transformed(s='\u00d3\u00c1\u00cd\u00d4\u00cb:bQC\u00be')\nPASS: string_pattern_score_transformed(s='\t\u0011\u0097\u00fc\u00fe\u0090\uda2f\uddbd\u00afnu')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[10])\nPASS: sum_until_limit_transformed(nums=[5])\nPASS: sum_until_limit_transformed(nums=[1, 16, 1, 0, 10, 0, 11, 2, 5, 10])\nPASS: sum_until_limit_transformed(nums=[12, 7, 2, 13, 11, 11, 11, 2, 11, 15])\nPASS: sum_until_limit_transformed(nums=[5, 20, 14, 18, 8, 8, 11])\nPASS: sum_until_limit_transformed(nums=[10, 8, 10, 17, 0])\nPASS: sum_until_limit_transformed(nums=[9, 15, 13, 1, 14, 14, 14])\nPASS: sum_until_limit_transformed(nums=[15])\nPASS: sum_until_limit_transformed(nums=[15, 1, 10, 17, 16, 13, 3, 20, 14, 1])\nPASS: sum_until_limit_transformed(nums=[1])\nPASS: sum_until_limit_transformed(nums=[12])\nPASS: sum_until_limit_transformed(nums=[5, 9])\nPASS: sum_until_limit_transformed(nums=[9, 9])\nPASS: sum_until_limit_transformed(nums=[11, 5, 16, 5, 5, 19, 5, 8])\nPASS: sum_until_limit_transformed(nums=[11, 11, 16, 5, 5, 19, 5, 8])\nPASS: sum_until_limit_transformed(nums=[11, 11, 16, 8, 5, 19, 5, 8])\nPASS: sum_until_limit_transformed(nums=[11, 11, 16, 8, 11, 19, 5, 8])\nPASS: sum_until_limit_transformed(nums=[11, 11, 16, 8, 11, 5, 5, 8])\nPASS: sum_until_limit_transformed(nums=[11, 11, 16, 8, 11, 5, 11, 8])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[2])\nPASS: count_divisibles_transformed(nums=[2, 12])\nPASS: count_divisibles_transformed(nums=[2, 12, 16, 4])\nPASS: count_divisibles_transformed(nums=[12, 4])\nPASS: count_divisibles_transformed(nums=[1, 7, 15])\nPASS: count_divisibles_transformed(nums=[4, 5])\nPASS: count_divisibles_transformed(nums=[4])\nPASS: count_divisibles_transformed(nums=[4, 18, 3])\nPASS: count_divisibles_transformed(nums=[1])\nPASS: count_divisibles_transformed(nums=[13, 20, 11, 13, 19, 19, 15, 2, 2, 14])\nPASS: count_divisibles_transformed(nums=[13, 20, 11, 13, 19, 15, 15, 2, 2, 14])\nPASS: count_divisibles_transformed(nums=[13, 13, 11, 13, 19, 15, 15, 2, 2, 14])\nPASS: count_divisibles_transformed(nums=[13, 13, 11, 13, 19, 15, 13, 2, 2, 14])\nPASS: count_divisibles_transformed(nums=[13, 13, 11, 13, 19, 15, 14, 2, 2, 14])\nPASS: count_divisibles_transformed(nums=[13, 13, 2, 13, 19, 15, 14, 2, 2, 14])\nPASS: count_divisibles_transformed(nums=[13, 13, 19, 13, 19, 15, 14, 2, 2, 14])\nPASS: count_divisibles_transformed(nums=[18, 2, 12, 7, 19, 8, 16, 12, 11, 4])\nPASS: count_divisibles_transformed(nums=[18, 2, 12, 7, 19, 8, 16, 16, 11, 4])\nPASS: count_divisibles_transformed(nums=[18, 2, 16, 7, 19, 8, 16, 16, 11, 4])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[6])\nPASS: index_weighted_sum_transformed(lst=[7, 4, 10])\nPASS: index_weighted_sum_transformed(lst=[0, 1, 3, 1, 1, 7])\nPASS: index_weighted_sum_transformed(lst=[9, 7, 10, 5, 6, 10, 5, 5])\nPASS: index_weighted_sum_transformed(lst=[9])\nPASS: index_weighted_sum_transformed(lst=[4, 4, 2, 10, 1, 1, 7, 9, 9, 3])\nPASS: index_weighted_sum_transformed(lst=[1, 4, 2, 4, 10, 10])\nPASS: index_weighted_sum_transformed(lst=[6, 1])\nPASS: index_weighted_sum_transformed(lst=[8, 9, 2, 8, 2, 3, 3])\nPASS: index_weighted_sum_transformed(lst=[8, 9, 2, 2, 2, 3, 3])\nPASS: index_weighted_sum_transformed(lst=[3, 9, 2, 2, 2, 3, 3])\nPASS: index_weighted_sum_transformed(lst=[3, 3, 2, 2, 2, 3, 3])\nPASS: index_weighted_sum_transformed(lst=[3, 2, 2, 2, 2, 3, 3])\nPASS: index_weighted_sum_transformed(lst=[3, 2, 2, 2, 2, 3, 2])\nPASS: index_weighted_sum_transformed(lst=[2, 2, 2, 0, 5, 3, 2, 2, 1, 8])\nPASS: index_weighted_sum_transformed(lst=[2, 2, 2, 0, 5, 3, 2, 2, 2, 8])\nPASS: index_weighted_sum_transformed(lst=[2, 2, 2, 0, 2, 3, 2, 2, 2, 8])\nPASS: index_weighted_sum_transformed(lst=[2, 8, 2, 0, 2, 3, 2, 2, 2, 8])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=1)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\ud83d\ude0d')\nPASS: character_counter_transformed(text='\ud881\udee9\u00b0\u00a3x_')\nPASS: character_counter_transformed(text='None')\nPASS: character_counter_transformed(text='K\u0099$\u00f4\ud85c\udcc8}\u0090[\u0089')\nPASS: character_counter_transformed(text='\ud82b\udfd4')\nPASS: character_counter_transformed(text='\u0092\u00b5\u0090\u0010')\nPASS: character_counter_transformed(text='a\u001d\u00f2\u00c3\u00a3R')\nPASS: character_counter_transformed(text='\udac8\udd93r\ud876\uddf4\uda4b\udd05')\nPASS: character_counter_transformed(text='\udbd9\udda4\u0081\u001b\ud876\udd15\u00b0\u00b2c\u000b\u0096\u00c2')\nPASS: character_counter_transformed(text='f\u008d')\nPASS: character_counter_transformed(text='\u00a9\u00eb\u00f8\u0082\u00bd\u0000\u0005\u000bB\u00ad')\nPASS: character_counter_transformed(text='\uda45\ude71I;\u00c7O\u0095\u0085\ud9f3\uddeb\u00d7K')\nPASS: character_counter_transformed(text='\u00c6\f\ud989\udc00\u008d\u00d9D\ud8cb\ude99\u00ec\udaed\udc9f1')\nPASS: character_counter_transformed(text='\u000e')\nPASS: character_counter_transformed(text='\n#\ud879\udc9d\u0080')\nPASS: character_counter_transformed(text='\u00f1')\nPASS: character_counter_transformed(text='\uda1d\udc6axY\u001cr\ud86c\udf46\u008cN\u00ae\ud984\udc49')\nPASS: character_counter_transformed(text='\u0014\udb82\ude2c')\nPASS: character_counter_transformed(text='\u00cby\u0000\u0081\udb64\uddc9\u00e5\u0094/\u00a0\u0001')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[30])\nPASS: rolling_maximum_transformed(values=[30, 4, 3])\nPASS: rolling_maximum_transformed(values=[61, 10])\nPASS: rolling_maximum_transformed(values=[67])\nPASS: rolling_maximum_transformed(values=[57, 92, 72, 71, 32, 88, 99, 62, 89, 70])\nPASS: rolling_maximum_transformed(values=[31])\nPASS: rolling_maximum_transformed(values=[72, 85, 21, 37, 65, 42, 73, 47, 58, 63])\nPASS: rolling_maximum_transformed(values=[52, 15, 47, 59, 86])\nPASS: rolling_maximum_transformed(values=[16, 51, 10])\nPASS: rolling_maximum_transformed(values=[18, 19, 25, 23])\nPASS: rolling_maximum_transformed(values=[50, 57, 3])\nPASS: rolling_maximum_transformed(values=[50, 3, 3])\nPASS: rolling_maximum_transformed(values=[50, 3, 50])\nPASS: rolling_maximum_transformed(values=[50, 50, 50])\nPASS: rolling_maximum_transformed(values=[35, 19, 65, 77, 59])\nPASS: rolling_maximum_transformed(values=[35, 65, 65, 77, 59])\nPASS: rolling_maximum_transformed(values=[77, 65, 65, 77, 59])\nPASS: rolling_maximum_transformed(values=[77, 59, 65, 77, 59])\nPASS: rolling_maximum_transformed(values=[77, 59, 59, 77, 59])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "loop_even_sum": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=18)\nPASS: process_data_transformed(x=84)\nPASS: process_data_transformed(x=8)\nPASS: process_data_transformed(x=35)\nPASS: process_data_transformed(x=30)\nPASS: process_data_transformed(x=66)\nPASS: process_data_transformed(x=45)\nPASS: process_data_transformed(x=39)\nPASS: process_data_transformed(x=63)\nPASS: process_data_transformed(x=54)\nPASS: process_data_transformed(x=86)\nPASS: process_data_transformed(x=72)\nPASS: process_data_transformed(x=97)\nPASS: process_data_transformed(x=68)\nPASS: process_data_transformed(x=60)\nPASS: process_data_transformed(x=80)\nPASS: process_data_transformed(x=1)\nPASS: process_data_transformed(x=24)\nPASS: process_data_transformed(x=77)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=6.775976056040413)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=1.1125369292536007e-308)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=5.960464477539063e-08)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=63.524524453346096)\nPASS: convert_temperature_transformed(c=85.96485286738347)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: convert_temperature_transformed(c=5e-324)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=87.77849641993856)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=2.220446049250313e-16)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=95.36350785924836)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=166.3997755593162, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=2.2250738585072014e-308, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=2.2250738585e-313, discount_rate=0.4601826831837338)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=2.00001, discount_rate=0.3333333333333333)\nPASS: calculate_discount_transformed(price=2.00001, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=61.33127050940256, discount_rate=0.031907852817593126)\nPASS: calculate_discount_transformed(price=61.33127050940256, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=32.678416306104424, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=1.9, discount_rate=2.225073858507e-311)\nPASS: calculate_discount_transformed(price=2.225073858507e-311, discount_rate=2.225073858507e-311)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-1.192092896e-07, imag=0.0)\nPASS: process_complex_number_transformed(real=-1.192092896e-07, imag=2.225073858507e-311)\nPASS: process_complex_number_transformed(real=0.5, imag=0.3333333333333333)\nPASS: process_complex_number_transformed(real=5.103080013248281, imag=1.9)\nPASS: process_complex_number_transformed(real=1.55762702730055e-45, imag=1.5)\nPASS: process_complex_number_transformed(real=2.2250738585072014e-308, imag=-2.220446049250313e-16)\nPASS: process_complex_number_transformed(real=-2.225073858507203e-309, imag=5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=-1.906181010753393, imag=1.1)\nPASS: process_complex_number_transformed(real=1.401298464324817e-45, imag=-19.008747720331794)\nPASS: process_complex_number_transformed(real=1e-05, imag=-2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-2.225073858507e-311, imag=-2.225073858507e-311)\nPASS: process_complex_number_transformed(real=-1.175494351e-38, imag=2.2250738585e-313)\nPASS: process_complex_number_transformed(real=2.2250738585e-313, imag=2.2250738585e-313)\nPASS: process_complex_number_transformed(real=-2.2250738585072014e-308, imag=-0.5)\nPASS: process_complex_number_transformed(real=-2.2250738585072014e-308, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=19.999999999999996, imag=6.103515625e-05)\nPASS: process_complex_number_transformed(real=6.103515625e-05, imag=6.103515625e-05)\nPASS: process_complex_number_transformed(real=-19.999999999999996, imag=-2.2250738585072014e-308)\nPASS: process_complex_number_transformed(real=-19.999999999999996, imag=-19.999999999999996)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=76)\nPASS: transform_data_transformed(input_value=16)\nPASS: transform_data_transformed(input_value=33)\nPASS: transform_data_transformed(input_value=67)\nPASS: transform_data_transformed(input_value=26)\nPASS: transform_data_transformed(input_value=40)\nPASS: transform_data_transformed(input_value=2)\nPASS: transform_data_transformed(input_value=100)\nPASS: transform_data_transformed(input_value=61)\nPASS: transform_data_transformed(input_value=94)\nPASS: transform_data_transformed(input_value=91)\nPASS: transform_data_transformed(input_value=10)\nPASS: transform_data_transformed(input_value=74)\nPASS: transform_data_transformed(input_value=35)\nPASS: transform_data_transformed(input_value=12)\nPASS: transform_data_transformed(input_value=66)\nPASS: transform_data_transformed(input_value=87)\nPASS: transform_data_transformed(input_value=58)\nPASS: transform_data_transformed(input_value=38)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=2.2250738585e-313)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=11.061127462445263)\nPASS: circle_area_diff_transformed(r=1.1)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=17.7364951585716)\nPASS: circle_area_diff_transformed(r=1.0)\nPASS: circle_area_diff_transformed(r=15.729924159675672)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=4.135813239514923e-41)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=2.225073858507203e-309)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: circle_area_diff_transformed(r=0.5)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=19, b=1, c=1)\nPASS: triangle_checker_transformed(a=19, b=4, c=18)\nPASS: triangle_checker_transformed(a=17, b=11, c=20)\nPASS: triangle_checker_transformed(a=5, b=13, c=13)\nPASS: triangle_checker_transformed(a=1, b=18, c=7)\nPASS: triangle_checker_transformed(a=3, b=4, c=13)\nPASS: triangle_checker_transformed(a=7, b=16, c=8)\nPASS: triangle_checker_transformed(a=7, b=5, c=7)\nPASS: triangle_checker_transformed(a=5, b=19, c=14)\nPASS: triangle_checker_transformed(a=2, b=2, c=1)\nPASS: triangle_checker_transformed(a=2, b=1, c=1)\nPASS: triangle_checker_transformed(a=2, b=2, c=2)\nPASS: triangle_checker_transformed(a=7, b=16, c=5)\nPASS: triangle_checker_transformed(a=16, b=16, c=5)\nPASS: triangle_checker_transformed(a=5, b=16, c=5)\nPASS: triangle_checker_transformed(a=5, b=5, c=5)\nPASS: triangle_checker_transformed(a=17, b=19, c=20)\nPASS: triangle_checker_transformed(a=17, b=19, c=17)\nPASS: triangle_checker_transformed(a=17, b=19, c=19)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=0.99999)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=35.75866917764451)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=2.00001)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=91.05428318337627)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=17.294354960093862)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=2.225073858507203e-309)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=10, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=10, b=10, c=4)\nPASS: quadratic_discriminant_transformed(a=6, b=6, c=4)\nPASS: quadratic_discriminant_transformed(a=2, b=10, c=9)\nPASS: quadratic_discriminant_transformed(a=-6, b=5, c=10)\nPASS: quadratic_discriminant_transformed(a=-4, b=10, c=4)\nPASS: quadratic_discriminant_transformed(a=-2, b=4, c=2)\nPASS: quadratic_discriminant_transformed(a=10, b=9, c=7)\nPASS: quadratic_discriminant_transformed(a=4, b=-1, c=-8)\nPASS: quadratic_discriminant_transformed(a=-5, b=-2, c=8)\nPASS: quadratic_discriminant_transformed(a=-2, b=-2, c=8)\nPASS: quadratic_discriminant_transformed(a=8, b=-2, c=8)\nPASS: quadratic_discriminant_transformed(a=8, b=8, c=8)\nPASS: quadratic_discriminant_transformed(a=-1, b=10, c=3)\nPASS: quadratic_discriminant_transformed(a=10, b=10, c=3)\nPASS: quadratic_discriminant_transformed(a=3, b=10, c=3)\nPASS: quadratic_discriminant_transformed(a=3, b=3, c=3)\nPASS: quadratic_discriminant_transformed(a=8, b=8, c=3)\nPASS: quadratic_discriminant_transformed(a=1, b=3, c=1)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=2.0542090977931977, y=0.0)\nPASS: vector_norm_transformed(x=2.0542090977931977, y=-0.5)\nPASS: vector_norm_transformed(x=-0.7890582617169244, y=-1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=5e-324, y=-1.5)\nPASS: vector_norm_transformed(x=0.3333333333333333, y=2.225073858507203e-309)\nPASS: vector_norm_transformed(x=-5.994989182071362e-133, y=1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=-5.111010613555397, y=8.030664338787454e-102)\nPASS: vector_norm_transformed(x=-1.192092896e-07, y=-5e-324)\nPASS: vector_norm_transformed(x=1e-05, y=1.8609049153848485)\nPASS: vector_norm_transformed(x=1.1754943508222875e-38, y=-2.225073858507203e-309)\nPASS: vector_norm_transformed(x=1.1754943508222875e-38, y=1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=2.2250738585e-313, y=2.225073858507e-311)\nPASS: vector_norm_transformed(x=2.2250738585e-313, y=2.2250738585e-313)\nPASS: vector_norm_transformed(x=3.8522161470262545e-81, y=0.0)\nPASS: vector_norm_transformed(x=3.8522161470262545e-81, y=3.8522161470262545e-81)\nPASS: vector_norm_transformed(x=-1.1, y=1.1125369292536007e-308)\nPASS: vector_norm_transformed(x=-1.1, y=-1.1)\nPASS: vector_norm_transformed(x=-3.1988099375910686, y=10.0)\nPASS: vector_norm_transformed(x=10.0, y=10.0)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=0.0)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=1.175494351e-38, b=4.4017251571669656)\nPASS: hypotenuse_diff_transformed(a=10.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=2.220446049250313e-16, b=0.5)\nPASS: hypotenuse_diff_transformed(a=5.995603661992074, b=1.175494351e-38)\nPASS: hypotenuse_diff_transformed(a=1.0, b=9.0)\nPASS: hypotenuse_diff_transformed(a=1.1, b=5.574068883353283)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=0.99999)\nPASS: hypotenuse_diff_transformed(a=0.5, b=0.18317908867185653)\nPASS: hypotenuse_diff_transformed(a=0.5, b=0.5)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=0.3333333333333333)\nPASS: hypotenuse_diff_transformed(a=1.1754943508222875e-38, b=1.1754943508222875e-38)\nPASS: hypotenuse_diff_transformed(a=3.05810731307618, b=1.1)\nPASS: hypotenuse_diff_transformed(a=1.1, b=1.1)\nPASS: hypotenuse_diff_transformed(a=10.0, b=2.225073858507e-311)\nPASS: hypotenuse_diff_transformed(a=10.0, b=10.0)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\udba8\udd49')\nPASS: ascii_average_transformed(s='NaN')\nPASS: ascii_average_transformed(s='\u0098\uda7e\udcd3\u00ea\ud934\ude8f\u008e\u00ea\ud9b5\udf41}\u00c1\ud85c\ude22')\nPASS: ascii_average_transformed(s='^t\u0006\u00d8\u00b0\u00d8\u0088\ud8ba\ude95\u00fa\udb6a\udd4a')\nPASS: ascii_average_transformed(s='\u00b7\ud8c5\udcb6\u009f\u00c5')\nPASS: ascii_average_transformed(s='\\\"\u00ea\u0093\u0083\u00e1'')\nPASS: ascii_average_transformed(s='l\u00a4\uda00\udecf\u00c8\ud974\udc9f\udb14\udc3c\u00f1\u007f\uda3c\udebf\u007f')\nPASS: ascii_average_transformed(s='\u00f2')\nPASS: ascii_average_transformed(s='(5\u001d3\u00bc\udb80\udf35')\nPASS: ascii_average_transformed(s='\u0002')\nPASS: ascii_average_transformed(s='\ud8f7\udd0d\u00c4\udb36\uddb9\ud8cc\udfe4')\nPASS: ascii_average_transformed(s='!5\u00f8\ud9cf\udccb?')\nPASS: ascii_average_transformed(s='\u0004\u00e8')\nPASS: ascii_average_transformed(s='\u0080\u009a\u00bc\ud9fb\udcc8\u00fd\u00c1')\nPASS: ascii_average_transformed(s='\u00ce\u001c\u00d9')\nPASS: ascii_average_transformed(s='\u009e9\ud8d8\udfa9\u0095')\nPASS: ascii_average_transformed(s='\u00ea')\nPASS: ascii_average_transformed(s='\u00c4\u00cb\u00b5]\ud88a\udffa,\u008f:\u00ab\u00fc')\nPASS: ascii_average_transformed(s='\uda9c\udc1c\u001d')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[4, 0])\nPASS: list_balance_transformed(nums=[7, 0])\nPASS: list_balance_transformed(nums=[7, 0, 2])\nPASS: list_balance_transformed(nums=[5, 4, 6, 3])\nPASS: list_balance_transformed(nums=[5, 10, 3, 5, 9, 5, 8, 7, 7])\nPASS: list_balance_transformed(nums=[6, 0, 10, 5, 10, 0, 7, 1, 6, 3])\nPASS: list_balance_transformed(nums=[6, 3])\nPASS: list_balance_transformed(nums=[4, 2, 4, 4, 3, 4, 10, 8, 8, 10])\nPASS: list_balance_transformed(nums=[10, 4, 4, 7, 0, 10])\nPASS: list_balance_transformed(nums=[5, 5, 2, 7, 8, 2, 1, 2, 10, 10])\nPASS: list_balance_transformed(nums=[5, 5, 7, 7, 8, 2, 1, 2, 10, 10])\nPASS: list_balance_transformed(nums=[5, 5, 7, 7, 2, 2, 1, 2, 10, 10])\nPASS: list_balance_transformed(nums=[5, 1, 7, 7, 2, 2, 1, 2, 10, 10])\nPASS: list_balance_transformed(nums=[5, 1, 10, 7, 2, 2, 1, 2, 10, 10])\nPASS: list_balance_transformed(nums=[5, 1, 10, 2, 2, 2, 1, 2, 10, 10])\nPASS: list_balance_transformed(nums=[2, 1, 10, 2, 2, 2, 1, 2, 10, 10])\nPASS: list_balance_transformed(nums=[4, 3, 2, 2, 4, 5, 4, 1, 0, 8])\nPASS: list_balance_transformed(nums=[4, 3, 3, 2, 4, 5, 4, 1, 0, 8])\nPASS: list_balance_transformed(nums=[4, 3, 3, 2, 4, 5, 3, 1, 0, 8])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[3])\nPASS: odd_sum_validator_transformed(lst=[3, 6])\nPASS: odd_sum_validator_transformed(lst=[4, 6, 0, 8, 9, 0, 7, 0, 4, 5])\nPASS: odd_sum_validator_transformed(lst=[10, 7, 2])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[6, 5, 2, 2, 9, 4, 6, 10])\nPASS: odd_sum_validator_transformed(lst=[4])\nPASS: odd_sum_validator_transformed(lst=[7, 0, 7, 3, 4, 5, 0, 6, 1, 8])\nPASS: odd_sum_validator_transformed(lst=[3, 4])\nPASS: odd_sum_validator_transformed(lst=[1, 7, 4, 9])\nPASS: odd_sum_validator_transformed(lst=[1, 7, 7, 9])\nPASS: odd_sum_validator_transformed(lst=[1, 7, 7, 7])\nPASS: odd_sum_validator_transformed(lst=[7, 7, 7, 7])\nPASS: odd_sum_validator_transformed(lst=[2, 3, 9, 5, 7, 7, 0, 5, 5])\nPASS: odd_sum_validator_transformed(lst=[2, 3, 9, 5, 7, 3, 0, 5, 5])\nPASS: odd_sum_validator_transformed(lst=[2, 3, 9, 5, 7, 3, 2, 5, 5])\nPASS: odd_sum_validator_transformed(lst=[2, 3, 9, 5, 7, 3, 5, 5, 5])\nPASS: odd_sum_validator_transformed(lst=[2, 3, 7, 5, 7, 3, 5, 5, 5])\nPASS: odd_sum_validator_transformed(lst=[2, 3, 5, 5, 7, 3, 5, 5, 5])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='k\udb61\uddd8\u00e7\u00ce{\"\ud8ef\udf46\ud812\udd4f')\nPASS: string_pattern_score_transformed(s='$')\nPASS: string_pattern_score_transformed(s='\u0087\ud8cf\udffe=')\nPASS: string_pattern_score_transformed(s='y')\nPASS: string_pattern_score_transformed(s='\u00e2\u00b8')\nPASS: string_pattern_score_transformed(s='f\u001e')\nPASS: string_pattern_score_transformed(s='/')\nPASS: string_pattern_score_transformed(s='\u0004T')\nPASS: string_pattern_score_transformed(s='\ud8a9\ude2f\u00e2\u00fe\u00baK\uda44\udcd4\udba9\ude21\u00b23\u00b0')\nPASS: string_pattern_score_transformed(s='u\udb96\udcbd\ud97b\udcbb\u00a5mo\u007f\u00b9\u00c2\udb56\ude84')\nPASS: string_pattern_score_transformed(s='V\u001f\uda1b\udf3c\u00d6\u0003\u00e1\u00ba\ud883\udf11')\nPASS: string_pattern_score_transformed(s='\u00d4\u00ea\u00f8\u00aa\n\u00f7\u00e1')\nPASS: string_pattern_score_transformed(s='\u0005')\nPASS: string_pattern_score_transformed(s='R\u00c8FwPY@`\u00ffI')\nPASS: string_pattern_score_transformed(s=',\ud85c\udd23\t\u00cd\u0097\u00c9e')\nPASS: string_pattern_score_transformed(s='\ud831\udd1d\\\u00a8\u009c\u00f9\u00bb\ud8bc\uddb5')\nPASS: string_pattern_score_transformed(s='\udb2b\ude27\u00a7')\nPASS: string_pattern_score_transformed(s='\ud83d\udd5d\u00df\n\u0081\u00fao\u00d0W\u0099\ua157')\nPASS: string_pattern_score_transformed(s='\u00c9\u0089\ud973\udc9e5s\u00eal\u00c2\u00a3\u001e')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[19])\nPASS: sum_until_limit_transformed(nums=[4])\nPASS: sum_until_limit_transformed(nums=[20, 10, 3, 14, 4, 17, 2, 16, 5, 17])\nPASS: sum_until_limit_transformed(nums=[20])\nPASS: sum_until_limit_transformed(nums=[2, 19, 8, 7, 6, 13, 19, 10, 17, 15])\nPASS: sum_until_limit_transformed(nums=[13, 10, 11, 11])\nPASS: sum_until_limit_transformed(nums=[12, 11, 13, 12, 10, 6])\nPASS: sum_until_limit_transformed(nums=[10, 7, 7, 8, 18, 1, 19, 11])\nPASS: sum_until_limit_transformed(nums=[0, 10, 2, 9, 15])\nPASS: sum_until_limit_transformed(nums=[4, 2, 13, 14, 2])\nPASS: sum_until_limit_transformed(nums=[4, 2, 13, 4, 2])\nPASS: sum_until_limit_transformed(nums=[4, 2, 2, 4, 2])\nPASS: sum_until_limit_transformed(nums=[4, 2, 4, 4, 2])\nPASS: sum_until_limit_transformed(nums=[4, 2, 4, 4, 4])\nPASS: sum_until_limit_transformed(nums=[4, 4, 4, 4, 4])\nPASS: sum_until_limit_transformed(nums=[2])\nPASS: sum_until_limit_transformed(nums=[7, 12, 12])\nPASS: sum_until_limit_transformed(nums=[7, 7, 12])\nPASS: sum_until_limit_transformed(nums=[4, 18, 8, 5, 7])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[14])\nPASS: count_divisibles_transformed(nums=[14, 4])\nPASS: count_divisibles_transformed(nums=[14, 4, 5])\nPASS: count_divisibles_transformed(nums=[14, 15])\nPASS: count_divisibles_transformed(nums=[17, 9, 16, 1, 9, 3, 11, 14, 17, 19])\nPASS: count_divisibles_transformed(nums=[17])\nPASS: count_divisibles_transformed(nums=[20, 7, 12, 3, 8, 17, 6, 8, 4, 0])\nPASS: count_divisibles_transformed(nums=[0, 11, 7, 5, 0])\nPASS: count_divisibles_transformed(nums=[18, 0, 5])\nPASS: count_divisibles_transformed(nums=[10])\nPASS: count_divisibles_transformed(nums=[6, 0, 10, 7, 10])\nPASS: count_divisibles_transformed(nums=[6, 10, 10, 7, 10])\nPASS: count_divisibles_transformed(nums=[6, 10, 10, 7])\nPASS: count_divisibles_transformed(nums=[6, 7, 10, 7])\nPASS: count_divisibles_transformed(nums=[6, 7, 6, 7])\nPASS: count_divisibles_transformed(nums=[16, 19])\nPASS: count_divisibles_transformed(nums=[1, 2, 6, 9, 19, 4, 1, 7, 10])\nPASS: count_divisibles_transformed(nums=[1, 2, 6, 9, 1, 4, 1, 7, 10])\nPASS: count_divisibles_transformed(nums=[1, 2, 6, 9, 1, 6, 1, 7, 10])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[4])\nPASS: index_weighted_sum_transformed(lst=[5])\nPASS: index_weighted_sum_transformed(lst=[6, 7, 10, 5])\nPASS: index_weighted_sum_transformed(lst=[4, 10, 0, 1, 0, 3, 6, 9, 10, 3])\nPASS: index_weighted_sum_transformed(lst=[4, 10])\nPASS: index_weighted_sum_transformed(lst=[3, 2, 0, 3, 1, 3, 8, 3, 7, 10])\nPASS: index_weighted_sum_transformed(lst=[1, 9, 1, 1, 4, 3, 8, 7, 2, 2])\nPASS: index_weighted_sum_transformed(lst=[5, 4, 7, 9, 7, 0, 10])\nPASS: index_weighted_sum_transformed(lst=[2])\nPASS: index_weighted_sum_transformed(lst=[0, 7, 0, 4, 3, 9, 10, 2, 7, 5])\nPASS: index_weighted_sum_transformed(lst=[0, 7, 0, 4, 3, 9, 10, 0, 7, 5])\nPASS: index_weighted_sum_transformed(lst=[0, 7, 0, 4, 3, 9, 10, 10, 7, 5])\nPASS: index_weighted_sum_transformed(lst=[0, 7, 0, 4, 0, 9, 10, 10, 7, 5])\nPASS: index_weighted_sum_transformed(lst=[0, 7, 0, 4, 0, 9, 10, 4, 7, 5])\nPASS: index_weighted_sum_transformed(lst=[4, 7, 0, 4, 0, 9, 10, 4, 7, 5])\nPASS: index_weighted_sum_transformed(lst=[4, 7, 0, 4, 0, 9, 10, 4, 9, 5])\nPASS: index_weighted_sum_transformed(lst=[10, 1, 5, 6, 6])\nPASS: index_weighted_sum_transformed(lst=[10, 1, 6, 6, 6])\nPASS: index_weighted_sum_transformed(lst=[6, 1, 6, 6, 6])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=8)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=9)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u00f7\u00bd\u00ad\u00db\ud9c4\udf13\u00e2R')\nPASS: character_counter_transformed(text='\u0087\udb1f\ude7c\u00e9\"\udb68\uddbc\u00d3\ud911\udf24\u009a$\u0094')\nPASS: character_counter_transformed(text='\u008fg+S\u00cd\u0091\u00b6Q5)')\nPASS: character_counter_transformed(text='\u0017\ud9dd\udc0b?')\nPASS: character_counter_transformed(text='\ud811\udf09')\nPASS: character_counter_transformed(text='\u00cfO\u00a4\udbe1\udc8d\u00d1')\nPASS: character_counter_transformed(text='a\u00a1\ud9fe\udfbf(\u00cb\uda5c\udd13\u00f4H')\nPASS: character_counter_transformed(text='\ud83c\udffb\ud83d\udc4d\ud83c\udffb')\nPASS: character_counter_transformed(text='\u00deu')\nPASS: character_counter_transformed(text='RB\u00d2')\nPASS: character_counter_transformed(text='\u0098\u0000')\nPASS: character_counter_transformed(text='\u00d2')\nPASS: character_counter_transformed(text='/\\\u0095zW\u001e')\nPASS: character_counter_transformed(text='\u023e')\nPASS: character_counter_transformed(text='\ud882\udd3dU')\nPASS: character_counter_transformed(text='l\u009d9\u00bcSI\ud80e\udd65\udaff\uddddX\ud821\udf5e')\nPASS: character_counter_transformed(text='+\u00f9')\nPASS: character_counter_transformed(text='\ud997\udf55\u0090\u0089\ud9ce\ude2b\uda21\udc96\u0093\u00ac\udb9e\udd6a\f\u00aa')\nPASS: character_counter_transformed(text='\u0003\t\"\u0086\u00e1 Va')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[46])\nPASS: rolling_maximum_transformed(values=[24])\nPASS: rolling_maximum_transformed(values=[12, 66])\nPASS: rolling_maximum_transformed(values=[89, 87, 38, 56, 83, 46, 96])\nPASS: rolling_maximum_transformed(values=[54, 79, 88, 82, 88, 96, 23])\nPASS: rolling_maximum_transformed(values=[87, 27, 63, 16, 85, 99, 99, 75, 15, 0])\nPASS: rolling_maximum_transformed(values=[36, 53, 37, 76, 71, 64, 36, 95, 70, 19])\nPASS: rolling_maximum_transformed(values=[69, 12, 95, 41, 21, 70, 17, 39, 82, 100])\nPASS: rolling_maximum_transformed(values=[97, 90, 36, 89, 53])\nPASS: rolling_maximum_transformed(values=[64, 31, 24, 5, 53])\nPASS: rolling_maximum_transformed(values=[64, 31, 64, 5, 53])\nPASS: rolling_maximum_transformed(values=[64, 31, 31, 5, 53])\nPASS: rolling_maximum_transformed(values=[64, 31, 31, 5, 31])\nPASS: rolling_maximum_transformed(values=[64, 31, 64, 5, 31])\nPASS: rolling_maximum_transformed(values=[74, 37, 22])\nPASS: rolling_maximum_transformed(values=[74, 74, 22])\nPASS: rolling_maximum_transformed(values=[74, 22, 22])\nPASS: rolling_maximum_transformed(values=[20, 74])\nPASS: rolling_maximum_transformed(values=[25, 59, 2, 63, 9, 91, 90, 17, 58, 7])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ],
  "loop_string_hash": [
    {
      "method": "fuzzing",
      "message": "Fuzz Testing Results:\n==================================================\nPASS: process_data_transformed(x=0)\nPASS: process_data_transformed(x=29)\nPASS: process_data_transformed(x=83)\nPASS: process_data_transformed(x=27)\nPASS: process_data_transformed(x=22)\nPASS: process_data_transformed(x=48)\nPASS: process_data_transformed(x=12)\nPASS: process_data_transformed(x=10)\nPASS: process_data_transformed(x=32)\nPASS: process_data_transformed(x=98)\nPASS: process_data_transformed(x=26)\nPASS: process_data_transformed(x=7)\nPASS: process_data_transformed(x=91)\nPASS: process_data_transformed(x=1)\nPASS: process_data_transformed(x=13)\nPASS: process_data_transformed(x=25)\nPASS: process_data_transformed(x=11)\nPASS: process_data_transformed(x=52)\nPASS: process_data_transformed(x=51)\nPASS: process_data_transformed(x=46)\nPASS: convert_temperature_transformed(c=0.0)\nPASS: convert_temperature_transformed(c=1.1)\nPASS: convert_temperature_transformed(c=2.2250738585e-313)\nPASS: convert_temperature_transformed(c=1.401298464324817e-45)\nPASS: convert_temperature_transformed(c=2.225073858507e-311)\nPASS: convert_temperature_transformed(c=1.5)\nPASS: convert_temperature_transformed(c=1e-05)\nPASS: convert_temperature_transformed(c=0.3333333333333333)\nPASS: convert_temperature_transformed(c=7.836292136524416)\nPASS: convert_temperature_transformed(c=1.9)\nPASS: convert_temperature_transformed(c=2.00001)\nPASS: convert_temperature_transformed(c=64.86609669206209)\nPASS: convert_temperature_transformed(c=50.06290335143705)\nPASS: convert_temperature_transformed(c=1.175494351e-38)\nPASS: convert_temperature_transformed(c=6.103515625e-05)\nPASS: convert_temperature_transformed(c=1.192092896e-07)\nPASS: convert_temperature_transformed(c=0.5)\nPASS: convert_temperature_transformed(c=0.99999)\nPASS: convert_temperature_transformed(c=2.225073858507203e-309)\nPASS: convert_temperature_transformed(c=99.99999999999999)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=179.96707586175202, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=179.96707586175202, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=4.883025214770688, discount_rate=2.225073858507203e-309)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=1.1247483292743141e-149)\nPASS: calculate_discount_transformed(price=2.220446049250313e-16, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=199.0, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=149.66431561167596, discount_rate=0.22323889616879616)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=1.192092896e-07)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=0.99999, discount_rate=1.7449010761802728e-270)\nPASS: calculate_discount_transformed(price=1.7449010761802728e-270, discount_rate=1.7449010761802728e-270)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=6.103515625e-05)\nPASS: calculate_discount_transformed(price=5e-324, discount_rate=5e-324)\nPASS: calculate_discount_transformed(price=0.0, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=0.5, discount_rate=0.5)\nPASS: calculate_discount_transformed(price=102.88084893348663, discount_rate=2.2250738585072014e-308)\nPASS: calculate_discount_transformed(price=102.88084893348663, discount_rate=0.0)\nPASS: calculate_discount_transformed(price=1.401298464324817e-45, discount_rate=5.960464477539063e-08)\nPASS: calculate_discount_transformed(price=5.960464477539063e-08, discount_rate=5.960464477539063e-08)\nPASS: process_complex_number_transformed(real=0.0, imag=0.0)\nPASS: process_complex_number_transformed(real=-1.1, imag=0.0)\nPASS: process_complex_number_transformed(real=-1.1, imag=13.638731071723633)\nPASS: process_complex_number_transformed(real=19.851454923795643, imag=20.0)\nPASS: process_complex_number_transformed(real=-5e-324, imag=-0.4321296395288101)\nPASS: process_complex_number_transformed(real=2.225073858507203e-309, imag=-0.99999)\nPASS: process_complex_number_transformed(real=0.3333333333333333, imag=0.3333333333333333)\nPASS: process_complex_number_transformed(real=19.0, imag=0.2888047353310661)\nPASS: process_complex_number_transformed(real=-0.5, imag=-0.99999)\nPASS: process_complex_number_transformed(real=-1.1754943508222875e-38, imag=2.199777338390213)\nPASS: process_complex_number_transformed(real=-7.749653969999136, imag=-2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=-2.225073858507203e-309, imag=-2.225073858507203e-309)\nPASS: process_complex_number_transformed(real=0.99999, imag=-0.99999)\nPASS: process_complex_number_transformed(real=-0.99999, imag=-0.99999)\nPASS: process_complex_number_transformed(real=0.99999, imag=-18.028957485321857)\nPASS: process_complex_number_transformed(real=0.99999, imag=0.99999)\nPASS: process_complex_number_transformed(real=15.023884559674919, imag=-1.1754943508222875e-38)\nPASS: process_complex_number_transformed(real=15.023884559674919, imag=15.023884559674919)\nPASS: process_complex_number_transformed(real=16.162077002420354, imag=-0.99999)\nPASS: process_complex_number_transformed(real=16.162077002420354, imag=16.162077002420354)\nPASS: transform_data_transformed(input_value=0)\nPASS: transform_data_transformed(input_value=23)\nPASS: transform_data_transformed(input_value=27)\nPASS: transform_data_transformed(input_value=82)\nPASS: transform_data_transformed(input_value=51)\nPASS: transform_data_transformed(input_value=39)\nPASS: transform_data_transformed(input_value=97)\nPASS: transform_data_transformed(input_value=99)\nPASS: transform_data_transformed(input_value=76)\nPASS: transform_data_transformed(input_value=11)\nPASS: transform_data_transformed(input_value=54)\nPASS: transform_data_transformed(input_value=68)\nPASS: transform_data_transformed(input_value=31)\nPASS: transform_data_transformed(input_value=47)\nPASS: transform_data_transformed(input_value=63)\nPASS: transform_data_transformed(input_value=88)\nPASS: transform_data_transformed(input_value=41)\nPASS: transform_data_transformed(input_value=74)\nPASS: transform_data_transformed(input_value=79)\nPASS: transform_data_transformed(input_value=91)\nPASS: circle_area_diff_transformed(r=0.0)\nPASS: circle_area_diff_transformed(r=13.784309887404353)\nPASS: circle_area_diff_transformed(r=19.0)\nPASS: circle_area_diff_transformed(r=20.0)\nPASS: circle_area_diff_transformed(r=2.00001)\nPASS: circle_area_diff_transformed(r=1.1754943508222875e-38)\nPASS: circle_area_diff_transformed(r=1.1125369292536007e-308)\nPASS: circle_area_diff_transformed(r=19.999999999999996)\nPASS: circle_area_diff_transformed(r=17.95128343221741)\nPASS: circle_area_diff_transformed(r=0.99999)\nPASS: circle_area_diff_transformed(r=2.225073858507e-311)\nPASS: circle_area_diff_transformed(r=1e-05)\nPASS: circle_area_diff_transformed(r=1.175494351e-38)\nPASS: circle_area_diff_transformed(r=1.5)\nPASS: circle_area_diff_transformed(r=1.401298464324817e-45)\nPASS: circle_area_diff_transformed(r=8.035765175352253e-78)\nPASS: circle_area_diff_transformed(r=2.220446049250313e-16)\nPASS: circle_area_diff_transformed(r=2.2250738585072014e-308)\nPASS: circle_area_diff_transformed(r=1.192092896e-07)\nPASS: circle_area_diff_transformed(r=1.9)\nPASS: triangle_checker_transformed(a=1, b=1, c=1)\nPASS: triangle_checker_transformed(a=10, b=1, c=1)\nPASS: triangle_checker_transformed(a=10, b=11, c=2)\nPASS: triangle_checker_transformed(a=5, b=19, c=2)\nPASS: triangle_checker_transformed(a=20, b=17, c=20)\nPASS: triangle_checker_transformed(a=7, b=15, c=5)\nPASS: triangle_checker_transformed(a=3, b=20, c=3)\nPASS: triangle_checker_transformed(a=9, b=20, c=7)\nPASS: triangle_checker_transformed(a=5, b=3, c=6)\nPASS: triangle_checker_transformed(a=15, b=16, c=5)\nPASS: triangle_checker_transformed(a=7, b=14, c=19)\nPASS: triangle_checker_transformed(a=7, b=7, c=19)\nPASS: triangle_checker_transformed(a=19, b=7, c=19)\nPASS: triangle_checker_transformed(a=19, b=19, c=19)\nPASS: triangle_checker_transformed(a=8, b=16, c=7)\nPASS: triangle_checker_transformed(a=8, b=16, c=8)\nPASS: triangle_checker_transformed(a=8, b=16, c=16)\nPASS: triangle_checker_transformed(a=8, b=8, c=8)\nPASS: triangle_checker_transformed(a=3, b=15, c=13)\nPASS: triangle_checker_transformed(a=3, b=15, c=15)\nPASS: temperature_offset_transformed(c=0.0)\nPASS: temperature_offset_transformed(c=1.1754943508222875e-38)\nPASS: temperature_offset_transformed(c=1.1125369292536007e-308)\nPASS: temperature_offset_transformed(c=0.5)\nPASS: temperature_offset_transformed(c=2.220446049250313e-16)\nPASS: temperature_offset_transformed(c=5e-324)\nPASS: temperature_offset_transformed(c=1.401298464324817e-45)\nPASS: temperature_offset_transformed(c=1.0)\nPASS: temperature_offset_transformed(c=1.5)\nPASS: temperature_offset_transformed(c=2.2250738585072014e-308)\nPASS: temperature_offset_transformed(c=100.0)\nPASS: temperature_offset_transformed(c=1.175494351e-38)\nPASS: temperature_offset_transformed(c=99.99999999999999)\nPASS: temperature_offset_transformed(c=2.2250738585e-313)\nPASS: temperature_offset_transformed(c=73.56767884215688)\nPASS: temperature_offset_transformed(c=54.41321523399173)\nPASS: temperature_offset_transformed(c=68.36125055715593)\nPASS: temperature_offset_transformed(c=99.0)\nPASS: temperature_offset_transformed(c=1.9)\nPASS: temperature_offset_transformed(c=6.103515625e-05)\nPASS: quadratic_discriminant_transformed(a=0, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=10, b=0, c=0)\nPASS: quadratic_discriminant_transformed(a=10, b=-10, c=10)\nPASS: quadratic_discriminant_transformed(a=10, b=-10, c=0)\nPASS: quadratic_discriminant_transformed(a=6, b=-8, c=-7)\nPASS: quadratic_discriminant_transformed(a=2, b=6, c=-9)\nPASS: quadratic_discriminant_transformed(a=0, b=2, c=7)\nPASS: quadratic_discriminant_transformed(a=-5, b=9, c=0)\nPASS: quadratic_discriminant_transformed(a=2, b=-7, c=5)\nPASS: quadratic_discriminant_transformed(a=-2, b=-3, c=3)\nPASS: quadratic_discriminant_transformed(a=-2, b=8, c=-3)\nPASS: quadratic_discriminant_transformed(a=8, b=8, c=-3)\nPASS: quadratic_discriminant_transformed(a=8, b=8, c=8)\nPASS: quadratic_discriminant_transformed(a=-7, b=-3, c=-5)\nPASS: quadratic_discriminant_transformed(a=-7, b=-5, c=-5)\nPASS: quadratic_discriminant_transformed(a=-7, b=-7, c=-5)\nPASS: quadratic_discriminant_transformed(a=-5, b=-7, c=-5)\nPASS: quadratic_discriminant_transformed(a=-5, b=-5, c=-5)\nPASS: quadratic_discriminant_transformed(a=-9, b=7, c=5)\nPASS: quadratic_discriminant_transformed(a=-9, b=-9, c=5)\nPASS: vector_norm_transformed(x=0.0, y=0.0)\nPASS: vector_norm_transformed(x=1.175494351e-38, y=0.0)\nPASS: vector_norm_transformed(x=1.175494351e-38, y=2.225073858507203e-309)\nPASS: vector_norm_transformed(x=2.2250738585072014e-308, y=2.3439832202078854)\nPASS: vector_norm_transformed(x=5e-324, y=-9.0)\nPASS: vector_norm_transformed(x=2.2250738585e-313, y=-9.201345209924672e-10)\nPASS: vector_norm_transformed(x=-2.4800050813186996, y=1.1754943508222875e-38)\nPASS: vector_norm_transformed(x=-2.2250738585072014e-308, y=-2.220446049250313e-16)\nPASS: vector_norm_transformed(x=-1.1, y=2.896544701281451)\nPASS: vector_norm_transformed(x=-1.1125369292536007e-308, y=2.2250738585e-313)\nPASS: vector_norm_transformed(x=1.1, y=-1.5)\nPASS: vector_norm_transformed(x=1.1, y=1.1)\nPASS: vector_norm_transformed(x=-2.225073858507203e-309, y=9.999999999999998)\nPASS: vector_norm_transformed(x=9.999999999999998, y=9.999999999999998)\nPASS: vector_norm_transformed(x=-4.420679371703263e-31, y=1.9)\nPASS: vector_norm_transformed(x=-4.420679371703263e-31, y=-4.420679371703263e-31)\nPASS: vector_norm_transformed(x=9.040946774775172, y=9.42103846831764)\nPASS: vector_norm_transformed(x=9.040946774775172, y=9.040946774775172)\nPASS: vector_norm_transformed(x=-0.0, y=1e-05)\nPASS: vector_norm_transformed(x=-0.0, y=-0.0)\nPASS: hypotenuse_diff_transformed(a=0.0, b=0.0)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=0.0)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=5.922022091917464)\nPASS: hypotenuse_diff_transformed(a=1.3942550299274938, b=5.960464477539063e-08)\nPASS: hypotenuse_diff_transformed(a=0.99999, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=1.1125369292536007e-308, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=9.0)\nPASS: hypotenuse_diff_transformed(a=0.0, b=8.635166244599285e-245)\nPASS: hypotenuse_diff_transformed(a=1.1, b=0.0)\nPASS: hypotenuse_diff_transformed(a=0.3333333333333333, b=6.701618102972015)\nPASS: hypotenuse_diff_transformed(a=2.2250738585072014e-308, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=1.401298464324817e-45, b=1.401298464324817e-45)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=4.8223528789231676)\nPASS: hypotenuse_diff_transformed(a=5e-324, b=5e-324)\nPASS: hypotenuse_diff_transformed(a=0.0, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=6.103515625e-05, b=6.103515625e-05)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=2.225073858507203e-309)\nPASS: hypotenuse_diff_transformed(a=2.00001, b=2.00001)\nPASS: hypotenuse_diff_transformed(a=2.005730062978655, b=0.0)\nPASS: hypotenuse_diff_transformed(a=2.005730062978655, b=2.005730062978655)\nPASS: ascii_average_transformed(s='0')\nPASS: ascii_average_transformed(s='\u00fa*\ud878\udeb3!')\nPASS: ascii_average_transformed(s='x\u00fe\u00b9\u00de\u008a\u0085\u00b2\u00db')\nPASS: ascii_average_transformed(s='\u00a3\u00c1')\nPASS: ascii_average_transformed(s='U')\nPASS: ascii_average_transformed(s='\u00b3|\ud85b\udfeap')\nPASS: ascii_average_transformed(s='\ud8d8\ude2aT\u00a9@')\nPASS: ascii_average_transformed(s='\u0090~')\nPASS: ascii_average_transformed(s='\u0087\u00d2\u001e\uda70\udc78\u00d4\u00ec')\nPASS: ascii_average_transformed(s='\ud864\udce4')\nPASS: ascii_average_transformed(s='\ud808\udfc4D\u00c8\udbde\udd23g\u00f6\u00f4\udafd\udeba]\uda6c\udf1a')\nPASS: ascii_average_transformed(s='k\ud836\udcf5\udbd4\udc64\u00ea\u00ef\udbd7\udd73')\nPASS: ascii_average_transformed(s='\udaaa\udd790=\u00e2\udbc4\udce6Q\u0099\u00e7\u000f1')\nPASS: ascii_average_transformed(s='\u00b4\u009ac\u0003\u00d1\u0006')\nPASS: ascii_average_transformed(s='&a\u00b7z\udaa5\ude8f\u0095\udb6d\udf2b\ub002')\nPASS: ascii_average_transformed(s='\u00ca\ud98a\udee3\u009e8\u00df\u00b2')\nPASS: ascii_average_transformed(s='\ud95b\udda3\uda6d\ude5b\u00c7\u00eb~7\u00c8|\u00c4\u0001')\nPASS: ascii_average_transformed(s='7')\nPASS: ascii_average_transformed(s='u\udadb\udda8')\nPASS: ascii_average_transformed(s='C\n&\u00d6\u00d6N\u0011\uda3f\udd18')\nPASS: list_balance_transformed(nums=[0, 0])\nPASS: list_balance_transformed(nums=[3, 0])\nPASS: list_balance_transformed(nums=[3, 9, 9])\nPASS: list_balance_transformed(nums=[3, 2, 8, 4, 0, 8])\nPASS: list_balance_transformed(nums=[6, 0, 3, 6, 4, 2, 2, 5, 4, 2])\nPASS: list_balance_transformed(nums=[4, 6, 0, 2, 10])\nPASS: list_balance_transformed(nums=[9, 2, 7, 9, 9, 10, 9, 7])\nPASS: list_balance_transformed(nums=[3, 4, 1, 8, 7, 1, 9, 4, 4, 6])\nPASS: list_balance_transformed(nums=[4, 0, 8, 3, 2, 1, 3])\nPASS: list_balance_transformed(nums=[1, 7, 4])\nPASS: list_balance_transformed(nums=[2, 1, 8, 6, 8])\nPASS: list_balance_transformed(nums=[2, 6, 8, 6, 8])\nPASS: list_balance_transformed(nums=[6, 6, 8, 6, 8])\nPASS: list_balance_transformed(nums=[6, 6, 8, 6, 6])\nPASS: list_balance_transformed(nums=[6, 6, 6, 6, 6])\nPASS: list_balance_transformed(nums=[6, 6])\nPASS: list_balance_transformed(nums=[1, 6, 8, 7, 8, 1, 10, 5])\nPASS: list_balance_transformed(nums=[1, 6, 8, 8, 8, 1, 10, 5])\nPASS: list_balance_transformed(nums=[1, 6, 8, 10, 8, 1, 10, 5])\nPASS: list_balance_transformed(nums=[1, 6, 8, 10, 8, 1, 8, 5])\nPASS: odd_sum_validator_transformed(lst=[0])\nPASS: odd_sum_validator_transformed(lst=[1])\nPASS: odd_sum_validator_transformed(lst=[6])\nPASS: odd_sum_validator_transformed(lst=[10, 6, 0, 3, 3, 5, 1])\nPASS: odd_sum_validator_transformed(lst=[7, 4, 7, 0, 2, 0, 3, 1, 5, 6])\nPASS: odd_sum_validator_transformed(lst=[7])\nPASS: odd_sum_validator_transformed(lst=[8, 10, 4, 8])\nPASS: odd_sum_validator_transformed(lst=[5, 6, 6, 9, 0, 2, 1, 1, 5, 3])\nPASS: odd_sum_validator_transformed(lst=[10])\nPASS: odd_sum_validator_transformed(lst=[1, 0, 9, 1, 3, 8, 7, 0, 1])\nPASS: odd_sum_validator_transformed(lst=[5])\nPASS: odd_sum_validator_transformed(lst=[9, 6, 4, 8, 0, 6, 0])\nPASS: odd_sum_validator_transformed(lst=[9, 6, 4, 8, 0, 6, 9])\nPASS: odd_sum_validator_transformed(lst=[9, 6, 8, 8, 0, 6, 9])\nPASS: odd_sum_validator_transformed(lst=[9, 6, 6, 8, 0, 6, 9])\nPASS: odd_sum_validator_transformed(lst=[8, 6, 6, 8, 0, 6, 9])\nPASS: odd_sum_validator_transformed(lst=[8, 8, 6, 8, 0, 6, 9])\nPASS: odd_sum_validator_transformed(lst=[8, 8, 6, 8, 0, 8, 9])\nPASS: odd_sum_validator_transformed(lst=[10, 5])\nPASS: odd_sum_validator_transformed(lst=[5, 5])\nPASS: string_pattern_score_transformed(s='0')\nPASS: string_pattern_score_transformed(s='1/0')\nPASS: string_pattern_score_transformed(s='l')\nPASS: string_pattern_score_transformed(s='\ud9e6\udc55\uda72\udc33\u00c6\u00c8\u00b8\u001e\u0086=\u00bd\u00e0')\nPASS: string_pattern_score_transformed(s='\u0085')\nPASS: string_pattern_score_transformed(s='#`\u00fa')\nPASS: string_pattern_score_transformed(s='\udb31\uddca\u00ce\ud95f\udc17\u00f8\u00e9')\nPASS: string_pattern_score_transformed(s='\u00a5\u0012\udabd\udd19\u00d7\udb97\udcc8\u0007\u00bc\u0082\u00d1\uda93\udc45')\nPASS: string_pattern_score_transformed(s='IF\u00d4T')\nPASS: string_pattern_score_transformed(s='[\u00c7')\nPASS: string_pattern_score_transformed(s='\u00cd\u0012\u00b8\u00cfj\u00beW2')\nPASS: string_pattern_score_transformed(s='u\u008e\u00a5\ud8df\ude55')\nPASS: string_pattern_score_transformed(s='F\u00de\u001c\u00c0'?\u0005')\nPASS: string_pattern_score_transformed(s='z\uda01\udf5e\u00a0\u00d1')\nPASS: string_pattern_score_transformed(s='\b\u001c\u00f6')\nPASS: string_pattern_score_transformed(s='S\u00cd(\u0011\u00ae\u001fa')\nPASS: string_pattern_score_transformed(s='4')\nPASS: string_pattern_score_transformed(s='\u00c5XRg\u00cfp\ud812\uddcd7\u00fc}')\nPASS: string_pattern_score_transformed(s='\u0082\u0005QAo\ud85e\udc61\u00eabM\ud812\udeed')\nPASS: string_pattern_score_transformed(s='\u00f2')\nPASS: sum_until_limit_transformed(nums=[0])\nPASS: sum_until_limit_transformed(nums=[1])\nPASS: sum_until_limit_transformed(nums=[20])\nPASS: sum_until_limit_transformed(nums=[6, 11, 6, 12, 5, 3, 10, 8, 8, 5])\nPASS: sum_until_limit_transformed(nums=[13, 9, 20, 6, 20, 8, 4, 2, 15, 13])\nPASS: sum_until_limit_transformed(nums=[7, 3, 14, 11, 6])\nPASS: sum_until_limit_transformed(nums=[18, 20, 0, 9, 14, 6])\nPASS: sum_until_limit_transformed(nums=[16, 8, 1, 5, 13, 12, 14, 12])\nPASS: sum_until_limit_transformed(nums=[5])\nPASS: sum_until_limit_transformed(nums=[6])\nPASS: sum_until_limit_transformed(nums=[13])\nPASS: sum_until_limit_transformed(nums=[13, 15, 15, 6, 16, 4, 18, 11, 11, 8])\nPASS: sum_until_limit_transformed(nums=[13, 15, 15, 6, 16, 4, 8, 11, 11, 8])\nPASS: sum_until_limit_transformed(nums=[13, 15, 15, 6, 16, 4, 8, 11, 4, 8])\nPASS: sum_until_limit_transformed(nums=[13, 15, 15, 6, 16, 4, 8, 11, 4, 16])\nPASS: sum_until_limit_transformed(nums=[13, 15, 15, 6, 16, 4, 8, 11, 15, 16])\nPASS: sum_until_limit_transformed(nums=[15, 15, 15, 6, 16, 4, 8, 11, 15, 16])\nPASS: sum_until_limit_transformed(nums=[4, 15, 15, 6, 16, 4, 8, 11, 15, 16])\nPASS: sum_until_limit_transformed(nums=[1, 20, 8, 7, 18, 13, 11, 18, 17, 14])\nPASS: sum_until_limit_transformed(nums=[1, 18, 8, 7, 18, 13, 11, 18, 17, 14])\nPASS: count_divisibles_transformed(nums=[0])\nPASS: count_divisibles_transformed(nums=[11])\nPASS: count_divisibles_transformed(nums=[20])\nPASS: count_divisibles_transformed(nums=[18])\nPASS: count_divisibles_transformed(nums=[18, 6, 6, 20])\nPASS: count_divisibles_transformed(nums=[17, 4, 0, 19, 11])\nPASS: count_divisibles_transformed(nums=[20, 18, 5, 12, 5])\nPASS: count_divisibles_transformed(nums=[3, 1])\nPASS: count_divisibles_transformed(nums=[9, 8, 14, 4, 2, 1, 6, 4, 0, 16])\nPASS: count_divisibles_transformed(nums=[12, 7, 5, 2, 14, 2])\nPASS: count_divisibles_transformed(nums=[16, 5, 2, 19, 10, 0, 20, 17, 13])\nPASS: count_divisibles_transformed(nums=[16, 0, 2, 19, 10, 0, 20, 17, 13])\nPASS: count_divisibles_transformed(nums=[16, 0, 10, 19, 10, 0, 20, 17, 13])\nPASS: count_divisibles_transformed(nums=[16, 17, 10, 19, 10, 0, 20, 17, 13])\nPASS: count_divisibles_transformed(nums=[16, 17, 10, 19, 17, 0, 20, 17, 13])\nPASS: count_divisibles_transformed(nums=[16, 20, 10, 19, 17, 0, 20, 17, 13])\nPASS: count_divisibles_transformed(nums=[14, 12, 17, 11, 18, 13, 14, 2, 12, 8])\nPASS: count_divisibles_transformed(nums=[14])\nPASS: count_divisibles_transformed(nums=[15, 6, 10, 17, 18, 1, 1, 11, 7])\nPASS: count_divisibles_transformed(nums=[15, 6, 10, 17, 18, 1, 1, 17, 7])\nPASS: index_weighted_sum_transformed(lst=[0])\nPASS: index_weighted_sum_transformed(lst=[7])\nPASS: index_weighted_sum_transformed(lst=[7, 2])\nPASS: index_weighted_sum_transformed(lst=[8, 9, 9, 2, 7, 7, 3, 5, 5, 1])\nPASS: index_weighted_sum_transformed(lst=[3])\nPASS: index_weighted_sum_transformed(lst=[10, 10, 1])\nPASS: index_weighted_sum_transformed(lst=[1, 10, 3, 3])\nPASS: index_weighted_sum_transformed(lst=[5, 3, 4, 6])\nPASS: index_weighted_sum_transformed(lst=[6, 1])\nPASS: index_weighted_sum_transformed(lst=[4, 2, 10, 5])\nPASS: index_weighted_sum_transformed(lst=[3, 4, 5, 5, 4, 6, 5])\nPASS: index_weighted_sum_transformed(lst=[3, 4, 4, 5, 4, 6, 5])\nPASS: index_weighted_sum_transformed(lst=[3, 4, 4, 5, 4, 4, 5])\nPASS: index_weighted_sum_transformed(lst=[3, 4, 4, 4, 4, 4, 5])\nPASS: index_weighted_sum_transformed(lst=[3, 4, 3, 4, 4, 4, 5])\nPASS: index_weighted_sum_transformed(lst=[3, 4, 3, 3, 4, 4, 5])\nPASS: index_weighted_sum_transformed(lst=[3, 4, 3, 3, 4, 4, 4])\nPASS: index_weighted_sum_transformed(lst=[10])\nPASS: index_weighted_sum_transformed(lst=[2, 8, 10, 10, 1, 2, 7, 10, 10, 10])\nPASS: index_weighted_sum_transformed(lst=[2, 8, 10, 10, 1, 2, 10, 10, 10, 10])\nPASS: square_accumulator_transformed(x=0)\nPASS: square_accumulator_transformed(x=10)\nPASS: square_accumulator_transformed(x=3)\nPASS: square_accumulator_transformed(x=5)\nPASS: square_accumulator_transformed(x=7)\nPASS: square_accumulator_transformed(x=2)\nPASS: square_accumulator_transformed(x=4)\nPASS: square_accumulator_transformed(x=1)\nPASS: square_accumulator_transformed(x=6)\nPASS: square_accumulator_transformed(x=9)\nPASS: square_accumulator_transformed(x=8)\nPASS: nested_loop_checker_transformed(limit=0)\nPASS: nested_loop_checker_transformed(limit=5)\nPASS: nested_loop_checker_transformed(limit=7)\nPASS: nested_loop_checker_transformed(limit=2)\nPASS: nested_loop_checker_transformed(limit=1)\nPASS: nested_loop_checker_transformed(limit=3)\nPASS: nested_loop_checker_transformed(limit=10)\nPASS: nested_loop_checker_transformed(limit=6)\nPASS: nested_loop_checker_transformed(limit=9)\nPASS: nested_loop_checker_transformed(limit=4)\nPASS: nested_loop_checker_transformed(limit=8)\nPASS: character_counter_transformed(text='0')\nPASS: character_counter_transformed(text='\u0085\udb66\udd49')\nPASS: character_counter_transformed(text='\u00cbA\u008b\u00b1\u00a0^\u00e2\u0099{')\nPASS: character_counter_transformed(text='\u0011k*\u00d9\u009c\u009fMp\udbe6\udec3\u0093')\nPASS: character_counter_transformed(text='\uda8f\udc4d0\u0084')\nPASS: character_counter_transformed(text='\uda32\udd87\uda66\udca5\u00ff\u00c5\u0013\ucad1\u0012a')\nPASS: character_counter_transformed(text='H\udb99\udc79l\ud955\ude6e')\nPASS: character_counter_transformed(text='\ud948\udeb8\u0094u\u00d6('\u00f4\u0087 \u00f3')\nPASS: character_counter_transformed(text='%\ud812\udf6d\ud9dc\ude71\u00e3\u00b7\u00bb\u00c3\ud8ed\udc94\uda04\udcbb\udb71\udf1e')\nPASS: character_counter_transformed(text='\u00ecr\ud81e\udfaf')\nPASS: character_counter_transformed(text='\u001f\ud9f8\udfa1\u00c2\u009c')\nPASS: character_counter_transformed(text='\udbd7\udc13\u00ce\u00fd\u00062Z\u0004\t\u00d6\u00ee')\nPASS: character_counter_transformed(text='\u00f3\u0015\u00f0\u00ea\u0003\u0006\u00e2')\nPASS: character_counter_transformed(text='BQ\u00fc(\ud8f4\udc6a\uda26\udcce\udbba\udfdd\u0089\u00cb')\nPASS: character_counter_transformed(text='\u0010\u0012\u00b0\uda48\udd31I\u0006Je')\nPASS: character_counter_transformed(text='\u0089\u00f1Z')\nPASS: character_counter_transformed(text='m\u00ce')\nPASS: character_counter_transformed(text='\u0010\u000f\u00c4\u00141\u00df\uda3e\udd7c')\nPASS: character_counter_transformed(text='\ud988\udff0\udb0e\udd5f\u00e3\u00dc1\u0095\u00003\u00bc')\nPASS: character_counter_transformed(text='\u00a1\uda33\udd52\b')\nPASS: rolling_maximum_transformed(values=[0])\nPASS: rolling_maximum_transformed(values=[85])\nPASS: rolling_maximum_transformed(values=[81])\nPASS: rolling_maximum_transformed(values=[16, 6])\nPASS: rolling_maximum_transformed(values=[43, 68, 26, 17, 46, 48, 8])\nPASS: rolling_maximum_transformed(values=[11, 46])\nPASS: rolling_maximum_transformed(values=[59, 9, 0, 16, 59, 78, 88, 96, 95, 82])\nPASS: rolling_maximum_transformed(values=[30, 91, 19, 20, 9, 24, 78, 50, 26])\nPASS: rolling_maximum_transformed(values=[64])\nPASS: rolling_maximum_transformed(values=[73])\nPASS: rolling_maximum_transformed(values=[30])\nPASS: rolling_maximum_transformed(values=[66, 56, 41, 0, 94, 81, 7, 5])\nPASS: rolling_maximum_transformed(values=[66, 56, 41, 0, 94, 81, 7, 7])\nPASS: rolling_maximum_transformed(values=[66, 7, 41, 0, 94, 81, 7, 7])\nPASS: rolling_maximum_transformed(values=[66, 7, 41, 0, 94, 94, 7, 7])\nPASS: rolling_maximum_transformed(values=[66, 7, 41, 0, 94, 94, 94, 7])\nPASS: rolling_maximum_transformed(values=[66, 7, 41, 0, 94, 94, 94, 41])\nPASS: rolling_maximum_transformed(values=[66, 7, 94, 0, 94, 94, 94, 41])\nPASS: rolling_maximum_transformed(values=[8])\nPASS: rolling_maximum_transformed(values=[96, 28, 82, 81, 83, 78, 65, 42, 64, 91])",
      "score": 0.2
    },
    {
      "method": "assertion",
      "message": "Generating Early Assertions:\n==================================================\n\nGenerating assertion for process_data:\n==================================================\nGenerated Assertion: assert x == 50, 'Input must be 50 to satisfy final assertion'\nExplanation: The early assertion checks if x is 50, which is the only value that will make z equal to 100 in the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_data(x: int):\n    assert x == 50, 'Input must be 50 to satisfy final assertion'\n    y = x * 2\n    if y > 0:\n        z = y\n    else:\n        z = -y\n    assert z == 100, \"Final check: z must equal 100\"\n    return z\n\n--------------------------------------------------\n\nGenerating assertion for convert_temperature:\n==================================================\nGenerated Assertion: assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\nExplanation: The early assertion checks if the input temperature is approximately 37.78\u00b0C, which converts to exactly 100\u00b0F.\n--------------------------------------------------\nComplete function with early assertion:\ndef convert_temperature(celsius: float):\n    assert celsius == 37.77777777777778, 'Input must be approximately 37.78\u00b0C to convert to 100\u00b0F'\n    fahrenheit = (celsius * 9/5) + 32\n    rounded_temp = round(fahrenheit)\n    assert rounded_temp == 100, \"Final check: converted temperature must be exactly 100\"\n    return rounded_temp\n\n--------------------------------------------------\n\nGenerating assertion for calculate_discount:\n==================================================\nGenerated Assertion: assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\nExplanation: The early assertion checks if the discounted price will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef calculate_discount(price: float, discount_rate: float):\n    assert price * (1 - discount_rate) == 50, 'Discounted price must equal 50'\n    discounted_price = price * (1 - discount_rate)\n    rounded_price = round(discounted_price)\n    assert rounded_price == 50, \"Final check: discounted price must be exactly 50\"\n    return rounded_price\n\n--------------------------------------------------\n\nGenerating assertion for process_complex_number:\n==================================================\nGenerated Assertion: assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\nExplanation: The early assertion checks if the magnitude squared of the complex number is 100, which will make the rounded magnitude 10.\n--------------------------------------------------\nComplete function with early assertion:\ndef process_complex_number(real: float, imag: float):\n    assert real**2 + imag**2 == 100, 'Complex number magnitude squared must be 100'\n    complex_num = complex(real, imag)\n    magnitude = abs(complex_num)\n    rounded_magnitude = round(magnitude)\n    assert rounded_magnitude == 10, \"Final check: magnitude must be exactly 10\"\n    return rounded_magnitude\n\n--------------------------------------------------\n\nGenerating assertion for transform_data:\n==================================================\nGenerated Assertion: assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\nExplanation: The early assertion checks if the transformed value will be exactly 50, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef transform_data(input_value: int):\n    assert (input_value * 3 + 1) // 2 == 50, 'Transformed value must be 50'\n    transformed = input_value * 3 + 1\n    processed = transformed // 2\n    assert processed == 50, \"Final check: processed value must be exactly 50\"\n    return processed\n\n--------------------------------------------------\n\nGenerating assertion for circle_area_diff:\n==================================================\nGenerated Assertion: assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\nExplanation: The early assertion checks if the difference between the circle's area and circumference is 50.\n--------------------------------------------------\nComplete function with early assertion:\ndef circle_area_diff(r: float):\n    assert round(math.pi * r**2 - 2 * math.pi * r) == 50, 'Difference between area and circumference must be 50'\n    import math\n    area = math.pi * r ** 2\n    circ = 2 * math.pi * r\n    diff = round(area - circ)\n    assert diff == 50, \"Final check: area minus circumference must be 50\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for triangle_checker:\n==================================================\nGenerated Assertion: assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\nExplanation: The early assertion checks if the sides can form a valid triangle, which is required for the final assertion to be true.\n--------------------------------------------------\nComplete function with early assertion:\ndef triangle_checker(a: int, b: int, c: int):\n    assert a + b > c and a + c > b and b + c > a, 'Sides must form a valid triangle'\n    sides = sorted([a, b, c])\n    is_triangle = sides[0] + sides[1] > sides[2]\n    code = 100 if is_triangle else 0\n    assert code == 100, \"Final check: must be a triangle\"\n    return code\n\n--------------------------------------------------\n\nGenerating assertion for temperature_offset:\n==================================================\nGenerated Assertion: assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\nExplanation: The early assertion checks if the temperature offset will be exactly 68, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef temperature_offset(c: float):\n    assert round((c * 9/5) + 32) - int(c) == 68, 'Temperature offset must be 68'\n    f = (c * 9/5) + 32\n    rounded = round(f)\n    adjusted = rounded - int(c)\n    assert adjusted == 68, \"Final check: adjusted temp must be 68\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for quadratic_discriminant:\n==================================================\nGenerated Assertion: assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\nExplanation: The early assertion checks if the normalized discriminant will be 25, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef quadratic_discriminant(a: int, b: int, c: int):\n    assert abs(b**2 - 4*a*c) % 100 == 25, 'Normalized discriminant must be 25'\n    disc = b**2 - 4*a*c\n    normalized = abs(disc) % 100\n    assert normalized == 25, \"Final check: normalized discriminant must be 25\"\n    return normalized\n\n--------------------------------------------------\n\nGenerating assertion for vector_norm:\n==================================================\nGenerated Assertion: assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\nExplanation: The early assertion checks if the vector norm will be exactly 10, matching the final assertion.\n--------------------------------------------------\nComplete function with early assertion:\ndef vector_norm(x: float, y: float):\n    assert round(math.sqrt(x**2 + y**2)) == 10, 'Vector norm must be 10'\n    import math\n    norm = math.sqrt(x**2 + y**2)\n    rounded = round(norm)\n    assert rounded == 10, \"Final check: norm must be 10\"\n    return rounded\n\n--------------------------------------------------\n\nGenerating assertion for hypotenuse_diff:\n==================================================\nGenerated Assertion: assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\nExplanation: The early assertion checks if the difference between the hypotenuse and the sum of the sides will be 3.\n--------------------------------------------------\nComplete function with early assertion:\ndef hypotenuse_diff(a: float, b: float):\n    assert abs(round(math.hypot(a, b)) - int(a) - int(b)) == 3, 'Hypotenuse difference must be 3'\n    import math\n    hyp = math.hypot(a, b)\n    rounded = round(hyp)\n    diff = abs(rounded - int(a) - int(b))\n    assert diff == 3, \"Final check: diff must be 3\"\n    return diff\n\n--------------------------------------------------\n\nGenerating assertion for ascii_average:\n==================================================\nGenerated Assertion: assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\nExplanation: The early assertion checks if the average ASCII value of the string will be 83.\n--------------------------------------------------\nComplete function with early assertion:\ndef ascii_average(s: str):\n    assert sum(ord(c) for c in s) // len(s) == 83, 'Average ASCII value must be 83'\n    total = sum(ord(c) for c in s)\n    avg = total // len(s) if s else 0\n    assert avg == 83, \"Final check: average ASCII must be 83\"\n    return avg\n\n--------------------------------------------------\n\nGenerating assertion for list_balance:\n==================================================\nGenerated Assertion: assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\nExplanation: The early assertion checks if the difference between the sums of the two halves of the list is 5.\n--------------------------------------------------\nComplete function with early assertion:\ndef list_balance(nums: list):\n    assert abs(sum(nums[:len(nums)//2]) - sum(nums[len(nums)//2:])) == 5, 'List halves must balance to 5'\n    half = len(nums) // 2\n    left = sum(nums[:half])\n    right = sum(nums[half:])\n    balance = abs(left - right)\n    assert balance == 5, \"Final check: list halves balance to 5\"\n    return balance\n\n--------------------------------------------------\n\nGenerating assertion for odd_sum_validator:\n==================================================\nGenerated Assertion: assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\nExplanation: The early assertion checks if the sum of odd numbers modulo 100 will be 33.\n--------------------------------------------------\nComplete function with early assertion:\ndef odd_sum_validator(lst: list):\n    assert sum(n for n in lst if n % 2 == 1) % 100 == 33, 'Odd sum mod 100 must be 33'\n    odds = [n for n in lst if n % 2 == 1]\n    total = sum(odds)\n    mod = total % 100\n    assert mod == 33, \"Final check: odd sum mod 100 must be 33\"\n    return mod\n\n--------------------------------------------------\n\nGenerating assertion for string_pattern_score:\n==================================================\nGenerated Assertion: assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\nExplanation: The early assertion checks if the vowel score will be exactly 25.\n--------------------------------------------------\nComplete function with early assertion:\ndef string_pattern_score(s: str):\n    assert sum(1 for c in s if c in 'aeiouAEIOU') * 5 == 25, 'Vowel score must be 25'\n    score = sum(1 for c in s if c in 'aeiouAEIOU')\n    result = score * 5\n    assert result == 25, \"Final check: vowel score must be 25\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for sum_until_limit:\n==================================================\nGenerated Assertion: assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\nExplanation: The early assertion checks if the sum of numbers until reaching 50 plus the list length will be 60.\n--------------------------------------------------\nComplete function with early assertion:\ndef sum_until_limit(nums: list):\n    assert sum(n for n in nums if sum(nums[:nums.index(n) + 1]) < 50) + len(nums) == 60, 'Sum and size must be 60'\n    total = 0\n    for n in nums:\n        if total >= 50:\n            break\n        total += n\n    adjusted = total + len(nums)\n    assert adjusted == 60, \"Final check: sum and size must be 60\"\n    return adjusted\n\n--------------------------------------------------\n\nGenerating assertion for count_divisibles:\n==================================================\nGenerated Assertion: assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\nExplanation: The early assertion checks if the count of numbers divisible by 4 times 10 will be 40.\n--------------------------------------------------\nComplete function with early assertion:\ndef count_divisibles(nums: list):\n    assert sum(1 for n in nums if n % 4 == 0) * 10 == 40, 'Divisible count score must be 40'\n    count = 0\n    for n in nums:\n        if n % 4 == 0:\n            count += 1\n    score = count * 10\n    assert score == 40, \"Final check: divisible count score must be 40\"\n    return score\n\n--------------------------------------------------\n\nGenerating assertion for index_weighted_sum:\n==================================================\nGenerated Assertion: assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\nExplanation: The early assertion checks if the weighted sum modulo 100 will be 35.\n--------------------------------------------------\nComplete function with early assertion:\ndef index_weighted_sum(lst: list):\n    assert sum(val * i for i, val in enumerate(lst)) % 100 == 35, 'Weighted sum mod 100 must be 35'\n    weighted = 0\n    for i, val in enumerate(lst):\n        weighted += val * i\n    result = weighted % 100\n    assert result == 35, \"Final check: weighted mod result must be 35\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for square_accumulator:\n==================================================\nGenerated Assertion: assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\nExplanation: The early assertion checks if the sum of squares modulo 100 will be 55.\n--------------------------------------------------\nComplete function with early assertion:\ndef square_accumulator(x: int):\n    assert sum(i * i for i in range(x)) % 100 == 55, 'Square sum mod 100 must be 55'\n    acc = 0\n    for i in range(x):\n        acc += i * i\n    final = acc % 100\n    assert final == 55, \"Final check: square sum mod 100 must be 55\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for nested_loop_checker:\n==================================================\nGenerated Assertion: assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\nExplanation: The early assertion checks if the count of nested loop iterations modulo 200 will be 36.\n--------------------------------------------------\nComplete function with early assertion:\ndef nested_loop_checker(limit: int):\n    assert sum(1 for i in range(limit) for j in range(i)) % 200 == 36, 'Nested loop result must be 36'\n    counter = 0\n    for i in range(limit):\n        for j in range(i):\n            counter += 1\n    final = counter % 200\n    assert final == 36, \"Final check: nested loop result must be 36\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for character_counter:\n==================================================\nGenerated Assertion: assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\nExplanation: The early assertion checks if the vowel count times 3 will be 27.\n--------------------------------------------------\nComplete function with early assertion:\ndef character_counter(text: str):\n    assert sum(1 for ch in text if ch in 'aeiouAEIOU') * 3 == 27, 'Vowel count score must be 27'\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for ch in text:\n        if ch in vowels:\n            vowel_count += 1\n    result = vowel_count * 3\n    assert result == 27, \"Final check: vowel count score must be 27\"\n    return result\n\n--------------------------------------------------\n\nGenerating assertion for rolling_maximum:\n==================================================\nGenerated Assertion: assert max(values) + 10 == 99, 'Max plus 10 must be 99'\nExplanation: The early assertion checks if the maximum value plus 10 will be 99.\n--------------------------------------------------\nComplete function with early assertion:\ndef rolling_maximum(values: list):\n    assert max(values) + 10 == 99, 'Max plus 10 must be 99'\n    max_val = float('-inf')\n    for v in values:\n        if v > max_val:\n            max_val = v\n    final = max_val + 10\n    assert final == 99, \"Final check: max plus 10 must be 99\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for fibonacci_counter:\n==================================================\nGenerated Assertion: assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\nExplanation: The early assertion checks if the sum of Fibonacci numbers modulo 100 will be 89.\n--------------------------------------------------\nComplete function with early assertion:\ndef fibonacci_counter(n: int):\n    assert sum(fibonacci(n)) % 100 == 89, 'Fibonacci sum mod 100 must be 89'\n    a, b = 0, 1\n    fib_sum = 0\n    for _ in range(n):\n        fib_sum += a\n        a, b = b, a + b\n    mod_sum = fib_sum % 100\n    assert mod_sum == 89, \"Final check: Fibonacci sum mod 100 must be 89\"\n    return mod_sum\n\n--------------------------------------------------\n\nGenerating assertion for loop_even_sum:\n==================================================\nGenerated Assertion: assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\nExplanation: The early assertion checks if the sum of even numbers divided by 2 will be 110.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_even_sum(start: int, end: int):\n    assert sum(i for i in range(start, end + 1) if i % 2 == 0) // 2 == 110, 'Halved even sum must be 110'\n    total = 0\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            total += i\n    final = total // 2\n    assert final == 110, \"Final check: halved even sum must be 110\"\n    return final\n\n--------------------------------------------------\n\nGenerating assertion for loop_string_hash:\n==================================================\nGenerated Assertion: assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\nExplanation: The early assertion checks if the weighted character sum modulo 200 will be 66.\n--------------------------------------------------\nComplete function with early assertion:\ndef loop_string_hash(text: str):\n    assert sum(ord(c) * 3 for c in text) % 200 == 66, 'Character hash must be 66'\n    hash_val = 0\n    for c in text:\n        hash_val += ord(c) * 3\n    final = hash_val % 200\n    assert final == 66, \"Final check: character hash must be 66\"\n    return final\n\n--------------------------------------------------",
      "score": 0.4
    }
  ]
}